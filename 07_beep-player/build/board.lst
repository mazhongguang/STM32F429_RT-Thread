ARM GAS  /tmp/ccYMdbfs.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"board.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.rt_heap_begin_get,"ax",%progbits
  18              		.align	1
  19              		.weak	rt_heap_begin_get
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	rt_heap_begin_get:
  26              	.LFB272:
  27              		.file 1 "board/board.c"
   1:board/board.c **** /*
   2:board/board.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:board/board.c ****  *
   4:board/board.c ****  * SPDX-License-Identifier: Apache-2.0
   5:board/board.c ****  *
   6:board/board.c ****  * Change Logs:
   7:board/board.c ****  * Date           Author       Notes
   8:board/board.c ****  * 2018-11-06     SummerGift   first version
   9:board/board.c ****  */
  10:board/board.c **** /*bsp 硬件相关头文件*/
  11:board/board.c **** #include "board.h"
  12:board/board.c **** #include "delay.h"
  13:board/board.c **** #include "drv_gpio.h"
  14:board/board.c **** #include "drv_common.h"
  15:board/board.c **** #include "drv_infrared.h"
  16:board/board.c **** #include "drv_usart.h"
  17:board/board.c **** #include "drv_i2c.h"
  18:board/board.c **** #include "i2c.h"
  19:board/board.c **** #include "i2c_dev.h"
  20:board/board.c **** #include "led.h"
  21:board/board.c **** #include "rtconfig.h"
  22:board/board.c **** #include "rtdef.h"
  23:board/board.c **** #include "stm32f429xx.h"
  24:board/board.c **** #include "stm32f4xx.h"
  25:board/board.c **** #include "stm32f4xx_hal.h"
  26:board/board.c **** #include "stm32f4xx_hal_cortex.h"
  27:board/board.c **** #include "stm32f4xx_hal_gpio.h"
  28:board/board.c **** #include "stm32f4xx_hal_rcc.h"
  29:board/board.c **** #include "stm32f4xx_ll_usart.h"
  30:board/board.c **** 
  31:board/board.c **** /*硬件相关头文件*/
ARM GAS  /tmp/ccYMdbfs.s 			page 2


  32:board/board.c **** #include "sys.h"
  33:board/board.c **** #include "lcd.h"
  34:board/board.c **** 
  35:board/board.c **** /*RT-Thread 相关头文件*/
  36:board/board.c **** #include <rthw.h>
  37:board/board.c **** #include <rtthread.h>
  38:board/board.c **** 
  39:board/board.c **** 
  40:board/board.c **** #if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
  41:board/board.c **** #define RT_HEAP_SIZE 2024
  42:board/board.c **** /*从内部SRAM里面分配一部分静态内存作为RTT的堆空间，这时配置为4KB*/
  43:board/board.c **** static uint32_t rt_heap[RT_HEAP_SIZE];	// heap default size: 4K(1024 * 4)
  44:board/board.c **** RT_WEAK void *rt_heap_begin_get(void)
  45:board/board.c **** {
  28              		.loc 1 45 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  46:board/board.c ****     return rt_heap;
  47:board/board.c **** }
  33              		.loc 1 47 0
  34 0000 0048     		ldr	r0, .L2
  35 0002 7047     		bx	lr
  36              	.L3:
  37              		.align	2
  38              	.L2:
  39 0004 00000000 		.word	.LANCHOR0
  40              		.cfi_endproc
  41              	.LFE272:
  43              		.section	.text.rt_heap_end_get,"ax",%progbits
  44              		.align	1
  45              		.weak	rt_heap_end_get
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	rt_heap_end_get:
  52              	.LFB273:
  48:board/board.c **** 
  49:board/board.c **** RT_WEAK void *rt_heap_end_get(void)
  50:board/board.c **** {
  53              		.loc 1 50 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  51:board/board.c ****     return rt_heap + RT_HEAP_SIZE;
  52:board/board.c **** }
  58              		.loc 1 52 0
  59 0000 0048     		ldr	r0, .L5
  60 0002 7047     		bx	lr
  61              	.L6:
  62              		.align	2
  63              	.L5:
  64 0004 A01F0000 		.word	.LANCHOR0+8096
  65              		.cfi_endproc
ARM GAS  /tmp/ccYMdbfs.s 			page 3


  66              	.LFE273:
  68              		.section	.text.SystemClock_Config,"ax",%progbits
  69              		.align	1
  70              		.global	SystemClock_Config
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv4-sp-d16
  76              	SystemClock_Config:
  77              	.LFB275:
  53:board/board.c **** #endif
  54:board/board.c **** 
  55:board/board.c **** 
  56:board/board.c **** /**
  57:board/board.c ****  * This function will initial your board.
  58:board/board.c ****  */
  59:board/board.c **** void rt_hw_board_init()
  60:board/board.c **** {	
  61:board/board.c **** #if 0
  62:board/board.c **** 	/* System Clock Update */
  63:board/board.c **** 	SystemCoreClockUpdate();
  64:board/board.c **** 	
  65:board/board.c **** 	/* System Tick Configuration */
  66:board/board.c **** 	_SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);
  67:board/board.c **** #endif
  68:board/board.c **** 	HAL_Init();
  69:board/board.c **** 	/*System clock Initializes*/
  70:board/board.c **** 	SystemClock_Config();  
  71:board/board.c **** 	/*Stm32_Clock_Init(15, 216, RCC_PLLP_DIV2, 4);*/
  72:board/board.c **** 
  73:board/board.c **** 	/* System Tick Configuration */
  74:board/board.c **** 	/*SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);*/
  75:board/board.c **** 	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / RT_TICK_PER_SECOND);
  76:board/board.c **** 
  77:board/board.c **** 	/* hardware initial , eg. led lcd uart*/
  78:board/board.c **** 	delay_init(180);	/* 初始化延时函数，LCD初始化中会使用，不然RESET后ILI9341的显
  79:board/board.c **** 	rt_hw_pin_init();
  80:board/board.c **** 	/*hw_i2c_init();*/
  81:board/board.c **** #ifdef RT_USING_SERIAL
  82:board/board.c **** 	rt_hw_usart_init();
  83:board/board.c **** #endif
  84:board/board.c **** 
  85:board/board.c **** 	/* Call components board initial (use INIT_BOARD_EXPORT()) */
  86:board/board.c **** #ifdef RT_USING_COMPONENTS_INIT
  87:board/board.c **** 	rt_components_board_init();
  88:board/board.c **** #endif
  89:board/board.c **** 	
  90:board/board.c **** #if defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE)
  91:board/board.c **** 	rt_console_set_device(RT_CONSOLE_DEVICE_NAME);
  92:board/board.c **** #endif
  93:board/board.c **** 	
  94:board/board.c **** #if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
  95:board/board.c **** 	rt_system_heap_init(rt_heap_begin_get(), rt_heap_end_get());
  96:board/board.c **** #endif
  97:board/board.c **** }
  98:board/board.c **** 
  99:board/board.c **** /*系统时钟配置*/
ARM GAS  /tmp/ccYMdbfs.s 			page 4


 100:board/board.c **** void SystemClock_Config(void)
 101:board/board.c **** {
  78              		.loc 1 101 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 80
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82 0000 70B5     		push	{r4, r5, r6, lr}
  83              	.LCFI0:
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 4, -16
  86              		.cfi_offset 5, -12
  87              		.cfi_offset 6, -8
  88              		.cfi_offset 14, -4
  89 0002 94B0     		sub	sp, sp, #80
  90              	.LCFI1:
  91              		.cfi_def_cfa_offset 96
 102:board/board.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  92              		.loc 1 102 0
  93 0004 3022     		movs	r2, #48
  94 0006 0021     		movs	r1, #0
  95 0008 08A8     		add	r0, sp, #32
  96 000a FFF7FEFF 		bl	memset
  97              	.LVL0:
 103:board/board.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  98              		.loc 1 103 0
  99 000e 0024     		movs	r4, #0
 100 0010 0394     		str	r4, [sp, #12]
 101 0012 0494     		str	r4, [sp, #16]
 102 0014 0594     		str	r4, [sp, #20]
 103 0016 0694     		str	r4, [sp, #24]
 104 0018 0794     		str	r4, [sp, #28]
 105              	.LBB10:
 104:board/board.c **** 
 105:board/board.c ****   /** Configure the main internal regulator output voltage 
 106:board/board.c ****   */
 107:board/board.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 106              		.loc 1 107 0
 107 001a 0194     		str	r4, [sp, #4]
 108 001c 1C4B     		ldr	r3, .L9
 109 001e 1A6C     		ldr	r2, [r3, #64]
 110 0020 42F08052 		orr	r2, r2, #268435456
 111 0024 1A64     		str	r2, [r3, #64]
 112 0026 1B6C     		ldr	r3, [r3, #64]
 113 0028 03F08053 		and	r3, r3, #268435456
 114 002c 0193     		str	r3, [sp, #4]
 115 002e 019B     		ldr	r3, [sp, #4]
 116              	.LBE10:
 117              	.LBB11:
 108:board/board.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 118              		.loc 1 108 0
 119 0030 0294     		str	r4, [sp, #8]
 120 0032 184B     		ldr	r3, .L9+4
 121 0034 1A68     		ldr	r2, [r3]
 122 0036 42F44042 		orr	r2, r2, #49152
 123 003a 1A60     		str	r2, [r3]
 124 003c 1B68     		ldr	r3, [r3]
 125 003e 03F44043 		and	r3, r3, #49152
ARM GAS  /tmp/ccYMdbfs.s 			page 5


 126 0042 0293     		str	r3, [sp, #8]
 127 0044 029B     		ldr	r3, [sp, #8]
 128              	.LBE11:
 109:board/board.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 110:board/board.c ****   */
 111:board/board.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 129              		.loc 1 111 0
 130 0046 0123     		movs	r3, #1
 131 0048 0893     		str	r3, [sp, #32]
 112:board/board.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 132              		.loc 1 112 0
 133 004a 4FF48033 		mov	r3, #65536
 134 004e 0993     		str	r3, [sp, #36]
 113:board/board.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 135              		.loc 1 113 0
 136 0050 0225     		movs	r5, #2
 137 0052 0E95     		str	r5, [sp, #56]
 114:board/board.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 138              		.loc 1 114 0
 139 0054 4FF48003 		mov	r3, #4194304
 140 0058 0F93     		str	r3, [sp, #60]
 115:board/board.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 141              		.loc 1 115 0
 142 005a 0F26     		movs	r6, #15
 143 005c 1096     		str	r6, [sp, #64]
 116:board/board.c ****   RCC_OscInitStruct.PLL.PLLN = 216;
 144              		.loc 1 116 0
 145 005e D823     		movs	r3, #216
 146 0060 1193     		str	r3, [sp, #68]
 117:board/board.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 147              		.loc 1 117 0
 148 0062 1295     		str	r5, [sp, #72]
 118:board/board.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 149              		.loc 1 118 0
 150 0064 0423     		movs	r3, #4
 151 0066 1393     		str	r3, [sp, #76]
 119:board/board.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 152              		.loc 1 119 0
 153 0068 08A8     		add	r0, sp, #32
 154 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 155              	.LVL1:
 120:board/board.c ****   {
 121:board/board.c ****     /*Error_Handler();*/
 122:board/board.c ****   }
 123:board/board.c ****   /** Activate the Over-Drive mode 
 124:board/board.c ****   */
 125:board/board.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 156              		.loc 1 125 0
 157 006e FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 158              	.LVL2:
 126:board/board.c ****   {
 127:board/board.c ****     /*Error_Handler();*/
 128:board/board.c ****   }
 129:board/board.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 130:board/board.c ****   */
 131:board/board.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 159              		.loc 1 131 0
ARM GAS  /tmp/ccYMdbfs.s 			page 6


 160 0072 0396     		str	r6, [sp, #12]
 132:board/board.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 133:board/board.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 161              		.loc 1 133 0
 162 0074 0495     		str	r5, [sp, #16]
 134:board/board.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 163              		.loc 1 134 0
 164 0076 0594     		str	r4, [sp, #20]
 135:board/board.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 165              		.loc 1 135 0
 166 0078 4FF4A053 		mov	r3, #5120
 167 007c 0693     		str	r3, [sp, #24]
 136:board/board.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 168              		.loc 1 136 0
 169 007e 4FF48053 		mov	r3, #4096
 170 0082 0793     		str	r3, [sp, #28]
 137:board/board.c **** 
 138:board/board.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 171              		.loc 1 138 0
 172 0084 0521     		movs	r1, #5
 173 0086 03A8     		add	r0, sp, #12
 174 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 175              	.LVL3:
 139:board/board.c ****   {
 140:board/board.c ****     /*Error_Handler();*/
 141:board/board.c ****   }
 142:board/board.c **** }
 176              		.loc 1 142 0
 177 008c 14B0     		add	sp, sp, #80
 178              	.LCFI2:
 179              		.cfi_def_cfa_offset 16
 180              		@ sp needed
 181 008e 70BD     		pop	{r4, r5, r6, pc}
 182              	.L10:
 183              		.align	2
 184              	.L9:
 185 0090 00380240 		.word	1073887232
 186 0094 00700040 		.word	1073770496
 187              		.cfi_endproc
 188              	.LFE275:
 190              		.section	.text.rt_hw_board_init,"ax",%progbits
 191              		.align	1
 192              		.global	rt_hw_board_init
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	rt_hw_board_init:
 199              	.LFB274:
  60:board/board.c **** #if 0
 200              		.loc 1 60 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 10B5     		push	{r4, lr}
 205              	.LCFI3:
 206              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccYMdbfs.s 			page 7


 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
  68:board/board.c **** 	/*System clock Initializes*/
 209              		.loc 1 68 0
 210 0002 FFF7FEFF 		bl	HAL_Init
 211              	.LVL4:
  70:board/board.c **** 	/*Stm32_Clock_Init(15, 216, RCC_PLLP_DIV2, 4);*/
 212              		.loc 1 70 0
 213 0006 FFF7FEFF 		bl	SystemClock_Config
 214              	.LVL5:
  75:board/board.c **** 
 215              		.loc 1 75 0
 216 000a FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 217              	.LVL6:
 218 000e 0E4B     		ldr	r3, .L13
 219 0010 A3FB0030 		umull	r3, r0, r3, r0
 220 0014 8009     		lsrs	r0, r0, #6
 221 0016 FFF7FEFF 		bl	HAL_SYSTICK_Config
 222              	.LVL7:
  78:board/board.c **** 	rt_hw_pin_init();
 223              		.loc 1 78 0
 224 001a B420     		movs	r0, #180
 225 001c FFF7FEFF 		bl	delay_init
 226              	.LVL8:
  79:board/board.c **** 	/*hw_i2c_init();*/
 227              		.loc 1 79 0
 228 0020 FFF7FEFF 		bl	rt_hw_pin_init
 229              	.LVL9:
  82:board/board.c **** #endif
 230              		.loc 1 82 0
 231 0024 FFF7FEFF 		bl	rt_hw_usart_init
 232              	.LVL10:
  87:board/board.c **** #endif
 233              		.loc 1 87 0
 234 0028 FFF7FEFF 		bl	rt_components_board_init
 235              	.LVL11:
  91:board/board.c **** #endif
 236              		.loc 1 91 0
 237 002c 0748     		ldr	r0, .L13+4
 238 002e FFF7FEFF 		bl	rt_console_set_device
 239              	.LVL12:
  95:board/board.c **** #endif
 240              		.loc 1 95 0
 241 0032 FFF7FEFF 		bl	rt_heap_begin_get
 242              	.LVL13:
 243 0036 0446     		mov	r4, r0
 244 0038 FFF7FEFF 		bl	rt_heap_end_get
 245              	.LVL14:
 246 003c 0146     		mov	r1, r0
 247 003e 2046     		mov	r0, r4
 248 0040 FFF7FEFF 		bl	rt_system_heap_init
 249              	.LVL15:
 250 0044 10BD     		pop	{r4, pc}
 251              	.L14:
 252 0046 00BF     		.align	2
 253              	.L13:
 254 0048 D34D6210 		.word	274877907
ARM GAS  /tmp/ccYMdbfs.s 			page 8


 255 004c 00000000 		.word	.LC0
 256              		.cfi_endproc
 257              	.LFE274:
 259              		.section	.text.SysTick_Handler,"ax",%progbits
 260              		.align	1
 261              		.global	SysTick_Handler
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	SysTick_Handler:
 268              	.LFB276:
 143:board/board.c **** 
 144:board/board.c **** 
 145:board/board.c **** void SysTick_Handler(void)
 146:board/board.c **** {
 269              		.loc 1 146 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273 0000 08B5     		push	{r3, lr}
 274              	.LCFI4:
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 3, -8
 277              		.cfi_offset 14, -4
 147:board/board.c **** 	/* enter interrupt */
 148:board/board.c **** 	rt_interrupt_enter();
 278              		.loc 1 148 0
 279 0002 FFF7FEFF 		bl	rt_interrupt_enter
 280              	.LVL16:
 149:board/board.c **** 
 150:board/board.c **** 	rt_tick_increase();
 281              		.loc 1 150 0
 282 0006 FFF7FEFF 		bl	rt_tick_increase
 283              	.LVL17:
 151:board/board.c **** 
 152:board/board.c **** 	/* leave interrupt */
 153:board/board.c **** 	rt_interrupt_leave();
 284              		.loc 1 153 0
 285 000a FFF7FEFF 		bl	rt_interrupt_leave
 286              	.LVL18:
 287 000e 08BD     		pop	{r3, pc}
 288              		.cfi_endproc
 289              	.LFE276:
 291              		.section	.text.rt_hw_console_output,"ax",%progbits
 292              		.align	1
 293              		.global	rt_hw_console_output
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 297              		.fpu fpv4-sp-d16
 299              	rt_hw_console_output:
 300              	.LFB277:
 154:board/board.c **** }
 155:board/board.c **** 
 156:board/board.c **** /* 重映射串口 DEBUG_USARTx到 rt_kprintf()函数
 157:board/board.c ****  *
ARM GAS  /tmp/ccYMdbfs.s 			page 9


 158:board/board.c ****  * @param	str:要输出到串口的字符
 159:board/board.c ****  * @retval	none
 160:board/board.c ****  */
 161:board/board.c **** #if 1
 162:board/board.c **** void rt_hw_console_output(const char *str)
 163:board/board.c **** {
 301              		.loc 1 163 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              	.LVL19:
 306 0000 10B5     		push	{r4, lr}
 307              	.LCFI5:
 308              		.cfi_def_cfa_offset 8
 309              		.cfi_offset 4, -8
 310              		.cfi_offset 14, -4
 311 0002 0446     		mov	r4, r0
 164:board/board.c **** 	/* 进入临界段 */
 165:board/board.c **** 	rt_enter_critical();
 312              		.loc 1 165 0
 313 0004 FFF7FEFF 		bl	rt_enter_critical
 314              	.LVL20:
 166:board/board.c **** 
 167:board/board.c **** 	/* 直到字符串结束 */
 168:board/board.c **** 	while (*str != '\0')
 315              		.loc 1 168 0
 316 0008 09E0     		b	.L18
 317              	.L19:
 169:board/board.c **** 	{
 170:board/board.c **** 		/* 换行 */
 171:board/board.c **** 		if (*str == '\n')
 172:board/board.c **** 		{
 173:board/board.c **** 			LL_USART_TransmitData8(USART1, '\r');
 174:board/board.c **** 			while (LL_USART_IsActiveFlag_TXE(USART1) == RESET)
 175:board/board.c **** 			{
 176:board/board.c **** 			}
 177:board/board.c **** 		}
 178:board/board.c **** 		LL_USART_TransmitData8(USART1, *str++);
 318              		.loc 1 178 0
 319 000a 621C     		adds	r2, r4, #1
 320              	.LVL21:
 321 000c 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 322              	.LVL22:
 323              	.LBB12:
 324              	.LBB13:
 325              		.file 2 "HALLIB/Inc/stm32f4xx_ll_usart.h"
   1:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
   2:HALLIB/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
   3:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @file    stm32f4xx_ll_usart.h
   4:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @author  MCD Application Team
   5:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:HALLIB/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
   7:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @attention
   8:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *
   9:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * All rights reserved.</center></h2>
  11:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *
ARM GAS  /tmp/ccYMdbfs.s 			page 10


  12:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * the "License"; You may not use this file except in compliance with the
  14:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * License. You may obtain a copy of the License at:
  15:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *
  17:HALLIB/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
  18:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  19:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  20:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:HALLIB/Inc/stm32f4xx_ll_usart.h **** #ifndef __STM32F4xx_LL_USART_H
  22:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __STM32F4xx_LL_USART_H
  23:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  24:HALLIB/Inc/stm32f4xx_ll_usart.h **** #ifdef __cplusplus
  25:HALLIB/Inc/stm32f4xx_ll_usart.h **** extern "C" {
  26:HALLIB/Inc/stm32f4xx_ll_usart.h **** #endif
  27:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  28:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  29:HALLIB/Inc/stm32f4xx_ll_usart.h **** #include "stm32f4xx.h"
  30:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  31:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @addtogroup STM32F4xx_LL_Driver
  32:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
  33:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  34:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  35:HALLIB/Inc/stm32f4xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (USART6) || defined (UART4)
  36:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  37:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL USART
  38:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
  39:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  40:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  41:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  42:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  43:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  44:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  45:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  46:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
  47:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  48:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  49:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Defines used for the bit position in the register and perform offsets*/
  50:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define USART_POSITION_GTPR_GT                  USART_GTPR_GT_Pos
  51:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
  52:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
  53:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  54:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  55:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  56:HALLIB/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  57:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  58:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
  59:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  60:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
  61:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
  62:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  63:HALLIB/Inc/stm32f4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  64:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  65:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  66:HALLIB/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  67:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  68:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
ARM GAS  /tmp/ccYMdbfs.s 			page 11


  69:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  70:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  71:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
  72:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  73:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
  74:HALLIB/Inc/stm32f4xx_ll_usart.h **** typedef struct
  75:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
  76:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  77:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  78:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  79:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  80:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  81:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  82:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  83:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  84:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  85:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
  86:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
  87:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  88:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  89:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  90:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
  91:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
  92:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  93:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  94:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  95:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
  96:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
  97:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
  98:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  99:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 100:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 101:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 102:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 103:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 104:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 105:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 106:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 107:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 108:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 109:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 110:HALLIB/Inc/stm32f4xx_ll_usart.h **** } LL_USART_InitTypeDef;
 111:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 112:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 113:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 114:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 115:HALLIB/Inc/stm32f4xx_ll_usart.h **** typedef struct
 116:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 117:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 118:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 119:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 120:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 121:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 122:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 123:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 124:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 125:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
ARM GAS  /tmp/ccYMdbfs.s 			page 12


 126:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 127:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 128:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 129:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 130:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 131:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 132:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 133:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 134:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 135:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 136:HALLIB/Inc/stm32f4xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 137:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 138:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 139:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 140:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 141:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 142:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 143:HALLIB/Inc/stm32f4xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 144:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 145:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 146:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 147:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 148:HALLIB/Inc/stm32f4xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 149:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 150:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 151:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 152:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 153:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 154:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 155:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 156:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 157:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 158:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 159:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_PE                          USART_SR_PE                   /*!< Parity error fla
 160:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_FE                          USART_SR_FE                   /*!< Framing error fl
 161:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_NE                          USART_SR_NE                   /*!< Noise detected f
 162:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_ORE                         USART_SR_ORE                  /*!< Overrun error fl
 163:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_IDLE                        USART_SR_IDLE                 /*!< Idle line detect
 164:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_RXNE                        USART_SR_RXNE                 /*!< Read data regist
 165:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_TC                          USART_SR_TC                   /*!< Transmission com
 166:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_TXE                         USART_SR_TXE                  /*!< Transmit data re
 167:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_LBD                         USART_SR_LBD                  /*!< LIN break detect
 168:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_CTS                         USART_SR_CTS                  /*!< CTS flag */
 169:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 170:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 171:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 172:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 173:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 174:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 175:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 176:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 177:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 178:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 179:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 180:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 181:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 182:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
ARM GAS  /tmp/ccYMdbfs.s 			page 13


 183:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 184:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 185:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 186:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 187:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 188:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 189:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 190:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 191:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 192:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 193:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 194:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 195:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 196:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 197:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 198:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 199:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 200:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 201:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 202:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 203:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 204:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 205:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 206:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 207:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 208:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 209:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 210:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 211:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 212:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 213:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 214:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 215:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 216:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 217:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 218:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 219:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 220:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 221:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 222:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 223:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 224:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 225:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 226:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 227:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 228:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 229:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 230:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 231:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 232:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 233:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 234:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 235:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 236:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 237:HALLIB/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 238:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 239:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
ARM GAS  /tmp/ccYMdbfs.s 			page 14


 240:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 241:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 242:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 243:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 244:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 245:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 246:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 247:HALLIB/Inc/stm32f4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 248:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 249:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 250:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 251:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 252:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 253:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 254:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 255:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 256:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 257:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 258:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 259:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 260:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 261:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 262:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 263:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 264:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 265:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 266:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 267:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 268:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 269:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 270:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 271:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 272:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 273:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 274:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 275:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 276:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 277:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 278:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 279:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 280:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 281:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 282:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 283:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 284:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 285:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 286:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 287:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 288:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 289:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 290:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 291:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 292:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 293:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 294:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 295:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 296:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
ARM GAS  /tmp/ccYMdbfs.s 			page 15


 297:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 298:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 299:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 300:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 301:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 302:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 303:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 304:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 305:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 306:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 307:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 308:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 309:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 310:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 311:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 312:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 313:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 314:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 315:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 316:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 317:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 318:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 319:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 320:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 321:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 322:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 323:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 324:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 325:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 326:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 327:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 328:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 329:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 330:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Write a value in USART register
 331:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 332:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __REG__ Register to be written
 333:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 334:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 335:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 336:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 337:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 338:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 339:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Read a value in USART register
 340:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 341:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __REG__ Register to be read
 342:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Register value
 343:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 344:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 345:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 346:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 347:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 348:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 349:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 350:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 351:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 352:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 353:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
ARM GAS  /tmp/ccYMdbfs.s 			page 16


 354:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 355:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 356:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 357:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 358:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 359:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 360:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8_100(__PERIPHCLK__, __BAUDRATE__)      ((uint32_t)((((uint64_t)(__P
 361:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (__LL_USART_DIV_SAMPLING8_10
 362:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      ((((__LL_USART_DIV_SAMPLING8
 363:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* UART BRR = mantissa + overflow + fraction
 364:HALLIB/Inc/stm32f4xx_ll_usart.h ****             = (UART DIVMANT << 4) + ((UART DIVFRAQ & 0xF8) << 1) + (UART DIVFRAQ & 0x07) */
 365:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)             (((__LL_USART_DIVMANT_SAM
 366:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                                                            ((__LL_USART_DIVFRAQ_SAM
 367:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 368:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 369:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 370:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 371:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 372:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 373:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 374:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 375:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 376:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16_100(__PERIPHCLK__, __BAUDRATE__)     ((uint32_t)((((uint64_t)(__P
 377:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (__LL_USART_DIV_SAMPLING16_1
 378:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     ((((__LL_USART_DIV_SAMPLING1
 379:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* USART BRR = mantissa + overflow + fraction
 380:HALLIB/Inc/stm32f4xx_ll_usart.h ****             = (USART DIVMANT << 4) + (USART DIVFRAQ & 0xF0) + (USART DIVFRAQ & 0x0F) */
 381:HALLIB/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)            (((__LL_USART_DIVMANT_SAM
 382:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 383:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 384:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 385:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 386:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 387:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 388:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 389:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 390:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
 391:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 392:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 393:HALLIB/Inc/stm32f4xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 394:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 395:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 396:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 397:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 398:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 399:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 400:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
 401:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 402:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 403:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 404:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  USART Enable
 405:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 406:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 407:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 408:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 409:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 410:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/ccYMdbfs.s 			page 17


 411:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 412:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 413:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 414:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 415:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 416:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 417:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 418:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         flags, in the USARTx_SR are set to their default values.
 419:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 420:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 421:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 422:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 423:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 424:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 425:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 426:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 427:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 428:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 429:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 430:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 431:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 432:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 433:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 434:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 435:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 436:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 437:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 438:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 439:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 440:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 441:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 442:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 443:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 444:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 445:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 446:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 447:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 448:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 449:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 450:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 451:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Receiver Disable
 452:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 453:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 454:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 455:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 456:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 457:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 458:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 459:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 460:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 461:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 462:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Transmitter Enable
 463:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 464:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 465:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 466:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 467:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccYMdbfs.s 			page 18


 468:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 469:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 470:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 471:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 472:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 473:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Transmitter Disable
 474:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 475:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 476:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 477:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 478:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 479:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 480:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 481:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 482:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 483:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 484:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 485:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         of Transmitter and Receiver
 486:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 487:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 488:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 489:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 490:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 491:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 492:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 493:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 494:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 495:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 496:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 497:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 498:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 499:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 500:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 501:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 502:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 503:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 504:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 505:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 506:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 507:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 508:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 509:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 510:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 511:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 512:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 513:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 514:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 515:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 516:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 517:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 518:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 519:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 520:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 521:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 522:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 523:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 524:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccYMdbfs.s 			page 19


 525:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 526:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 527:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 528:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 529:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 530:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 531:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 532:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 533:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 534:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 535:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 536:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 537:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 538:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 539:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 540:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 541:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 542:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 543:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 544:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 545:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 546:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 547:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 548:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 549:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 550:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 551:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 552:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 553:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 554:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 555:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 556:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 557:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 558:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 559:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 560:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 561:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 562:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 563:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 564:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 565:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 566:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 567:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 568:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 569:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 570:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 571:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 572:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 573:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 574:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 575:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 576:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 577:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 578:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 579:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 580:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_SetDataWidth
 581:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccYMdbfs.s 			page 20


 582:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 583:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 584:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 585:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 586:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 587:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 588:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 589:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 590:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 591:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 592:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 593:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 594:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_GetDataWidth
 595:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 596:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 597:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 598:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 599:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 600:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 601:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 602:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 603:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 604:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 605:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 606:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 607:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 608:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 609:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 610:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 611:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 612:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 613:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 614:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 615:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 616:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 617:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 618:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 619:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 620:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Oversampling mode
 621:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 622:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 623:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 624:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 625:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 626:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 627:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 628:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 629:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 630:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 631:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 632:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 633:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 634:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 635:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 636:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 637:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 638:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
ARM GAS  /tmp/ccYMdbfs.s 			page 21


 639:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 640:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 641:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 642:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 643:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 644:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 645:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 646:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 647:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 648:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 649:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 650:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 651:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 652:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 653:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 654:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 655:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 656:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 657:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 658:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 659:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 660:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 661:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 662:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 663:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 664:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 665:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 666:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 667:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 668:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 669:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 670:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 671:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 672:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 673:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 674:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 675:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 676:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 677:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 678:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 679:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 680:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 681:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 682:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 683:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 684:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 685:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 686:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 687:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 688:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 689:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 690:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 691:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 692:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 693:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 694:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 695:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
ARM GAS  /tmp/ccYMdbfs.s 			page 22


 696:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 697:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 698:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 699:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 700:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 701:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 702:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 703:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 704:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 705:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 706:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 707:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 708:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 709:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 710:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 711:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 712:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 713:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 714:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 715:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 716:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 717:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 718:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 719:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 720:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 721:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 722:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 723:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 724:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 725:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 726:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 727:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 728:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 729:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 730:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 731:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 732:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 733:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 734:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 735:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 736:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 737:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 738:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 739:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 740:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 741:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 742:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 743:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 744:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 745:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 746:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 747:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 748:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 749:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 750:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 751:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 752:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/ccYMdbfs.s 			page 23


 753:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 754:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 755:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 756:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 757:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 758:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 759:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 760:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 761:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 762:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 763:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 764:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 765:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 766:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 767:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 768:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 769:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 770:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 771:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 772:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 773:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 774:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 775:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 776:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 777:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 778:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 779:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 780:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 781:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 782:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 783:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 784:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
 785:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 786:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 787:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 788:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
 789:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 790:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
 791:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 792:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 793:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 794:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set the length of the stop bits
 795:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
 796:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 797:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 798:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 799:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 800:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 801:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 802:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 803:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 804:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
 805:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 806:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 807:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 808:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 809:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
ARM GAS  /tmp/ccYMdbfs.s 			page 24


 810:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
 811:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
 812:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 813:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 814:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 815:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 816:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 817:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 818:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 819:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
 820:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 821:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 822:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 823:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 824:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 825:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
 826:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 827:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
 828:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
 829:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
 830:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
 831:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
 832:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR1          M             LL_USART_ConfigCharacter\n
 833:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
 834:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 835:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 836:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 837:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 838:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 839:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 840:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 841:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 842:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 843:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 844:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 845:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 846:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 847:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 848:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 849:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
 850:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                               uint32_t StopBits)
 851:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 852:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 853:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 854:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 855:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 856:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 857:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Address of the USART node.
 858:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
 859:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         for wake up with address mark detection.
 860:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_SetNodeAddress
 861:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 862:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  NodeAddress 4 bit Address of the USART node.
 863:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 864:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 865:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetNodeAddress(USART_TypeDef *USARTx, uint32_t NodeAddress)
 866:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/ccYMdbfs.s 			page 25


 867:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD, (NodeAddress & USART_CR2_ADD));
 868:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 869:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 870:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 871:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return 4 bit Address of the USART node as set in ADD field of CR2.
 872:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
 873:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
 874:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 875:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
 876:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 877:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
 878:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 879:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD));
 880:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 881:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 882:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 883:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
 884:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 885:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 886:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
 887:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 888:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 889:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 890:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 891:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 892:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
 893:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 894:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 895:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 896:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
 897:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 898:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 899:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
 900:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 901:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 902:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 903:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 904:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 905:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
 906:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 907:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 908:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 909:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
 910:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 911:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 912:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
 913:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 914:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 915:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 916:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 917:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 918:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
 919:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 920:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 921:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 922:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
 923:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccYMdbfs.s 			page 26


 924:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 925:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
 926:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 927:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 928:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 929:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 930:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 931:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
 932:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 933:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 934:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 935:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
 936:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 937:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 938:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
 939:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
 940:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 941:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
 942:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 943:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 944:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 945:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 946:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 947:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 948:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
 949:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 950:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 951:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 952:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 953:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 954:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
 955:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 956:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 957:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
 958:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
 959:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 960:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 961:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 962:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 963:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 964:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 965:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 966:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
 967:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 968:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 969:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 970:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 971:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 972:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable One bit sampling method
 973:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
 974:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 975:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 976:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 977:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
 978:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 979:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 980:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/ccYMdbfs.s 			page 27


 981:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 982:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 983:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable One bit sampling method
 984:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
 985:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 986:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 987:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 988:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
 989:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
 990:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 991:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 992:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
 993:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
 994:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
 995:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
 996:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 997:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 998:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
 999:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1000:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1001:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1002:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1003:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1004:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1005:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1006:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1007:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1008:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1009:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (Baud rate value != 0)
1010:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1011:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1012:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1013:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1014:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1015:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1016:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1017:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1018:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1019:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1020:HALLIB/Inc/stm32f4xx_ll_usart.h ****                                           uint32_t BaudRate)
1021:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1022:HALLIB/Inc/stm32f4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1023:HALLIB/Inc/stm32f4xx_ll_usart.h ****   {
1024:HALLIB/Inc/stm32f4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1025:HALLIB/Inc/stm32f4xx_ll_usart.h ****   }
1026:HALLIB/Inc/stm32f4xx_ll_usart.h ****   else
1027:HALLIB/Inc/stm32f4xx_ll_usart.h ****   {
1028:HALLIB/Inc/stm32f4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1029:HALLIB/Inc/stm32f4xx_ll_usart.h ****   }
1030:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1031:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1032:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1033:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1034:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1035:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1036:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1037:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccYMdbfs.s 			page 28


1038:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1039:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1040:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1041:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1042:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Baud Rate
1043:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1044:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1045:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1046:HALLIB/Inc/stm32f4xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1047:HALLIB/Inc/stm32f4xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1048:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1049:HALLIB/Inc/stm32f4xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1050:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1051:HALLIB/Inc/stm32f4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1052:HALLIB/Inc/stm32f4xx_ll_usart.h ****   {
1053:HALLIB/Inc/stm32f4xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1054:HALLIB/Inc/stm32f4xx_ll_usart.h ****     {
1055:HALLIB/Inc/stm32f4xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1056:HALLIB/Inc/stm32f4xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1057:HALLIB/Inc/stm32f4xx_ll_usart.h ****     }
1058:HALLIB/Inc/stm32f4xx_ll_usart.h ****   }
1059:HALLIB/Inc/stm32f4xx_ll_usart.h ****   else
1060:HALLIB/Inc/stm32f4xx_ll_usart.h ****   {
1061:HALLIB/Inc/stm32f4xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1062:HALLIB/Inc/stm32f4xx_ll_usart.h ****     {
1063:HALLIB/Inc/stm32f4xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1064:HALLIB/Inc/stm32f4xx_ll_usart.h ****     }
1065:HALLIB/Inc/stm32f4xx_ll_usart.h ****   }
1066:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (brrresult);
1067:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1068:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1069:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1070:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
1071:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1072:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1073:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1074:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
1075:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1076:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1077:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1078:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable IrDA mode
1079:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1080:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1081:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1082:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1083:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1084:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1085:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1086:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1087:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1088:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1089:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1090:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1091:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable IrDA mode
1092:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1093:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1094:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
ARM GAS  /tmp/ccYMdbfs.s 			page 29


1095:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1096:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1097:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1098:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1099:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1100:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1101:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1102:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1103:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1104:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1105:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1106:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1107:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1108:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1109:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1110:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1111:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1112:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1113:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1114:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1115:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1116:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1117:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1118:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1119:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1120:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1121:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1122:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1123:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1124:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1125:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1126:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1127:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1128:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1129:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1130:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1131:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1132:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1133:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1134:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1135:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1136:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1137:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1138:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1139:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1140:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1141:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1142:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1143:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1144:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1145:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1146:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1147:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1148:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1149:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1150:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1151:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
ARM GAS  /tmp/ccYMdbfs.s 			page 30


1152:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1153:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1154:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1155:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1156:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1157:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1158:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1159:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1160:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1161:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1162:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1163:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1164:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1165:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1166:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1167:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1168:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1169:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1170:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1171:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1172:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1173:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1174:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1175:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1176:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1177:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
1178:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1179:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1180:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1181:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
1182:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1183:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1184:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1185:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1186:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1187:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1188:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1189:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1190:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1191:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1192:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1193:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1194:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1195:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1196:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1197:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1198:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1199:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1200:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1201:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1202:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1203:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1204:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1205:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1206:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1207:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1208:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/ccYMdbfs.s 			page 31


1209:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1210:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1211:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1212:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1213:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1214:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1215:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1216:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1217:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1218:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1219:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1220:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1221:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1222:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1223:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1224:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1225:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1226:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1227:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1228:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1229:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1230:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1231:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1232:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1233:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1234:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1235:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1236:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1237:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1238:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1239:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1240:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1241:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1242:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1243:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1244:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1245:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1246:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1247:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1248:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1249:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1250:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1251:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1252:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1253:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1254:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1255:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1256:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1257:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1258:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1259:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1260:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1261:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1262:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1263:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1264:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1265:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccYMdbfs.s 			page 32


1266:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1267:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1268:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1269:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1270:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1271:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1272:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1273:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1274:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1275:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1276:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1277:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1278:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1279:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1280:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1281:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1282:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1283:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1284:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1285:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1286:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1287:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1288:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1289:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1290:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1291:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1292:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1293:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1294:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1295:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1296:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1297:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1298:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1299:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1300:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1301:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1302:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1303:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_POSITION_GTPR_GT);
1304:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1305:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1306:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1307:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1308:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1309:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1310:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1311:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1312:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1313:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1314:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1315:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1316:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1317:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_POSITION_GTPR_GT);
1318:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1319:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1320:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1321:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
1322:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
ARM GAS  /tmp/ccYMdbfs.s 			page 33


1323:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1324:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1325:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
1326:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1327:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1328:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1329:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1330:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1331:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1332:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1333:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1334:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1335:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1336:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1337:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1338:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1339:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1340:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1341:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1342:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1343:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1344:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1345:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1346:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1347:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1348:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1349:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
1350:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1351:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
1352:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1353:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1354:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1355:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
1356:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1357:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1358:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
1359:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1360:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1361:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1362:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
1363:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1364:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
1365:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1366:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1367:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1368:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
1369:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1370:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1371:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
1372:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
1373:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1374:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1375:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1376:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
1377:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1378:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1379:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
ARM GAS  /tmp/ccYMdbfs.s 			page 34


1380:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1381:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
1382:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1383:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1384:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1385:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1386:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
1387:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1388:HALLIB/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
1389:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1390:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1391:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1392:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
1393:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1394:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1395:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
1396:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1397:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1398:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1399:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1400:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1401:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
1402:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1403:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
1404:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1405:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1406:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1407:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable LIN mode
1408:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1409:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1410:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
1411:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1412:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1413:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1414:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
1415:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1416:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1417:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1418:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1419:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1420:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable LIN mode
1421:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1422:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1423:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
1424:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1425:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1426:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1427:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
1428:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1429:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
1430:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1431:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1432:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1433:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
1434:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1435:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1436:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
ARM GAS  /tmp/ccYMdbfs.s 			page 35


1437:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1438:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1439:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1440:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
1441:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1442:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
1443:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1444:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1445:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1446:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
1447:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1448:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1449:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
1450:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
1451:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1452:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1453:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1454:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
1455:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
1456:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1457:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1458:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1459:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1460:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1461:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1462:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1463:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1464:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1465:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1466:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1467:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
1468:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1469:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1470:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
1471:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
1472:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
1473:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
1474:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
1475:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1476:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1477:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1478:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
1479:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1480:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
1481:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
1482:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1483:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1484:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1485:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1486:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1487:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1488:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
1489:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
1490:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1491:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1492:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1493:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
ARM GAS  /tmp/ccYMdbfs.s 			page 36


1494:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
1495:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1496:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1497:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1498:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1499:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1500:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1501:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1502:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1503:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
1504:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
1505:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1506:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
1507:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
1508:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
1509:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
1510:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
1511:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1512:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1513:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1514:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
1515:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1516:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
1517:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1518:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1519:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1520:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1521:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
1522:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1523:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1524:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1525:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1526:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
1527:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
1528:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1529:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1530:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1531:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1532:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
1533:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1534:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1535:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1536:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1537:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1538:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1539:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1540:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1541:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
1542:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
1543:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
1544:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1545:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
1546:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
1547:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
1548:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
1549:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
1550:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
ARM GAS  /tmp/ccYMdbfs.s 			page 37


1551:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1552:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1553:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1554:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
1555:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1556:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
1557:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
1558:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1559:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
1560:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
1561:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
1562:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1563:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1564:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1565:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1566:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
1567:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
1568:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1569:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1570:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1571:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1572:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
1573:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1574:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1575:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1576:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1577:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1578:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1579:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1580:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
1581:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
1582:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1583:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1584:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
1585:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
1586:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
1587:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
1588:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
1589:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1590:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1591:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1592:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
1593:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1594:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
1595:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1596:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
1597:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1598:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
1599:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
1600:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1601:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1602:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1603:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1604:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
1605:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
1606:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1607:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
ARM GAS  /tmp/ccYMdbfs.s 			page 38


1608:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1609:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
1610:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
1611:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
1612:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1613:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1614:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1615:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1616:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1617:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1618:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1619:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1620:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
1621:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
1622:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1623:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1624:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
1625:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
1626:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
1627:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
1628:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
1629:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1630:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1631:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1632:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
1633:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1634:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
1635:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1636:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
1637:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1638:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
1639:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
1640:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* Synchronous mode is activated by default */
1641:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
1642:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
1643:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1644:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1645:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1646:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1647:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
1648:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
1649:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1650:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1651:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1652:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1653:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
1654:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1655:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1656:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1657:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1658:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1659:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1660:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1661:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1662:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
1663:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
1664:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
ARM GAS  /tmp/ccYMdbfs.s 			page 39


1665:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1666:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
1667:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
1668:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
1669:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
1670:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
1671:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
1672:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1673:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1674:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1675:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
1676:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1677:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
1678:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
1679:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
1680:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
1681:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
1682:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
1683:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1684:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1685:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1686:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1687:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
1688:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
1689:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
1690:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
1691:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1692:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1693:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1694:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1695:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1696:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1697:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1698:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1699:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1700:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1701:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1702:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
1703:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
1704:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1705:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
1706:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
1707:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
1708:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
1709:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
1710:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1711:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1712:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1713:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
1714:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1715:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
1716:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1717:HALLIB/Inc/stm32f4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1718:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1719:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1720:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1721:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/ccYMdbfs.s 			page 40


1722:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1723:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
1724:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1725:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1726:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
1727:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
1728:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1729:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1730:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1731:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
1732:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
1733:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1734:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1735:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1736:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
1737:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1738:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
1739:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1740:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1741:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1742:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
1743:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
1744:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1745:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1746:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1747:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
1748:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1749:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
1750:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1751:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1752:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1753:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
1754:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
1755:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1756:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1757:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1758:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
1759:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1760:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
1761:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1762:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1763:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1764:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
1765:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
1766:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1767:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1768:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1769:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
1770:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1771:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
1772:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1773:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1774:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1775:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
1776:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
1777:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1778:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccYMdbfs.s 			page 41


1779:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1780:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
1781:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1782:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
1783:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1784:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1785:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1786:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
1787:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
1788:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1789:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1790:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1791:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
1792:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1793:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
1794:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1795:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1796:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1797:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
1798:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
1799:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1800:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1801:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1802:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
1803:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1804:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
1805:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1806:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1807:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1808:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
1809:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
1810:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1811:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1812:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1813:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
1814:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1815:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
1816:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1817:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1818:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1819:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
1820:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1821:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1822:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_IsActiveFlag_LBD
1823:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1824:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1825:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1826:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
1827:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1828:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
1829:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1830:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1831:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1832:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
1833:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1834:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1835:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_IsActiveFlag_nCTS
ARM GAS  /tmp/ccYMdbfs.s 			page 42


1836:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1837:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1838:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1839:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
1840:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1841:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_CTS) == (USART_SR_CTS));
1842:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1843:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1844:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1845:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
1846:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          SBK           LL_USART_IsActiveFlag_SBK
1847:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1848:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1849:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1850:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
1851:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1852:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_SBK) == (USART_CR1_SBK));
1853:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1854:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1855:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1856:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
1857:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RWU           LL_USART_IsActiveFlag_RWU
1858:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1859:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1860:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1861:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
1862:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1863:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RWU) == (USART_CR1_RWU));
1864:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1865:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1866:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1867:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
1868:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1869:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1870:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1871:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         NE, FE, ORE, IDLE would also be cleared.
1872:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_ClearFlag_PE
1873:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1874:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1875:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1876:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
1877:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1878:HALLIB/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1879:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1880:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1881:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1882:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1883:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1884:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1885:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1886:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
1887:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1888:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1889:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1890:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, ORE, IDLE would also be cleared.
1891:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_ClearFlag_FE
1892:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccYMdbfs.s 			page 43


1893:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1894:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1895:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
1896:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1897:HALLIB/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1898:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1899:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1900:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1901:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1902:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1903:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1904:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1905:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
1906:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1907:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1908:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1909:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         PE, FE, ORE, IDLE would also be cleared.
1910:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_ClearFlag_NE
1911:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1912:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1913:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1914:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
1915:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1916:HALLIB/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1917:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1918:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1919:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1920:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1921:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1922:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1923:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1924:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
1925:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1926:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1927:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1928:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, FE, IDLE would also be cleared.
1929:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
1930:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1931:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1932:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1933:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
1934:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1935:HALLIB/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1936:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1937:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1938:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1939:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1940:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1941:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1942:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1943:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
1944:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1945:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1946:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1947:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, FE, ORE would also be cleared.
1948:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
1949:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccYMdbfs.s 			page 44


1950:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1951:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1952:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
1953:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1954:HALLIB/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1955:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1956:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1957:HALLIB/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1958:HALLIB/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1959:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1960:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1961:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1962:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
1963:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_ClearFlag_TC
1964:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1965:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1966:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1967:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
1968:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1969:HALLIB/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_TC));
1970:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1971:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1972:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1973:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear RX Not Empty Flag
1974:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
1975:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1976:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1977:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1978:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
1979:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1980:HALLIB/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
1981:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1982:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1983:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1984:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
1985:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1986:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1987:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_ClearFlag_LBD
1988:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1989:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1990:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
1991:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
1992:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
1993:HALLIB/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
1994:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
1995:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
1996:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
1997:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
1998:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1999:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2000:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_ClearFlag_nCTS
2001:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2002:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2003:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2004:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2005:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2006:HALLIB/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_CTS));
ARM GAS  /tmp/ccYMdbfs.s 			page 45


2007:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2008:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2009:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2010:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
2011:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2012:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2013:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2014:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
2015:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2016:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2017:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2018:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2019:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
2020:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2021:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2022:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2023:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2024:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2025:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2026:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2027:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2028:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2029:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
2030:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2031:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2032:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2033:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2034:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
2035:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2036:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2037:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2038:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2039:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2040:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2041:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2042:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2043:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2044:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2045:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2046:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2047:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2048:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2049:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2050:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2051:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2052:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2053:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2054:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2055:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2056:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2057:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2058:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2059:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2060:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2061:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2062:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2063:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
ARM GAS  /tmp/ccYMdbfs.s 			page 46


2064:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2065:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2066:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2067:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
2068:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2069:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_PEIE);
2070:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2071:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2072:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2073:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
2074:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2075:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2076:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
2077:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2078:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2079:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2080:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
2081:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2082:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
2083:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2084:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2085:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2086:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Error Interrupt
2087:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2088:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2089:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           0: Interrupt is inhibited
2090:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2091:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
2092:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2093:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2094:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2095:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
2096:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2097:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_EIE);
2098:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2099:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2100:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2101:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
2102:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2103:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2104:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
2105:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2106:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2107:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2108:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
2109:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2110:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
2111:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2112:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2113:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2114:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
2115:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
2116:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2117:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2118:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2119:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
2120:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/ccYMdbfs.s 			page 47


2121:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2122:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2123:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2124:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2125:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
2126:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
2127:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2128:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2129:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2130:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
2131:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2132:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2133:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2134:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2135:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2136:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
2137:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
2138:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2139:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2140:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2141:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
2142:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2143:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
2144:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2145:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2146:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2147:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
2148:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
2149:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2150:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2151:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2152:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
2153:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2154:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
2155:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2156:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2157:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2158:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
2159:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
2160:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2161:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2162:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2163:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
2164:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2165:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
2166:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2167:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2168:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2169:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
2170:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2171:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2172:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
2173:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2174:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2175:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2176:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
2177:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/ccYMdbfs.s 			page 48


2178:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
2179:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2180:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2181:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2182:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Error Interrupt
2183:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2184:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2185:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           0: Interrupt is inhibited
2186:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2187:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
2188:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2189:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2190:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2191:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
2192:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2193:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
2194:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2195:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2196:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2197:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
2198:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2199:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2200:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
2201:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2202:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2203:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2204:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
2205:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2206:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
2207:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2208:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2209:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2210:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
2211:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
2212:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2213:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2214:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2215:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
2216:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2217:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
2218:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2219:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2220:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2221:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
2222:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
2223:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2224:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2225:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2226:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
2227:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2228:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
2229:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2230:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2231:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2232:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
2233:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
2234:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccYMdbfs.s 			page 49


2235:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2236:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2237:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
2238:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2239:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
2240:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2241:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2242:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2243:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
2244:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
2245:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2246:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2247:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2248:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
2249:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2250:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
2251:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2252:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2253:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2254:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
2255:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
2256:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2257:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2258:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2259:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
2260:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2261:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE));
2262:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2263:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2264:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2265:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
2266:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2267:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2268:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
2269:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2270:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2271:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2272:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
2273:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2274:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE));
2275:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2276:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2277:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2278:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
2279:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
2280:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2281:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2282:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2283:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
2284:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2285:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
2286:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2287:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2288:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2289:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
2290:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2291:HALLIB/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
ARM GAS  /tmp/ccYMdbfs.s 			page 50


2292:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
2293:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2294:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2295:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2296:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
2297:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2298:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE));
2299:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2300:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2301:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2302:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
2303:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2304:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2305:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
2306:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
2307:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2308:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2309:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2310:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
2311:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
2312:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2313:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2314:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2315:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
2316:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2317:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAR);
2318:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2319:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2320:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2321:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
2322:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
2323:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2324:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2325:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2326:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
2327:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2328:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
2329:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2330:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2331:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2332:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
2333:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
2334:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2335:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2336:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2337:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(USART_TypeDef *USARTx)
2338:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2339:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR));
2340:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2341:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2342:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2343:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
2344:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
2345:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2346:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2347:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2348:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccYMdbfs.s 			page 51


2349:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2350:HALLIB/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAT);
2351:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2352:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2353:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2354:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable DMA Mode for transmission
2355:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_DisableDMAReq_TX
2356:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2357:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2358:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2359:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
2360:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2361:HALLIB/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
2362:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2363:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2364:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2365:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for transmission
2366:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_IsEnabledDMAReq_TX
2367:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2368:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2369:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2370:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_TX(USART_TypeDef *USARTx)
2371:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2372:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAT) == (USART_CR3_DMAT));
2373:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2374:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2375:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2376:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Get the data register address used for DMA transfer
2377:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_DMA_GetRegAddr
2378:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @note   Address of Data Register is valid for both Transmit and Receive transfers.
2379:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2380:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Address of data register
2381:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2382:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
2383:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2384:HALLIB/Inc/stm32f4xx_ll_usart.h ****   /* return address of DR register */
2385:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return ((uint32_t) & (USARTx->DR));
2386:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2387:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2388:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2389:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @}
2390:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2391:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2392:HALLIB/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Data_Management Data_Management
2393:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @{
2394:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2395:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2396:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2397:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 8 bits)
2398:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData8
2399:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2400:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2401:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2402:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
2403:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2404:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2405:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/ccYMdbfs.s 			page 52


2406:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2407:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2408:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 9 bits)
2409:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData9
2410:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2411:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
2412:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2413:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
2414:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2415:HALLIB/Inc/stm32f4xx_ll_usart.h ****   return (uint16_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2416:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
2417:HALLIB/Inc/stm32f4xx_ll_usart.h **** 
2418:HALLIB/Inc/stm32f4xx_ll_usart.h **** /**
2419:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @brief  Write in Transmitter Data Register (Transmit Data value, 8 bits)
2420:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_TransmitData8
2421:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2422:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @param  Value between Min_Data=0x00 and Max_Data=0xFF
2423:HALLIB/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2424:HALLIB/Inc/stm32f4xx_ll_usart.h ****   */
2425:HALLIB/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
2426:HALLIB/Inc/stm32f4xx_ll_usart.h **** {
2427:HALLIB/Inc/stm32f4xx_ll_usart.h ****   USARTx->DR = Value;
 326              		.loc 2 2427 0
 327 000e 0C4B     		ldr	r3, .L25
 328 0010 5960     		str	r1, [r3, #4]
 329              	.L21:
 330              	.LVL23:
 331              	.LBE13:
 332              	.LBE12:
 333              	.LBB14:
 334              	.LBB15:
1815:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 335              		.loc 2 1815 0 discriminator 1
 336 0012 0B4B     		ldr	r3, .L25
 337 0014 1B68     		ldr	r3, [r3]
 338              	.LVL24:
 339              	.LBE15:
 340              	.LBE14:
 179:board/board.c **** 		while (LL_USART_IsActiveFlag_TXE(USART1) == RESET)
 341              		.loc 1 179 0 discriminator 1
 342 0016 13F0800F 		tst	r3, #128
 343 001a FAD0     		beq	.L21
 178:board/board.c **** 		while (LL_USART_IsActiveFlag_TXE(USART1) == RESET)
 344              		.loc 1 178 0
 345 001c 1446     		mov	r4, r2
 346              	.LVL25:
 347              	.L18:
 168:board/board.c **** 	{
 348              		.loc 1 168 0
 349 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 350 0020 53B1     		cbz	r3, .L24
 171:board/board.c **** 		{
 351              		.loc 1 171 0
 352 0022 0A2B     		cmp	r3, #10
 353 0024 F1D1     		bne	.L19
 354              	.LVL26:
 355              	.LBB16:
ARM GAS  /tmp/ccYMdbfs.s 			page 53


 356              	.LBB17:
 357              		.loc 2 2427 0
 358 0026 0D22     		movs	r2, #13
 359 0028 054B     		ldr	r3, .L25
 360 002a 5A60     		str	r2, [r3, #4]
 361              	.L20:
 362              	.LVL27:
 363              	.LBE17:
 364              	.LBE16:
 365              	.LBB18:
 366              	.LBB19:
1815:HALLIB/Inc/stm32f4xx_ll_usart.h **** }
 367              		.loc 2 1815 0 discriminator 1
 368 002c 044B     		ldr	r3, .L25
 369 002e 1B68     		ldr	r3, [r3]
 370              	.LVL28:
 371              	.LBE19:
 372              	.LBE18:
 174:board/board.c **** 			{
 373              		.loc 1 174 0 discriminator 1
 374 0030 13F0800F 		tst	r3, #128
 375 0034 FAD0     		beq	.L20
 376 0036 E8E7     		b	.L19
 377              	.LVL29:
 378              	.L24:
 180:board/board.c **** 		{
 181:board/board.c **** 		}
 182:board/board.c **** 	}
 183:board/board.c **** 
 184:board/board.c **** 	/* 退出临界段 */
 185:board/board.c **** 	rt_exit_critical();
 379              		.loc 1 185 0
 380 0038 FFF7FEFF 		bl	rt_exit_critical
 381              	.LVL30:
 382 003c 10BD     		pop	{r4, pc}
 383              	.LVL31:
 384              	.L26:
 385 003e 00BF     		.align	2
 386              	.L25:
 387 0040 00100140 		.word	1073811456
 388              		.cfi_endproc
 389              	.LFE277:
 391              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 392              		.align	1
 393              		.global	HAL_UART_MspInit
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu fpv4-sp-d16
 399              	HAL_UART_MspInit:
 400              	.LFB278:
 186:board/board.c **** }
 187:board/board.c **** #endif
 188:board/board.c **** 
 189:board/board.c **** //UART底层初始化，时钟使能，引脚配置，中断配置
 190:board/board.c **** //此函数会被HAL_UART_Init()调用
 191:board/board.c **** //huart:串口句柄
ARM GAS  /tmp/ccYMdbfs.s 			page 54


 192:board/board.c **** 
 193:board/board.c **** void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 194:board/board.c **** {
 401              		.loc 1 194 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 32
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              	.LVL32:
 195:board/board.c ****     //GPIO端口设置
 196:board/board.c **** 	GPIO_InitTypeDef GPIO_Initure;
 197:board/board.c **** 	
 198:board/board.c **** 	if(huart->Instance==USART1)//如果是串口1，进行串口1 MSP初始化
 406              		.loc 1 198 0
 407 0000 0268     		ldr	r2, [r0]
 408 0002 1A4B     		ldr	r3, .L34
 409 0004 9A42     		cmp	r2, r3
 410 0006 00D0     		beq	.L33
 411 0008 7047     		bx	lr
 412              	.L33:
 194:board/board.c ****     //GPIO端口设置
 413              		.loc 1 194 0
 414 000a 10B5     		push	{r4, lr}
 415              	.LCFI6:
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 4, -8
 418              		.cfi_offset 14, -4
 419 000c 88B0     		sub	sp, sp, #32
 420              	.LCFI7:
 421              		.cfi_def_cfa_offset 40
 422              	.LBB20:
 199:board/board.c **** 	{
 200:board/board.c **** 		__HAL_RCC_GPIOA_CLK_ENABLE();			//使能GPIOA时钟
 423              		.loc 1 200 0
 424 000e 0021     		movs	r1, #0
 425 0010 0191     		str	r1, [sp, #4]
 426 0012 03F59433 		add	r3, r3, #75776
 427 0016 1A6B     		ldr	r2, [r3, #48]
 428 0018 42F00102 		orr	r2, r2, #1
 429 001c 1A63     		str	r2, [r3, #48]
 430 001e 1A6B     		ldr	r2, [r3, #48]
 431 0020 02F00102 		and	r2, r2, #1
 432 0024 0192     		str	r2, [sp, #4]
 433 0026 019A     		ldr	r2, [sp, #4]
 434              	.LBE20:
 435              	.LBB21:
 201:board/board.c **** 		__HAL_RCC_USART1_CLK_ENABLE();			//使能USART1时钟
 436              		.loc 1 201 0
 437 0028 0291     		str	r1, [sp, #8]
 438 002a 5A6C     		ldr	r2, [r3, #68]
 439 002c 42F01002 		orr	r2, r2, #16
 440 0030 5A64     		str	r2, [r3, #68]
 441 0032 5B6C     		ldr	r3, [r3, #68]
 442 0034 03F01003 		and	r3, r3, #16
 443 0038 0293     		str	r3, [sp, #8]
 444 003a 029B     		ldr	r3, [sp, #8]
 445              	.LBE21:
 202:board/board.c **** 	
ARM GAS  /tmp/ccYMdbfs.s 			page 55


 203:board/board.c **** 		GPIO_Initure.Pin=GPIO_PIN_9;			//PA9
 446              		.loc 1 203 0
 447 003c 4FF40073 		mov	r3, #512
 448 0040 0393     		str	r3, [sp, #12]
 204:board/board.c **** 		GPIO_Initure.Mode=GPIO_MODE_AF_PP;		//复用推挽输出
 449              		.loc 1 204 0
 450 0042 0223     		movs	r3, #2
 451 0044 0493     		str	r3, [sp, #16]
 205:board/board.c **** 		GPIO_Initure.Pull=GPIO_PULLUP;			//上拉
 452              		.loc 1 205 0
 453 0046 0122     		movs	r2, #1
 454 0048 0592     		str	r2, [sp, #20]
 206:board/board.c **** 		GPIO_Initure.Speed=GPIO_SPEED_FAST;		//高速
 455              		.loc 1 206 0
 456 004a 0693     		str	r3, [sp, #24]
 207:board/board.c **** 		GPIO_Initure.Alternate=GPIO_AF7_USART1;	//复用为USART1
 457              		.loc 1 207 0
 458 004c 0723     		movs	r3, #7
 459 004e 0793     		str	r3, [sp, #28]
 208:board/board.c **** 		HAL_GPIO_Init(GPIOA,&GPIO_Initure);	   	//初始化PA9
 460              		.loc 1 208 0
 461 0050 074C     		ldr	r4, .L34+4
 462 0052 03A9     		add	r1, sp, #12
 463 0054 2046     		mov	r0, r4
 464              	.LVL33:
 465 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 466              	.LVL34:
 209:board/board.c **** 
 210:board/board.c **** 		GPIO_Initure.Pin=GPIO_PIN_10;			//PA10
 467              		.loc 1 210 0
 468 005a 4FF48063 		mov	r3, #1024
 469 005e 0393     		str	r3, [sp, #12]
 211:board/board.c **** 		HAL_GPIO_Init(GPIOA,&GPIO_Initure);	   	//初始化PA10
 470              		.loc 1 211 0
 471 0060 03A9     		add	r1, sp, #12
 472 0062 2046     		mov	r0, r4
 473 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 474              	.LVL35:
 212:board/board.c **** 		
 213:board/board.c **** #if EN_USART1_RX
 214:board/board.c **** 		HAL_NVIC_EnableIRQ(USART1_IRQn);				//使能USART1中断通道
 215:board/board.c **** 		HAL_NVIC_SetPriority(USART1_IRQn,3,3);			//抢占优先级3，子优先级3
 216:board/board.c **** #endif	
 217:board/board.c **** 	}
 218:board/board.c **** }
 475              		.loc 1 218 0
 476 0068 08B0     		add	sp, sp, #32
 477              	.LCFI8:
 478              		.cfi_def_cfa_offset 8
 479              		@ sp needed
 480 006a 10BD     		pop	{r4, pc}
 481              	.L35:
 482              		.align	2
 483              	.L34:
 484 006c 00100140 		.word	1073811456
 485 0070 00000240 		.word	1073872896
 486              		.cfi_endproc
ARM GAS  /tmp/ccYMdbfs.s 			page 56


 487              	.LFE278:
 489              		.section	.text.HAL_TIM_PWM_MspInit,"ax",%progbits
 490              		.align	1
 491              		.global	HAL_TIM_PWM_MspInit
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 495              		.fpu fpv4-sp-d16
 497              	HAL_TIM_PWM_MspInit:
 498              	.LFB279:
 219:board/board.c **** 
 220:board/board.c **** void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
 221:board/board.c **** {
 499              		.loc 1 221 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504              	.LVL36:
 222:board/board.c ****   if(htim_pwm->Instance==TIM3)
 505              		.loc 1 222 0
 506 0000 0268     		ldr	r2, [r0]
 507 0002 094B     		ldr	r3, .L44
 508 0004 9A42     		cmp	r2, r3
 509 0006 00D0     		beq	.L43
 510              	.L42:
 223:board/board.c ****   {
 224:board/board.c ****   /* USER CODE BEGIN TIM3_MspInit 0 */
 225:board/board.c **** 
 226:board/board.c ****   /* USER CODE END TIM3_MspInit 0 */
 227:board/board.c ****     /* Peripheral clock enable */
 228:board/board.c ****     __HAL_RCC_TIM3_CLK_ENABLE();
 229:board/board.c ****   /* USER CODE BEGIN TIM3_MspInit 1 */
 230:board/board.c **** 
 231:board/board.c ****   /* USER CODE END TIM3_MspInit 1 */
 232:board/board.c ****   }
 233:board/board.c **** 
 234:board/board.c **** }
 511              		.loc 1 234 0
 512 0008 7047     		bx	lr
 513              	.L43:
 221:board/board.c ****   if(htim_pwm->Instance==TIM3)
 514              		.loc 1 221 0
 515 000a 82B0     		sub	sp, sp, #8
 516              	.LCFI9:
 517              		.cfi_def_cfa_offset 8
 518              	.LBB22:
 228:board/board.c ****   /* USER CODE BEGIN TIM3_MspInit 1 */
 519              		.loc 1 228 0
 520 000c 0023     		movs	r3, #0
 521 000e 0193     		str	r3, [sp, #4]
 522 0010 064B     		ldr	r3, .L44+4
 523 0012 1A6C     		ldr	r2, [r3, #64]
 524 0014 42F00202 		orr	r2, r2, #2
 525 0018 1A64     		str	r2, [r3, #64]
 526 001a 1B6C     		ldr	r3, [r3, #64]
 527 001c 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/ccYMdbfs.s 			page 57


 528 0020 0193     		str	r3, [sp, #4]
 529 0022 019B     		ldr	r3, [sp, #4]
 530              	.LBE22:
 531              		.loc 1 234 0
 532 0024 02B0     		add	sp, sp, #8
 533              	.LCFI10:
 534              		.cfi_def_cfa_offset 0
 535              		@ sp needed
 536 0026 EFE7     		b	.L42
 537              	.L45:
 538              		.align	2
 539              	.L44:
 540 0028 00040040 		.word	1073742848
 541 002c 00380240 		.word	1073887232
 542              		.cfi_endproc
 543              	.LFE279:
 545              		.section	.text.HAL_TIM_MspPostInit,"ax",%progbits
 546              		.align	1
 547              		.global	HAL_TIM_MspPostInit
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 551              		.fpu fpv4-sp-d16
 553              	HAL_TIM_MspPostInit:
 554              	.LFB280:
 235:board/board.c **** 
 236:board/board.c **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 237:board/board.c **** {
 555              		.loc 1 237 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 24
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              	.LVL37:
 560 0000 00B5     		push	{lr}
 561              	.LCFI11:
 562              		.cfi_def_cfa_offset 4
 563              		.cfi_offset 14, -4
 564 0002 87B0     		sub	sp, sp, #28
 565              	.LCFI12:
 566              		.cfi_def_cfa_offset 32
 238:board/board.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 567              		.loc 1 238 0
 568 0004 0023     		movs	r3, #0
 569 0006 0193     		str	r3, [sp, #4]
 570 0008 0293     		str	r3, [sp, #8]
 571 000a 0393     		str	r3, [sp, #12]
 572 000c 0493     		str	r3, [sp, #16]
 573 000e 0593     		str	r3, [sp, #20]
 239:board/board.c ****   if(htim->Instance==TIM3)
 574              		.loc 1 239 0
 575 0010 0268     		ldr	r2, [r0]
 576 0012 0D4B     		ldr	r3, .L50
 577 0014 9A42     		cmp	r2, r3
 578 0016 02D0     		beq	.L49
 579              	.LVL38:
 580              	.L46:
 240:board/board.c ****   {
ARM GAS  /tmp/ccYMdbfs.s 			page 58


 241:board/board.c ****   /* USER CODE BEGIN TIM3_MspPostInit 0 */
 242:board/board.c **** 
 243:board/board.c ****   /* USER CODE END TIM3_MspPostInit 0 */
 244:board/board.c ****   
 245:board/board.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 246:board/board.c ****     /**TIM3 GPIO Configuration    
 247:board/board.c ****     PB5     ------> TIM3_CH2 
 248:board/board.c ****     */
 249:board/board.c ****     GPIO_InitStruct.Pin = GPIO_PIN_1;
 250:board/board.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 251:board/board.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 252:board/board.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 253:board/board.c ****     GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 254:board/board.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 255:board/board.c **** 
 256:board/board.c ****   /* USER CODE BEGIN TIM3_MspPostInit 1 */
 257:board/board.c **** 
 258:board/board.c ****   /* USER CODE END TIM3_MspPostInit 1 */
 259:board/board.c ****   }
 260:board/board.c **** 
 261:board/board.c **** }
 581              		.loc 1 261 0
 582 0018 07B0     		add	sp, sp, #28
 583              	.LCFI13:
 584              		.cfi_remember_state
 585              		.cfi_def_cfa_offset 4
 586              		@ sp needed
 587 001a 5DF804FB 		ldr	pc, [sp], #4
 588              	.LVL39:
 589              	.L49:
 590              	.LCFI14:
 591              		.cfi_restore_state
 592              	.LBB23:
 245:board/board.c ****     /**TIM3 GPIO Configuration    
 593              		.loc 1 245 0
 594 001e 0023     		movs	r3, #0
 595 0020 0093     		str	r3, [sp]
 596 0022 0A4B     		ldr	r3, .L50+4
 597 0024 1A6B     		ldr	r2, [r3, #48]
 598 0026 42F00202 		orr	r2, r2, #2
 599 002a 1A63     		str	r2, [r3, #48]
 600 002c 1B6B     		ldr	r3, [r3, #48]
 601 002e 03F00203 		and	r3, r3, #2
 602 0032 0093     		str	r3, [sp]
 603 0034 009B     		ldr	r3, [sp]
 604              	.LBE23:
 249:board/board.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 605              		.loc 1 249 0
 606 0036 0223     		movs	r3, #2
 607 0038 0193     		str	r3, [sp, #4]
 250:board/board.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 608              		.loc 1 250 0
 609 003a 0293     		str	r3, [sp, #8]
 253:board/board.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 610              		.loc 1 253 0
 611 003c 0593     		str	r3, [sp, #20]
 254:board/board.c **** 
ARM GAS  /tmp/ccYMdbfs.s 			page 59


 612              		.loc 1 254 0
 613 003e 01A9     		add	r1, sp, #4
 614 0040 0348     		ldr	r0, .L50+8
 615              	.LVL40:
 616 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 617              	.LVL41:
 618              		.loc 1 261 0
 619 0046 E7E7     		b	.L46
 620              	.L51:
 621              		.align	2
 622              	.L50:
 623 0048 00040040 		.word	1073742848
 624 004c 00380240 		.word	1073887232
 625 0050 00040240 		.word	1073873920
 626              		.cfi_endproc
 627              	.LFE280:
 629              		.section	.bss.rt_heap,"aw",%nobits
 630              		.align	2
 631              		.set	.LANCHOR0,. + 0
 634              	rt_heap:
 635 0000 00000000 		.space	8096
 635      00000000 
 635      00000000 
 635      00000000 
 635      00000000 
 636              		.section	.rodata.rt_hw_board_init.str1.4,"aMS",%progbits,1
 637              		.align	2
 638              	.LC0:
 639 0000 75617274 		.ascii	"uart1\000"
 639      3100
 640              		.text
 641              	.Letext0:
 642              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 643              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 644              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 645              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 646              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 647              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 648              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 649              		.file 10 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 650              		.file 11 "rt-thread/components/finsh/finsh_api.h"
 651              		.file 12 "CORE/core_cm4.h"
 652              		.file 13 "USER/system_stm32f4xx.h"
 653              		.file 14 "USER/stm32f429xx.h"
 654              		.file 15 "USER/stm32f4xx.h"
 655              		.file 16 "HALLIB/Inc/stm32f4xx_hal_def.h"
 656              		.file 17 "HALLIB/Inc/stm32f4xx_hal_rcc_ex.h"
 657              		.file 18 "HALLIB/Inc/stm32f4xx_hal_rcc.h"
 658              		.file 19 "HALLIB/Inc/stm32f4xx_hal_gpio.h"
 659              		.file 20 "HALLIB/Inc/stm32f4xx_hal_dma.h"
 660              		.file 21 "HALLIB/Inc/stm32f4xx_hal_tim.h"
 661              		.file 22 "HALLIB/Inc/stm32f4xx_hal_uart.h"
 662              		.file 23 "HALLIB/Inc/stm32f4xx_hal.h"
 663              		.file 24 "board/board.h"
 664              		.file 25 "SYSTEM/sys/sys.h"
 665              		.file 26 "hardware/LCD/font.h"
 666              		.file 27 "hardware/LCD/lcd.h"
ARM GAS  /tmp/ccYMdbfs.s 			page 60


 667              		.file 28 "rt-thread/include/rtthread.h"
 668              		.file 29 "HALLIB/Inc/stm32f4xx_hal_pwr_ex.h"
 669              		.file 30 "HALLIB/Inc/stm32f4xx_hal_cortex.h"
 670              		.file 31 "SYSTEM/delay/delay.h"
 671              		.file 32 "hardware/HAL_Drivers/drv_gpio.h"
 672              		.file 33 "hardware/HAL_Drivers/drv_usart.h"
ARM GAS  /tmp/ccYMdbfs.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 board.c
     /tmp/ccYMdbfs.s:18     .text.rt_heap_begin_get:0000000000000000 $t
     /tmp/ccYMdbfs.s:25     .text.rt_heap_begin_get:0000000000000000 rt_heap_begin_get
     /tmp/ccYMdbfs.s:39     .text.rt_heap_begin_get:0000000000000004 $d
     /tmp/ccYMdbfs.s:44     .text.rt_heap_end_get:0000000000000000 $t
     /tmp/ccYMdbfs.s:51     .text.rt_heap_end_get:0000000000000000 rt_heap_end_get
     /tmp/ccYMdbfs.s:64     .text.rt_heap_end_get:0000000000000004 $d
     /tmp/ccYMdbfs.s:69     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccYMdbfs.s:76     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccYMdbfs.s:185    .text.SystemClock_Config:0000000000000090 $d
     /tmp/ccYMdbfs.s:191    .text.rt_hw_board_init:0000000000000000 $t
     /tmp/ccYMdbfs.s:198    .text.rt_hw_board_init:0000000000000000 rt_hw_board_init
     /tmp/ccYMdbfs.s:254    .text.rt_hw_board_init:0000000000000048 $d
     /tmp/ccYMdbfs.s:260    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccYMdbfs.s:267    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccYMdbfs.s:292    .text.rt_hw_console_output:0000000000000000 $t
     /tmp/ccYMdbfs.s:299    .text.rt_hw_console_output:0000000000000000 rt_hw_console_output
     /tmp/ccYMdbfs.s:387    .text.rt_hw_console_output:0000000000000040 $d
     /tmp/ccYMdbfs.s:392    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccYMdbfs.s:399    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccYMdbfs.s:484    .text.HAL_UART_MspInit:000000000000006c $d
     /tmp/ccYMdbfs.s:490    .text.HAL_TIM_PWM_MspInit:0000000000000000 $t
     /tmp/ccYMdbfs.s:497    .text.HAL_TIM_PWM_MspInit:0000000000000000 HAL_TIM_PWM_MspInit
     /tmp/ccYMdbfs.s:540    .text.HAL_TIM_PWM_MspInit:0000000000000028 $d
     /tmp/ccYMdbfs.s:546    .text.HAL_TIM_MspPostInit:0000000000000000 $t
     /tmp/ccYMdbfs.s:553    .text.HAL_TIM_MspPostInit:0000000000000000 HAL_TIM_MspPostInit
     /tmp/ccYMdbfs.s:623    .text.HAL_TIM_MspPostInit:0000000000000048 $d
     /tmp/ccYMdbfs.s:630    .bss.rt_heap:0000000000000000 $d
     /tmp/ccYMdbfs.s:634    .bss.rt_heap:0000000000000000 rt_heap
     /tmp/ccYMdbfs.s:637    .rodata.rt_hw_board_init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_Init
HAL_RCC_GetSysClockFreq
HAL_SYSTICK_Config
delay_init
rt_hw_pin_init
rt_hw_usart_init
rt_components_board_init
rt_console_set_device
rt_system_heap_init
rt_interrupt_enter
rt_tick_increase
rt_interrupt_leave
rt_enter_critical
rt_exit_critical
HAL_GPIO_Init
