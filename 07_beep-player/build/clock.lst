ARM GAS  /tmp/ccAHKV9k.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"clock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.rt_system_tick_init,"ax",%progbits
  18              		.align	1
  19              		.global	rt_system_tick_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	rt_system_tick_init:
  26              	.LFB15:
  27              		.file 1 "rt-thread/src/clock.c"
   1:rt-thread/src/clock.c **** /*
   2:rt-thread/src/clock.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/src/clock.c ****  *
   4:rt-thread/src/clock.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/src/clock.c ****  *
   6:rt-thread/src/clock.c ****  * Change Logs:
   7:rt-thread/src/clock.c ****  * Date           Author       Notes
   8:rt-thread/src/clock.c ****  * 2006-03-12     Bernard      first version
   9:rt-thread/src/clock.c ****  * 2006-05-27     Bernard      add support for same priority thread schedule
  10:rt-thread/src/clock.c ****  * 2006-08-10     Bernard      remove the last rt_schedule in rt_tick_increase
  11:rt-thread/src/clock.c ****  * 2010-03-08     Bernard      remove rt_passed_second
  12:rt-thread/src/clock.c ****  * 2010-05-20     Bernard      fix the tick exceeds the maximum limits
  13:rt-thread/src/clock.c ****  * 2010-07-13     Bernard      fix rt_tick_from_millisecond issue found by kuronca
  14:rt-thread/src/clock.c ****  * 2011-06-26     Bernard      add rt_tick_set function.
  15:rt-thread/src/clock.c ****  * 2018-11-22     Jesven       add per cpu tick
  16:rt-thread/src/clock.c ****  */
  17:rt-thread/src/clock.c **** 
  18:rt-thread/src/clock.c **** #include <rthw.h>
  19:rt-thread/src/clock.c **** #include <rtthread.h>
  20:rt-thread/src/clock.c **** 
  21:rt-thread/src/clock.c **** #ifdef RT_USING_SMP
  22:rt-thread/src/clock.c **** #define rt_tick rt_cpu_index(0)->tick
  23:rt-thread/src/clock.c **** #else
  24:rt-thread/src/clock.c **** static rt_tick_t rt_tick = 0;
  25:rt-thread/src/clock.c **** #endif
  26:rt-thread/src/clock.c **** 
  27:rt-thread/src/clock.c **** /**
  28:rt-thread/src/clock.c ****  * This function will initialize system tick and set it to zero.
  29:rt-thread/src/clock.c ****  * @ingroup SystemInit
  30:rt-thread/src/clock.c ****  *
  31:rt-thread/src/clock.c ****  * @deprecated since 1.1.0, this function does not need to be invoked
ARM GAS  /tmp/ccAHKV9k.s 			page 2


  32:rt-thread/src/clock.c ****  * in the system initialization.
  33:rt-thread/src/clock.c ****  */
  34:rt-thread/src/clock.c **** void rt_system_tick_init(void)
  35:rt-thread/src/clock.c **** {
  28              		.loc 1 35 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE15:
  37              		.section	.text.rt_tick_get,"ax",%progbits
  38              		.align	1
  39              		.global	rt_tick_get
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	rt_tick_get:
  46              	.LFB16:
  36:rt-thread/src/clock.c **** }
  37:rt-thread/src/clock.c **** 
  38:rt-thread/src/clock.c **** /**
  39:rt-thread/src/clock.c ****  * @addtogroup Clock
  40:rt-thread/src/clock.c ****  */
  41:rt-thread/src/clock.c **** 
  42:rt-thread/src/clock.c **** /**@{*/
  43:rt-thread/src/clock.c **** 
  44:rt-thread/src/clock.c **** /**
  45:rt-thread/src/clock.c ****  * This function will return current tick from operating system startup
  46:rt-thread/src/clock.c ****  *
  47:rt-thread/src/clock.c ****  * @return current tick
  48:rt-thread/src/clock.c ****  */
  49:rt-thread/src/clock.c **** rt_tick_t rt_tick_get(void)
  50:rt-thread/src/clock.c **** {
  47              		.loc 1 50 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  51:rt-thread/src/clock.c ****     /* return the global tick */
  52:rt-thread/src/clock.c ****     return rt_tick;
  53:rt-thread/src/clock.c **** }
  52              		.loc 1 53 0
  53 0000 014B     		ldr	r3, .L3
  54 0002 1868     		ldr	r0, [r3]
  55 0004 7047     		bx	lr
  56              	.L4:
  57 0006 00BF     		.align	2
  58              	.L3:
  59 0008 00000000 		.word	.LANCHOR0
  60              		.cfi_endproc
  61              	.LFE16:
  63              		.section	.text.rt_tick_set,"ax",%progbits
  64              		.align	1
  65              		.global	rt_tick_set
ARM GAS  /tmp/ccAHKV9k.s 			page 3


  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	rt_tick_set:
  72              	.LFB17:
  54:rt-thread/src/clock.c **** RTM_EXPORT(rt_tick_get);
  55:rt-thread/src/clock.c **** 
  56:rt-thread/src/clock.c **** /**
  57:rt-thread/src/clock.c ****  * This function will set current tick
  58:rt-thread/src/clock.c ****  */
  59:rt-thread/src/clock.c **** void rt_tick_set(rt_tick_t tick)
  60:rt-thread/src/clock.c **** {
  73              		.loc 1 60 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL0:
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 0446     		mov	r4, r0
  61:rt-thread/src/clock.c ****     rt_base_t level;
  62:rt-thread/src/clock.c **** 
  63:rt-thread/src/clock.c ****     level = rt_hw_interrupt_disable();
  84              		.loc 1 63 0
  85 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
  86              	.LVL1:
  64:rt-thread/src/clock.c ****     rt_tick = tick;
  87              		.loc 1 64 0
  88 0008 024B     		ldr	r3, .L7
  89 000a 1C60     		str	r4, [r3]
  65:rt-thread/src/clock.c ****     rt_hw_interrupt_enable(level);
  90              		.loc 1 65 0
  91 000c FFF7FEFF 		bl	rt_hw_interrupt_enable
  92              	.LVL2:
  93 0010 10BD     		pop	{r4, pc}
  94              	.LVL3:
  95              	.L8:
  96 0012 00BF     		.align	2
  97              	.L7:
  98 0014 00000000 		.word	.LANCHOR0
  99              		.cfi_endproc
 100              	.LFE17:
 102              		.section	.text.rt_tick_increase,"ax",%progbits
 103              		.align	1
 104              		.global	rt_tick_increase
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	rt_tick_increase:
 111              	.LFB18:
  66:rt-thread/src/clock.c **** }
  67:rt-thread/src/clock.c **** 
ARM GAS  /tmp/ccAHKV9k.s 			page 4


  68:rt-thread/src/clock.c **** /**
  69:rt-thread/src/clock.c ****  * This function will notify kernel there is one tick passed. Normally,
  70:rt-thread/src/clock.c ****  * this function is invoked by clock ISR.
  71:rt-thread/src/clock.c ****  */
  72:rt-thread/src/clock.c **** void rt_tick_increase(void)
  73:rt-thread/src/clock.c **** {
 112              		.loc 1 73 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116 0000 08B5     		push	{r3, lr}
 117              	.LCFI1:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 3, -8
 120              		.cfi_offset 14, -4
  74:rt-thread/src/clock.c ****     struct rt_thread *thread;
  75:rt-thread/src/clock.c **** 
  76:rt-thread/src/clock.c ****     /* increase the global tick */
  77:rt-thread/src/clock.c **** #ifdef RT_USING_SMP
  78:rt-thread/src/clock.c ****     rt_cpu_self()->tick ++;
  79:rt-thread/src/clock.c **** #else
  80:rt-thread/src/clock.c ****     ++ rt_tick;
 121              		.loc 1 80 0
 122 0002 0C4A     		ldr	r2, .L13
 123 0004 1368     		ldr	r3, [r2]
 124 0006 0133     		adds	r3, r3, #1
 125 0008 1360     		str	r3, [r2]
  81:rt-thread/src/clock.c **** #endif
  82:rt-thread/src/clock.c **** 
  83:rt-thread/src/clock.c ****     /* check time slice */
  84:rt-thread/src/clock.c ****     thread = rt_thread_self();
 126              		.loc 1 84 0
 127 000a FFF7FEFF 		bl	rt_thread_self
 128              	.LVL4:
  85:rt-thread/src/clock.c **** 
  86:rt-thread/src/clock.c ****     -- thread->remaining_tick;
 129              		.loc 1 86 0
 130 000e 836C     		ldr	r3, [r0, #72]
 131 0010 013B     		subs	r3, r3, #1
 132 0012 8364     		str	r3, [r0, #72]
  87:rt-thread/src/clock.c ****     if (thread->remaining_tick == 0)
 133              		.loc 1 87 0
 134 0014 13B1     		cbz	r3, .L12
 135              	.LVL5:
 136              	.L10:
  88:rt-thread/src/clock.c ****     {
  89:rt-thread/src/clock.c ****         /* change to initialized tick */
  90:rt-thread/src/clock.c ****         thread->remaining_tick = thread->init_tick;
  91:rt-thread/src/clock.c **** 
  92:rt-thread/src/clock.c ****         thread->stat |= RT_THREAD_STAT_YIELD;
  93:rt-thread/src/clock.c **** 
  94:rt-thread/src/clock.c ****         /* yield */
  95:rt-thread/src/clock.c ****         rt_thread_yield();
  96:rt-thread/src/clock.c ****     }
  97:rt-thread/src/clock.c **** 
  98:rt-thread/src/clock.c ****     /* check timer */
  99:rt-thread/src/clock.c ****     rt_timer_check();
ARM GAS  /tmp/ccAHKV9k.s 			page 5


 137              		.loc 1 99 0
 138 0016 FFF7FEFF 		bl	rt_timer_check
 139              	.LVL6:
 140 001a 08BD     		pop	{r3, pc}
 141              	.LVL7:
 142              	.L12:
  90:rt-thread/src/clock.c **** 
 143              		.loc 1 90 0
 144 001c 436C     		ldr	r3, [r0, #68]
 145 001e 8364     		str	r3, [r0, #72]
  92:rt-thread/src/clock.c **** 
 146              		.loc 1 92 0
 147 0020 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 148 0024 43F00803 		orr	r3, r3, #8
 149 0028 80F83430 		strb	r3, [r0, #52]
  95:rt-thread/src/clock.c ****     }
 150              		.loc 1 95 0
 151 002c FFF7FEFF 		bl	rt_thread_yield
 152              	.LVL8:
 153 0030 F1E7     		b	.L10
 154              	.L14:
 155 0032 00BF     		.align	2
 156              	.L13:
 157 0034 00000000 		.word	.LANCHOR0
 158              		.cfi_endproc
 159              	.LFE18:
 161              		.section	.text.rt_tick_from_millisecond,"ax",%progbits
 162              		.align	1
 163              		.global	rt_tick_from_millisecond
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	rt_tick_from_millisecond:
 170              	.LFB19:
 100:rt-thread/src/clock.c **** }
 101:rt-thread/src/clock.c **** 
 102:rt-thread/src/clock.c **** /**
 103:rt-thread/src/clock.c ****  * This function will calculate the tick from millisecond.
 104:rt-thread/src/clock.c ****  *
 105:rt-thread/src/clock.c ****  * @param ms the specified millisecond
 106:rt-thread/src/clock.c ****  *           - Negative Number wait forever
 107:rt-thread/src/clock.c ****  *           - Zero not wait
 108:rt-thread/src/clock.c ****  *           - Max 0x7fffffff
 109:rt-thread/src/clock.c ****  *
 110:rt-thread/src/clock.c ****  * @return the calculated tick
 111:rt-thread/src/clock.c ****  */
 112:rt-thread/src/clock.c **** rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
 113:rt-thread/src/clock.c **** {
 171              		.loc 1 113 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176              	.LVL9:
 114:rt-thread/src/clock.c ****     rt_tick_t tick;
 115:rt-thread/src/clock.c **** 
ARM GAS  /tmp/ccAHKV9k.s 			page 6


 116:rt-thread/src/clock.c ****     if (ms < 0)
 177              		.loc 1 116 0
 178 0000 0028     		cmp	r0, #0
 179 0002 18DB     		blt	.L17
 113:rt-thread/src/clock.c ****     rt_tick_t tick;
 180              		.loc 1 113 0
 181 0004 10B4     		push	{r4}
 182              	.LCFI2:
 183              		.cfi_def_cfa_offset 4
 184              		.cfi_offset 4, -4
 117:rt-thread/src/clock.c ****     {
 118:rt-thread/src/clock.c ****         tick = (rt_tick_t)RT_WAITING_FOREVER;
 119:rt-thread/src/clock.c ****     }
 120:rt-thread/src/clock.c ****     else
 121:rt-thread/src/clock.c ****     {
 122:rt-thread/src/clock.c ****         tick = RT_TICK_PER_SECOND * (ms / 1000);
 185              		.loc 1 122 0
 186 0006 0D4C     		ldr	r4, .L22
 187 0008 84FB0032 		smull	r3, r2, r4, r0
 188 000c C317     		asrs	r3, r0, #31
 189 000e C3EBA213 		rsb	r3, r3, r2, asr #6
 190 0012 4FF47A72 		mov	r2, #1000
 191 0016 02FB03F1 		mul	r1, r2, r3
 192              	.LVL10:
 123:rt-thread/src/clock.c ****         tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
 193              		.loc 1 123 0
 194 001a 431A     		subs	r3, r0, r1
 195 001c 02FB03F2 		mul	r2, r2, r3
 196 0020 02F2E733 		addw	r3, r2, #999
 197 0024 84FB0324 		smull	r2, r4, r4, r3
 198 0028 DB17     		asrs	r3, r3, #31
 199 002a C3EBA413 		rsb	r3, r3, r4, asr #6
 200 002e C818     		adds	r0, r1, r3
 201              	.LVL11:
 124:rt-thread/src/clock.c ****     }
 125:rt-thread/src/clock.c ****     
 126:rt-thread/src/clock.c ****     /* return the calculated tick */
 127:rt-thread/src/clock.c ****     return tick;
 128:rt-thread/src/clock.c **** }
 202              		.loc 1 128 0
 203 0030 5DF8044B 		ldr	r4, [sp], #4
 204              	.LCFI3:
 205              		.cfi_restore 4
 206              		.cfi_def_cfa_offset 0
 207 0034 7047     		bx	lr
 208              	.LVL12:
 209              	.L17:
 118:rt-thread/src/clock.c ****     }
 210              		.loc 1 118 0
 211 0036 4FF0FF30 		mov	r0, #-1
 212              	.LVL13:
 127:rt-thread/src/clock.c **** }
 213              		.loc 1 127 0
 214 003a 7047     		bx	lr
 215              	.L23:
 216              		.align	2
 217              	.L22:
ARM GAS  /tmp/ccAHKV9k.s 			page 7


 218 003c D34D6210 		.word	274877907
 219              		.cfi_endproc
 220              	.LFE19:
 222              		.section	.bss.rt_tick,"aw",%nobits
 223              		.align	2
 224              		.set	.LANCHOR0,. + 0
 227              	rt_tick:
 228 0000 00000000 		.space	4
 229              		.text
 230              	.Letext0:
 231              		.file 2 "rt-thread/include/rtdef.h"
 232              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 233              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 234              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 235              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 236              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 237              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 238              		.file 9 "rt-thread/components/finsh/finsh_api.h"
 239              		.file 10 "rt-thread/include/rtthread.h"
 240              		.file 11 "rt-thread/include/rthw.h"
ARM GAS  /tmp/ccAHKV9k.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 clock.c
     /tmp/ccAHKV9k.s:18     .text.rt_system_tick_init:0000000000000000 $t
     /tmp/ccAHKV9k.s:25     .text.rt_system_tick_init:0000000000000000 rt_system_tick_init
     /tmp/ccAHKV9k.s:38     .text.rt_tick_get:0000000000000000 $t
     /tmp/ccAHKV9k.s:45     .text.rt_tick_get:0000000000000000 rt_tick_get
     /tmp/ccAHKV9k.s:59     .text.rt_tick_get:0000000000000008 $d
     /tmp/ccAHKV9k.s:64     .text.rt_tick_set:0000000000000000 $t
     /tmp/ccAHKV9k.s:71     .text.rt_tick_set:0000000000000000 rt_tick_set
     /tmp/ccAHKV9k.s:98     .text.rt_tick_set:0000000000000014 $d
     /tmp/ccAHKV9k.s:103    .text.rt_tick_increase:0000000000000000 $t
     /tmp/ccAHKV9k.s:110    .text.rt_tick_increase:0000000000000000 rt_tick_increase
     /tmp/ccAHKV9k.s:157    .text.rt_tick_increase:0000000000000034 $d
     /tmp/ccAHKV9k.s:162    .text.rt_tick_from_millisecond:0000000000000000 $t
     /tmp/ccAHKV9k.s:169    .text.rt_tick_from_millisecond:0000000000000000 rt_tick_from_millisecond
     /tmp/ccAHKV9k.s:218    .text.rt_tick_from_millisecond:000000000000003c $d
     /tmp/ccAHKV9k.s:223    .bss.rt_tick:0000000000000000 $d
     /tmp/ccAHKV9k.s:227    .bss.rt_tick:0000000000000000 rt_tick
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_thread_self
rt_timer_check
rt_thread_yield
