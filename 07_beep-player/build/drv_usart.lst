ARM GAS  /tmp/ccxjcN9T.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"drv_usart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.stm32_putc,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	stm32_putc:
  25              	.LFB140:
  26              		.file 1 "hardware/HAL_Drivers/drv_usart.c"
   1:hardware/HAL_Drivers/drv_usart.c **** /*
   2:hardware/HAL_Drivers/drv_usart.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:hardware/HAL_Drivers/drv_usart.c ****  *
   4:hardware/HAL_Drivers/drv_usart.c ****  * SPDX-License-Identifier: Apache-2.0
   5:hardware/HAL_Drivers/drv_usart.c ****  *
   6:hardware/HAL_Drivers/drv_usart.c ****  * Change Logs:
   7:hardware/HAL_Drivers/drv_usart.c ****  * Date           Author       Notes
   8:hardware/HAL_Drivers/drv_usart.c ****  * 2018-10-30     SummerGift   first version
   9:hardware/HAL_Drivers/drv_usart.c ****  */
  10:hardware/HAL_Drivers/drv_usart.c **** 
  11:hardware/HAL_Drivers/drv_usart.c **** #include "board.h"
  12:hardware/HAL_Drivers/drv_usart.c **** #include "drv_usart.h"
  13:hardware/HAL_Drivers/drv_usart.c **** #include "drv_config.h"
  14:hardware/HAL_Drivers/drv_usart.c **** 
  15:hardware/HAL_Drivers/drv_usart.c **** #ifdef RT_USING_SERIAL
  16:hardware/HAL_Drivers/drv_usart.c **** 
  17:hardware/HAL_Drivers/drv_usart.c **** //#define DRV_DEBUG
  18:hardware/HAL_Drivers/drv_usart.c **** #define LOG_TAG             "drv.usart"
  19:hardware/HAL_Drivers/drv_usart.c **** #include <drv_log.h>
  20:hardware/HAL_Drivers/drv_usart.c **** 
  21:hardware/HAL_Drivers/drv_usart.c **** #if !defined(BSP_USING_UART1) && !defined(BSP_USING_UART2) && !defined(BSP_USING_UART3) && \
  22:hardware/HAL_Drivers/drv_usart.c ****     !defined(BSP_USING_UART4) && !defined(BSP_USING_UART5) && !defined(BSP_USING_UART6) && \
  23:hardware/HAL_Drivers/drv_usart.c ****     !defined(BSP_USING_UART7) && !defined(BSP_USING_UART8) && !defined(BSP_USING_LPUART1)
  24:hardware/HAL_Drivers/drv_usart.c ****     #error "Please define at least one BSP_USING_UARTx"
  25:hardware/HAL_Drivers/drv_usart.c ****     /* this driver can be disabled at menuconfig -> RT-Thread Components -> Device Drivers */
  26:hardware/HAL_Drivers/drv_usart.c **** #endif
  27:hardware/HAL_Drivers/drv_usart.c **** 
  28:hardware/HAL_Drivers/drv_usart.c **** #ifdef RT_SERIAL_USING_DMA
  29:hardware/HAL_Drivers/drv_usart.c ****     static void stm32_dma_config(struct rt_serial_device *serial, rt_ubase_t flag);
  30:hardware/HAL_Drivers/drv_usart.c **** #endif
  31:hardware/HAL_Drivers/drv_usart.c **** 
  32:hardware/HAL_Drivers/drv_usart.c **** enum
ARM GAS  /tmp/ccxjcN9T.s 			page 2


  33:hardware/HAL_Drivers/drv_usart.c **** {
  34:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART1
  35:hardware/HAL_Drivers/drv_usart.c ****     UART1_INDEX,
  36:hardware/HAL_Drivers/drv_usart.c **** #endif
  37:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART2
  38:hardware/HAL_Drivers/drv_usart.c ****     UART2_INDEX,
  39:hardware/HAL_Drivers/drv_usart.c **** #endif
  40:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART3
  41:hardware/HAL_Drivers/drv_usart.c ****     UART3_INDEX,
  42:hardware/HAL_Drivers/drv_usart.c **** #endif
  43:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART4
  44:hardware/HAL_Drivers/drv_usart.c ****     UART4_INDEX,
  45:hardware/HAL_Drivers/drv_usart.c **** #endif
  46:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART5
  47:hardware/HAL_Drivers/drv_usart.c ****     UART5_INDEX,
  48:hardware/HAL_Drivers/drv_usart.c **** #endif
  49:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART6
  50:hardware/HAL_Drivers/drv_usart.c ****     UART6_INDEX,
  51:hardware/HAL_Drivers/drv_usart.c **** #endif
  52:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART7
  53:hardware/HAL_Drivers/drv_usart.c ****     UART7_INDEX,
  54:hardware/HAL_Drivers/drv_usart.c **** #endif
  55:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART8
  56:hardware/HAL_Drivers/drv_usart.c ****     UART8_INDEX,
  57:hardware/HAL_Drivers/drv_usart.c **** #endif
  58:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_LPUART1
  59:hardware/HAL_Drivers/drv_usart.c ****     LPUART1_INDEX,
  60:hardware/HAL_Drivers/drv_usart.c **** #endif
  61:hardware/HAL_Drivers/drv_usart.c **** };
  62:hardware/HAL_Drivers/drv_usart.c **** 
  63:hardware/HAL_Drivers/drv_usart.c **** static struct stm32_uart_config uart_config[] =
  64:hardware/HAL_Drivers/drv_usart.c **** {
  65:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART1
  66:hardware/HAL_Drivers/drv_usart.c ****     UART1_CONFIG,
  67:hardware/HAL_Drivers/drv_usart.c **** #endif
  68:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART2
  69:hardware/HAL_Drivers/drv_usart.c ****     UART2_CONFIG,
  70:hardware/HAL_Drivers/drv_usart.c **** #endif
  71:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART3
  72:hardware/HAL_Drivers/drv_usart.c ****     UART3_CONFIG,
  73:hardware/HAL_Drivers/drv_usart.c **** #endif
  74:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART4
  75:hardware/HAL_Drivers/drv_usart.c ****     UART4_CONFIG,
  76:hardware/HAL_Drivers/drv_usart.c **** #endif
  77:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART5
  78:hardware/HAL_Drivers/drv_usart.c ****     UART5_CONFIG,
  79:hardware/HAL_Drivers/drv_usart.c **** #endif
  80:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART6
  81:hardware/HAL_Drivers/drv_usart.c ****     UART6_CONFIG,
  82:hardware/HAL_Drivers/drv_usart.c **** #endif
  83:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART7
  84:hardware/HAL_Drivers/drv_usart.c ****     UART7_CONFIG,
  85:hardware/HAL_Drivers/drv_usart.c **** #endif
  86:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART8
  87:hardware/HAL_Drivers/drv_usart.c ****     UART8_CONFIG,
  88:hardware/HAL_Drivers/drv_usart.c **** #endif
  89:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_LPUART1
ARM GAS  /tmp/ccxjcN9T.s 			page 3


  90:hardware/HAL_Drivers/drv_usart.c ****     LPUART1_CONFIG,
  91:hardware/HAL_Drivers/drv_usart.c **** #endif
  92:hardware/HAL_Drivers/drv_usart.c **** };
  93:hardware/HAL_Drivers/drv_usart.c **** 
  94:hardware/HAL_Drivers/drv_usart.c **** static struct stm32_uart uart_obj[sizeof(uart_config) / sizeof(uart_config[0])] = {0};
  95:hardware/HAL_Drivers/drv_usart.c **** 
  96:hardware/HAL_Drivers/drv_usart.c **** static rt_err_t stm32_configure(struct rt_serial_device *serial, struct serial_configure *cfg)
  97:hardware/HAL_Drivers/drv_usart.c **** {
  98:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
  99:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(serial != RT_NULL);
 100:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(cfg != RT_NULL);
 101:hardware/HAL_Drivers/drv_usart.c **** 
 102:hardware/HAL_Drivers/drv_usart.c ****     uart = rt_container_of(serial, struct stm32_uart, serial);
 103:hardware/HAL_Drivers/drv_usart.c **** 
 104:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Instance          = uart->config->Instance;
 105:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Init.BaudRate     = cfg->baud_rate;
 106:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 107:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Init.Mode         = UART_MODE_TX_RX;
 108:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Init.OverSampling = UART_OVERSAMPLING_16;
 109:hardware/HAL_Drivers/drv_usart.c ****     switch (cfg->data_bits)
 110:hardware/HAL_Drivers/drv_usart.c ****     {
 111:hardware/HAL_Drivers/drv_usart.c ****     case DATA_BITS_8:
 112:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 113:hardware/HAL_Drivers/drv_usart.c ****         break;
 114:hardware/HAL_Drivers/drv_usart.c ****     case DATA_BITS_9:
 115:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.WordLength = UART_WORDLENGTH_9B;
 116:hardware/HAL_Drivers/drv_usart.c ****         break;
 117:hardware/HAL_Drivers/drv_usart.c ****     default:
 118:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 119:hardware/HAL_Drivers/drv_usart.c ****         break;
 120:hardware/HAL_Drivers/drv_usart.c ****     }
 121:hardware/HAL_Drivers/drv_usart.c ****     switch (cfg->stop_bits)
 122:hardware/HAL_Drivers/drv_usart.c ****     {
 123:hardware/HAL_Drivers/drv_usart.c ****     case STOP_BITS_1:
 124:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.StopBits   = UART_STOPBITS_1;
 125:hardware/HAL_Drivers/drv_usart.c ****         break;
 126:hardware/HAL_Drivers/drv_usart.c ****     case STOP_BITS_2:
 127:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.StopBits   = UART_STOPBITS_2;
 128:hardware/HAL_Drivers/drv_usart.c ****         break;
 129:hardware/HAL_Drivers/drv_usart.c ****     default:
 130:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.StopBits   = UART_STOPBITS_1;
 131:hardware/HAL_Drivers/drv_usart.c ****         break;
 132:hardware/HAL_Drivers/drv_usart.c ****     }
 133:hardware/HAL_Drivers/drv_usart.c ****     switch (cfg->parity)
 134:hardware/HAL_Drivers/drv_usart.c ****     {
 135:hardware/HAL_Drivers/drv_usart.c ****     case PARITY_NONE:
 136:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.Parity     = UART_PARITY_NONE;
 137:hardware/HAL_Drivers/drv_usart.c ****         break;
 138:hardware/HAL_Drivers/drv_usart.c ****     case PARITY_ODD:
 139:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.Parity     = UART_PARITY_ODD;
 140:hardware/HAL_Drivers/drv_usart.c ****         break;
 141:hardware/HAL_Drivers/drv_usart.c ****     case PARITY_EVEN:
 142:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.Parity     = UART_PARITY_EVEN;
 143:hardware/HAL_Drivers/drv_usart.c ****         break;
 144:hardware/HAL_Drivers/drv_usart.c ****     default:
 145:hardware/HAL_Drivers/drv_usart.c ****         uart->handle.Init.Parity     = UART_PARITY_NONE;
 146:hardware/HAL_Drivers/drv_usart.c ****         break;
ARM GAS  /tmp/ccxjcN9T.s 			page 4


 147:hardware/HAL_Drivers/drv_usart.c ****     }
 148:hardware/HAL_Drivers/drv_usart.c **** 
 149:hardware/HAL_Drivers/drv_usart.c ****     if (HAL_UART_Init(&uart->handle) != HAL_OK)
 150:hardware/HAL_Drivers/drv_usart.c ****     {
 151:hardware/HAL_Drivers/drv_usart.c ****         return -RT_ERROR;
 152:hardware/HAL_Drivers/drv_usart.c ****     }
 153:hardware/HAL_Drivers/drv_usart.c **** 
 154:hardware/HAL_Drivers/drv_usart.c ****     return RT_EOK;
 155:hardware/HAL_Drivers/drv_usart.c **** }
 156:hardware/HAL_Drivers/drv_usart.c **** 
 157:hardware/HAL_Drivers/drv_usart.c **** static rt_err_t stm32_control(struct rt_serial_device *serial, int cmd, void *arg)
 158:hardware/HAL_Drivers/drv_usart.c **** {
 159:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 160:hardware/HAL_Drivers/drv_usart.c **** #ifdef RT_SERIAL_USING_DMA
 161:hardware/HAL_Drivers/drv_usart.c ****     rt_ubase_t ctrl_arg = (rt_ubase_t)arg;
 162:hardware/HAL_Drivers/drv_usart.c **** #endif
 163:hardware/HAL_Drivers/drv_usart.c **** 
 164:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(serial != RT_NULL);
 165:hardware/HAL_Drivers/drv_usart.c ****     uart = rt_container_of(serial, struct stm32_uart, serial);
 166:hardware/HAL_Drivers/drv_usart.c **** 
 167:hardware/HAL_Drivers/drv_usart.c ****     switch (cmd)
 168:hardware/HAL_Drivers/drv_usart.c ****     {
 169:hardware/HAL_Drivers/drv_usart.c ****     /* disable interrupt */
 170:hardware/HAL_Drivers/drv_usart.c ****     case RT_DEVICE_CTRL_CLR_INT:
 171:hardware/HAL_Drivers/drv_usart.c ****         /* disable rx irq */
 172:hardware/HAL_Drivers/drv_usart.c ****         NVIC_DisableIRQ(uart->config->irq_type);
 173:hardware/HAL_Drivers/drv_usart.c ****         /* disable interrupt */
 174:hardware/HAL_Drivers/drv_usart.c ****         __HAL_UART_DISABLE_IT(&(uart->handle), UART_IT_RXNE);
 175:hardware/HAL_Drivers/drv_usart.c ****         break;
 176:hardware/HAL_Drivers/drv_usart.c ****     /* enable interrupt */
 177:hardware/HAL_Drivers/drv_usart.c ****     case RT_DEVICE_CTRL_SET_INT:
 178:hardware/HAL_Drivers/drv_usart.c ****         /* enable rx irq */
 179:hardware/HAL_Drivers/drv_usart.c ****         NVIC_EnableIRQ(uart->config->irq_type);
 180:hardware/HAL_Drivers/drv_usart.c ****         /* enable interrupt */
 181:hardware/HAL_Drivers/drv_usart.c ****         __HAL_UART_ENABLE_IT(&(uart->handle), UART_IT_RXNE);
 182:hardware/HAL_Drivers/drv_usart.c ****         break;
 183:hardware/HAL_Drivers/drv_usart.c **** 
 184:hardware/HAL_Drivers/drv_usart.c **** #ifdef RT_SERIAL_USING_DMA
 185:hardware/HAL_Drivers/drv_usart.c ****     case RT_DEVICE_CTRL_CONFIG:
 186:hardware/HAL_Drivers/drv_usart.c ****         stm32_dma_config(serial, ctrl_arg);
 187:hardware/HAL_Drivers/drv_usart.c ****         break;
 188:hardware/HAL_Drivers/drv_usart.c **** #endif
 189:hardware/HAL_Drivers/drv_usart.c ****     }
 190:hardware/HAL_Drivers/drv_usart.c ****     return RT_EOK;
 191:hardware/HAL_Drivers/drv_usart.c **** }
 192:hardware/HAL_Drivers/drv_usart.c **** 
 193:hardware/HAL_Drivers/drv_usart.c **** static int stm32_putc(struct rt_serial_device *serial, char c)
 194:hardware/HAL_Drivers/drv_usart.c **** {
  27              		.loc 1 194 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 10B4     		push	{r4}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccxjcN9T.s 			page 5


  36              		.cfi_offset 4, -4
  37              	.LVL1:
 195:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 196:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(serial != RT_NULL);
 197:hardware/HAL_Drivers/drv_usart.c **** 
 198:hardware/HAL_Drivers/drv_usart.c ****     uart = rt_container_of(serial, struct stm32_uart, serial);
 199:hardware/HAL_Drivers/drv_usart.c ****     UART_INSTANCE_CLEAR_FUNCTION(&(uart->handle), UART_FLAG_TC);
  38              		.loc 1 199 0
  39 0002 A0F58673 		sub	r3, r0, #268
  40              	.LVL2:
  41 0006 1A68     		ldr	r2, [r3]
  42 0008 6FF04004 		mvn	r4, #64
  43 000c 1460     		str	r4, [r2]
 200:hardware/HAL_Drivers/drv_usart.c **** #if defined(SOC_SERIES_STM32L4) || defined(SOC_SERIES_STM32F7) || defined(SOC_SERIES_STM32F0) \
 201:hardware/HAL_Drivers/drv_usart.c ****     || defined(SOC_SERIES_STM32L0) || defined(SOC_SERIES_STM32G0) || defined(SOC_SERIES_STM32H7) \
 202:hardware/HAL_Drivers/drv_usart.c ****     || defined(SOC_SERIES_STM32G4)
 203:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Instance->TDR = c;
 204:hardware/HAL_Drivers/drv_usart.c **** #else
 205:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Instance->DR = c;
  44              		.loc 1 205 0
  45 000e 1B68     		ldr	r3, [r3]
  46              	.LVL3:
  47 0010 5960     		str	r1, [r3, #4]
  48              	.L2:
 206:hardware/HAL_Drivers/drv_usart.c **** #endif
 207:hardware/HAL_Drivers/drv_usart.c ****     while (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_TC) == RESET);
  49              		.loc 1 207 0 discriminator 1
  50 0012 A0F58673 		sub	r3, r0, #268
  51 0016 1B68     		ldr	r3, [r3]
  52 0018 1B68     		ldr	r3, [r3]
  53 001a 13F0400F 		tst	r3, #64
  54 001e F8D0     		beq	.L2
 208:hardware/HAL_Drivers/drv_usart.c ****     return 1;
 209:hardware/HAL_Drivers/drv_usart.c **** }
  55              		.loc 1 209 0
  56 0020 0120     		movs	r0, #1
  57              	.LVL4:
  58 0022 5DF8044B 		ldr	r4, [sp], #4
  59              	.LCFI1:
  60              		.cfi_restore 4
  61              		.cfi_def_cfa_offset 0
  62 0026 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE140:
  66              		.section	.text.stm32_getc,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	stm32_getc:
  74              	.LFB141:
 210:hardware/HAL_Drivers/drv_usart.c **** 
 211:hardware/HAL_Drivers/drv_usart.c **** static int stm32_getc(struct rt_serial_device *serial)
 212:hardware/HAL_Drivers/drv_usart.c **** {
  75              		.loc 1 212 0
  76              		.cfi_startproc
ARM GAS  /tmp/ccxjcN9T.s 			page 6


  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80              	.LVL5:
 213:hardware/HAL_Drivers/drv_usart.c ****     int ch;
 214:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 215:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(serial != RT_NULL);
 216:hardware/HAL_Drivers/drv_usart.c ****     uart = rt_container_of(serial, struct stm32_uart, serial);
 217:hardware/HAL_Drivers/drv_usart.c **** 
 218:hardware/HAL_Drivers/drv_usart.c ****     ch = -1;
 219:hardware/HAL_Drivers/drv_usart.c ****     if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_RXNE) != RESET)
  81              		.loc 1 219 0
  82 0000 A0F58670 		sub	r0, r0, #268
  83              	.LVL6:
  84 0004 0368     		ldr	r3, [r0]
  85 0006 1A68     		ldr	r2, [r3]
  86 0008 12F0200F 		tst	r2, #32
  87 000c 02D0     		beq	.L6
 220:hardware/HAL_Drivers/drv_usart.c ****     {
 221:hardware/HAL_Drivers/drv_usart.c **** #if defined(SOC_SERIES_STM32L4) || defined(SOC_SERIES_STM32F7) || defined(SOC_SERIES_STM32F0) \
 222:hardware/HAL_Drivers/drv_usart.c ****     || defined(SOC_SERIES_STM32L0) || defined(SOC_SERIES_STM32G0) || defined(SOC_SERIES_STM32H7) \
 223:hardware/HAL_Drivers/drv_usart.c ****     || defined(SOC_SERIES_STM32G4)
 224:hardware/HAL_Drivers/drv_usart.c ****         ch = uart->handle.Instance->RDR & 0xff;
 225:hardware/HAL_Drivers/drv_usart.c **** #else
 226:hardware/HAL_Drivers/drv_usart.c ****         ch = uart->handle.Instance->DR & 0xff;
  88              		.loc 1 226 0
  89 000e 5868     		ldr	r0, [r3, #4]
  90              	.LVL7:
  91 0010 C0B2     		uxtb	r0, r0
  92              	.LVL8:
  93 0012 7047     		bx	lr
  94              	.LVL9:
  95              	.L6:
 218:hardware/HAL_Drivers/drv_usart.c ****     if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_RXNE) != RESET)
  96              		.loc 1 218 0
  97 0014 4FF0FF30 		mov	r0, #-1
  98              	.LVL10:
 227:hardware/HAL_Drivers/drv_usart.c **** #endif
 228:hardware/HAL_Drivers/drv_usart.c ****     }
 229:hardware/HAL_Drivers/drv_usart.c ****     return ch;
 230:hardware/HAL_Drivers/drv_usart.c **** }
  99              		.loc 1 230 0
 100 0018 7047     		bx	lr
 101              		.cfi_endproc
 102              	.LFE141:
 104              		.section	.text.stm32_uart_get_dma_config,"ax",%progbits
 105              		.align	1
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu fpv4-sp-d16
 111              	stm32_uart_get_dma_config:
 112              	.LFB151:
 231:hardware/HAL_Drivers/drv_usart.c **** 
 232:hardware/HAL_Drivers/drv_usart.c **** static rt_size_t stm32_dma_transmit(struct rt_serial_device *serial, rt_uint8_t *buf, rt_size_t siz
 233:hardware/HAL_Drivers/drv_usart.c **** {
 234:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
ARM GAS  /tmp/ccxjcN9T.s 			page 7


 235:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(serial != RT_NULL);
 236:hardware/HAL_Drivers/drv_usart.c ****     uart = rt_container_of(serial, struct stm32_uart, serial);
 237:hardware/HAL_Drivers/drv_usart.c ****     
 238:hardware/HAL_Drivers/drv_usart.c ****     if (size == 0)
 239:hardware/HAL_Drivers/drv_usart.c ****     {
 240:hardware/HAL_Drivers/drv_usart.c ****         return 0;
 241:hardware/HAL_Drivers/drv_usart.c ****     }
 242:hardware/HAL_Drivers/drv_usart.c ****     
 243:hardware/HAL_Drivers/drv_usart.c ****     if (RT_SERIAL_DMA_TX == direction)
 244:hardware/HAL_Drivers/drv_usart.c ****     {
 245:hardware/HAL_Drivers/drv_usart.c ****         if (HAL_UART_Transmit_DMA(&uart->handle, buf, size) == HAL_OK)
 246:hardware/HAL_Drivers/drv_usart.c ****         {
 247:hardware/HAL_Drivers/drv_usart.c ****             return size;
 248:hardware/HAL_Drivers/drv_usart.c ****         }
 249:hardware/HAL_Drivers/drv_usart.c ****         else
 250:hardware/HAL_Drivers/drv_usart.c ****         {
 251:hardware/HAL_Drivers/drv_usart.c ****             return 0;
 252:hardware/HAL_Drivers/drv_usart.c ****         }
 253:hardware/HAL_Drivers/drv_usart.c ****     }
 254:hardware/HAL_Drivers/drv_usart.c ****     return 0;
 255:hardware/HAL_Drivers/drv_usart.c **** }
 256:hardware/HAL_Drivers/drv_usart.c **** 
 257:hardware/HAL_Drivers/drv_usart.c **** static const struct rt_uart_ops stm32_uart_ops =
 258:hardware/HAL_Drivers/drv_usart.c **** {
 259:hardware/HAL_Drivers/drv_usart.c ****     .configure = stm32_configure,
 260:hardware/HAL_Drivers/drv_usart.c ****     .control = stm32_control,
 261:hardware/HAL_Drivers/drv_usart.c ****     .putc = stm32_putc,
 262:hardware/HAL_Drivers/drv_usart.c ****     .getc = stm32_getc,
 263:hardware/HAL_Drivers/drv_usart.c ****     .dma_transmit = stm32_dma_transmit
 264:hardware/HAL_Drivers/drv_usart.c **** };
 265:hardware/HAL_Drivers/drv_usart.c **** 
 266:hardware/HAL_Drivers/drv_usart.c **** /**
 267:hardware/HAL_Drivers/drv_usart.c ****  * Uart common interrupt process. This need add to uart ISR.
 268:hardware/HAL_Drivers/drv_usart.c ****  *
 269:hardware/HAL_Drivers/drv_usart.c ****  * @param serial serial device
 270:hardware/HAL_Drivers/drv_usart.c ****  */
 271:hardware/HAL_Drivers/drv_usart.c **** static void uart_isr(struct rt_serial_device *serial)
 272:hardware/HAL_Drivers/drv_usart.c **** {
 273:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 274:hardware/HAL_Drivers/drv_usart.c **** #ifdef RT_SERIAL_USING_DMA
 275:hardware/HAL_Drivers/drv_usart.c ****     rt_size_t recv_total_index, recv_len;
 276:hardware/HAL_Drivers/drv_usart.c ****     rt_base_t level;
 277:hardware/HAL_Drivers/drv_usart.c **** #endif
 278:hardware/HAL_Drivers/drv_usart.c **** 
 279:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(serial != RT_NULL);
 280:hardware/HAL_Drivers/drv_usart.c ****     uart = rt_container_of(serial, struct stm32_uart, serial);
 281:hardware/HAL_Drivers/drv_usart.c **** 
 282:hardware/HAL_Drivers/drv_usart.c ****     /* UART in mode Receiver -------------------------------------------------*/
 283:hardware/HAL_Drivers/drv_usart.c ****     if ((__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_RXNE) != RESET) &&
 284:hardware/HAL_Drivers/drv_usart.c ****             (__HAL_UART_GET_IT_SOURCE(&(uart->handle), UART_IT_RXNE) != RESET))
 285:hardware/HAL_Drivers/drv_usart.c ****     {
 286:hardware/HAL_Drivers/drv_usart.c ****         rt_hw_serial_isr(serial, RT_SERIAL_EVENT_RX_IND);
 287:hardware/HAL_Drivers/drv_usart.c ****     }
 288:hardware/HAL_Drivers/drv_usart.c **** #ifdef RT_SERIAL_USING_DMA
 289:hardware/HAL_Drivers/drv_usart.c ****     else if ((uart->uart_dma_flag) && (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_IDLE) != RESE
 290:hardware/HAL_Drivers/drv_usart.c ****              && (__HAL_UART_GET_IT_SOURCE(&(uart->handle), UART_IT_IDLE) != RESET))
 291:hardware/HAL_Drivers/drv_usart.c ****     {
ARM GAS  /tmp/ccxjcN9T.s 			page 8


 292:hardware/HAL_Drivers/drv_usart.c ****         level = rt_hw_interrupt_disable();
 293:hardware/HAL_Drivers/drv_usart.c ****         recv_total_index = serial->config.bufsz - __HAL_DMA_GET_COUNTER(&(uart->dma_rx.handle));
 294:hardware/HAL_Drivers/drv_usart.c ****         recv_len = recv_total_index - uart->dma_rx.last_index;
 295:hardware/HAL_Drivers/drv_usart.c ****         uart->dma_rx.last_index = recv_total_index;
 296:hardware/HAL_Drivers/drv_usart.c ****         rt_hw_interrupt_enable(level);
 297:hardware/HAL_Drivers/drv_usart.c **** 
 298:hardware/HAL_Drivers/drv_usart.c ****         if (recv_len)
 299:hardware/HAL_Drivers/drv_usart.c ****         {
 300:hardware/HAL_Drivers/drv_usart.c ****             rt_hw_serial_isr(serial, RT_SERIAL_EVENT_RX_DMADONE | (recv_len << 8));
 301:hardware/HAL_Drivers/drv_usart.c ****         }
 302:hardware/HAL_Drivers/drv_usart.c ****         __HAL_UART_CLEAR_IDLEFLAG(&uart->handle);
 303:hardware/HAL_Drivers/drv_usart.c ****     }
 304:hardware/HAL_Drivers/drv_usart.c ****     else if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_TC) != RESET)
 305:hardware/HAL_Drivers/drv_usart.c ****     {
 306:hardware/HAL_Drivers/drv_usart.c ****         if ((serial->parent.open_flag & RT_DEVICE_FLAG_DMA_TX) != 0)
 307:hardware/HAL_Drivers/drv_usart.c ****         {
 308:hardware/HAL_Drivers/drv_usart.c ****             HAL_UART_IRQHandler(&(uart->handle));
 309:hardware/HAL_Drivers/drv_usart.c ****         }
 310:hardware/HAL_Drivers/drv_usart.c ****         else
 311:hardware/HAL_Drivers/drv_usart.c ****         {
 312:hardware/HAL_Drivers/drv_usart.c ****             UART_INSTANCE_CLEAR_FUNCTION(&(uart->handle), UART_FLAG_TC);
 313:hardware/HAL_Drivers/drv_usart.c ****         }
 314:hardware/HAL_Drivers/drv_usart.c ****     }
 315:hardware/HAL_Drivers/drv_usart.c **** #endif
 316:hardware/HAL_Drivers/drv_usart.c ****     else
 317:hardware/HAL_Drivers/drv_usart.c ****     {
 318:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_ORE) != RESET)
 319:hardware/HAL_Drivers/drv_usart.c ****         {
 320:hardware/HAL_Drivers/drv_usart.c ****             __HAL_UART_CLEAR_OREFLAG(&uart->handle);
 321:hardware/HAL_Drivers/drv_usart.c ****         }
 322:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_NE) != RESET)
 323:hardware/HAL_Drivers/drv_usart.c ****         {
 324:hardware/HAL_Drivers/drv_usart.c ****             __HAL_UART_CLEAR_NEFLAG(&uart->handle);
 325:hardware/HAL_Drivers/drv_usart.c ****         }
 326:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_FE) != RESET)
 327:hardware/HAL_Drivers/drv_usart.c ****         {
 328:hardware/HAL_Drivers/drv_usart.c ****             __HAL_UART_CLEAR_FEFLAG(&uart->handle);
 329:hardware/HAL_Drivers/drv_usart.c ****         }
 330:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_PE) != RESET)
 331:hardware/HAL_Drivers/drv_usart.c ****         {
 332:hardware/HAL_Drivers/drv_usart.c ****             __HAL_UART_CLEAR_PEFLAG(&uart->handle);
 333:hardware/HAL_Drivers/drv_usart.c ****         }
 334:hardware/HAL_Drivers/drv_usart.c **** #if !defined(SOC_SERIES_STM32L4) && !defined(SOC_SERIES_STM32F7) && !defined(SOC_SERIES_STM32F0) \
 335:hardware/HAL_Drivers/drv_usart.c ****     && !defined(SOC_SERIES_STM32L0) && !defined(SOC_SERIES_STM32G0) && !defined(SOC_SERIES_STM32H7)
 336:hardware/HAL_Drivers/drv_usart.c ****     && !defined(SOC_SERIES_STM32G4)
 337:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_LBD) != RESET)
 338:hardware/HAL_Drivers/drv_usart.c ****         {
 339:hardware/HAL_Drivers/drv_usart.c ****             UART_INSTANCE_CLEAR_FUNCTION(&(uart->handle), UART_FLAG_LBD);
 340:hardware/HAL_Drivers/drv_usart.c ****         }
 341:hardware/HAL_Drivers/drv_usart.c **** #endif
 342:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_CTS) != RESET)
 343:hardware/HAL_Drivers/drv_usart.c ****         {
 344:hardware/HAL_Drivers/drv_usart.c ****             UART_INSTANCE_CLEAR_FUNCTION(&(uart->handle), UART_FLAG_CTS);
 345:hardware/HAL_Drivers/drv_usart.c ****         }
 346:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_TXE) != RESET)
 347:hardware/HAL_Drivers/drv_usart.c ****         {
 348:hardware/HAL_Drivers/drv_usart.c ****             UART_INSTANCE_CLEAR_FUNCTION(&(uart->handle), UART_FLAG_TXE);
ARM GAS  /tmp/ccxjcN9T.s 			page 9


 349:hardware/HAL_Drivers/drv_usart.c ****         }
 350:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_TC) != RESET)
 351:hardware/HAL_Drivers/drv_usart.c ****         {
 352:hardware/HAL_Drivers/drv_usart.c ****             UART_INSTANCE_CLEAR_FUNCTION(&(uart->handle), UART_FLAG_TC);
 353:hardware/HAL_Drivers/drv_usart.c ****         }
 354:hardware/HAL_Drivers/drv_usart.c ****         if (__HAL_UART_GET_FLAG(&(uart->handle), UART_FLAG_RXNE) != RESET)
 355:hardware/HAL_Drivers/drv_usart.c ****         {
 356:hardware/HAL_Drivers/drv_usart.c ****             UART_INSTANCE_CLEAR_FUNCTION(&(uart->handle), UART_FLAG_RXNE);
 357:hardware/HAL_Drivers/drv_usart.c ****         }
 358:hardware/HAL_Drivers/drv_usart.c ****     }
 359:hardware/HAL_Drivers/drv_usart.c **** }
 360:hardware/HAL_Drivers/drv_usart.c **** 
 361:hardware/HAL_Drivers/drv_usart.c **** #ifdef RT_SERIAL_USING_DMA
 362:hardware/HAL_Drivers/drv_usart.c **** static void dma_isr(struct rt_serial_device *serial)
 363:hardware/HAL_Drivers/drv_usart.c **** {
 364:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 365:hardware/HAL_Drivers/drv_usart.c ****     rt_size_t recv_total_index, recv_len;
 366:hardware/HAL_Drivers/drv_usart.c ****     rt_base_t level;
 367:hardware/HAL_Drivers/drv_usart.c **** 
 368:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(serial != RT_NULL);
 369:hardware/HAL_Drivers/drv_usart.c ****     uart = rt_container_of(serial, struct stm32_uart, serial);
 370:hardware/HAL_Drivers/drv_usart.c **** 
 371:hardware/HAL_Drivers/drv_usart.c ****     if ((__HAL_DMA_GET_IT_SOURCE(&(uart->dma_rx.handle), DMA_IT_TC) != RESET) ||
 372:hardware/HAL_Drivers/drv_usart.c ****             (__HAL_DMA_GET_IT_SOURCE(&(uart->dma_rx.handle), DMA_IT_HT) != RESET))
 373:hardware/HAL_Drivers/drv_usart.c ****     {
 374:hardware/HAL_Drivers/drv_usart.c ****         level = rt_hw_interrupt_disable();
 375:hardware/HAL_Drivers/drv_usart.c ****         recv_total_index = serial->config.bufsz - __HAL_DMA_GET_COUNTER(&(uart->dma_rx.handle));
 376:hardware/HAL_Drivers/drv_usart.c ****         if (recv_total_index == 0)
 377:hardware/HAL_Drivers/drv_usart.c ****         {
 378:hardware/HAL_Drivers/drv_usart.c ****             recv_len = serial->config.bufsz - uart->dma_rx.last_index;
 379:hardware/HAL_Drivers/drv_usart.c ****         }
 380:hardware/HAL_Drivers/drv_usart.c ****         else
 381:hardware/HAL_Drivers/drv_usart.c ****         {
 382:hardware/HAL_Drivers/drv_usart.c ****             recv_len = recv_total_index - uart->dma_rx.last_index;
 383:hardware/HAL_Drivers/drv_usart.c ****         }
 384:hardware/HAL_Drivers/drv_usart.c ****         uart->dma_rx.last_index = recv_total_index;
 385:hardware/HAL_Drivers/drv_usart.c ****         rt_hw_interrupt_enable(level);
 386:hardware/HAL_Drivers/drv_usart.c **** 
 387:hardware/HAL_Drivers/drv_usart.c ****         if (recv_len)
 388:hardware/HAL_Drivers/drv_usart.c ****         {
 389:hardware/HAL_Drivers/drv_usart.c ****             rt_hw_serial_isr(serial, RT_SERIAL_EVENT_RX_DMADONE | (recv_len << 8));
 390:hardware/HAL_Drivers/drv_usart.c ****         }
 391:hardware/HAL_Drivers/drv_usart.c ****     }
 392:hardware/HAL_Drivers/drv_usart.c **** }
 393:hardware/HAL_Drivers/drv_usart.c **** #endif
 394:hardware/HAL_Drivers/drv_usart.c **** 
 395:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_UART1)
 396:hardware/HAL_Drivers/drv_usart.c **** void USART1_IRQHandler(void)
 397:hardware/HAL_Drivers/drv_usart.c **** {
 398:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 399:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 400:hardware/HAL_Drivers/drv_usart.c **** 
 401:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[UART1_INDEX].serial));
 402:hardware/HAL_Drivers/drv_usart.c **** 
 403:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 404:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 405:hardware/HAL_Drivers/drv_usart.c **** }
ARM GAS  /tmp/ccxjcN9T.s 			page 10


 406:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART1_RX_USING_DMA)
 407:hardware/HAL_Drivers/drv_usart.c **** void UART1_DMA_RX_IRQHandler(void)
 408:hardware/HAL_Drivers/drv_usart.c **** {
 409:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 410:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 411:hardware/HAL_Drivers/drv_usart.c **** 
 412:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART1_INDEX].dma_rx.handle);
 413:hardware/HAL_Drivers/drv_usart.c **** 
 414:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 415:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 416:hardware/HAL_Drivers/drv_usart.c **** }
 417:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART1_RX_USING_DMA) */
 418:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART1_TX_USING_DMA)
 419:hardware/HAL_Drivers/drv_usart.c **** void UART1_DMA_TX_IRQHandler(void)
 420:hardware/HAL_Drivers/drv_usart.c **** {
 421:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 422:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 423:hardware/HAL_Drivers/drv_usart.c **** 
 424:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART1_INDEX].dma_tx.handle);
 425:hardware/HAL_Drivers/drv_usart.c **** 
 426:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 427:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 428:hardware/HAL_Drivers/drv_usart.c **** }
 429:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART1_TX_USING_DMA) */
 430:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_UART1 */
 431:hardware/HAL_Drivers/drv_usart.c **** 
 432:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_UART2)
 433:hardware/HAL_Drivers/drv_usart.c **** void USART2_IRQHandler(void)
 434:hardware/HAL_Drivers/drv_usart.c **** {
 435:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 436:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 437:hardware/HAL_Drivers/drv_usart.c **** 
 438:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[UART2_INDEX].serial));
 439:hardware/HAL_Drivers/drv_usart.c **** 
 440:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 441:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 442:hardware/HAL_Drivers/drv_usart.c **** }
 443:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART2_RX_USING_DMA)
 444:hardware/HAL_Drivers/drv_usart.c **** void UART2_DMA_RX_IRQHandler(void)
 445:hardware/HAL_Drivers/drv_usart.c **** {
 446:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 447:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 448:hardware/HAL_Drivers/drv_usart.c **** 
 449:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART2_INDEX].dma_rx.handle);
 450:hardware/HAL_Drivers/drv_usart.c **** 
 451:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 452:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 453:hardware/HAL_Drivers/drv_usart.c **** }
 454:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART2_RX_USING_DMA) */
 455:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART2_TX_USING_DMA)
 456:hardware/HAL_Drivers/drv_usart.c **** void UART2_DMA_TX_IRQHandler(void)
 457:hardware/HAL_Drivers/drv_usart.c **** {
 458:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 459:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 460:hardware/HAL_Drivers/drv_usart.c **** 
 461:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART2_INDEX].dma_tx.handle);
 462:hardware/HAL_Drivers/drv_usart.c **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 11


 463:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 464:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 465:hardware/HAL_Drivers/drv_usart.c **** }
 466:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART2_TX_USING_DMA) */
 467:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_UART2 */
 468:hardware/HAL_Drivers/drv_usart.c **** 
 469:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_UART3)
 470:hardware/HAL_Drivers/drv_usart.c **** void USART3_IRQHandler(void)
 471:hardware/HAL_Drivers/drv_usart.c **** {
 472:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 473:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 474:hardware/HAL_Drivers/drv_usart.c **** 
 475:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[UART3_INDEX].serial));
 476:hardware/HAL_Drivers/drv_usart.c **** 
 477:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 478:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 479:hardware/HAL_Drivers/drv_usart.c **** }
 480:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART3_RX_USING_DMA)
 481:hardware/HAL_Drivers/drv_usart.c **** void UART3_DMA_RX_IRQHandler(void)
 482:hardware/HAL_Drivers/drv_usart.c **** {
 483:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 484:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 485:hardware/HAL_Drivers/drv_usart.c **** 
 486:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART3_INDEX].dma_rx.handle);
 487:hardware/HAL_Drivers/drv_usart.c **** 
 488:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 489:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 490:hardware/HAL_Drivers/drv_usart.c **** }
 491:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(BSP_UART_USING_DMA_RX) && defined(BSP_UART3_RX_USING_DMA) */
 492:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART3_TX_USING_DMA)
 493:hardware/HAL_Drivers/drv_usart.c **** void UART3_DMA_TX_IRQHandler(void)
 494:hardware/HAL_Drivers/drv_usart.c **** {
 495:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 496:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 497:hardware/HAL_Drivers/drv_usart.c **** 
 498:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART3_INDEX].dma_tx.handle);
 499:hardware/HAL_Drivers/drv_usart.c **** 
 500:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 501:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 502:hardware/HAL_Drivers/drv_usart.c **** }
 503:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(BSP_UART_USING_DMA_TX) && defined(BSP_UART3_TX_USING_DMA) */
 504:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_UART3*/
 505:hardware/HAL_Drivers/drv_usart.c **** 
 506:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_UART4)
 507:hardware/HAL_Drivers/drv_usart.c **** void UART4_IRQHandler(void)
 508:hardware/HAL_Drivers/drv_usart.c **** {
 509:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 510:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 511:hardware/HAL_Drivers/drv_usart.c **** 
 512:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[UART4_INDEX].serial));
 513:hardware/HAL_Drivers/drv_usart.c **** 
 514:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 515:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 516:hardware/HAL_Drivers/drv_usart.c **** }
 517:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART4_RX_USING_DMA)
 518:hardware/HAL_Drivers/drv_usart.c **** void UART4_DMA_RX_IRQHandler(void)
 519:hardware/HAL_Drivers/drv_usart.c **** {
ARM GAS  /tmp/ccxjcN9T.s 			page 12


 520:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 521:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 522:hardware/HAL_Drivers/drv_usart.c **** 
 523:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART4_INDEX].dma_rx.handle);
 524:hardware/HAL_Drivers/drv_usart.c **** 
 525:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 526:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 527:hardware/HAL_Drivers/drv_usart.c **** }
 528:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(BSP_UART_USING_DMA_RX) && defined(BSP_UART4_RX_USING_DMA) */
 529:hardware/HAL_Drivers/drv_usart.c **** 
 530:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART4_TX_USING_DMA)
 531:hardware/HAL_Drivers/drv_usart.c **** void UART4_DMA_TX_IRQHandler(void)
 532:hardware/HAL_Drivers/drv_usart.c **** {
 533:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 534:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 535:hardware/HAL_Drivers/drv_usart.c **** 
 536:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART4_INDEX].dma_tx.handle);
 537:hardware/HAL_Drivers/drv_usart.c **** 
 538:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 539:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 540:hardware/HAL_Drivers/drv_usart.c **** }
 541:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(BSP_UART_USING_DMA_TX) && defined(BSP_UART4_TX_USING_DMA) */
 542:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_UART4*/
 543:hardware/HAL_Drivers/drv_usart.c **** 
 544:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_UART5)
 545:hardware/HAL_Drivers/drv_usart.c **** void UART5_IRQHandler(void)
 546:hardware/HAL_Drivers/drv_usart.c **** {
 547:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 548:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 549:hardware/HAL_Drivers/drv_usart.c **** 
 550:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[UART5_INDEX].serial));
 551:hardware/HAL_Drivers/drv_usart.c **** 
 552:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 553:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 554:hardware/HAL_Drivers/drv_usart.c **** }
 555:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART5_RX_USING_DMA)
 556:hardware/HAL_Drivers/drv_usart.c **** void UART5_DMA_RX_IRQHandler(void)
 557:hardware/HAL_Drivers/drv_usart.c **** {
 558:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 559:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 560:hardware/HAL_Drivers/drv_usart.c **** 
 561:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART5_INDEX].dma_rx.handle);
 562:hardware/HAL_Drivers/drv_usart.c **** 
 563:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 564:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 565:hardware/HAL_Drivers/drv_usart.c **** }
 566:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART5_RX_USING_DMA) */
 567:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART5_TX_USING_DMA)
 568:hardware/HAL_Drivers/drv_usart.c **** void UART5_DMA_TX_IRQHandler(void)
 569:hardware/HAL_Drivers/drv_usart.c **** {
 570:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 571:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 572:hardware/HAL_Drivers/drv_usart.c **** 
 573:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART5_INDEX].dma_tx.handle);
 574:hardware/HAL_Drivers/drv_usart.c **** 
 575:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 576:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
ARM GAS  /tmp/ccxjcN9T.s 			page 13


 577:hardware/HAL_Drivers/drv_usart.c **** }
 578:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART5_TX_USING_DMA) */
 579:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_UART5*/
 580:hardware/HAL_Drivers/drv_usart.c **** 
 581:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_UART6)
 582:hardware/HAL_Drivers/drv_usart.c **** void USART6_IRQHandler(void)
 583:hardware/HAL_Drivers/drv_usart.c **** {
 584:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 585:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 586:hardware/HAL_Drivers/drv_usart.c **** 
 587:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[UART6_INDEX].serial));
 588:hardware/HAL_Drivers/drv_usart.c **** 
 589:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 590:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 591:hardware/HAL_Drivers/drv_usart.c **** }
 592:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART6_RX_USING_DMA)
 593:hardware/HAL_Drivers/drv_usart.c **** void UART6_DMA_RX_IRQHandler(void)
 594:hardware/HAL_Drivers/drv_usart.c **** {
 595:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 596:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 597:hardware/HAL_Drivers/drv_usart.c **** 
 598:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART6_INDEX].dma_rx.handle);
 599:hardware/HAL_Drivers/drv_usart.c **** 
 600:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 601:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 602:hardware/HAL_Drivers/drv_usart.c **** }
 603:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART6_RX_USING_DMA) */
 604:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART6_TX_USING_DMA)
 605:hardware/HAL_Drivers/drv_usart.c **** void UART6_DMA_TX_IRQHandler(void)
 606:hardware/HAL_Drivers/drv_usart.c **** {
 607:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 608:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 609:hardware/HAL_Drivers/drv_usart.c **** 
 610:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART6_INDEX].dma_tx.handle);
 611:hardware/HAL_Drivers/drv_usart.c **** 
 612:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 613:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 614:hardware/HAL_Drivers/drv_usart.c **** }
 615:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART6_TX_USING_DMA) */
 616:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_UART6*/
 617:hardware/HAL_Drivers/drv_usart.c **** 
 618:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_UART7)
 619:hardware/HAL_Drivers/drv_usart.c **** void UART7_IRQHandler(void)
 620:hardware/HAL_Drivers/drv_usart.c **** {
 621:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 622:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 623:hardware/HAL_Drivers/drv_usart.c **** 
 624:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[UART7_INDEX].serial));
 625:hardware/HAL_Drivers/drv_usart.c **** 
 626:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 627:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 628:hardware/HAL_Drivers/drv_usart.c **** }
 629:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART7_RX_USING_DMA)
 630:hardware/HAL_Drivers/drv_usart.c **** void UART7_DMA_RX_IRQHandler(void)
 631:hardware/HAL_Drivers/drv_usart.c **** {
 632:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 633:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
ARM GAS  /tmp/ccxjcN9T.s 			page 14


 634:hardware/HAL_Drivers/drv_usart.c **** 
 635:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART7_INDEX].dma_rx.handle);
 636:hardware/HAL_Drivers/drv_usart.c **** 
 637:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 638:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 639:hardware/HAL_Drivers/drv_usart.c **** }
 640:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART7_RX_USING_DMA) */
 641:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART7_TX_USING_DMA)
 642:hardware/HAL_Drivers/drv_usart.c **** void UART7_DMA_TX_IRQHandler(void)
 643:hardware/HAL_Drivers/drv_usart.c **** {
 644:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 645:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 646:hardware/HAL_Drivers/drv_usart.c **** 
 647:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART7_INDEX].dma_tx.handle);
 648:hardware/HAL_Drivers/drv_usart.c **** 
 649:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 650:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 651:hardware/HAL_Drivers/drv_usart.c **** }
 652:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART7_TX_USING_DMA) */
 653:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_UART7*/
 654:hardware/HAL_Drivers/drv_usart.c **** 
 655:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_UART8)
 656:hardware/HAL_Drivers/drv_usart.c **** void UART8_IRQHandler(void)
 657:hardware/HAL_Drivers/drv_usart.c **** {
 658:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 659:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 660:hardware/HAL_Drivers/drv_usart.c **** 
 661:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[UART8_INDEX].serial));
 662:hardware/HAL_Drivers/drv_usart.c **** 
 663:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 664:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 665:hardware/HAL_Drivers/drv_usart.c **** }
 666:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART8_RX_USING_DMA)
 667:hardware/HAL_Drivers/drv_usart.c **** void UART8_DMA_RX_IRQHandler(void)
 668:hardware/HAL_Drivers/drv_usart.c **** {
 669:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 670:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 671:hardware/HAL_Drivers/drv_usart.c **** 
 672:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART8_INDEX].dma_rx.handle);
 673:hardware/HAL_Drivers/drv_usart.c **** 
 674:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 675:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 676:hardware/HAL_Drivers/drv_usart.c **** }
 677:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART8_RX_USING_DMA) */
 678:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_UART8_TX_USING_DMA)
 679:hardware/HAL_Drivers/drv_usart.c **** void UART8_DMA_TX_IRQHandler(void)
 680:hardware/HAL_Drivers/drv_usart.c **** {
 681:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 682:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 683:hardware/HAL_Drivers/drv_usart.c **** 
 684:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[UART8_INDEX].dma_tx.handle);
 685:hardware/HAL_Drivers/drv_usart.c **** 
 686:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 687:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 688:hardware/HAL_Drivers/drv_usart.c **** }
 689:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_UART8_TX_USING_DMA) */
 690:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_UART8*/
ARM GAS  /tmp/ccxjcN9T.s 			page 15


 691:hardware/HAL_Drivers/drv_usart.c **** 
 692:hardware/HAL_Drivers/drv_usart.c **** #if defined(BSP_USING_LPUART1)
 693:hardware/HAL_Drivers/drv_usart.c **** void LPUART1_IRQHandler(void)
 694:hardware/HAL_Drivers/drv_usart.c **** {
 695:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 696:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 697:hardware/HAL_Drivers/drv_usart.c **** 
 698:hardware/HAL_Drivers/drv_usart.c ****     uart_isr(&(uart_obj[LPUART1_INDEX].serial));
 699:hardware/HAL_Drivers/drv_usart.c **** 
 700:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 701:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 702:hardware/HAL_Drivers/drv_usart.c **** }
 703:hardware/HAL_Drivers/drv_usart.c **** #if defined(RT_SERIAL_USING_DMA) && defined(BSP_LPUART1_RX_USING_DMA)
 704:hardware/HAL_Drivers/drv_usart.c **** void LPUART1_DMA_RX_IRQHandler(void)
 705:hardware/HAL_Drivers/drv_usart.c **** {
 706:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 707:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_enter();
 708:hardware/HAL_Drivers/drv_usart.c **** 
 709:hardware/HAL_Drivers/drv_usart.c ****     HAL_DMA_IRQHandler(&uart_obj[LPUART1_INDEX].dma_rx.handle);
 710:hardware/HAL_Drivers/drv_usart.c **** 
 711:hardware/HAL_Drivers/drv_usart.c ****     /* leave interrupt */
 712:hardware/HAL_Drivers/drv_usart.c ****     rt_interrupt_leave();
 713:hardware/HAL_Drivers/drv_usart.c **** }
 714:hardware/HAL_Drivers/drv_usart.c **** #endif /* defined(RT_SERIAL_USING_DMA) && defined(BSP_LPUART1_RX_USING_DMA) */
 715:hardware/HAL_Drivers/drv_usart.c **** #endif /* BSP_USING_LPUART1*/
 716:hardware/HAL_Drivers/drv_usart.c **** 
 717:hardware/HAL_Drivers/drv_usart.c **** #ifdef RT_SERIAL_USING_DMA
 718:hardware/HAL_Drivers/drv_usart.c **** static void stm32_dma_config(struct rt_serial_device *serial, rt_ubase_t flag)
 719:hardware/HAL_Drivers/drv_usart.c **** {
 720:hardware/HAL_Drivers/drv_usart.c ****     struct rt_serial_rx_fifo *rx_fifo;
 721:hardware/HAL_Drivers/drv_usart.c ****     DMA_HandleTypeDef *DMA_Handle;
 722:hardware/HAL_Drivers/drv_usart.c ****     struct dma_config *dma_config;
 723:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 724:hardware/HAL_Drivers/drv_usart.c ****     
 725:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(serial != RT_NULL);
 726:hardware/HAL_Drivers/drv_usart.c ****     uart = rt_container_of(serial, struct stm32_uart, serial);
 727:hardware/HAL_Drivers/drv_usart.c **** 
 728:hardware/HAL_Drivers/drv_usart.c ****     if (RT_DEVICE_FLAG_DMA_RX == flag)
 729:hardware/HAL_Drivers/drv_usart.c ****     {
 730:hardware/HAL_Drivers/drv_usart.c ****         DMA_Handle = &uart->dma_rx.handle;
 731:hardware/HAL_Drivers/drv_usart.c ****         dma_config = uart->config->dma_rx;
 732:hardware/HAL_Drivers/drv_usart.c ****     }
 733:hardware/HAL_Drivers/drv_usart.c ****     else if (RT_DEVICE_FLAG_DMA_TX == flag)
 734:hardware/HAL_Drivers/drv_usart.c ****     {
 735:hardware/HAL_Drivers/drv_usart.c ****         DMA_Handle = &uart->dma_tx.handle;
 736:hardware/HAL_Drivers/drv_usart.c ****         dma_config = uart->config->dma_tx;
 737:hardware/HAL_Drivers/drv_usart.c ****     }
 738:hardware/HAL_Drivers/drv_usart.c ****     LOG_D("%s dma config start", uart->config->name);
 739:hardware/HAL_Drivers/drv_usart.c **** 
 740:hardware/HAL_Drivers/drv_usart.c ****     {
 741:hardware/HAL_Drivers/drv_usart.c ****         rt_uint32_t tmpreg = 0x00U;
 742:hardware/HAL_Drivers/drv_usart.c **** #if defined(SOC_SERIES_STM32F1) || defined(SOC_SERIES_STM32F0) || defined(SOC_SERIES_STM32G0) \
 743:hardware/HAL_Drivers/drv_usart.c ****     || defined(SOC_SERIES_STM32L0)
 744:hardware/HAL_Drivers/drv_usart.c ****         /* enable DMA clock && Delay after an RCC peripheral clock enabling*/
 745:hardware/HAL_Drivers/drv_usart.c ****         SET_BIT(RCC->AHBENR, dma_config->dma_rcc);
 746:hardware/HAL_Drivers/drv_usart.c ****         tmpreg = READ_BIT(RCC->AHBENR, dma_config->dma_rcc);
 747:hardware/HAL_Drivers/drv_usart.c **** #elif defined(SOC_SERIES_STM32F4) || defined(SOC_SERIES_STM32F7) || defined(SOC_SERIES_STM32L4) \
ARM GAS  /tmp/ccxjcN9T.s 			page 16


 748:hardware/HAL_Drivers/drv_usart.c ****     || defined(SOC_SERIES_STM32G4)
 749:hardware/HAL_Drivers/drv_usart.c ****         /* enable DMA clock && Delay after an RCC peripheral clock enabling*/
 750:hardware/HAL_Drivers/drv_usart.c ****         SET_BIT(RCC->AHB1ENR, dma_config->dma_rcc);
 751:hardware/HAL_Drivers/drv_usart.c ****         tmpreg = READ_BIT(RCC->AHB1ENR, dma_config->dma_rcc);
 752:hardware/HAL_Drivers/drv_usart.c **** 
 753:hardware/HAL_Drivers/drv_usart.c **** #if (defined(SOC_SERIES_STM32L4) || defined(SOC_SERIES_STM32G4)) && defined(DMAMUX1)
 754:hardware/HAL_Drivers/drv_usart.c ****         /* enable DMAMUX clock for L4+ and G4 */
 755:hardware/HAL_Drivers/drv_usart.c ****         __HAL_RCC_DMAMUX1_CLK_ENABLE();
 756:hardware/HAL_Drivers/drv_usart.c **** #endif
 757:hardware/HAL_Drivers/drv_usart.c **** 
 758:hardware/HAL_Drivers/drv_usart.c **** #endif
 759:hardware/HAL_Drivers/drv_usart.c ****         UNUSED(tmpreg);   /* To avoid compiler warnings */
 760:hardware/HAL_Drivers/drv_usart.c ****     }
 761:hardware/HAL_Drivers/drv_usart.c **** 
 762:hardware/HAL_Drivers/drv_usart.c ****     if (RT_DEVICE_FLAG_DMA_RX == flag)
 763:hardware/HAL_Drivers/drv_usart.c ****     {
 764:hardware/HAL_Drivers/drv_usart.c ****         __HAL_LINKDMA(&(uart->handle), hdmarx, uart->dma_rx.handle);
 765:hardware/HAL_Drivers/drv_usart.c ****     }
 766:hardware/HAL_Drivers/drv_usart.c ****     else if (RT_DEVICE_FLAG_DMA_TX == flag)
 767:hardware/HAL_Drivers/drv_usart.c ****     {
 768:hardware/HAL_Drivers/drv_usart.c ****         __HAL_LINKDMA(&(uart->handle), hdmatx, uart->dma_tx.handle);
 769:hardware/HAL_Drivers/drv_usart.c ****     }
 770:hardware/HAL_Drivers/drv_usart.c **** 
 771:hardware/HAL_Drivers/drv_usart.c **** #if defined(SOC_SERIES_STM32F1) || defined(SOC_SERIES_STM32F0) || defined(SOC_SERIES_STM32L0)
 772:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Instance                 = dma_config->Instance;
 773:hardware/HAL_Drivers/drv_usart.c **** #elif defined(SOC_SERIES_STM32F4) || defined(SOC_SERIES_STM32F7)
 774:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Instance                 = dma_config->Instance;
 775:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.Channel             = dma_config->channel;
 776:hardware/HAL_Drivers/drv_usart.c **** #elif defined(SOC_SERIES_STM32L4) || defined(SOC_SERIES_STM32G0) || defined(SOC_SERIES_STM32G4)
 777:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Instance                 = dma_config->Instance;
 778:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.Request             = dma_config->request;
 779:hardware/HAL_Drivers/drv_usart.c **** #endif
 780:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.PeriphInc           = DMA_PINC_DISABLE;
 781:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.MemInc              = DMA_MINC_ENABLE;
 782:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 783:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 784:hardware/HAL_Drivers/drv_usart.c ****     
 785:hardware/HAL_Drivers/drv_usart.c ****     if (RT_DEVICE_FLAG_DMA_RX == flag)
 786:hardware/HAL_Drivers/drv_usart.c ****     {
 787:hardware/HAL_Drivers/drv_usart.c ****         DMA_Handle->Init.Direction           = DMA_PERIPH_TO_MEMORY;
 788:hardware/HAL_Drivers/drv_usart.c ****         DMA_Handle->Init.Mode                = DMA_CIRCULAR;
 789:hardware/HAL_Drivers/drv_usart.c ****     }
 790:hardware/HAL_Drivers/drv_usart.c ****     else if (RT_DEVICE_FLAG_DMA_TX == flag)
 791:hardware/HAL_Drivers/drv_usart.c ****     {
 792:hardware/HAL_Drivers/drv_usart.c ****         DMA_Handle->Init.Direction           = DMA_MEMORY_TO_PERIPH;
 793:hardware/HAL_Drivers/drv_usart.c ****         DMA_Handle->Init.Mode                = DMA_NORMAL;
 794:hardware/HAL_Drivers/drv_usart.c ****     }
 795:hardware/HAL_Drivers/drv_usart.c ****     
 796:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.Priority            = DMA_PRIORITY_MEDIUM;
 797:hardware/HAL_Drivers/drv_usart.c **** #if defined(SOC_SERIES_STM32F4) || defined(SOC_SERIES_STM32F7)
 798:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 799:hardware/HAL_Drivers/drv_usart.c **** #endif
 800:hardware/HAL_Drivers/drv_usart.c ****     if (HAL_DMA_DeInit(DMA_Handle) != HAL_OK)
 801:hardware/HAL_Drivers/drv_usart.c ****     {
 802:hardware/HAL_Drivers/drv_usart.c ****         RT_ASSERT(0);
 803:hardware/HAL_Drivers/drv_usart.c ****     }
 804:hardware/HAL_Drivers/drv_usart.c **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 17


 805:hardware/HAL_Drivers/drv_usart.c ****     if (HAL_DMA_Init(DMA_Handle) != HAL_OK)
 806:hardware/HAL_Drivers/drv_usart.c ****     {
 807:hardware/HAL_Drivers/drv_usart.c ****         RT_ASSERT(0);
 808:hardware/HAL_Drivers/drv_usart.c ****     }
 809:hardware/HAL_Drivers/drv_usart.c **** 
 810:hardware/HAL_Drivers/drv_usart.c ****     /* enable interrupt */
 811:hardware/HAL_Drivers/drv_usart.c ****     if (flag == RT_DEVICE_FLAG_DMA_RX)
 812:hardware/HAL_Drivers/drv_usart.c ****     {
 813:hardware/HAL_Drivers/drv_usart.c ****         rx_fifo = (struct rt_serial_rx_fifo *)serial->serial_rx;
 814:hardware/HAL_Drivers/drv_usart.c ****         /* Start DMA transfer */
 815:hardware/HAL_Drivers/drv_usart.c ****         if (HAL_UART_Receive_DMA(&(uart->handle), rx_fifo->buffer, serial->config.bufsz) != HAL_OK)
 816:hardware/HAL_Drivers/drv_usart.c ****         {
 817:hardware/HAL_Drivers/drv_usart.c ****             /* Transfer error in reception process */
 818:hardware/HAL_Drivers/drv_usart.c ****             RT_ASSERT(0);
 819:hardware/HAL_Drivers/drv_usart.c ****         }
 820:hardware/HAL_Drivers/drv_usart.c ****         CLEAR_BIT(uart->handle.Instance->CR3, USART_CR3_EIE);
 821:hardware/HAL_Drivers/drv_usart.c ****         __HAL_UART_ENABLE_IT(&(uart->handle), UART_IT_IDLE);
 822:hardware/HAL_Drivers/drv_usart.c ****     }
 823:hardware/HAL_Drivers/drv_usart.c ****  
 824:hardware/HAL_Drivers/drv_usart.c ****     /* enable irq */
 825:hardware/HAL_Drivers/drv_usart.c ****     HAL_NVIC_SetPriority(dma_config->dma_irq, 0, 0);
 826:hardware/HAL_Drivers/drv_usart.c ****     HAL_NVIC_EnableIRQ(dma_config->dma_irq);
 827:hardware/HAL_Drivers/drv_usart.c **** 
 828:hardware/HAL_Drivers/drv_usart.c ****     HAL_NVIC_SetPriority(uart->config->irq_type, 1, 0);
 829:hardware/HAL_Drivers/drv_usart.c ****     HAL_NVIC_EnableIRQ(uart->config->irq_type);
 830:hardware/HAL_Drivers/drv_usart.c **** 
 831:hardware/HAL_Drivers/drv_usart.c ****     LOG_D("%s dma %s instance: %x", uart->config->name, flag == RT_DEVICE_FLAG_DMA_RX ? "RX" : "TX"
 832:hardware/HAL_Drivers/drv_usart.c ****     LOG_D("%s dma config done", uart->config->name);
 833:hardware/HAL_Drivers/drv_usart.c **** }
 834:hardware/HAL_Drivers/drv_usart.c **** 
 835:hardware/HAL_Drivers/drv_usart.c **** /**
 836:hardware/HAL_Drivers/drv_usart.c ****   * @brief  UART error callbacks
 837:hardware/HAL_Drivers/drv_usart.c ****   * @param  huart: UART handle
 838:hardware/HAL_Drivers/drv_usart.c ****   * @note   This example shows a simple way to report transfer error, and you can
 839:hardware/HAL_Drivers/drv_usart.c ****   *         add your own implementation.
 840:hardware/HAL_Drivers/drv_usart.c ****   * @retval None
 841:hardware/HAL_Drivers/drv_usart.c ****   */
 842:hardware/HAL_Drivers/drv_usart.c **** void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 843:hardware/HAL_Drivers/drv_usart.c **** {
 844:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(huart != NULL);
 845:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart = (struct stm32_uart *)huart;
 846:hardware/HAL_Drivers/drv_usart.c ****     LOG_D("%s: %s %d\n", __FUNCTION__, uart->config->name, huart->ErrorCode);
 847:hardware/HAL_Drivers/drv_usart.c ****     UNUSED(uart);
 848:hardware/HAL_Drivers/drv_usart.c **** }
 849:hardware/HAL_Drivers/drv_usart.c **** 
 850:hardware/HAL_Drivers/drv_usart.c **** /**
 851:hardware/HAL_Drivers/drv_usart.c ****   * @brief  Rx Transfer completed callback
 852:hardware/HAL_Drivers/drv_usart.c ****   * @param  huart: UART handle
 853:hardware/HAL_Drivers/drv_usart.c ****   * @note   This example shows a simple way to report end of DMA Rx transfer, and
 854:hardware/HAL_Drivers/drv_usart.c ****   *         you can add your own implementation.
 855:hardware/HAL_Drivers/drv_usart.c ****   * @retval None
 856:hardware/HAL_Drivers/drv_usart.c ****   */
 857:hardware/HAL_Drivers/drv_usart.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 858:hardware/HAL_Drivers/drv_usart.c **** {
 859:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 860:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(huart != NULL);
 861:hardware/HAL_Drivers/drv_usart.c ****     uart = (struct stm32_uart *)huart;
ARM GAS  /tmp/ccxjcN9T.s 			page 18


 862:hardware/HAL_Drivers/drv_usart.c ****     dma_isr(&uart->serial);
 863:hardware/HAL_Drivers/drv_usart.c **** }
 864:hardware/HAL_Drivers/drv_usart.c **** 
 865:hardware/HAL_Drivers/drv_usart.c **** /**
 866:hardware/HAL_Drivers/drv_usart.c ****   * @brief  Rx Half transfer completed callback
 867:hardware/HAL_Drivers/drv_usart.c ****   * @param  huart: UART handle
 868:hardware/HAL_Drivers/drv_usart.c ****   * @note   This example shows a simple way to report end of DMA Rx Half transfer, 
 869:hardware/HAL_Drivers/drv_usart.c ****   *         and you can add your own implementation.
 870:hardware/HAL_Drivers/drv_usart.c ****   * @retval None
 871:hardware/HAL_Drivers/drv_usart.c ****   */
 872:hardware/HAL_Drivers/drv_usart.c **** void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 873:hardware/HAL_Drivers/drv_usart.c **** {
 874:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 875:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(huart != NULL);
 876:hardware/HAL_Drivers/drv_usart.c ****     uart = (struct stm32_uart *)huart;
 877:hardware/HAL_Drivers/drv_usart.c ****     dma_isr(&uart->serial);
 878:hardware/HAL_Drivers/drv_usart.c **** }
 879:hardware/HAL_Drivers/drv_usart.c **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 880:hardware/HAL_Drivers/drv_usart.c **** {
 881:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 882:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(huart != NULL);
 883:hardware/HAL_Drivers/drv_usart.c ****     uart = (struct stm32_uart *)huart;
 884:hardware/HAL_Drivers/drv_usart.c ****     rt_hw_serial_isr(&uart->serial, RT_SERIAL_EVENT_TX_DMADONE);
 885:hardware/HAL_Drivers/drv_usart.c **** }
 886:hardware/HAL_Drivers/drv_usart.c **** #endif  /* RT_SERIAL_USING_DMA */
 887:hardware/HAL_Drivers/drv_usart.c **** 
 888:hardware/HAL_Drivers/drv_usart.c **** static void stm32_uart_get_dma_config(void)
 889:hardware/HAL_Drivers/drv_usart.c **** {
 113              		.loc 1 889 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 890:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART1
 891:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART1_INDEX].uart_dma_flag = 0;
 118              		.loc 1 891 0
 119 0000 0022     		movs	r2, #0
 120 0002 024B     		ldr	r3, .L8
 121 0004 A3F80821 		strh	r2, [r3, #264]	@ movhi
 122 0008 7047     		bx	lr
 123              	.L9:
 124 000a 00BF     		.align	2
 125              	.L8:
 126 000c 00000000 		.word	.LANCHOR0
 127              		.cfi_endproc
 128              	.LFE151:
 130              		.section	.text.dma_isr,"ax",%progbits
 131              		.align	1
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu fpv4-sp-d16
 137              	dma_isr:
 138              	.LFB144:
 363:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 139              		.loc 1 363 0
 140              		.cfi_startproc
ARM GAS  /tmp/ccxjcN9T.s 			page 19


 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              	.LVL11:
 144 0000 38B5     		push	{r3, r4, r5, lr}
 145              	.LCFI2:
 146              		.cfi_def_cfa_offset 16
 147              		.cfi_offset 3, -16
 148              		.cfi_offset 4, -12
 149              		.cfi_offset 5, -8
 150              		.cfi_offset 14, -4
 151              	.LVL12:
 371:hardware/HAL_Drivers/drv_usart.c ****             (__HAL_DMA_GET_IT_SOURCE(&(uart->dma_rx.handle), DMA_IT_HT) != RESET))
 152              		.loc 1 371 0
 153 0002 50F8C83C 		ldr	r3, [r0, #-200]
 154 0006 1A68     		ldr	r2, [r3]
 155 0008 12F0100F 		tst	r2, #16
 156 000c 03D1     		bne	.L11
 372:hardware/HAL_Drivers/drv_usart.c ****     {
 157              		.loc 1 372 0 discriminator 1
 158 000e 1B68     		ldr	r3, [r3]
 371:hardware/HAL_Drivers/drv_usart.c ****             (__HAL_DMA_GET_IT_SOURCE(&(uart->dma_rx.handle), DMA_IT_HT) != RESET))
 159              		.loc 1 371 0 discriminator 1
 160 0010 13F0080F 		tst	r3, #8
 161 0014 12D0     		beq	.L10
 162              	.L11:
 163 0016 0546     		mov	r5, r0
 374:hardware/HAL_Drivers/drv_usart.c ****         recv_total_index = serial->config.bufsz - __HAL_DMA_GET_COUNTER(&(uart->dma_rx.handle));
 164              		.loc 1 374 0
 165 0018 FFF7FEFF 		bl	rt_hw_interrupt_disable
 166              	.LVL13:
 375:hardware/HAL_Drivers/drv_usart.c ****         if (recv_total_index == 0)
 167              		.loc 1 375 0
 168 001c 696B     		ldr	r1, [r5, #52]
 169 001e C1F38F21 		ubfx	r1, r1, #10, #16
 170 0022 55F8C83C 		ldr	r3, [r5, #-200]
 171 0026 5B68     		ldr	r3, [r3, #4]
 172              	.LVL14:
 376:hardware/HAL_Drivers/drv_usart.c ****         {
 173              		.loc 1 376 0
 174 0028 CB1A     		subs	r3, r1, r3
 175              	.LVL15:
 176 002a 08D1     		bne	.L13
 378:hardware/HAL_Drivers/drv_usart.c ****         }
 177              		.loc 1 378 0
 178 002c 55F8684C 		ldr	r4, [r5, #-104]
 179 0030 0C1B     		subs	r4, r1, r4
 180              	.LVL16:
 181              	.L14:
 384:hardware/HAL_Drivers/drv_usart.c ****         rt_hw_interrupt_enable(level);
 182              		.loc 1 384 0
 183 0032 45F8683C 		str	r3, [r5, #-104]
 385:hardware/HAL_Drivers/drv_usart.c **** 
 184              		.loc 1 385 0
 185 0036 FFF7FEFF 		bl	rt_hw_interrupt_enable
 186              	.LVL17:
 387:hardware/HAL_Drivers/drv_usart.c ****         {
 187              		.loc 1 387 0
ARM GAS  /tmp/ccxjcN9T.s 			page 20


 188 003a 24B9     		cbnz	r4, .L16
 189              	.LVL18:
 190              	.L10:
 191 003c 38BD     		pop	{r3, r4, r5, pc}
 192              	.LVL19:
 193              	.L13:
 382:hardware/HAL_Drivers/drv_usart.c ****         }
 194              		.loc 1 382 0
 195 003e 55F8681C 		ldr	r1, [r5, #-104]
 196 0042 5C1A     		subs	r4, r3, r1
 197              	.LVL20:
 198 0044 F5E7     		b	.L14
 199              	.LVL21:
 200              	.L16:
 389:hardware/HAL_Drivers/drv_usart.c ****         }
 201              		.loc 1 389 0
 202 0046 2102     		lsls	r1, r4, #8
 203 0048 41F00301 		orr	r1, r1, #3
 204 004c 2846     		mov	r0, r5
 205 004e FFF7FEFF 		bl	rt_hw_serial_isr
 206              	.LVL22:
 392:hardware/HAL_Drivers/drv_usart.c **** #endif
 207              		.loc 1 392 0
 208 0052 F3E7     		b	.L10
 209              		.cfi_endproc
 210              	.LFE144:
 212              		.section	.text.uart_isr,"ax",%progbits
 213              		.align	1
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv4-sp-d16
 219              	uart_isr:
 220              	.LFB143:
 272:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 221              		.loc 1 272 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 24
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL23:
 226 0000 30B5     		push	{r4, r5, lr}
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 12
 229              		.cfi_offset 4, -12
 230              		.cfi_offset 5, -8
 231              		.cfi_offset 14, -4
 232 0002 87B0     		sub	sp, sp, #28
 233              	.LCFI4:
 234              		.cfi_def_cfa_offset 40
 235 0004 0446     		mov	r4, r0
 236              	.LVL24:
 283:hardware/HAL_Drivers/drv_usart.c ****             (__HAL_UART_GET_IT_SOURCE(&(uart->handle), UART_IT_RXNE) != RESET))
 237              		.loc 1 283 0
 238 0006 A0F58673 		sub	r3, r0, #268
 239              	.LVL25:
 240 000a 1B68     		ldr	r3, [r3]
 241              	.LVL26:
ARM GAS  /tmp/ccxjcN9T.s 			page 21


 242 000c 1A68     		ldr	r2, [r3]
 243 000e 12F0200F 		tst	r2, #32
 244 0012 03D0     		beq	.L18
 284:hardware/HAL_Drivers/drv_usart.c ****     {
 245              		.loc 1 284 0 discriminator 1
 246 0014 DA68     		ldr	r2, [r3, #12]
 283:hardware/HAL_Drivers/drv_usart.c ****             (__HAL_UART_GET_IT_SOURCE(&(uart->handle), UART_IT_RXNE) != RESET))
 247              		.loc 1 283 0 discriminator 1
 248 0016 12F0200F 		tst	r2, #32
 249 001a 17D1     		bne	.L33
 250              	.L18:
 289:hardware/HAL_Drivers/drv_usart.c ****              && (__HAL_UART_GET_IT_SOURCE(&(uart->handle), UART_IT_IDLE) != RESET))
 251              		.loc 1 289 0
 252 001c 34F8042C 		ldrh	r2, [r4, #-4]
 253 0020 3AB1     		cbz	r2, .L20
 289:hardware/HAL_Drivers/drv_usart.c ****              && (__HAL_UART_GET_IT_SOURCE(&(uart->handle), UART_IT_IDLE) != RESET))
 254              		.loc 1 289 0 is_stmt 0 discriminator 1
 255 0022 1A68     		ldr	r2, [r3]
 256 0024 12F0100F 		tst	r2, #16
 257 0028 03D0     		beq	.L20
 290:hardware/HAL_Drivers/drv_usart.c ****     {
 258              		.loc 1 290 0 is_stmt 1
 259 002a DA68     		ldr	r2, [r3, #12]
 260 002c 12F0100F 		tst	r2, #16
 261 0030 10D1     		bne	.L34
 262              	.L20:
 304:hardware/HAL_Drivers/drv_usart.c ****     {
 263              		.loc 1 304 0
 264 0032 1A68     		ldr	r2, [r3]
 265 0034 12F0400F 		tst	r2, #64
 266 0038 34D0     		beq	.L22
 306:hardware/HAL_Drivers/drv_usart.c ****         {
 267              		.loc 1 306 0
 268 003a 228B     		ldrh	r2, [r4, #24]
 269 003c 12F4006F 		tst	r2, #2048
 270 0040 2BD1     		bne	.L35
 312:hardware/HAL_Drivers/drv_usart.c ****         }
 271              		.loc 1 312 0
 272 0042 6FF04002 		mvn	r2, #64
 273 0046 1A60     		str	r2, [r3]
 274              	.LVL27:
 275              	.L17:
 359:hardware/HAL_Drivers/drv_usart.c **** 
 276              		.loc 1 359 0
 277 0048 07B0     		add	sp, sp, #28
 278              	.LCFI5:
 279              		.cfi_remember_state
 280              		.cfi_def_cfa_offset 12
 281              		@ sp needed
 282 004a 30BD     		pop	{r4, r5, pc}
 283              	.LVL28:
 284              	.L33:
 285              	.LCFI6:
 286              		.cfi_restore_state
 286:hardware/HAL_Drivers/drv_usart.c ****     }
 287              		.loc 1 286 0
 288 004c 0121     		movs	r1, #1
ARM GAS  /tmp/ccxjcN9T.s 			page 22


 289 004e FFF7FEFF 		bl	rt_hw_serial_isr
 290              	.LVL29:
 291 0052 F9E7     		b	.L17
 292              	.LVL30:
 293              	.L34:
 292:hardware/HAL_Drivers/drv_usart.c ****         recv_total_index = serial->config.bufsz - __HAL_DMA_GET_COUNTER(&(uart->dma_rx.handle));
 294              		.loc 1 292 0
 295 0054 FFF7FEFF 		bl	rt_hw_interrupt_disable
 296              	.LVL31:
 293:hardware/HAL_Drivers/drv_usart.c ****         recv_len = recv_total_index - uart->dma_rx.last_index;
 297              		.loc 1 293 0
 298 0058 636B     		ldr	r3, [r4, #52]
 299 005a C3F38F23 		ubfx	r3, r3, #10, #16
 300 005e 54F8C81C 		ldr	r1, [r4, #-200]
 301 0062 4968     		ldr	r1, [r1, #4]
 302 0064 5B1A     		subs	r3, r3, r1
 303              	.LVL32:
 294:hardware/HAL_Drivers/drv_usart.c ****         uart->dma_rx.last_index = recv_total_index;
 304              		.loc 1 294 0
 305 0066 54F8685C 		ldr	r5, [r4, #-104]
 306 006a 5D1B     		subs	r5, r3, r5
 307              	.LVL33:
 295:hardware/HAL_Drivers/drv_usart.c ****         rt_hw_interrupt_enable(level);
 308              		.loc 1 295 0
 309 006c 44F8683C 		str	r3, [r4, #-104]
 296:hardware/HAL_Drivers/drv_usart.c **** 
 310              		.loc 1 296 0
 311 0070 FFF7FEFF 		bl	rt_hw_interrupt_enable
 312              	.LVL34:
 298:hardware/HAL_Drivers/drv_usart.c ****         {
 313              		.loc 1 298 0
 314 0074 55B9     		cbnz	r5, .L36
 315              	.L21:
 316              	.LBB6:
 302:hardware/HAL_Drivers/drv_usart.c ****     }
 317              		.loc 1 302 0
 318 0076 0023     		movs	r3, #0
 319 0078 0193     		str	r3, [sp, #4]
 320 007a A4F58674 		sub	r4, r4, #268
 321              	.LVL35:
 322 007e 2368     		ldr	r3, [r4]
 323 0080 1A68     		ldr	r2, [r3]
 324 0082 0192     		str	r2, [sp, #4]
 325 0084 5B68     		ldr	r3, [r3, #4]
 326 0086 0193     		str	r3, [sp, #4]
 327 0088 019B     		ldr	r3, [sp, #4]
 328              	.LBE6:
 329 008a DDE7     		b	.L17
 330              	.LVL36:
 331              	.L36:
 300:hardware/HAL_Drivers/drv_usart.c ****         }
 332              		.loc 1 300 0
 333 008c 2902     		lsls	r1, r5, #8
 334 008e 41F00301 		orr	r1, r1, #3
 335 0092 2046     		mov	r0, r4
 336 0094 FFF7FEFF 		bl	rt_hw_serial_isr
 337              	.LVL37:
ARM GAS  /tmp/ccxjcN9T.s 			page 23


 338 0098 EDE7     		b	.L21
 339              	.LVL38:
 340              	.L35:
 308:hardware/HAL_Drivers/drv_usart.c ****         }
 341              		.loc 1 308 0
 342 009a A4F58670 		sub	r0, r4, #268
 343              	.LVL39:
 344 009e FFF7FEFF 		bl	HAL_UART_IRQHandler
 345              	.LVL40:
 346 00a2 D1E7     		b	.L17
 347              	.LVL41:
 348              	.L22:
 318:hardware/HAL_Drivers/drv_usart.c ****         {
 349              		.loc 1 318 0
 350 00a4 1A68     		ldr	r2, [r3]
 351 00a6 12F0080F 		tst	r2, #8
 352 00aa 06D0     		beq	.L24
 353              	.LBB7:
 320:hardware/HAL_Drivers/drv_usart.c ****         }
 354              		.loc 1 320 0
 355 00ac 0022     		movs	r2, #0
 356 00ae 0292     		str	r2, [sp, #8]
 357 00b0 1A68     		ldr	r2, [r3]
 358 00b2 0292     		str	r2, [sp, #8]
 359 00b4 5A68     		ldr	r2, [r3, #4]
 360 00b6 0292     		str	r2, [sp, #8]
 361 00b8 029A     		ldr	r2, [sp, #8]
 362              	.L24:
 363              	.LBE7:
 322:hardware/HAL_Drivers/drv_usart.c ****         {
 364              		.loc 1 322 0
 365 00ba 1A68     		ldr	r2, [r3]
 366 00bc 12F0040F 		tst	r2, #4
 367 00c0 06D0     		beq	.L25
 368              	.LBB8:
 324:hardware/HAL_Drivers/drv_usart.c ****         }
 369              		.loc 1 324 0
 370 00c2 0022     		movs	r2, #0
 371 00c4 0392     		str	r2, [sp, #12]
 372 00c6 1A68     		ldr	r2, [r3]
 373 00c8 0392     		str	r2, [sp, #12]
 374 00ca 5A68     		ldr	r2, [r3, #4]
 375 00cc 0392     		str	r2, [sp, #12]
 376 00ce 039A     		ldr	r2, [sp, #12]
 377              	.L25:
 378              	.LBE8:
 326:hardware/HAL_Drivers/drv_usart.c ****         {
 379              		.loc 1 326 0
 380 00d0 1A68     		ldr	r2, [r3]
 381 00d2 12F0020F 		tst	r2, #2
 382 00d6 06D0     		beq	.L26
 383              	.LBB9:
 328:hardware/HAL_Drivers/drv_usart.c ****         }
 384              		.loc 1 328 0
 385 00d8 0022     		movs	r2, #0
 386 00da 0492     		str	r2, [sp, #16]
 387 00dc 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccxjcN9T.s 			page 24


 388 00de 0492     		str	r2, [sp, #16]
 389 00e0 5A68     		ldr	r2, [r3, #4]
 390 00e2 0492     		str	r2, [sp, #16]
 391 00e4 049A     		ldr	r2, [sp, #16]
 392              	.L26:
 393              	.LBE9:
 330:hardware/HAL_Drivers/drv_usart.c ****         {
 394              		.loc 1 330 0
 395 00e6 1A68     		ldr	r2, [r3]
 396 00e8 12F0010F 		tst	r2, #1
 397 00ec 06D0     		beq	.L27
 398              	.LBB10:
 332:hardware/HAL_Drivers/drv_usart.c ****         }
 399              		.loc 1 332 0
 400 00ee 0022     		movs	r2, #0
 401 00f0 0592     		str	r2, [sp, #20]
 402 00f2 1A68     		ldr	r2, [r3]
 403 00f4 0592     		str	r2, [sp, #20]
 404 00f6 5A68     		ldr	r2, [r3, #4]
 405 00f8 0592     		str	r2, [sp, #20]
 406 00fa 059A     		ldr	r2, [sp, #20]
 407              	.L27:
 408              	.LBE10:
 337:hardware/HAL_Drivers/drv_usart.c ****         {
 409              		.loc 1 337 0
 410 00fc 1A68     		ldr	r2, [r3]
 411 00fe 12F4807F 		tst	r2, #256
 412 0102 02D0     		beq	.L28
 339:hardware/HAL_Drivers/drv_usart.c ****         }
 413              		.loc 1 339 0
 414 0104 6FF48072 		mvn	r2, #256
 415 0108 1A60     		str	r2, [r3]
 416              	.L28:
 342:hardware/HAL_Drivers/drv_usart.c ****         {
 417              		.loc 1 342 0
 418 010a A4F58673 		sub	r3, r4, #268
 419 010e 1B68     		ldr	r3, [r3]
 420 0110 1A68     		ldr	r2, [r3]
 421 0112 12F4007F 		tst	r2, #512
 422 0116 02D0     		beq	.L29
 344:hardware/HAL_Drivers/drv_usart.c ****         }
 423              		.loc 1 344 0
 424 0118 6FF40072 		mvn	r2, #512
 425 011c 1A60     		str	r2, [r3]
 426              	.L29:
 346:hardware/HAL_Drivers/drv_usart.c ****         {
 427              		.loc 1 346 0
 428 011e A4F58673 		sub	r3, r4, #268
 429 0122 1B68     		ldr	r3, [r3]
 430 0124 1A68     		ldr	r2, [r3]
 431 0126 12F0800F 		tst	r2, #128
 432 012a 02D0     		beq	.L30
 348:hardware/HAL_Drivers/drv_usart.c ****         }
 433              		.loc 1 348 0
 434 012c 6FF08002 		mvn	r2, #128
 435 0130 1A60     		str	r2, [r3]
 436              	.L30:
ARM GAS  /tmp/ccxjcN9T.s 			page 25


 350:hardware/HAL_Drivers/drv_usart.c ****         {
 437              		.loc 1 350 0
 438 0132 A4F58673 		sub	r3, r4, #268
 439 0136 1B68     		ldr	r3, [r3]
 440 0138 1A68     		ldr	r2, [r3]
 441 013a 12F0400F 		tst	r2, #64
 442 013e 02D0     		beq	.L31
 352:hardware/HAL_Drivers/drv_usart.c ****         }
 443              		.loc 1 352 0
 444 0140 6FF04002 		mvn	r2, #64
 445 0144 1A60     		str	r2, [r3]
 446              	.L31:
 354:hardware/HAL_Drivers/drv_usart.c ****         {
 447              		.loc 1 354 0
 448 0146 A4F58674 		sub	r4, r4, #268
 449 014a 2368     		ldr	r3, [r4]
 450 014c 1A68     		ldr	r2, [r3]
 451 014e 12F0200F 		tst	r2, #32
 452 0152 3FF479AF 		beq	.L17
 356:hardware/HAL_Drivers/drv_usart.c ****         }
 453              		.loc 1 356 0
 454 0156 6FF02002 		mvn	r2, #32
 455 015a 1A60     		str	r2, [r3]
 359:hardware/HAL_Drivers/drv_usart.c **** 
 456              		.loc 1 359 0
 457 015c 74E7     		b	.L17
 458              		.cfi_endproc
 459              	.LFE143:
 461              		.section	.text.stm32_dma_transmit,"ax",%progbits
 462              		.align	1
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	stm32_dma_transmit:
 469              	.LFB142:
 233:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 470              		.loc 1 233 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              	.LVL42:
 475 0000 10B5     		push	{r4, lr}
 476              	.LCFI7:
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 4, -8
 479              		.cfi_offset 14, -4
 480              	.LVL43:
 238:hardware/HAL_Drivers/drv_usart.c ****     {
 481              		.loc 1 238 0
 482 0002 1446     		mov	r4, r2
 483 0004 6AB1     		cbz	r2, .L39
 243:hardware/HAL_Drivers/drv_usart.c ****     {
 484              		.loc 1 243 0
 485 0006 022B     		cmp	r3, #2
 486 0008 01D0     		beq	.L43
 254:hardware/HAL_Drivers/drv_usart.c **** }
ARM GAS  /tmp/ccxjcN9T.s 			page 26


 487              		.loc 1 254 0
 488 000a 0020     		movs	r0, #0
 489              	.LVL44:
 490 000c 10BD     		pop	{r4, pc}
 491              	.LVL45:
 492              	.L43:
 245:hardware/HAL_Drivers/drv_usart.c ****         {
 493              		.loc 1 245 0
 494 000e 92B2     		uxth	r2, r2
 495              	.LVL46:
 496 0010 A0F58670 		sub	r0, r0, #268
 497              	.LVL47:
 498 0014 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 499              	.LVL48:
 500 0018 08B1     		cbz	r0, .L44
 251:hardware/HAL_Drivers/drv_usart.c ****         }
 501              		.loc 1 251 0
 502 001a 0020     		movs	r0, #0
 255:hardware/HAL_Drivers/drv_usart.c **** 
 503              		.loc 1 255 0
 504 001c 10BD     		pop	{r4, pc}
 505              	.LVL49:
 506              	.L44:
 247:hardware/HAL_Drivers/drv_usart.c ****         }
 507              		.loc 1 247 0
 508 001e 2046     		mov	r0, r4
 509 0020 10BD     		pop	{r4, pc}
 510              	.LVL50:
 511              	.L39:
 240:hardware/HAL_Drivers/drv_usart.c ****     }
 512              		.loc 1 240 0
 513 0022 1046     		mov	r0, r2
 514              	.LVL51:
 515 0024 10BD     		pop	{r4, pc}
 516              		.cfi_endproc
 517              	.LFE142:
 519              		.section	.text.stm32_dma_config,"ax",%progbits
 520              		.align	1
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 524              		.fpu fpv4-sp-d16
 526              	stm32_dma_config:
 527              	.LFB146:
 719:hardware/HAL_Drivers/drv_usart.c ****     struct rt_serial_rx_fifo *rx_fifo;
 528              		.loc 1 719 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              	.LVL52:
 533 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 534              	.LCFI8:
 535              		.cfi_def_cfa_offset 24
 536              		.cfi_offset 3, -24
 537              		.cfi_offset 4, -20
 538              		.cfi_offset 5, -16
 539              		.cfi_offset 6, -12
ARM GAS  /tmp/ccxjcN9T.s 			page 27


 540              		.cfi_offset 7, -8
 541              		.cfi_offset 14, -4
 542 0002 0546     		mov	r5, r0
 543 0004 0E46     		mov	r6, r1
 544              	.LVL53:
 728:hardware/HAL_Drivers/drv_usart.c ****     {
 545              		.loc 1 728 0
 546 0006 B1F5007F 		cmp	r1, #512
 547 000a 46D0     		beq	.L54
 733:hardware/HAL_Drivers/drv_usart.c ****     {
 548              		.loc 1 733 0
 549 000c B1F5006F 		cmp	r1, #2048
 550 0010 49D0     		beq	.L55
 551              	.L47:
 552              	.LVL54:
 553              	.LBB11:
 750:hardware/HAL_Drivers/drv_usart.c ****         tmpreg = READ_BIT(RCC->AHB1ENR, dma_config->dma_rcc);
 554              		.loc 1 750 0
 555 0012 404B     		ldr	r3, .L61
 556 0014 1A6B     		ldr	r2, [r3, #48]
 557 0016 7968     		ldr	r1, [r7, #4]
 558              	.LVL55:
 559 0018 0A43     		orrs	r2, r2, r1
 560 001a 1A63     		str	r2, [r3, #48]
 751:hardware/HAL_Drivers/drv_usart.c **** 
 561              		.loc 1 751 0
 562 001c 1B6B     		ldr	r3, [r3, #48]
 563              	.LVL56:
 564              	.LBE11:
 762:hardware/HAL_Drivers/drv_usart.c ****     {
 565              		.loc 1 762 0
 566 001e B6F5007F 		cmp	r6, #512
 567 0022 46D0     		beq	.L56
 766:hardware/HAL_Drivers/drv_usart.c ****     {
 568              		.loc 1 766 0
 569 0024 B6F5006F 		cmp	r6, #2048
 570 0028 4BD0     		beq	.L57
 571              	.L49:
 774:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.Channel             = dma_config->channel;
 572              		.loc 1 774 0
 573 002a 3B68     		ldr	r3, [r7]
 574 002c 2360     		str	r3, [r4]
 775:hardware/HAL_Drivers/drv_usart.c **** #elif defined(SOC_SERIES_STM32L4) || defined(SOC_SERIES_STM32G0) || defined(SOC_SERIES_STM32G4)
 575              		.loc 1 775 0
 576 002e FB68     		ldr	r3, [r7, #12]
 577 0030 6360     		str	r3, [r4, #4]
 780:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.MemInc              = DMA_MINC_ENABLE;
 578              		.loc 1 780 0
 579 0032 0023     		movs	r3, #0
 580 0034 E360     		str	r3, [r4, #12]
 781:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 581              		.loc 1 781 0
 582 0036 4FF48062 		mov	r2, #1024
 583 003a 2261     		str	r2, [r4, #16]
 782:hardware/HAL_Drivers/drv_usart.c ****     DMA_Handle->Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 584              		.loc 1 782 0
 585 003c 6361     		str	r3, [r4, #20]
ARM GAS  /tmp/ccxjcN9T.s 			page 28


 783:hardware/HAL_Drivers/drv_usart.c ****     
 586              		.loc 1 783 0
 587 003e A361     		str	r3, [r4, #24]
 785:hardware/HAL_Drivers/drv_usart.c ****     {
 588              		.loc 1 785 0
 589 0040 B6F5007F 		cmp	r6, #512
 590 0044 46D0     		beq	.L58
 790:hardware/HAL_Drivers/drv_usart.c ****     {
 591              		.loc 1 790 0
 592 0046 B6F5006F 		cmp	r6, #2048
 593 004a 48D0     		beq	.L59
 594              	.L51:
 796:hardware/HAL_Drivers/drv_usart.c **** #if defined(SOC_SERIES_STM32F4) || defined(SOC_SERIES_STM32F7)
 595              		.loc 1 796 0
 596 004c 4FF48033 		mov	r3, #65536
 597 0050 2362     		str	r3, [r4, #32]
 798:hardware/HAL_Drivers/drv_usart.c **** #endif
 598              		.loc 1 798 0
 599 0052 0023     		movs	r3, #0
 600 0054 6362     		str	r3, [r4, #36]
 800:hardware/HAL_Drivers/drv_usart.c ****     {
 601              		.loc 1 800 0
 602 0056 2046     		mov	r0, r4
 603              	.LVL57:
 604 0058 FFF7FEFF 		bl	HAL_DMA_DeInit
 605              	.LVL58:
 805:hardware/HAL_Drivers/drv_usart.c ****     {
 606              		.loc 1 805 0
 607 005c 2046     		mov	r0, r4
 608 005e FFF7FEFF 		bl	HAL_DMA_Init
 609              	.LVL59:
 811:hardware/HAL_Drivers/drv_usart.c ****     {
 610              		.loc 1 811 0
 611 0062 B6F5007F 		cmp	r6, #512
 612 0066 3FD0     		beq	.L60
 613              	.LVL60:
 614              	.L52:
 825:hardware/HAL_Drivers/drv_usart.c ****     HAL_NVIC_EnableIRQ(dma_config->dma_irq);
 615              		.loc 1 825 0
 616 0068 0022     		movs	r2, #0
 617 006a 1146     		mov	r1, r2
 618 006c 97F90800 		ldrsb	r0, [r7, #8]
 619 0070 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 620              	.LVL61:
 826:hardware/HAL_Drivers/drv_usart.c **** 
 621              		.loc 1 826 0
 622 0074 97F90800 		ldrsb	r0, [r7, #8]
 623 0078 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 624              	.LVL62:
 828:hardware/HAL_Drivers/drv_usart.c ****     HAL_NVIC_EnableIRQ(uart->config->irq_type);
 625              		.loc 1 828 0
 626 007c 55F8CC3C 		ldr	r3, [r5, #-204]
 627 0080 0022     		movs	r2, #0
 628 0082 0121     		movs	r1, #1
 629 0084 93F90800 		ldrsb	r0, [r3, #8]
 630 0088 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 631              	.LVL63:
ARM GAS  /tmp/ccxjcN9T.s 			page 29


 829:hardware/HAL_Drivers/drv_usart.c **** 
 632              		.loc 1 829 0
 633 008c 55F8CC3C 		ldr	r3, [r5, #-204]
 634 0090 93F90800 		ldrsb	r0, [r3, #8]
 635 0094 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 636              	.LVL64:
 637 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 638              	.LVL65:
 639              	.L54:
 730:hardware/HAL_Drivers/drv_usart.c ****         dma_config = uart->config->dma_rx;
 640              		.loc 1 730 0
 641 009a A0F1C804 		sub	r4, r0, #200
 642              	.LVL66:
 731:hardware/HAL_Drivers/drv_usart.c ****     }
 643              		.loc 1 731 0
 644 009e 50F8CC3C 		ldr	r3, [r0, #-204]
 645 00a2 DF68     		ldr	r7, [r3, #12]
 646              	.LVL67:
 647 00a4 B5E7     		b	.L47
 648              	.LVL68:
 649              	.L55:
 735:hardware/HAL_Drivers/drv_usart.c ****         dma_config = uart->config->dma_tx;
 650              		.loc 1 735 0
 651 00a6 A0F16404 		sub	r4, r0, #100
 652              	.LVL69:
 736:hardware/HAL_Drivers/drv_usart.c ****     }
 653              		.loc 1 736 0
 654 00aa 50F8CC3C 		ldr	r3, [r0, #-204]
 655 00ae 1F69     		ldr	r7, [r3, #16]
 656              	.LVL70:
 657 00b0 AFE7     		b	.L47
 658              	.LVL71:
 659              	.L56:
 764:hardware/HAL_Drivers/drv_usart.c ****     }
 660              		.loc 1 764 0
 661 00b2 A5F58673 		sub	r3, r5, #268
 662 00b6 A5F1C802 		sub	r2, r5, #200
 663 00ba 45F8D82C 		str	r2, [r5, #-216]
 664 00be DB67     		str	r3, [r3, #124]
 665 00c0 B3E7     		b	.L49
 666              	.L57:
 768:hardware/HAL_Drivers/drv_usart.c ****     }
 667              		.loc 1 768 0
 668 00c2 A5F58673 		sub	r3, r5, #268
 669 00c6 A5F16402 		sub	r2, r5, #100
 670 00ca 45F8DC2C 		str	r2, [r5, #-220]
 671 00ce C3F8E030 		str	r3, [r3, #224]
 672 00d2 AAE7     		b	.L49
 673              	.L58:
 787:hardware/HAL_Drivers/drv_usart.c ****         DMA_Handle->Init.Mode                = DMA_CIRCULAR;
 674              		.loc 1 787 0
 675 00d4 A360     		str	r3, [r4, #8]
 788:hardware/HAL_Drivers/drv_usart.c ****     }
 676              		.loc 1 788 0
 677 00d6 4FF48073 		mov	r3, #256
 678 00da E361     		str	r3, [r4, #28]
 679 00dc B6E7     		b	.L51
ARM GAS  /tmp/ccxjcN9T.s 			page 30


 680              	.L59:
 792:hardware/HAL_Drivers/drv_usart.c ****         DMA_Handle->Init.Mode                = DMA_NORMAL;
 681              		.loc 1 792 0
 682 00de 4023     		movs	r3, #64
 683 00e0 A360     		str	r3, [r4, #8]
 793:hardware/HAL_Drivers/drv_usart.c ****     }
 684              		.loc 1 793 0
 685 00e2 0023     		movs	r3, #0
 686 00e4 E361     		str	r3, [r4, #28]
 687 00e6 B1E7     		b	.L51
 688              	.LVL72:
 689              	.L60:
 813:hardware/HAL_Drivers/drv_usart.c ****         /* Start DMA transfer */
 690              		.loc 1 813 0
 691 00e8 AB6B     		ldr	r3, [r5, #56]
 692              	.LVL73:
 815:hardware/HAL_Drivers/drv_usart.c ****         {
 693              		.loc 1 815 0
 694 00ea 6A6B     		ldr	r2, [r5, #52]
 695 00ec A5F58674 		sub	r4, r5, #268
 696              	.LVL74:
 697 00f0 C2F38F22 		ubfx	r2, r2, #10, #16
 698 00f4 1968     		ldr	r1, [r3]
 699 00f6 2046     		mov	r0, r4
 700 00f8 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 701              	.LVL75:
 820:hardware/HAL_Drivers/drv_usart.c ****         __HAL_UART_ENABLE_IT(&(uart->handle), UART_IT_IDLE);
 702              		.loc 1 820 0
 703 00fc 2268     		ldr	r2, [r4]
 704 00fe 5369     		ldr	r3, [r2, #20]
 705 0100 23F00103 		bic	r3, r3, #1
 706 0104 5361     		str	r3, [r2, #20]
 821:hardware/HAL_Drivers/drv_usart.c ****     }
 707              		.loc 1 821 0
 708 0106 2268     		ldr	r2, [r4]
 709 0108 D368     		ldr	r3, [r2, #12]
 710 010a 43F01003 		orr	r3, r3, #16
 711 010e D360     		str	r3, [r2, #12]
 712 0110 AAE7     		b	.L52
 713              	.L62:
 714 0112 00BF     		.align	2
 715              	.L61:
 716 0114 00380240 		.word	1073887232
 717              		.cfi_endproc
 718              	.LFE146:
 720              		.section	.text.stm32_control,"ax",%progbits
 721              		.align	1
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 725              		.fpu fpv4-sp-d16
 727              	stm32_control:
 728              	.LFB139:
 158:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 729              		.loc 1 158 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccxjcN9T.s 			page 31


 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              	.LVL76:
 734 0000 08B5     		push	{r3, lr}
 735              	.LCFI9:
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 3, -8
 738              		.cfi_offset 14, -4
 739              	.LVL77:
 167:hardware/HAL_Drivers/drv_usart.c ****     {
 740              		.loc 1 167 0
 741 0002 1029     		cmp	r1, #16
 742 0004 1BD0     		beq	.L65
 743 0006 1129     		cmp	r1, #17
 744 0008 03D0     		beq	.L66
 745 000a 0329     		cmp	r1, #3
 746 000c 2CD0     		beq	.L69
 747              	.LVL78:
 748              	.L64:
 191:hardware/HAL_Drivers/drv_usart.c **** 
 749              		.loc 1 191 0
 750 000e 0020     		movs	r0, #0
 751 0010 08BD     		pop	{r3, pc}
 752              	.LVL79:
 753              	.L66:
 172:hardware/HAL_Drivers/drv_usart.c ****         /* disable interrupt */
 754              		.loc 1 172 0
 755 0012 50F8CC3C 		ldr	r3, [r0, #-204]
 756 0016 A0F58670 		sub	r0, r0, #268
 757              	.LVL80:
 758 001a 93F90830 		ldrsb	r3, [r3, #8]
 759              	.LVL81:
 760              	.LBB12:
 761              	.LBB13:
 762              		.file 2 "CORE/core_cm4.h"
   1:CORE/core_cm4.h **** /**************************************************************************//**
   2:CORE/core_cm4.h ****  * @file     core_cm4.h
   3:CORE/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:CORE/core_cm4.h ****  * @version  V4.30
   5:CORE/core_cm4.h ****  * @date     20. October 2015
   6:CORE/core_cm4.h ****  ******************************************************************************/
   7:CORE/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:CORE/core_cm4.h **** 
   9:CORE/core_cm4.h ****    All rights reserved.
  10:CORE/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:CORE/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:CORE/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:CORE/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:CORE/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:CORE/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:CORE/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:CORE/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:CORE/core_cm4.h ****      to endorse or promote products derived from this software without
  19:CORE/core_cm4.h ****      specific prior written permission.
  20:CORE/core_cm4.h ****    *
  21:CORE/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:CORE/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:CORE/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARM GAS  /tmp/ccxjcN9T.s 			page 32


  24:CORE/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:CORE/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:CORE/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:CORE/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:CORE/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:CORE/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:CORE/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:CORE/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:CORE/core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:CORE/core_cm4.h **** 
  34:CORE/core_cm4.h **** 
  35:CORE/core_cm4.h **** #if   defined ( __ICCARM__ )
  36:CORE/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:CORE/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:CORE/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:CORE/core_cm4.h **** #endif
  40:CORE/core_cm4.h **** 
  41:CORE/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:CORE/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:CORE/core_cm4.h **** 
  44:CORE/core_cm4.h **** #include <stdint.h>
  45:CORE/core_cm4.h **** 
  46:CORE/core_cm4.h **** #ifdef __cplusplus
  47:CORE/core_cm4.h ****  extern "C" {
  48:CORE/core_cm4.h **** #endif
  49:CORE/core_cm4.h **** 
  50:CORE/core_cm4.h **** /**
  51:CORE/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:CORE/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:CORE/core_cm4.h **** 
  54:CORE/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:CORE/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:CORE/core_cm4.h **** 
  57:CORE/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:CORE/core_cm4.h ****      Unions are used for effective representation of core registers.
  59:CORE/core_cm4.h **** 
  60:CORE/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:CORE/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:CORE/core_cm4.h ****  */
  63:CORE/core_cm4.h **** 
  64:CORE/core_cm4.h **** 
  65:CORE/core_cm4.h **** /*******************************************************************************
  66:CORE/core_cm4.h ****  *                 CMSIS definitions
  67:CORE/core_cm4.h ****  ******************************************************************************/
  68:CORE/core_cm4.h **** /**
  69:CORE/core_cm4.h ****   \ingroup Cortex_M4
  70:CORE/core_cm4.h ****   @{
  71:CORE/core_cm4.h ****  */
  72:CORE/core_cm4.h **** 
  73:CORE/core_cm4.h **** /*  CMSIS CM4 definitions */
  74:CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:CORE/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:CORE/core_cm4.h **** 
  79:CORE/core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 33


  81:CORE/core_cm4.h **** 
  82:CORE/core_cm4.h **** #if   defined ( __CC_ARM )
  83:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:CORE/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:CORE/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:CORE/core_cm4.h **** 
  87:CORE/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:CORE/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:CORE/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:CORE/core_cm4.h **** 
  92:CORE/core_cm4.h **** #elif defined ( __GNUC__ )
  93:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:CORE/core_cm4.h **** 
  97:CORE/core_cm4.h **** #elif defined ( __ICCARM__ )
  98:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:CORE/core_cm4.h **** 
 102:CORE/core_cm4.h **** #elif defined ( __TMS470__ )
 103:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:CORE/core_cm4.h **** 
 106:CORE/core_cm4.h **** #elif defined ( __TASKING__ )
 107:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:CORE/core_cm4.h **** 
 111:CORE/core_cm4.h **** #elif defined ( __CSMC__ )
 112:CORE/core_cm4.h ****   #define __packed
 113:CORE/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:CORE/core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:CORE/core_cm4.h **** 
 117:CORE/core_cm4.h **** #else
 118:CORE/core_cm4.h ****   #error Unknown compiler
 119:CORE/core_cm4.h **** #endif
 120:CORE/core_cm4.h **** 
 121:CORE/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:CORE/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:CORE/core_cm4.h **** */
 124:CORE/core_cm4.h **** #if defined ( __CC_ARM )
 125:CORE/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:CORE/core_cm4.h ****       #define __FPU_USED       1U
 128:CORE/core_cm4.h ****     #else
 129:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:CORE/core_cm4.h ****       #define __FPU_USED       0U
 131:CORE/core_cm4.h ****     #endif
 132:CORE/core_cm4.h ****   #else
 133:CORE/core_cm4.h ****     #define __FPU_USED         0U
 134:CORE/core_cm4.h ****   #endif
 135:CORE/core_cm4.h **** 
 136:CORE/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:CORE/core_cm4.h ****   #if defined __ARM_PCS_VFP
ARM GAS  /tmp/ccxjcN9T.s 			page 34


 138:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:CORE/core_cm4.h ****       #define __FPU_USED       1U
 140:CORE/core_cm4.h ****     #else
 141:CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:CORE/core_cm4.h ****       #define __FPU_USED       0U
 143:CORE/core_cm4.h ****     #endif
 144:CORE/core_cm4.h ****   #else
 145:CORE/core_cm4.h ****     #define __FPU_USED         0U
 146:CORE/core_cm4.h ****   #endif
 147:CORE/core_cm4.h **** 
 148:CORE/core_cm4.h **** #elif defined ( __GNUC__ )
 149:CORE/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:CORE/core_cm4.h ****       #define __FPU_USED       1U
 152:CORE/core_cm4.h ****     #else
 153:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:CORE/core_cm4.h ****       #define __FPU_USED       0U
 155:CORE/core_cm4.h ****     #endif
 156:CORE/core_cm4.h ****   #else
 157:CORE/core_cm4.h ****     #define __FPU_USED         0U
 158:CORE/core_cm4.h ****   #endif
 159:CORE/core_cm4.h **** 
 160:CORE/core_cm4.h **** #elif defined ( __ICCARM__ )
 161:CORE/core_cm4.h ****   #if defined __ARMVFP__
 162:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:CORE/core_cm4.h ****       #define __FPU_USED       1U
 164:CORE/core_cm4.h ****     #else
 165:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:CORE/core_cm4.h ****       #define __FPU_USED       0U
 167:CORE/core_cm4.h ****     #endif
 168:CORE/core_cm4.h ****   #else
 169:CORE/core_cm4.h ****     #define __FPU_USED         0U
 170:CORE/core_cm4.h ****   #endif
 171:CORE/core_cm4.h **** 
 172:CORE/core_cm4.h **** #elif defined ( __TMS470__ )
 173:CORE/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:CORE/core_cm4.h ****       #define __FPU_USED       1U
 176:CORE/core_cm4.h ****     #else
 177:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:CORE/core_cm4.h ****       #define __FPU_USED       0U
 179:CORE/core_cm4.h ****     #endif
 180:CORE/core_cm4.h ****   #else
 181:CORE/core_cm4.h ****     #define __FPU_USED         0U
 182:CORE/core_cm4.h ****   #endif
 183:CORE/core_cm4.h **** 
 184:CORE/core_cm4.h **** #elif defined ( __TASKING__ )
 185:CORE/core_cm4.h ****   #if defined __FPU_VFP__
 186:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:CORE/core_cm4.h ****       #define __FPU_USED       1U
 188:CORE/core_cm4.h ****     #else
 189:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:CORE/core_cm4.h ****       #define __FPU_USED       0U
 191:CORE/core_cm4.h ****     #endif
 192:CORE/core_cm4.h ****   #else
 193:CORE/core_cm4.h ****     #define __FPU_USED         0U
 194:CORE/core_cm4.h ****   #endif
ARM GAS  /tmp/ccxjcN9T.s 			page 35


 195:CORE/core_cm4.h **** 
 196:CORE/core_cm4.h **** #elif defined ( __CSMC__ )
 197:CORE/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:CORE/core_cm4.h ****       #define __FPU_USED       1U
 200:CORE/core_cm4.h ****     #else
 201:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:CORE/core_cm4.h ****       #define __FPU_USED       0U
 203:CORE/core_cm4.h ****     #endif
 204:CORE/core_cm4.h ****   #else
 205:CORE/core_cm4.h ****     #define __FPU_USED         0U
 206:CORE/core_cm4.h ****   #endif
 207:CORE/core_cm4.h **** 
 208:CORE/core_cm4.h **** #endif
 209:CORE/core_cm4.h **** 
 210:CORE/core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:CORE/core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:CORE/core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:CORE/core_cm4.h **** 
 214:CORE/core_cm4.h **** #ifdef __cplusplus
 215:CORE/core_cm4.h **** }
 216:CORE/core_cm4.h **** #endif
 217:CORE/core_cm4.h **** 
 218:CORE/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:CORE/core_cm4.h **** 
 220:CORE/core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:CORE/core_cm4.h **** 
 222:CORE/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:CORE/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:CORE/core_cm4.h **** 
 225:CORE/core_cm4.h **** #ifdef __cplusplus
 226:CORE/core_cm4.h ****  extern "C" {
 227:CORE/core_cm4.h **** #endif
 228:CORE/core_cm4.h **** 
 229:CORE/core_cm4.h **** /* check device defines and use defaults */
 230:CORE/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:CORE/core_cm4.h ****   #ifndef __CM4_REV
 232:CORE/core_cm4.h ****     #define __CM4_REV               0x0000U
 233:CORE/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:CORE/core_cm4.h ****   #endif
 235:CORE/core_cm4.h **** 
 236:CORE/core_cm4.h ****   #ifndef __FPU_PRESENT
 237:CORE/core_cm4.h ****     #define __FPU_PRESENT             0U
 238:CORE/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:CORE/core_cm4.h ****   #endif
 240:CORE/core_cm4.h **** 
 241:CORE/core_cm4.h ****   #ifndef __MPU_PRESENT
 242:CORE/core_cm4.h ****     #define __MPU_PRESENT             0U
 243:CORE/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:CORE/core_cm4.h ****   #endif
 245:CORE/core_cm4.h **** 
 246:CORE/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:CORE/core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:CORE/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:CORE/core_cm4.h ****   #endif
 250:CORE/core_cm4.h **** 
 251:CORE/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
ARM GAS  /tmp/ccxjcN9T.s 			page 36


 252:CORE/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:CORE/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:CORE/core_cm4.h ****   #endif
 255:CORE/core_cm4.h **** #endif
 256:CORE/core_cm4.h **** 
 257:CORE/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:CORE/core_cm4.h **** /**
 259:CORE/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:CORE/core_cm4.h **** 
 261:CORE/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:CORE/core_cm4.h ****     \li to specify the access to peripheral variables.
 263:CORE/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:CORE/core_cm4.h **** */
 265:CORE/core_cm4.h **** #ifdef __cplusplus
 266:CORE/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:CORE/core_cm4.h **** #else
 268:CORE/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:CORE/core_cm4.h **** #endif
 270:CORE/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:CORE/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:CORE/core_cm4.h **** 
 273:CORE/core_cm4.h **** /* following defines should be used for structure members */
 274:CORE/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:CORE/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:CORE/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:CORE/core_cm4.h **** 
 278:CORE/core_cm4.h **** /*@} end of group Cortex_M4 */
 279:CORE/core_cm4.h **** 
 280:CORE/core_cm4.h **** 
 281:CORE/core_cm4.h **** 
 282:CORE/core_cm4.h **** /*******************************************************************************
 283:CORE/core_cm4.h ****  *                 Register Abstraction
 284:CORE/core_cm4.h ****   Core Register contain:
 285:CORE/core_cm4.h ****   - Core Register
 286:CORE/core_cm4.h ****   - Core NVIC Register
 287:CORE/core_cm4.h ****   - Core SCB Register
 288:CORE/core_cm4.h ****   - Core SysTick Register
 289:CORE/core_cm4.h ****   - Core Debug Register
 290:CORE/core_cm4.h ****   - Core MPU Register
 291:CORE/core_cm4.h ****   - Core FPU Register
 292:CORE/core_cm4.h ****  ******************************************************************************/
 293:CORE/core_cm4.h **** /**
 294:CORE/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:CORE/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:CORE/core_cm4.h **** */
 297:CORE/core_cm4.h **** 
 298:CORE/core_cm4.h **** /**
 299:CORE/core_cm4.h ****   \ingroup    CMSIS_core_register
 300:CORE/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:CORE/core_cm4.h ****   \brief      Core Register type definitions.
 302:CORE/core_cm4.h ****   @{
 303:CORE/core_cm4.h ****  */
 304:CORE/core_cm4.h **** 
 305:CORE/core_cm4.h **** /**
 306:CORE/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:CORE/core_cm4.h ****  */
 308:CORE/core_cm4.h **** typedef union
ARM GAS  /tmp/ccxjcN9T.s 			page 37


 309:CORE/core_cm4.h **** {
 310:CORE/core_cm4.h ****   struct
 311:CORE/core_cm4.h ****   {
 312:CORE/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:CORE/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:CORE/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:CORE/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:CORE/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:CORE/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:CORE/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:CORE/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:CORE/core_cm4.h **** } APSR_Type;
 323:CORE/core_cm4.h **** 
 324:CORE/core_cm4.h **** /* APSR Register Definitions */
 325:CORE/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:CORE/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:CORE/core_cm4.h **** 
 328:CORE/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:CORE/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:CORE/core_cm4.h **** 
 331:CORE/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:CORE/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:CORE/core_cm4.h **** 
 334:CORE/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:CORE/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:CORE/core_cm4.h **** 
 337:CORE/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:CORE/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:CORE/core_cm4.h **** 
 340:CORE/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:CORE/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:CORE/core_cm4.h **** 
 343:CORE/core_cm4.h **** 
 344:CORE/core_cm4.h **** /**
 345:CORE/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:CORE/core_cm4.h ****  */
 347:CORE/core_cm4.h **** typedef union
 348:CORE/core_cm4.h **** {
 349:CORE/core_cm4.h ****   struct
 350:CORE/core_cm4.h ****   {
 351:CORE/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:CORE/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:CORE/core_cm4.h **** } IPSR_Type;
 356:CORE/core_cm4.h **** 
 357:CORE/core_cm4.h **** /* IPSR Register Definitions */
 358:CORE/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:CORE/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:CORE/core_cm4.h **** 
 361:CORE/core_cm4.h **** 
 362:CORE/core_cm4.h **** /**
 363:CORE/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:CORE/core_cm4.h ****  */
 365:CORE/core_cm4.h **** typedef union
ARM GAS  /tmp/ccxjcN9T.s 			page 38


 366:CORE/core_cm4.h **** {
 367:CORE/core_cm4.h ****   struct
 368:CORE/core_cm4.h ****   {
 369:CORE/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:CORE/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:CORE/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:CORE/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:CORE/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:CORE/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:CORE/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:CORE/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:CORE/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:CORE/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:CORE/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:CORE/core_cm4.h **** } xPSR_Type;
 383:CORE/core_cm4.h **** 
 384:CORE/core_cm4.h **** /* xPSR Register Definitions */
 385:CORE/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:CORE/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:CORE/core_cm4.h **** 
 388:CORE/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:CORE/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:CORE/core_cm4.h **** 
 391:CORE/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:CORE/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:CORE/core_cm4.h **** 
 394:CORE/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:CORE/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:CORE/core_cm4.h **** 
 397:CORE/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:CORE/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:CORE/core_cm4.h **** 
 400:CORE/core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:CORE/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:CORE/core_cm4.h **** 
 403:CORE/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:CORE/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:CORE/core_cm4.h **** 
 406:CORE/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:CORE/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:CORE/core_cm4.h **** 
 409:CORE/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:CORE/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:CORE/core_cm4.h **** 
 412:CORE/core_cm4.h **** 
 413:CORE/core_cm4.h **** /**
 414:CORE/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:CORE/core_cm4.h ****  */
 416:CORE/core_cm4.h **** typedef union
 417:CORE/core_cm4.h **** {
 418:CORE/core_cm4.h ****   struct
 419:CORE/core_cm4.h ****   {
 420:CORE/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:CORE/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:CORE/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
ARM GAS  /tmp/ccxjcN9T.s 			page 39


 423:CORE/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:CORE/core_cm4.h **** } CONTROL_Type;
 427:CORE/core_cm4.h **** 
 428:CORE/core_cm4.h **** /* CONTROL Register Definitions */
 429:CORE/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:CORE/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:CORE/core_cm4.h **** 
 432:CORE/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:CORE/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:CORE/core_cm4.h **** 
 435:CORE/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:CORE/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:CORE/core_cm4.h **** 
 438:CORE/core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:CORE/core_cm4.h **** 
 440:CORE/core_cm4.h **** 
 441:CORE/core_cm4.h **** /**
 442:CORE/core_cm4.h ****   \ingroup    CMSIS_core_register
 443:CORE/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:CORE/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:CORE/core_cm4.h ****   @{
 446:CORE/core_cm4.h ****  */
 447:CORE/core_cm4.h **** 
 448:CORE/core_cm4.h **** /**
 449:CORE/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:CORE/core_cm4.h ****  */
 451:CORE/core_cm4.h **** typedef struct
 452:CORE/core_cm4.h **** {
 453:CORE/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:CORE/core_cm4.h ****         uint32_t RESERVED0[24U];
 455:CORE/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:CORE/core_cm4.h ****         uint32_t RSERVED1[24U];
 457:CORE/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:CORE/core_cm4.h ****         uint32_t RESERVED2[24U];
 459:CORE/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:CORE/core_cm4.h ****         uint32_t RESERVED3[24U];
 461:CORE/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:CORE/core_cm4.h ****         uint32_t RESERVED4[56U];
 463:CORE/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:CORE/core_cm4.h ****         uint32_t RESERVED5[644U];
 465:CORE/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:CORE/core_cm4.h **** }  NVIC_Type;
 467:CORE/core_cm4.h **** 
 468:CORE/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:CORE/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:CORE/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:CORE/core_cm4.h **** 
 472:CORE/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:CORE/core_cm4.h **** 
 474:CORE/core_cm4.h **** 
 475:CORE/core_cm4.h **** /**
 476:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 477:CORE/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:CORE/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:CORE/core_cm4.h ****   @{
ARM GAS  /tmp/ccxjcN9T.s 			page 40


 480:CORE/core_cm4.h ****  */
 481:CORE/core_cm4.h **** 
 482:CORE/core_cm4.h **** /**
 483:CORE/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:CORE/core_cm4.h ****  */
 485:CORE/core_cm4.h **** typedef struct
 486:CORE/core_cm4.h **** {
 487:CORE/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:CORE/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:CORE/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:CORE/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:CORE/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:CORE/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:CORE/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:CORE/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:CORE/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:CORE/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:CORE/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:CORE/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:CORE/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:CORE/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:CORE/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:CORE/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:CORE/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:CORE/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:CORE/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:CORE/core_cm4.h ****         uint32_t RESERVED0[5U];
 507:CORE/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:CORE/core_cm4.h **** } SCB_Type;
 509:CORE/core_cm4.h **** 
 510:CORE/core_cm4.h **** /* SCB CPUID Register Definitions */
 511:CORE/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:CORE/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:CORE/core_cm4.h **** 
 514:CORE/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:CORE/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:CORE/core_cm4.h **** 
 517:CORE/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:CORE/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:CORE/core_cm4.h **** 
 520:CORE/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:CORE/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:CORE/core_cm4.h **** 
 523:CORE/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:CORE/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:CORE/core_cm4.h **** 
 526:CORE/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:CORE/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:CORE/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:CORE/core_cm4.h **** 
 530:CORE/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:CORE/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:CORE/core_cm4.h **** 
 533:CORE/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:CORE/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:CORE/core_cm4.h **** 
 536:CORE/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
ARM GAS  /tmp/ccxjcN9T.s 			page 41


 537:CORE/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:CORE/core_cm4.h **** 
 539:CORE/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:CORE/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:CORE/core_cm4.h **** 
 542:CORE/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:CORE/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:CORE/core_cm4.h **** 
 545:CORE/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:CORE/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:CORE/core_cm4.h **** 
 548:CORE/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:CORE/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:CORE/core_cm4.h **** 
 551:CORE/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:CORE/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:CORE/core_cm4.h **** 
 554:CORE/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:CORE/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:CORE/core_cm4.h **** 
 557:CORE/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:CORE/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:CORE/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:CORE/core_cm4.h **** 
 561:CORE/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:CORE/core_cm4.h **** 
 565:CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:CORE/core_cm4.h **** 
 568:CORE/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:CORE/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:CORE/core_cm4.h **** 
 571:CORE/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:CORE/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:CORE/core_cm4.h **** 
 574:CORE/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:CORE/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:CORE/core_cm4.h **** 
 577:CORE/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:CORE/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:CORE/core_cm4.h **** 
 580:CORE/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:CORE/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:CORE/core_cm4.h **** 
 583:CORE/core_cm4.h **** /* SCB System Control Register Definitions */
 584:CORE/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:CORE/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:CORE/core_cm4.h **** 
 587:CORE/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:CORE/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:CORE/core_cm4.h **** 
 590:CORE/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:CORE/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:CORE/core_cm4.h **** 
 593:CORE/core_cm4.h **** /* SCB Configuration Control Register Definitions */
ARM GAS  /tmp/ccxjcN9T.s 			page 42


 594:CORE/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:CORE/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:CORE/core_cm4.h **** 
 597:CORE/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:CORE/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:CORE/core_cm4.h **** 
 600:CORE/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:CORE/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:CORE/core_cm4.h **** 
 603:CORE/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:CORE/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:CORE/core_cm4.h **** 
 606:CORE/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:CORE/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:CORE/core_cm4.h **** 
 609:CORE/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:CORE/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:CORE/core_cm4.h **** 
 612:CORE/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:CORE/core_cm4.h **** 
 616:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:CORE/core_cm4.h **** 
 619:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:CORE/core_cm4.h **** 
 622:CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:CORE/core_cm4.h **** 
 625:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:CORE/core_cm4.h **** 
 628:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:CORE/core_cm4.h **** 
 631:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:CORE/core_cm4.h **** 
 634:CORE/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:CORE/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:CORE/core_cm4.h **** 
 637:CORE/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:CORE/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:CORE/core_cm4.h **** 
 640:CORE/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:CORE/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:CORE/core_cm4.h **** 
 643:CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:CORE/core_cm4.h **** 
 646:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:CORE/core_cm4.h **** 
 649:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
ARM GAS  /tmp/ccxjcN9T.s 			page 43


 651:CORE/core_cm4.h **** 
 652:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:CORE/core_cm4.h **** 
 655:CORE/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:CORE/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:CORE/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:CORE/core_cm4.h **** 
 659:CORE/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:CORE/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:CORE/core_cm4.h **** 
 662:CORE/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:CORE/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:CORE/core_cm4.h **** 
 665:CORE/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:CORE/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:CORE/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:CORE/core_cm4.h **** 
 669:CORE/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:CORE/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:CORE/core_cm4.h **** 
 672:CORE/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:CORE/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:CORE/core_cm4.h **** 
 675:CORE/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:CORE/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:CORE/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:CORE/core_cm4.h **** 
 679:CORE/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:CORE/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:CORE/core_cm4.h **** 
 682:CORE/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:CORE/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:CORE/core_cm4.h **** 
 685:CORE/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:CORE/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:CORE/core_cm4.h **** 
 688:CORE/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:CORE/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:CORE/core_cm4.h **** 
 691:CORE/core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:CORE/core_cm4.h **** 
 693:CORE/core_cm4.h **** 
 694:CORE/core_cm4.h **** /**
 695:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 696:CORE/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:CORE/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:CORE/core_cm4.h ****   @{
 699:CORE/core_cm4.h ****  */
 700:CORE/core_cm4.h **** 
 701:CORE/core_cm4.h **** /**
 702:CORE/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:CORE/core_cm4.h ****  */
 704:CORE/core_cm4.h **** typedef struct
 705:CORE/core_cm4.h **** {
 706:CORE/core_cm4.h ****         uint32_t RESERVED0[1U];
 707:CORE/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
ARM GAS  /tmp/ccxjcN9T.s 			page 44


 708:CORE/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:CORE/core_cm4.h **** } SCnSCB_Type;
 710:CORE/core_cm4.h **** 
 711:CORE/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:CORE/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:CORE/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:CORE/core_cm4.h **** 
 715:CORE/core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:CORE/core_cm4.h **** 
 719:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:CORE/core_cm4.h **** 
 722:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:CORE/core_cm4.h **** 
 725:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:CORE/core_cm4.h **** 
 728:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:CORE/core_cm4.h **** 
 731:CORE/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:CORE/core_cm4.h **** 
 733:CORE/core_cm4.h **** 
 734:CORE/core_cm4.h **** /**
 735:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 736:CORE/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:CORE/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:CORE/core_cm4.h ****   @{
 739:CORE/core_cm4.h ****  */
 740:CORE/core_cm4.h **** 
 741:CORE/core_cm4.h **** /**
 742:CORE/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:CORE/core_cm4.h ****  */
 744:CORE/core_cm4.h **** typedef struct
 745:CORE/core_cm4.h **** {
 746:CORE/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:CORE/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:CORE/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:CORE/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:CORE/core_cm4.h **** } SysTick_Type;
 751:CORE/core_cm4.h **** 
 752:CORE/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:CORE/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:CORE/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:CORE/core_cm4.h **** 
 756:CORE/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:CORE/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:CORE/core_cm4.h **** 
 759:CORE/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:CORE/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:CORE/core_cm4.h **** 
 762:CORE/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:CORE/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 45


 765:CORE/core_cm4.h **** /* SysTick Reload Register Definitions */
 766:CORE/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:CORE/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:CORE/core_cm4.h **** 
 769:CORE/core_cm4.h **** /* SysTick Current Register Definitions */
 770:CORE/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:CORE/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:CORE/core_cm4.h **** 
 773:CORE/core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:CORE/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:CORE/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:CORE/core_cm4.h **** 
 777:CORE/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:CORE/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:CORE/core_cm4.h **** 
 780:CORE/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:CORE/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:CORE/core_cm4.h **** 
 783:CORE/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:CORE/core_cm4.h **** 
 785:CORE/core_cm4.h **** 
 786:CORE/core_cm4.h **** /**
 787:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 788:CORE/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:CORE/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:CORE/core_cm4.h ****   @{
 791:CORE/core_cm4.h ****  */
 792:CORE/core_cm4.h **** 
 793:CORE/core_cm4.h **** /**
 794:CORE/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:CORE/core_cm4.h ****  */
 796:CORE/core_cm4.h **** typedef struct
 797:CORE/core_cm4.h **** {
 798:CORE/core_cm4.h ****   __OM  union
 799:CORE/core_cm4.h ****   {
 800:CORE/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:CORE/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:CORE/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:CORE/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:CORE/core_cm4.h ****         uint32_t RESERVED0[864U];
 805:CORE/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:CORE/core_cm4.h ****         uint32_t RESERVED1[15U];
 807:CORE/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:CORE/core_cm4.h ****         uint32_t RESERVED2[15U];
 809:CORE/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:CORE/core_cm4.h ****         uint32_t RESERVED3[29U];
 811:CORE/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:CORE/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:CORE/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:CORE/core_cm4.h ****         uint32_t RESERVED4[43U];
 815:CORE/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:CORE/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:CORE/core_cm4.h ****         uint32_t RESERVED5[6U];
 818:CORE/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:CORE/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:CORE/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:CORE/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
ARM GAS  /tmp/ccxjcN9T.s 			page 46


 822:CORE/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:CORE/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:CORE/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:CORE/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:CORE/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:CORE/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:CORE/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:CORE/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:CORE/core_cm4.h **** } ITM_Type;
 831:CORE/core_cm4.h **** 
 832:CORE/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:CORE/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:CORE/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:CORE/core_cm4.h **** 
 836:CORE/core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:CORE/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:CORE/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:CORE/core_cm4.h **** 
 840:CORE/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:CORE/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:CORE/core_cm4.h **** 
 843:CORE/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:CORE/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:CORE/core_cm4.h **** 
 846:CORE/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:CORE/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:CORE/core_cm4.h **** 
 849:CORE/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:CORE/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:CORE/core_cm4.h **** 
 852:CORE/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:CORE/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:CORE/core_cm4.h **** 
 855:CORE/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:CORE/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:CORE/core_cm4.h **** 
 858:CORE/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:CORE/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:CORE/core_cm4.h **** 
 861:CORE/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:CORE/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:CORE/core_cm4.h **** 
 864:CORE/core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:CORE/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:CORE/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:CORE/core_cm4.h **** 
 868:CORE/core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:CORE/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:CORE/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:CORE/core_cm4.h **** 
 872:CORE/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:CORE/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:CORE/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:CORE/core_cm4.h **** 
 876:CORE/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:CORE/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:CORE/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
ARM GAS  /tmp/ccxjcN9T.s 			page 47


 879:CORE/core_cm4.h **** 
 880:CORE/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:CORE/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:CORE/core_cm4.h **** 
 883:CORE/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:CORE/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:CORE/core_cm4.h **** 
 886:CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:CORE/core_cm4.h **** 
 888:CORE/core_cm4.h **** 
 889:CORE/core_cm4.h **** /**
 890:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:CORE/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:CORE/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:CORE/core_cm4.h ****   @{
 894:CORE/core_cm4.h ****  */
 895:CORE/core_cm4.h **** 
 896:CORE/core_cm4.h **** /**
 897:CORE/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:CORE/core_cm4.h ****  */
 899:CORE/core_cm4.h **** typedef struct
 900:CORE/core_cm4.h **** {
 901:CORE/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:CORE/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:CORE/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:CORE/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:CORE/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:CORE/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:CORE/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:CORE/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:CORE/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:CORE/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:CORE/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:CORE/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:CORE/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:CORE/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:CORE/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:CORE/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:CORE/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:CORE/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:CORE/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:CORE/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:CORE/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:CORE/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:CORE/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:CORE/core_cm4.h **** } DWT_Type;
 925:CORE/core_cm4.h **** 
 926:CORE/core_cm4.h **** /* DWT Control Register Definitions */
 927:CORE/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:CORE/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:CORE/core_cm4.h **** 
 930:CORE/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:CORE/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:CORE/core_cm4.h **** 
 933:CORE/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:CORE/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 48


 936:CORE/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:CORE/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:CORE/core_cm4.h **** 
 939:CORE/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:CORE/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:CORE/core_cm4.h **** 
 942:CORE/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:CORE/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:CORE/core_cm4.h **** 
 945:CORE/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:CORE/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:CORE/core_cm4.h **** 
 948:CORE/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:CORE/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:CORE/core_cm4.h **** 
 951:CORE/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:CORE/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:CORE/core_cm4.h **** 
 954:CORE/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:CORE/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:CORE/core_cm4.h **** 
 957:CORE/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:CORE/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:CORE/core_cm4.h **** 
 960:CORE/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:CORE/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:CORE/core_cm4.h **** 
 963:CORE/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:CORE/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:CORE/core_cm4.h **** 
 966:CORE/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:CORE/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:CORE/core_cm4.h **** 
 969:CORE/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:CORE/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:CORE/core_cm4.h **** 
 972:CORE/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:CORE/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:CORE/core_cm4.h **** 
 975:CORE/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:CORE/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:CORE/core_cm4.h **** 
 978:CORE/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:CORE/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:CORE/core_cm4.h **** 
 981:CORE/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:CORE/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:CORE/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:CORE/core_cm4.h **** 
 985:CORE/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:CORE/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:CORE/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:CORE/core_cm4.h **** 
 989:CORE/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:CORE/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:CORE/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 49


 993:CORE/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:CORE/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:CORE/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:CORE/core_cm4.h **** 
 997:CORE/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:CORE/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:CORE/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:CORE/core_cm4.h **** 
1001:CORE/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:CORE/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:CORE/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:CORE/core_cm4.h **** 
1005:CORE/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:CORE/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:CORE/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:CORE/core_cm4.h **** 
1009:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:CORE/core_cm4.h **** 
1012:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:CORE/core_cm4.h **** 
1015:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:CORE/core_cm4.h **** 
1018:CORE/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:CORE/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:CORE/core_cm4.h **** 
1021:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:CORE/core_cm4.h **** 
1024:CORE/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:CORE/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:CORE/core_cm4.h **** 
1027:CORE/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:CORE/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:CORE/core_cm4.h **** 
1030:CORE/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:CORE/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:CORE/core_cm4.h **** 
1033:CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:CORE/core_cm4.h **** 
1035:CORE/core_cm4.h **** 
1036:CORE/core_cm4.h **** /**
1037:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:CORE/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:CORE/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:CORE/core_cm4.h ****   @{
1041:CORE/core_cm4.h ****  */
1042:CORE/core_cm4.h **** 
1043:CORE/core_cm4.h **** /**
1044:CORE/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:CORE/core_cm4.h ****  */
1046:CORE/core_cm4.h **** typedef struct
1047:CORE/core_cm4.h **** {
1048:CORE/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:CORE/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
ARM GAS  /tmp/ccxjcN9T.s 			page 50


1050:CORE/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:CORE/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:CORE/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:CORE/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:CORE/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:CORE/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:CORE/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:CORE/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:CORE/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:CORE/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:CORE/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:CORE/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:CORE/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:CORE/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:CORE/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:CORE/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:CORE/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:CORE/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:CORE/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:CORE/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:CORE/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:CORE/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:CORE/core_cm4.h **** } TPI_Type;
1073:CORE/core_cm4.h **** 
1074:CORE/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:CORE/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:CORE/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:CORE/core_cm4.h **** 
1078:CORE/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:CORE/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:CORE/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:CORE/core_cm4.h **** 
1082:CORE/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:CORE/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:CORE/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:CORE/core_cm4.h **** 
1086:CORE/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:CORE/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:CORE/core_cm4.h **** 
1089:CORE/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:CORE/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:CORE/core_cm4.h **** 
1092:CORE/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:CORE/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:CORE/core_cm4.h **** 
1095:CORE/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:CORE/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:CORE/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:CORE/core_cm4.h **** 
1099:CORE/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:CORE/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:CORE/core_cm4.h **** 
1102:CORE/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:CORE/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:CORE/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:CORE/core_cm4.h **** 
1106:CORE/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
ARM GAS  /tmp/ccxjcN9T.s 			page 51


1107:CORE/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:CORE/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:CORE/core_cm4.h **** 
1110:CORE/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:CORE/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:CORE/core_cm4.h **** 
1113:CORE/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:CORE/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:CORE/core_cm4.h **** 
1116:CORE/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:CORE/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:CORE/core_cm4.h **** 
1119:CORE/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:CORE/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:CORE/core_cm4.h **** 
1122:CORE/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:CORE/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:CORE/core_cm4.h **** 
1125:CORE/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:CORE/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:CORE/core_cm4.h **** 
1128:CORE/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:CORE/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:CORE/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:CORE/core_cm4.h **** 
1132:CORE/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:CORE/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:CORE/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:CORE/core_cm4.h **** 
1136:CORE/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:CORE/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:CORE/core_cm4.h **** 
1139:CORE/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:CORE/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:CORE/core_cm4.h **** 
1142:CORE/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:CORE/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:CORE/core_cm4.h **** 
1145:CORE/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:CORE/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:CORE/core_cm4.h **** 
1148:CORE/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:CORE/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:CORE/core_cm4.h **** 
1151:CORE/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:CORE/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:CORE/core_cm4.h **** 
1154:CORE/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:CORE/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:CORE/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:CORE/core_cm4.h **** 
1158:CORE/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:CORE/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:CORE/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:CORE/core_cm4.h **** 
1162:CORE/core_cm4.h **** /* TPI DEVID Register Definitions */
1163:CORE/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
ARM GAS  /tmp/ccxjcN9T.s 			page 52


1164:CORE/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:CORE/core_cm4.h **** 
1166:CORE/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:CORE/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:CORE/core_cm4.h **** 
1169:CORE/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:CORE/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:CORE/core_cm4.h **** 
1172:CORE/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:CORE/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:CORE/core_cm4.h **** 
1175:CORE/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:CORE/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:CORE/core_cm4.h **** 
1178:CORE/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:CORE/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:CORE/core_cm4.h **** 
1181:CORE/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:CORE/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:CORE/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:CORE/core_cm4.h **** 
1185:CORE/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:CORE/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:CORE/core_cm4.h **** 
1188:CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:CORE/core_cm4.h **** 
1190:CORE/core_cm4.h **** 
1191:CORE/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:CORE/core_cm4.h **** /**
1193:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
1194:CORE/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:CORE/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:CORE/core_cm4.h ****   @{
1197:CORE/core_cm4.h ****  */
1198:CORE/core_cm4.h **** 
1199:CORE/core_cm4.h **** /**
1200:CORE/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:CORE/core_cm4.h ****  */
1202:CORE/core_cm4.h **** typedef struct
1203:CORE/core_cm4.h **** {
1204:CORE/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:CORE/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:CORE/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:CORE/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:CORE/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:CORE/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:CORE/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:CORE/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:CORE/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:CORE/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:CORE/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:CORE/core_cm4.h **** } MPU_Type;
1216:CORE/core_cm4.h **** 
1217:CORE/core_cm4.h **** /* MPU Type Register Definitions */
1218:CORE/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:CORE/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 53


1221:CORE/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:CORE/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:CORE/core_cm4.h **** 
1224:CORE/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:CORE/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:CORE/core_cm4.h **** 
1227:CORE/core_cm4.h **** /* MPU Control Register Definitions */
1228:CORE/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:CORE/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:CORE/core_cm4.h **** 
1231:CORE/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:CORE/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:CORE/core_cm4.h **** 
1234:CORE/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:CORE/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:CORE/core_cm4.h **** 
1237:CORE/core_cm4.h **** /* MPU Region Number Register Definitions */
1238:CORE/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:CORE/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:CORE/core_cm4.h **** 
1241:CORE/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:CORE/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:CORE/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:CORE/core_cm4.h **** 
1245:CORE/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:CORE/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:CORE/core_cm4.h **** 
1248:CORE/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:CORE/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:CORE/core_cm4.h **** 
1251:CORE/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:CORE/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:CORE/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:CORE/core_cm4.h **** 
1255:CORE/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:CORE/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:CORE/core_cm4.h **** 
1258:CORE/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:CORE/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:CORE/core_cm4.h **** 
1261:CORE/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:CORE/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:CORE/core_cm4.h **** 
1264:CORE/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:CORE/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:CORE/core_cm4.h **** 
1267:CORE/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:CORE/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:CORE/core_cm4.h **** 
1270:CORE/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:CORE/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:CORE/core_cm4.h **** 
1273:CORE/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:CORE/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:CORE/core_cm4.h **** 
1276:CORE/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:CORE/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
ARM GAS  /tmp/ccxjcN9T.s 			page 54


1278:CORE/core_cm4.h **** 
1279:CORE/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:CORE/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:CORE/core_cm4.h **** 
1282:CORE/core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:CORE/core_cm4.h **** #endif
1284:CORE/core_cm4.h **** 
1285:CORE/core_cm4.h **** 
1286:CORE/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:CORE/core_cm4.h **** /**
1288:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
1289:CORE/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:CORE/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:CORE/core_cm4.h ****   @{
1292:CORE/core_cm4.h ****  */
1293:CORE/core_cm4.h **** 
1294:CORE/core_cm4.h **** /**
1295:CORE/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:CORE/core_cm4.h ****  */
1297:CORE/core_cm4.h **** typedef struct
1298:CORE/core_cm4.h **** {
1299:CORE/core_cm4.h ****         uint32_t RESERVED0[1U];
1300:CORE/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:CORE/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:CORE/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:CORE/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:CORE/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:CORE/core_cm4.h **** } FPU_Type;
1306:CORE/core_cm4.h **** 
1307:CORE/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:CORE/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:CORE/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:CORE/core_cm4.h **** 
1311:CORE/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:CORE/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:CORE/core_cm4.h **** 
1314:CORE/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:CORE/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:CORE/core_cm4.h **** 
1317:CORE/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:CORE/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:CORE/core_cm4.h **** 
1320:CORE/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:CORE/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:CORE/core_cm4.h **** 
1323:CORE/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:CORE/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:CORE/core_cm4.h **** 
1326:CORE/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:CORE/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:CORE/core_cm4.h **** 
1329:CORE/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:CORE/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:CORE/core_cm4.h **** 
1332:CORE/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:CORE/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 55


1335:CORE/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:CORE/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:CORE/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:CORE/core_cm4.h **** 
1339:CORE/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:CORE/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:CORE/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:CORE/core_cm4.h **** 
1343:CORE/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:CORE/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:CORE/core_cm4.h **** 
1346:CORE/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:CORE/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:CORE/core_cm4.h **** 
1349:CORE/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:CORE/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:CORE/core_cm4.h **** 
1352:CORE/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:CORE/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:CORE/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:CORE/core_cm4.h **** 
1356:CORE/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:CORE/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:CORE/core_cm4.h **** 
1359:CORE/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:CORE/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:CORE/core_cm4.h **** 
1362:CORE/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:CORE/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:CORE/core_cm4.h **** 
1365:CORE/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:CORE/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:CORE/core_cm4.h **** 
1368:CORE/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:CORE/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:CORE/core_cm4.h **** 
1371:CORE/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:CORE/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:CORE/core_cm4.h **** 
1374:CORE/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:CORE/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:CORE/core_cm4.h **** 
1377:CORE/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:CORE/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:CORE/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:CORE/core_cm4.h **** 
1381:CORE/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:CORE/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:CORE/core_cm4.h **** 
1384:CORE/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:CORE/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:CORE/core_cm4.h **** 
1387:CORE/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:CORE/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:CORE/core_cm4.h **** 
1390:CORE/core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:CORE/core_cm4.h **** #endif
ARM GAS  /tmp/ccxjcN9T.s 			page 56


1392:CORE/core_cm4.h **** 
1393:CORE/core_cm4.h **** 
1394:CORE/core_cm4.h **** /**
1395:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
1396:CORE/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:CORE/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:CORE/core_cm4.h ****   @{
1399:CORE/core_cm4.h ****  */
1400:CORE/core_cm4.h **** 
1401:CORE/core_cm4.h **** /**
1402:CORE/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:CORE/core_cm4.h ****  */
1404:CORE/core_cm4.h **** typedef struct
1405:CORE/core_cm4.h **** {
1406:CORE/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:CORE/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:CORE/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:CORE/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:CORE/core_cm4.h **** } CoreDebug_Type;
1411:CORE/core_cm4.h **** 
1412:CORE/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:CORE/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:CORE/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:CORE/core_cm4.h **** 
1416:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:CORE/core_cm4.h **** 
1419:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:CORE/core_cm4.h **** 
1422:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:CORE/core_cm4.h **** 
1425:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:CORE/core_cm4.h **** 
1428:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:CORE/core_cm4.h **** 
1431:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:CORE/core_cm4.h **** 
1434:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:CORE/core_cm4.h **** 
1437:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:CORE/core_cm4.h **** 
1440:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:CORE/core_cm4.h **** 
1443:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:CORE/core_cm4.h **** 
1446:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 57


1449:CORE/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:CORE/core_cm4.h **** 
1453:CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:CORE/core_cm4.h **** 
1456:CORE/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:CORE/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:CORE/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:CORE/core_cm4.h **** 
1460:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:CORE/core_cm4.h **** 
1463:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:CORE/core_cm4.h **** 
1466:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:CORE/core_cm4.h **** 
1469:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:CORE/core_cm4.h **** 
1472:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:CORE/core_cm4.h **** 
1475:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:CORE/core_cm4.h **** 
1478:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:CORE/core_cm4.h **** 
1481:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:CORE/core_cm4.h **** 
1484:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:CORE/core_cm4.h **** 
1487:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:CORE/core_cm4.h **** 
1490:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:CORE/core_cm4.h **** 
1493:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:CORE/core_cm4.h **** 
1496:CORE/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:CORE/core_cm4.h **** 
1498:CORE/core_cm4.h **** 
1499:CORE/core_cm4.h **** /**
1500:CORE/core_cm4.h ****   \ingroup    CMSIS_core_register
1501:CORE/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:CORE/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:CORE/core_cm4.h ****   @{
1504:CORE/core_cm4.h ****  */
1505:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 58


1506:CORE/core_cm4.h **** /**
1507:CORE/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:CORE/core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:CORE/core_cm4.h ****   \param[in] value  Value of the bit field.
1510:CORE/core_cm4.h ****   \return           Masked and shifted value.
1511:CORE/core_cm4.h **** */
1512:CORE/core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:CORE/core_cm4.h **** 
1514:CORE/core_cm4.h **** /**
1515:CORE/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:CORE/core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:CORE/core_cm4.h ****   \param[in] value  Value of register.
1518:CORE/core_cm4.h ****   \return           Masked and shifted bit field value.
1519:CORE/core_cm4.h **** */
1520:CORE/core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:CORE/core_cm4.h **** 
1522:CORE/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:CORE/core_cm4.h **** 
1524:CORE/core_cm4.h **** 
1525:CORE/core_cm4.h **** /**
1526:CORE/core_cm4.h ****   \ingroup    CMSIS_core_register
1527:CORE/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:CORE/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:CORE/core_cm4.h ****   @{
1530:CORE/core_cm4.h ****  */
1531:CORE/core_cm4.h **** 
1532:CORE/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:CORE/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:CORE/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:CORE/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:CORE/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:CORE/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:CORE/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:CORE/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:CORE/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:CORE/core_cm4.h **** 
1542:CORE/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:CORE/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:CORE/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:CORE/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:CORE/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:CORE/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:CORE/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:CORE/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:CORE/core_cm4.h **** 
1551:CORE/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:CORE/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:CORE/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:CORE/core_cm4.h **** #endif
1555:CORE/core_cm4.h **** 
1556:CORE/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:CORE/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:CORE/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:CORE/core_cm4.h **** #endif
1560:CORE/core_cm4.h **** 
1561:CORE/core_cm4.h **** /*@} */
1562:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 59


1563:CORE/core_cm4.h **** 
1564:CORE/core_cm4.h **** 
1565:CORE/core_cm4.h **** /*******************************************************************************
1566:CORE/core_cm4.h ****  *                Hardware Abstraction Layer
1567:CORE/core_cm4.h ****   Core Function Interface contains:
1568:CORE/core_cm4.h ****   - Core NVIC Functions
1569:CORE/core_cm4.h ****   - Core SysTick Functions
1570:CORE/core_cm4.h ****   - Core Debug Functions
1571:CORE/core_cm4.h ****   - Core Register Access Functions
1572:CORE/core_cm4.h ****  ******************************************************************************/
1573:CORE/core_cm4.h **** /**
1574:CORE/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:CORE/core_cm4.h **** */
1576:CORE/core_cm4.h **** 
1577:CORE/core_cm4.h **** 
1578:CORE/core_cm4.h **** 
1579:CORE/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:CORE/core_cm4.h **** /**
1581:CORE/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:CORE/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:CORE/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:CORE/core_cm4.h ****   @{
1585:CORE/core_cm4.h ****  */
1586:CORE/core_cm4.h **** 
1587:CORE/core_cm4.h **** /**
1588:CORE/core_cm4.h ****   \brief   Set Priority Grouping
1589:CORE/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:CORE/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:CORE/core_cm4.h ****            Only values from 0..7 are used.
1592:CORE/core_cm4.h ****            In case of a conflict between priority grouping and available
1593:CORE/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:CORE/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:CORE/core_cm4.h ****  */
1596:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:CORE/core_cm4.h **** {
1598:CORE/core_cm4.h ****   uint32_t reg_value;
1599:CORE/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:CORE/core_cm4.h **** 
1601:CORE/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:CORE/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:CORE/core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:CORE/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:CORE/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:CORE/core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:CORE/core_cm4.h **** }
1608:CORE/core_cm4.h **** 
1609:CORE/core_cm4.h **** 
1610:CORE/core_cm4.h **** /**
1611:CORE/core_cm4.h ****   \brief   Get Priority Grouping
1612:CORE/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:CORE/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:CORE/core_cm4.h ****  */
1615:CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:CORE/core_cm4.h **** {
1617:CORE/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1618:CORE/core_cm4.h **** }
1619:CORE/core_cm4.h **** 
ARM GAS  /tmp/ccxjcN9T.s 			page 60


1620:CORE/core_cm4.h **** 
1621:CORE/core_cm4.h **** /**
1622:CORE/core_cm4.h ****   \brief   Enable External Interrupt
1623:CORE/core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:CORE/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:CORE/core_cm4.h ****  */
1626:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:CORE/core_cm4.h **** {
1628:CORE/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1629:CORE/core_cm4.h **** }
1630:CORE/core_cm4.h **** 
1631:CORE/core_cm4.h **** 
1632:CORE/core_cm4.h **** /**
1633:CORE/core_cm4.h ****   \brief   Disable External Interrupt
1634:CORE/core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:CORE/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:CORE/core_cm4.h ****  */
1637:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:CORE/core_cm4.h **** {
1639:CORE/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
 763              		.loc 2 1639 0
 764 001e 5A09     		lsrs	r2, r3, #5
 765              	.LVL82:
 766 0020 03F01F03 		and	r3, r3, #31
 767              	.LVL83:
 768 0024 0121     		movs	r1, #1
 769              	.LVL84:
 770 0026 01FA03F3 		lsl	r3, r1, r3
 771 002a 2032     		adds	r2, r2, #32
 772 002c 1049     		ldr	r1, .L70
 773 002e 41F82230 		str	r3, [r1, r2, lsl #2]
 774              	.LVL85:
 775              	.LBE13:
 776              	.LBE12:
 174:hardware/HAL_Drivers/drv_usart.c ****         break;
 777              		.loc 1 174 0
 778 0032 0268     		ldr	r2, [r0]
 779 0034 D368     		ldr	r3, [r2, #12]
 780 0036 23F02003 		bic	r3, r3, #32
 781 003a D360     		str	r3, [r2, #12]
 175:hardware/HAL_Drivers/drv_usart.c ****     /* enable interrupt */
 782              		.loc 1 175 0
 783 003c E7E7     		b	.L64
 784              	.LVL86:
 785              	.L65:
 179:hardware/HAL_Drivers/drv_usart.c ****         /* enable interrupt */
 786              		.loc 1 179 0
 787 003e 50F8CC3C 		ldr	r3, [r0, #-204]
 788 0042 A0F58670 		sub	r0, r0, #268
 789              	.LVL87:
 790 0046 93F90830 		ldrsb	r3, [r3, #8]
 791              	.LVL88:
 792              	.LBB14:
 793              	.LBB15:
1628:CORE/core_cm4.h **** }
 794              		.loc 2 1628 0
 795 004a 5909     		lsrs	r1, r3, #5
ARM GAS  /tmp/ccxjcN9T.s 			page 61


 796              	.LVL89:
 797 004c 03F01F03 		and	r3, r3, #31
 798              	.LVL90:
 799 0050 0122     		movs	r2, #1
 800              	.LVL91:
 801 0052 02FA03F3 		lsl	r3, r2, r3
 802 0056 064A     		ldr	r2, .L70
 803 0058 42F82130 		str	r3, [r2, r1, lsl #2]
 804              	.LVL92:
 805              	.LBE15:
 806              	.LBE14:
 181:hardware/HAL_Drivers/drv_usart.c ****         break;
 807              		.loc 1 181 0
 808 005c 0268     		ldr	r2, [r0]
 809 005e D368     		ldr	r3, [r2, #12]
 810 0060 43F02003 		orr	r3, r3, #32
 811 0064 D360     		str	r3, [r2, #12]
 182:hardware/HAL_Drivers/drv_usart.c **** 
 812              		.loc 1 182 0
 813 0066 D2E7     		b	.L64
 814              	.LVL93:
 815              	.L69:
 816 0068 1146     		mov	r1, r2
 817              	.LVL94:
 186:hardware/HAL_Drivers/drv_usart.c ****         break;
 818              		.loc 1 186 0
 819 006a FFF7FEFF 		bl	stm32_dma_config
 820              	.LVL95:
 187:hardware/HAL_Drivers/drv_usart.c **** #endif
 821              		.loc 1 187 0
 822 006e CEE7     		b	.L64
 823              	.L71:
 824              		.align	2
 825              	.L70:
 826 0070 00E100E0 		.word	-536813312
 827              		.cfi_endproc
 828              	.LFE139:
 830              		.section	.text.stm32_configure,"ax",%progbits
 831              		.align	1
 832              		.syntax unified
 833              		.thumb
 834              		.thumb_func
 835              		.fpu fpv4-sp-d16
 837              	stm32_configure:
 838              	.LFB138:
  97:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 839              		.loc 1 97 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              	.LVL96:
 844 0000 10B5     		push	{r4, lr}
 845              	.LCFI10:
 846              		.cfi_def_cfa_offset 8
 847              		.cfi_offset 4, -8
 848              		.cfi_offset 14, -4
 849              	.LVL97:
ARM GAS  /tmp/ccxjcN9T.s 			page 62


 104:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Init.BaudRate     = cfg->baud_rate;
 850              		.loc 1 104 0
 851 0002 A0F58673 		sub	r3, r0, #268
 852              	.LVL98:
 853 0006 50F8CC2C 		ldr	r2, [r0, #-204]
 854 000a 5268     		ldr	r2, [r2, #4]
 855 000c 1A60     		str	r2, [r3]
 105:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 856              		.loc 1 105 0
 857 000e 0A68     		ldr	r2, [r1]
 858 0010 5A60     		str	r2, [r3, #4]
 106:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Init.Mode         = UART_MODE_TX_RX;
 859              		.loc 1 106 0
 860 0012 0022     		movs	r2, #0
 861 0014 40F8F42C 		str	r2, [r0, #-244]
 107:hardware/HAL_Drivers/drv_usart.c ****     uart->handle.Init.OverSampling = UART_OVERSAMPLING_16;
 862              		.loc 1 107 0
 863 0018 0C24     		movs	r4, #12
 864 001a 40F8F84C 		str	r4, [r0, #-248]
 108:hardware/HAL_Drivers/drv_usart.c ****     switch (cfg->data_bits)
 865              		.loc 1 108 0
 866 001e 40F8F02C 		str	r2, [r0, #-240]
 109:hardware/HAL_Drivers/drv_usart.c ****     {
 867              		.loc 1 109 0
 868 0022 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 869              	.LVL99:
 870 0024 03F00F03 		and	r3, r3, #15
 871 0028 082B     		cmp	r3, #8
 872 002a 06D0     		beq	.L74
 873 002c 092B     		cmp	r3, #9
 874 002e 13D0     		beq	.L75
 118:hardware/HAL_Drivers/drv_usart.c ****         break;
 875              		.loc 1 118 0
 876 0030 A0F58673 		sub	r3, r0, #268
 877              	.LVL100:
 878 0034 0022     		movs	r2, #0
 879 0036 9A60     		str	r2, [r3, #8]
 119:hardware/HAL_Drivers/drv_usart.c ****     }
 880              		.loc 1 119 0
 881 0038 03E0     		b	.L76
 882              	.LVL101:
 883              	.L74:
 112:hardware/HAL_Drivers/drv_usart.c ****         break;
 884              		.loc 1 112 0
 885 003a A0F58673 		sub	r3, r0, #268
 886 003e 0022     		movs	r2, #0
 887 0040 9A60     		str	r2, [r3, #8]
 888              	.L76:
 121:hardware/HAL_Drivers/drv_usart.c ****     {
 889              		.loc 1 121 0
 890 0042 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 891 0044 C3F30113 		ubfx	r3, r3, #4, #2
 892 0048 63B1     		cbz	r3, .L78
 893 004a 012B     		cmp	r3, #1
 894 004c 19D0     		beq	.L79
 130:hardware/HAL_Drivers/drv_usart.c ****         break;
 895              		.loc 1 130 0
ARM GAS  /tmp/ccxjcN9T.s 			page 63


 896 004e A0F58673 		sub	r3, r0, #268
 897 0052 0022     		movs	r2, #0
 898 0054 DA60     		str	r2, [r3, #12]
 131:hardware/HAL_Drivers/drv_usart.c ****     }
 899              		.loc 1 131 0
 900 0056 09E0     		b	.L80
 901              	.L75:
 115:hardware/HAL_Drivers/drv_usart.c ****         break;
 902              		.loc 1 115 0
 903 0058 A0F58673 		sub	r3, r0, #268
 904 005c 4FF48052 		mov	r2, #4096
 905 0060 9A60     		str	r2, [r3, #8]
 116:hardware/HAL_Drivers/drv_usart.c ****     default:
 906              		.loc 1 116 0
 907 0062 EEE7     		b	.L76
 908              	.L78:
 124:hardware/HAL_Drivers/drv_usart.c ****         break;
 909              		.loc 1 124 0
 910 0064 A0F58673 		sub	r3, r0, #268
 911 0068 0022     		movs	r2, #0
 912 006a DA60     		str	r2, [r3, #12]
 913              	.L80:
 133:hardware/HAL_Drivers/drv_usart.c ****     {
 914              		.loc 1 133 0
 915 006c 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 916 006e 9B09     		lsrs	r3, r3, #6
 917 0070 012B     		cmp	r3, #1
 918 0072 16D0     		beq	.L82
 919 0074 5BB1     		cbz	r3, .L83
 920 0076 022B     		cmp	r3, #2
 921 0078 18D0     		beq	.L84
 145:hardware/HAL_Drivers/drv_usart.c ****         break;
 922              		.loc 1 145 0
 923 007a 0022     		movs	r2, #0
 924 007c 40F8FC2C 		str	r2, [r0, #-252]
 146:hardware/HAL_Drivers/drv_usart.c ****     }
 925              		.loc 1 146 0
 926 0080 08E0     		b	.L85
 927              	.L79:
 127:hardware/HAL_Drivers/drv_usart.c ****         break;
 928              		.loc 1 127 0
 929 0082 A0F58673 		sub	r3, r0, #268
 930 0086 4FF40052 		mov	r2, #8192
 931 008a DA60     		str	r2, [r3, #12]
 128:hardware/HAL_Drivers/drv_usart.c ****     default:
 932              		.loc 1 128 0
 933 008c EEE7     		b	.L80
 934              	.L83:
 136:hardware/HAL_Drivers/drv_usart.c ****         break;
 935              		.loc 1 136 0
 936 008e 0022     		movs	r2, #0
 937 0090 40F8FC2C 		str	r2, [r0, #-252]
 938              	.L85:
 149:hardware/HAL_Drivers/drv_usart.c ****     {
 939              		.loc 1 149 0
 940 0094 A0F58670 		sub	r0, r0, #268
 941              	.LVL102:
ARM GAS  /tmp/ccxjcN9T.s 			page 64


 942 0098 FFF7FEFF 		bl	HAL_UART_Init
 943              	.LVL103:
 944 009c 58B9     		cbnz	r0, .L92
 154:hardware/HAL_Drivers/drv_usart.c **** }
 945              		.loc 1 154 0
 946 009e 0020     		movs	r0, #0
 155:hardware/HAL_Drivers/drv_usart.c **** 
 947              		.loc 1 155 0
 948 00a0 10BD     		pop	{r4, pc}
 949              	.LVL104:
 950              	.L82:
 139:hardware/HAL_Drivers/drv_usart.c ****         break;
 951              		.loc 1 139 0
 952 00a2 4FF4C063 		mov	r3, #1536
 953 00a6 40F8FC3C 		str	r3, [r0, #-252]
 140:hardware/HAL_Drivers/drv_usart.c ****     case PARITY_EVEN:
 954              		.loc 1 140 0
 955 00aa F3E7     		b	.L85
 956              	.L84:
 142:hardware/HAL_Drivers/drv_usart.c ****         break;
 957              		.loc 1 142 0
 958 00ac 4FF48063 		mov	r3, #1024
 959 00b0 40F8FC3C 		str	r3, [r0, #-252]
 143:hardware/HAL_Drivers/drv_usart.c ****     default:
 960              		.loc 1 143 0
 961 00b4 EEE7     		b	.L85
 962              	.LVL105:
 963              	.L92:
 151:hardware/HAL_Drivers/drv_usart.c ****     }
 964              		.loc 1 151 0
 965 00b6 4FF0FF30 		mov	r0, #-1
 966 00ba 10BD     		pop	{r4, pc}
 967              		.cfi_endproc
 968              	.LFE138:
 970              		.section	.text.USART1_IRQHandler,"ax",%progbits
 971              		.align	1
 972              		.global	USART1_IRQHandler
 973              		.syntax unified
 974              		.thumb
 975              		.thumb_func
 976              		.fpu fpv4-sp-d16
 978              	USART1_IRQHandler:
 979              	.LFB145:
 397:hardware/HAL_Drivers/drv_usart.c ****     /* enter interrupt */
 980              		.loc 1 397 0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 0
 983              		@ frame_needed = 0, uses_anonymous_args = 0
 984 0000 08B5     		push	{r3, lr}
 985              	.LCFI11:
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 3, -8
 988              		.cfi_offset 14, -4
 399:hardware/HAL_Drivers/drv_usart.c **** 
 989              		.loc 1 399 0
 990 0002 FFF7FEFF 		bl	rt_interrupt_enter
 991              	.LVL106:
ARM GAS  /tmp/ccxjcN9T.s 			page 65


 401:hardware/HAL_Drivers/drv_usart.c **** 
 992              		.loc 1 401 0
 993 0006 0348     		ldr	r0, .L95
 994 0008 FFF7FEFF 		bl	uart_isr
 995              	.LVL107:
 404:hardware/HAL_Drivers/drv_usart.c **** }
 996              		.loc 1 404 0
 997 000c FFF7FEFF 		bl	rt_interrupt_leave
 998              	.LVL108:
 999 0010 08BD     		pop	{r3, pc}
 1000              	.L96:
 1001 0012 00BF     		.align	2
 1002              	.L95:
 1003 0014 0C010000 		.word	.LANCHOR0+268
 1004              		.cfi_endproc
 1005              	.LFE145:
 1007              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 1008              		.align	1
 1009              		.global	HAL_UART_ErrorCallback
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1013              		.fpu fpv4-sp-d16
 1015              	HAL_UART_ErrorCallback:
 1016              	.LFB147:
 843:hardware/HAL_Drivers/drv_usart.c ****     RT_ASSERT(huart != NULL);
 1017              		.loc 1 843 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022              	.LVL109:
 1023 0000 7047     		bx	lr
 1024              		.cfi_endproc
 1025              	.LFE147:
 1027              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1028              		.align	1
 1029              		.global	HAL_UART_RxCpltCallback
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	HAL_UART_RxCpltCallback:
 1036              	.LFB148:
 858:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 1037              		.loc 1 858 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              	.LVL110:
 858:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 1042              		.loc 1 858 0
 1043 0000 08B5     		push	{r3, lr}
 1044              	.LCFI12:
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 3, -8
 1047              		.cfi_offset 14, -4
ARM GAS  /tmp/ccxjcN9T.s 			page 66


 1048              	.LVL111:
 862:hardware/HAL_Drivers/drv_usart.c **** }
 1049              		.loc 1 862 0
 1050 0002 00F58670 		add	r0, r0, #268
 1051              	.LVL112:
 1052 0006 FFF7FEFF 		bl	dma_isr
 1053              	.LVL113:
 1054 000a 08BD     		pop	{r3, pc}
 1055              		.cfi_endproc
 1056              	.LFE148:
 1058              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 1059              		.align	1
 1060              		.global	HAL_UART_RxHalfCpltCallback
 1061              		.syntax unified
 1062              		.thumb
 1063              		.thumb_func
 1064              		.fpu fpv4-sp-d16
 1066              	HAL_UART_RxHalfCpltCallback:
 1067              	.LFB149:
 873:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 1068              		.loc 1 873 0
 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 0
 1071              		@ frame_needed = 0, uses_anonymous_args = 0
 1072              	.LVL114:
 1073 0000 08B5     		push	{r3, lr}
 1074              	.LCFI13:
 1075              		.cfi_def_cfa_offset 8
 1076              		.cfi_offset 3, -8
 1077              		.cfi_offset 14, -4
 1078              	.LVL115:
 877:hardware/HAL_Drivers/drv_usart.c **** }
 1079              		.loc 1 877 0
 1080 0002 00F58670 		add	r0, r0, #268
 1081              	.LVL116:
 1082 0006 FFF7FEFF 		bl	dma_isr
 1083              	.LVL117:
 1084 000a 08BD     		pop	{r3, pc}
 1085              		.cfi_endproc
 1086              	.LFE149:
 1088              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 1089              		.align	1
 1090              		.global	HAL_UART_TxCpltCallback
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1094              		.fpu fpv4-sp-d16
 1096              	HAL_UART_TxCpltCallback:
 1097              	.LFB150:
 880:hardware/HAL_Drivers/drv_usart.c ****     struct stm32_uart *uart;
 1098              		.loc 1 880 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              	.LVL118:
 1103 0000 08B5     		push	{r3, lr}
 1104              	.LCFI14:
ARM GAS  /tmp/ccxjcN9T.s 			page 67


 1105              		.cfi_def_cfa_offset 8
 1106              		.cfi_offset 3, -8
 1107              		.cfi_offset 14, -4
 1108              	.LVL119:
 884:hardware/HAL_Drivers/drv_usart.c **** }
 1109              		.loc 1 884 0
 1110 0002 0421     		movs	r1, #4
 1111 0004 00F58670 		add	r0, r0, #268
 1112              	.LVL120:
 1113 0008 FFF7FEFF 		bl	rt_hw_serial_isr
 1114              	.LVL121:
 1115 000c 08BD     		pop	{r3, pc}
 1116              		.cfi_endproc
 1117              	.LFE150:
 1119              		.section	.text.rt_hw_usart_init,"ax",%progbits
 1120              		.align	1
 1121              		.global	rt_hw_usart_init
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	rt_hw_usart_init:
 1128              	.LFB152:
 892:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART1_RX_USING_DMA
 893:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART1_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_RX;
 894:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart1_dma_rx = UART1_DMA_RX_CONFIG;
 895:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART1_INDEX].dma_rx = &uart1_dma_rx;
 896:hardware/HAL_Drivers/drv_usart.c **** #endif
 897:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART1_TX_USING_DMA
 898:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART1_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_TX;
 899:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart1_dma_tx = UART1_DMA_TX_CONFIG;
 900:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART1_INDEX].dma_tx = &uart1_dma_tx;
 901:hardware/HAL_Drivers/drv_usart.c **** #endif
 902:hardware/HAL_Drivers/drv_usart.c **** #endif
 903:hardware/HAL_Drivers/drv_usart.c **** 
 904:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART2
 905:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART2_INDEX].uart_dma_flag = 0;
 906:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART2_RX_USING_DMA
 907:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART2_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_RX;
 908:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart2_dma_rx = UART2_DMA_RX_CONFIG;
 909:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART2_INDEX].dma_rx = &uart2_dma_rx;
 910:hardware/HAL_Drivers/drv_usart.c **** #endif
 911:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART2_TX_USING_DMA
 912:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART2_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_TX;
 913:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart2_dma_tx = UART2_DMA_TX_CONFIG;
 914:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART2_INDEX].dma_tx = &uart2_dma_tx;
 915:hardware/HAL_Drivers/drv_usart.c **** #endif
 916:hardware/HAL_Drivers/drv_usart.c **** #endif
 917:hardware/HAL_Drivers/drv_usart.c **** 
 918:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART3
 919:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART3_INDEX].uart_dma_flag = 0;
 920:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART3_RX_USING_DMA
 921:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART3_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_RX;
 922:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart3_dma_rx = UART3_DMA_RX_CONFIG;
 923:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART3_INDEX].dma_rx = &uart3_dma_rx;
 924:hardware/HAL_Drivers/drv_usart.c **** #endif
 925:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART3_TX_USING_DMA
ARM GAS  /tmp/ccxjcN9T.s 			page 68


 926:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART3_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_TX;
 927:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart3_dma_tx = UART3_DMA_TX_CONFIG;
 928:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART3_INDEX].dma_tx = &uart3_dma_tx;
 929:hardware/HAL_Drivers/drv_usart.c **** #endif
 930:hardware/HAL_Drivers/drv_usart.c **** #endif
 931:hardware/HAL_Drivers/drv_usart.c **** 
 932:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART4
 933:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART4_INDEX].uart_dma_flag = 0;
 934:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART4_RX_USING_DMA
 935:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART4_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_RX;
 936:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart4_dma_rx = UART4_DMA_RX_CONFIG;
 937:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART4_INDEX].dma_rx = &uart4_dma_rx;
 938:hardware/HAL_Drivers/drv_usart.c **** #endif
 939:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART4_TX_USING_DMA
 940:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART4_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_TX;
 941:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart4_dma_tx = UART4_DMA_TX_CONFIG;
 942:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART4_INDEX].dma_tx = &uart4_dma_tx;
 943:hardware/HAL_Drivers/drv_usart.c **** #endif
 944:hardware/HAL_Drivers/drv_usart.c **** #endif
 945:hardware/HAL_Drivers/drv_usart.c **** 
 946:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART5
 947:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART5_INDEX].uart_dma_flag = 0;
 948:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART5_RX_USING_DMA
 949:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART5_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_RX;
 950:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart5_dma_rx = UART5_DMA_RX_CONFIG;
 951:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART5_INDEX].dma_rx = &uart5_dma_rx;
 952:hardware/HAL_Drivers/drv_usart.c **** #endif
 953:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART5_TX_USING_DMA
 954:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART5_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_TX;
 955:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart5_dma_tx = UART5_DMA_TX_CONFIG;
 956:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART5_INDEX].dma_tx = &uart5_dma_tx;
 957:hardware/HAL_Drivers/drv_usart.c **** #endif
 958:hardware/HAL_Drivers/drv_usart.c **** #endif
 959:hardware/HAL_Drivers/drv_usart.c **** 
 960:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_USING_UART6
 961:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART6_INDEX].uart_dma_flag = 0;
 962:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART6_RX_USING_DMA
 963:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART6_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_RX;
 964:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart6_dma_rx = UART6_DMA_RX_CONFIG;
 965:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART6_INDEX].dma_rx = &uart6_dma_rx;
 966:hardware/HAL_Drivers/drv_usart.c **** #endif
 967:hardware/HAL_Drivers/drv_usart.c **** #ifdef BSP_UART6_TX_USING_DMA
 968:hardware/HAL_Drivers/drv_usart.c ****     uart_obj[UART6_INDEX].uart_dma_flag |= RT_DEVICE_FLAG_DMA_TX;
 969:hardware/HAL_Drivers/drv_usart.c ****     static struct dma_config uart6_dma_tx = UART6_DMA_TX_CONFIG;
 970:hardware/HAL_Drivers/drv_usart.c ****     uart_config[UART6_INDEX].dma_tx = &uart6_dma_tx;
 971:hardware/HAL_Drivers/drv_usart.c **** #endif
 972:hardware/HAL_Drivers/drv_usart.c **** #endif
 973:hardware/HAL_Drivers/drv_usart.c **** }
 974:hardware/HAL_Drivers/drv_usart.c **** 
 975:hardware/HAL_Drivers/drv_usart.c **** int rt_hw_usart_init(void)
 976:hardware/HAL_Drivers/drv_usart.c **** {
 1129              		.loc 1 976 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 8
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1134              	.LCFI15:
ARM GAS  /tmp/ccxjcN9T.s 			page 69


 1135              		.cfi_def_cfa_offset 20
 1136              		.cfi_offset 4, -20
 1137              		.cfi_offset 5, -16
 1138              		.cfi_offset 6, -12
 1139              		.cfi_offset 7, -8
 1140              		.cfi_offset 14, -4
 1141 0002 83B0     		sub	sp, sp, #12
 1142              	.LCFI16:
 1143              		.cfi_def_cfa_offset 32
 1144              	.LVL122:
 977:hardware/HAL_Drivers/drv_usart.c ****     rt_size_t obj_num = sizeof(uart_obj) / sizeof(struct stm32_uart);
 978:hardware/HAL_Drivers/drv_usart.c ****     struct serial_configure config = RT_SERIAL_CONFIG_DEFAULT;
 1145              		.loc 1 978 0
 1146 0004 194B     		ldr	r3, .L108
 1147 0006 93E80300 		ldm	r3, {r0, r1}
 1148 000a 02AB     		add	r3, sp, #8
 1149 000c 03E90300 		stmdb	r3, {r0, r1}
 1150              	.LVL123:
 979:hardware/HAL_Drivers/drv_usart.c ****     rt_err_t result = 0;
 980:hardware/HAL_Drivers/drv_usart.c **** 
 981:hardware/HAL_Drivers/drv_usart.c ****     stm32_uart_get_dma_config();
 1151              		.loc 1 981 0
 1152 0010 FFF7FEFF 		bl	stm32_uart_get_dma_config
 1153              	.LVL124:
 1154              	.LBB16:
 982:hardware/HAL_Drivers/drv_usart.c **** 
 983:hardware/HAL_Drivers/drv_usart.c ****     for (int i = 0; i < obj_num; i++)
 1155              		.loc 1 983 0
 1156 0014 0024     		movs	r4, #0
 1157              	.LBE16:
 979:hardware/HAL_Drivers/drv_usart.c ****     rt_err_t result = 0;
 1158              		.loc 1 979 0
 1159 0016 2046     		mov	r0, r4
 1160              	.LVL125:
 1161              	.L105:
 1162              	.LBB17:
 1163              		.loc 1 983 0 discriminator 1
 1164 0018 0CB1     		cbz	r4, .L106
 1165              	.LBE17:
 984:hardware/HAL_Drivers/drv_usart.c ****     {
 985:hardware/HAL_Drivers/drv_usart.c ****         uart_obj[i].config = &uart_config[i];
 986:hardware/HAL_Drivers/drv_usart.c ****         uart_obj[i].serial.ops    = &stm32_uart_ops;
 987:hardware/HAL_Drivers/drv_usart.c ****         uart_obj[i].serial.config = config;
 988:hardware/HAL_Drivers/drv_usart.c ****         /* register UART device */
 989:hardware/HAL_Drivers/drv_usart.c ****         result = rt_hw_serial_register(&uart_obj[i].serial, uart_obj[i].config->name,
 990:hardware/HAL_Drivers/drv_usart.c ****                                        RT_DEVICE_FLAG_RDWR
 991:hardware/HAL_Drivers/drv_usart.c ****                                        | RT_DEVICE_FLAG_INT_RX
 992:hardware/HAL_Drivers/drv_usart.c ****                                        | RT_DEVICE_FLAG_INT_TX
 993:hardware/HAL_Drivers/drv_usart.c ****                                        | uart_obj[i].uart_dma_flag
 994:hardware/HAL_Drivers/drv_usart.c ****                                        , NULL);
 995:hardware/HAL_Drivers/drv_usart.c ****         RT_ASSERT(result == RT_EOK);
 996:hardware/HAL_Drivers/drv_usart.c ****     }
 997:hardware/HAL_Drivers/drv_usart.c **** 
 998:hardware/HAL_Drivers/drv_usart.c ****     return result;
 999:hardware/HAL_Drivers/drv_usart.c **** }
 1166              		.loc 1 999 0
 1167 001a 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccxjcN9T.s 			page 70


 1168              	.LCFI17:
 1169              		.cfi_remember_state
 1170              		.cfi_def_cfa_offset 20
 1171              		@ sp needed
 1172 001c F0BD     		pop	{r4, r5, r6, r7, pc}
 1173              	.LVL126:
 1174              	.L106:
 1175              	.LCFI18:
 1176              		.cfi_restore_state
 1177              	.LBB18:
 985:hardware/HAL_Drivers/drv_usart.c ****         uart_obj[i].serial.ops    = &stm32_uart_ops;
 1178              		.loc 1 985 0 discriminator 3
 1179 001e 144F     		ldr	r7, .L108+4
 1180 0020 04EB8403 		add	r3, r4, r4, lsl #2
 1181 0024 9E00     		lsls	r6, r3, #2
 1182 0026 B919     		adds	r1, r7, r6
 1183 0028 124A     		ldr	r2, .L108+8
 1184 002a 4FF4A673 		mov	r3, #332
 1185 002e 03FB04F3 		mul	r3, r3, r4
 1186 0032 D518     		adds	r5, r2, r3
 1187 0034 2964     		str	r1, [r5, #64]
 986:hardware/HAL_Drivers/drv_usart.c ****         uart_obj[i].serial.config = config;
 1188              		.loc 1 986 0 discriminator 3
 1189 0036 1049     		ldr	r1, .L108+12
 1190 0038 C5F83811 		str	r1, [r5, #312]
 987:hardware/HAL_Drivers/drv_usart.c ****         /* register UART device */
 1191              		.loc 1 987 0 discriminator 3
 1192 003c 05F59E7E 		add	lr, r5, #316
 1193 0040 02A9     		add	r1, sp, #8
 1194 0042 11E90300 		ldmdb	r1, {r0, r1}
 1195              	.LVL127:
 1196 0046 8EE80300 		stm	lr, {r0, r1}
 989:hardware/HAL_Drivers/drv_usart.c ****                                        RT_DEVICE_FLAG_RDWR
 1197              		.loc 1 989 0 discriminator 3
 1198 004a 03F58473 		add	r3, r3, #264
 1199 004e D018     		adds	r0, r2, r3
 993:hardware/HAL_Drivers/drv_usart.c ****                                        , NULL);
 1200              		.loc 1 993 0 discriminator 3
 1201 0050 B5F80821 		ldrh	r2, [r5, #264]
 989:hardware/HAL_Drivers/drv_usart.c ****                                        RT_DEVICE_FLAG_RDWR
 1202              		.loc 1 989 0 discriminator 3
 1203 0054 0023     		movs	r3, #0
 1204 0056 42F4A062 		orr	r2, r2, #1280
 1205 005a 42F00302 		orr	r2, r2, #3
 1206 005e B959     		ldr	r1, [r7, r6]
 1207 0060 0430     		adds	r0, r0, #4
 1208 0062 FFF7FEFF 		bl	rt_hw_serial_register
 1209              	.LVL128:
 983:hardware/HAL_Drivers/drv_usart.c ****     {
 1210              		.loc 1 983 0 discriminator 3
 1211 0066 0134     		adds	r4, r4, #1
 1212              	.LVL129:
 1213 0068 D6E7     		b	.L105
 1214              	.L109:
 1215 006a 00BF     		.align	2
 1216              	.L108:
 1217 006c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccxjcN9T.s 			page 71


 1218 0070 00000000 		.word	.LANCHOR2
 1219 0074 00000000 		.word	.LANCHOR0
 1220 0078 00000000 		.word	.LANCHOR3
 1221              	.LBE18:
 1222              		.cfi_endproc
 1223              	.LFE152:
 1225              		.section	.rodata
 1226              		.align	2
 1227              		.set	.LANCHOR1,. + 0
 1228              	.LC0:
 1229 0000 00C20100 		.word	115200
 1230 0004 08       		.byte	8
 1231 0005 00       		.byte	0
 1232 0006 01       		.byte	1
 1233 0007 00       		.byte	0
 1234              		.section	.bss.uart_obj,"aw",%nobits
 1235              		.align	2
 1236              		.set	.LANCHOR0,. + 0
 1239              	uart_obj:
 1240 0000 00000000 		.space	332
 1240      00000000 
 1240      00000000 
 1240      00000000 
 1240      00000000 
 1241              		.section	.data.uart_config,"aw",%progbits
 1242              		.align	2
 1243              		.set	.LANCHOR2,. + 0
 1246              	uart_config:
 1247 0000 00000000 		.word	.LC1
 1248 0004 00100140 		.word	1073811456
 1249 0008 25       		.byte	37
 1250 0009 00000000 		.space	11
 1250      00000000 
 1250      000000
 1251              		.section	.rodata.stm32_uart_ops,"a",%progbits
 1252              		.align	2
 1253              		.set	.LANCHOR3,. + 0
 1256              	stm32_uart_ops:
 1257 0000 00000000 		.word	stm32_configure
 1258 0004 00000000 		.word	stm32_control
 1259 0008 00000000 		.word	stm32_putc
 1260 000c 00000000 		.word	stm32_getc
 1261 0010 00000000 		.word	stm32_dma_transmit
 1262              		.section	.rodata.str1.4,"aMS",%progbits,1
 1263              		.align	2
 1264              	.LC1:
 1265 0000 75617274 		.ascii	"uart1\000"
 1265      3100
 1266              		.text
 1267              	.Letext0:
 1268              		.file 3 "rt-thread/include/rtdef.h"
 1269              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 1270              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 1271              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 1272              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1273              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 1274              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
ARM GAS  /tmp/ccxjcN9T.s 			page 72


 1275              		.file 10 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 1276              		.file 11 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 1277              		.file 12 "rt-thread/components/finsh/finsh_api.h"
 1278              		.file 13 "USER/stm32f429xx.h"
 1279              		.file 14 "USER/system_stm32f4xx.h"
 1280              		.file 15 "USER/stm32f4xx.h"
 1281              		.file 16 "HALLIB/Inc/stm32f4xx_hal_def.h"
 1282              		.file 17 "HALLIB/Inc/stm32f4xx_hal_dma.h"
 1283              		.file 18 "HALLIB/Inc/stm32f4xx_hal_uart.h"
 1284              		.file 19 "HALLIB/Inc/stm32f4xx_hal.h"
 1285              		.file 20 "rt-thread/components/drivers/include/drivers/serial.h"
 1286              		.file 21 "board/board.h"
 1287              		.file 22 "hardware/HAL_Drivers/drv_dma.h"
 1288              		.file 23 "hardware/HAL_Drivers/drv_usart.h"
 1289              		.file 24 "HALLIB/Inc/stm32f4xx_hal_cortex.h"
 1290              		.file 25 "rt-thread/include/rtthread.h"
 1291              		.file 26 "rt-thread/include/rthw.h"
ARM GAS  /tmp/ccxjcN9T.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 drv_usart.c
     /tmp/ccxjcN9T.s:18     .text.stm32_putc:0000000000000000 $t
     /tmp/ccxjcN9T.s:24     .text.stm32_putc:0000000000000000 stm32_putc
     /tmp/ccxjcN9T.s:67     .text.stm32_getc:0000000000000000 $t
     /tmp/ccxjcN9T.s:73     .text.stm32_getc:0000000000000000 stm32_getc
     /tmp/ccxjcN9T.s:105    .text.stm32_uart_get_dma_config:0000000000000000 $t
     /tmp/ccxjcN9T.s:111    .text.stm32_uart_get_dma_config:0000000000000000 stm32_uart_get_dma_config
     /tmp/ccxjcN9T.s:126    .text.stm32_uart_get_dma_config:000000000000000c $d
     /tmp/ccxjcN9T.s:131    .text.dma_isr:0000000000000000 $t
     /tmp/ccxjcN9T.s:137    .text.dma_isr:0000000000000000 dma_isr
     /tmp/ccxjcN9T.s:213    .text.uart_isr:0000000000000000 $t
     /tmp/ccxjcN9T.s:219    .text.uart_isr:0000000000000000 uart_isr
     /tmp/ccxjcN9T.s:462    .text.stm32_dma_transmit:0000000000000000 $t
     /tmp/ccxjcN9T.s:468    .text.stm32_dma_transmit:0000000000000000 stm32_dma_transmit
     /tmp/ccxjcN9T.s:520    .text.stm32_dma_config:0000000000000000 $t
     /tmp/ccxjcN9T.s:526    .text.stm32_dma_config:0000000000000000 stm32_dma_config
     /tmp/ccxjcN9T.s:716    .text.stm32_dma_config:0000000000000114 $d
     /tmp/ccxjcN9T.s:721    .text.stm32_control:0000000000000000 $t
     /tmp/ccxjcN9T.s:727    .text.stm32_control:0000000000000000 stm32_control
     /tmp/ccxjcN9T.s:826    .text.stm32_control:0000000000000070 $d
     /tmp/ccxjcN9T.s:831    .text.stm32_configure:0000000000000000 $t
     /tmp/ccxjcN9T.s:837    .text.stm32_configure:0000000000000000 stm32_configure
     /tmp/ccxjcN9T.s:971    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccxjcN9T.s:978    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccxjcN9T.s:1003   .text.USART1_IRQHandler:0000000000000014 $d
     /tmp/ccxjcN9T.s:1008   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccxjcN9T.s:1015   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccxjcN9T.s:1028   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccxjcN9T.s:1035   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccxjcN9T.s:1059   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccxjcN9T.s:1066   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccxjcN9T.s:1089   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccxjcN9T.s:1096   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccxjcN9T.s:1120   .text.rt_hw_usart_init:0000000000000000 $t
     /tmp/ccxjcN9T.s:1127   .text.rt_hw_usart_init:0000000000000000 rt_hw_usart_init
     /tmp/ccxjcN9T.s:1217   .text.rt_hw_usart_init:000000000000006c $d
     /tmp/ccxjcN9T.s:1226   .rodata:0000000000000000 $d
     /tmp/ccxjcN9T.s:1235   .bss.uart_obj:0000000000000000 $d
     /tmp/ccxjcN9T.s:1239   .bss.uart_obj:0000000000000000 uart_obj
     /tmp/ccxjcN9T.s:1242   .data.uart_config:0000000000000000 $d
     /tmp/ccxjcN9T.s:1246   .data.uart_config:0000000000000000 uart_config
     /tmp/ccxjcN9T.s:1252   .rodata.stm32_uart_ops:0000000000000000 $d
     /tmp/ccxjcN9T.s:1256   .rodata.stm32_uart_ops:0000000000000000 stm32_uart_ops
     /tmp/ccxjcN9T.s:1263   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_hw_serial_isr
HAL_UART_IRQHandler
HAL_UART_Transmit_DMA
HAL_DMA_DeInit
HAL_DMA_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
ARM GAS  /tmp/ccxjcN9T.s 			page 74


HAL_UART_Receive_DMA
HAL_UART_Init
rt_interrupt_enter
rt_interrupt_leave
rt_hw_serial_register
