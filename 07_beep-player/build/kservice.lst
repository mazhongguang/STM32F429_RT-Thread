ARM GAS  /tmp/ccGzdbPs.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"kservice.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.print_number,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	print_number:
  25              	.LFB33:
  26              		.file 1 "rt-thread/src/kservice.c"
   1:rt-thread/src/kservice.c **** /*
   2:rt-thread/src/kservice.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/src/kservice.c ****  *
   4:rt-thread/src/kservice.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/src/kservice.c ****  *
   6:rt-thread/src/kservice.c ****  * Change Logs:
   7:rt-thread/src/kservice.c ****  * Date           Author       Notes
   8:rt-thread/src/kservice.c ****  * 2006-03-16     Bernard      the first version
   9:rt-thread/src/kservice.c ****  * 2006-05-25     Bernard      rewrite vsprintf
  10:rt-thread/src/kservice.c ****  * 2006-08-10     Bernard      add rt_show_version
  11:rt-thread/src/kservice.c ****  * 2010-03-17     Bernard      remove rt_strlcpy function
  12:rt-thread/src/kservice.c ****  *                             fix gcc compiling issue.
  13:rt-thread/src/kservice.c ****  * 2010-04-15     Bernard      remove weak definition on ICCM16C compiler
  14:rt-thread/src/kservice.c ****  * 2012-07-18     Arda         add the alignment display for signed integer
  15:rt-thread/src/kservice.c ****  * 2012-11-23     Bernard      fix IAR compiler error.
  16:rt-thread/src/kservice.c ****  * 2012-12-22     Bernard      fix rt_kprintf issue, which found by Grissiom.
  17:rt-thread/src/kservice.c ****  * 2013-06-24     Bernard      remove rt_kprintf if RT_USING_CONSOLE is not defined.
  18:rt-thread/src/kservice.c ****  * 2013-09-24     aozima       make sure the device is in STREAM mode when used by rt_kprintf.
  19:rt-thread/src/kservice.c ****  * 2015-07-06     Bernard      Add rt_assert_handler routine.
  20:rt-thread/src/kservice.c ****  */
  21:rt-thread/src/kservice.c **** 
  22:rt-thread/src/kservice.c **** #include <rtthread.h>
  23:rt-thread/src/kservice.c **** #include <rthw.h>
  24:rt-thread/src/kservice.c **** 
  25:rt-thread/src/kservice.c **** #ifdef RT_USING_MODULE
  26:rt-thread/src/kservice.c **** #include <dlmodule.h>
  27:rt-thread/src/kservice.c **** #endif
  28:rt-thread/src/kservice.c **** 
  29:rt-thread/src/kservice.c **** /* use precision */
  30:rt-thread/src/kservice.c **** #define RT_PRINTF_PRECISION
  31:rt-thread/src/kservice.c **** 
  32:rt-thread/src/kservice.c **** /**
ARM GAS  /tmp/ccGzdbPs.s 			page 2


  33:rt-thread/src/kservice.c ****  * @addtogroup KernelService
  34:rt-thread/src/kservice.c ****  */
  35:rt-thread/src/kservice.c **** 
  36:rt-thread/src/kservice.c **** /**@{*/
  37:rt-thread/src/kservice.c **** 
  38:rt-thread/src/kservice.c **** /* global errno in RT-Thread */
  39:rt-thread/src/kservice.c **** static volatile int __rt_errno;
  40:rt-thread/src/kservice.c **** 
  41:rt-thread/src/kservice.c **** #if defined(RT_USING_DEVICE) && defined(RT_USING_CONSOLE)
  42:rt-thread/src/kservice.c **** static rt_device_t _console_device = RT_NULL;
  43:rt-thread/src/kservice.c **** #endif
  44:rt-thread/src/kservice.c **** 
  45:rt-thread/src/kservice.c **** /*
  46:rt-thread/src/kservice.c ****  * This function will get errno
  47:rt-thread/src/kservice.c ****  *
  48:rt-thread/src/kservice.c ****  * @return errno
  49:rt-thread/src/kservice.c ****  */
  50:rt-thread/src/kservice.c **** rt_err_t rt_get_errno(void)
  51:rt-thread/src/kservice.c **** {
  52:rt-thread/src/kservice.c ****     rt_thread_t tid;
  53:rt-thread/src/kservice.c **** 
  54:rt-thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
  55:rt-thread/src/kservice.c ****     {
  56:rt-thread/src/kservice.c ****         /* it's in interrupt context */
  57:rt-thread/src/kservice.c ****         return __rt_errno;
  58:rt-thread/src/kservice.c ****     }
  59:rt-thread/src/kservice.c **** 
  60:rt-thread/src/kservice.c ****     tid = rt_thread_self();
  61:rt-thread/src/kservice.c ****     if (tid == RT_NULL)
  62:rt-thread/src/kservice.c ****         return __rt_errno;
  63:rt-thread/src/kservice.c **** 
  64:rt-thread/src/kservice.c ****     return tid->error;
  65:rt-thread/src/kservice.c **** }
  66:rt-thread/src/kservice.c **** RTM_EXPORT(rt_get_errno);
  67:rt-thread/src/kservice.c **** 
  68:rt-thread/src/kservice.c **** /*
  69:rt-thread/src/kservice.c ****  * This function will set errno
  70:rt-thread/src/kservice.c ****  *
  71:rt-thread/src/kservice.c ****  * @param error the errno shall be set
  72:rt-thread/src/kservice.c ****  */
  73:rt-thread/src/kservice.c **** void rt_set_errno(rt_err_t error)
  74:rt-thread/src/kservice.c **** {
  75:rt-thread/src/kservice.c ****     rt_thread_t tid;
  76:rt-thread/src/kservice.c **** 
  77:rt-thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
  78:rt-thread/src/kservice.c ****     {
  79:rt-thread/src/kservice.c ****         /* it's in interrupt context */
  80:rt-thread/src/kservice.c ****         __rt_errno = error;
  81:rt-thread/src/kservice.c **** 
  82:rt-thread/src/kservice.c ****         return;
  83:rt-thread/src/kservice.c ****     }
  84:rt-thread/src/kservice.c **** 
  85:rt-thread/src/kservice.c ****     tid = rt_thread_self();
  86:rt-thread/src/kservice.c ****     if (tid == RT_NULL)
  87:rt-thread/src/kservice.c ****     {
  88:rt-thread/src/kservice.c ****         __rt_errno = error;
  89:rt-thread/src/kservice.c **** 
ARM GAS  /tmp/ccGzdbPs.s 			page 3


  90:rt-thread/src/kservice.c ****         return;
  91:rt-thread/src/kservice.c ****     }
  92:rt-thread/src/kservice.c **** 
  93:rt-thread/src/kservice.c ****     tid->error = error;
  94:rt-thread/src/kservice.c **** }
  95:rt-thread/src/kservice.c **** RTM_EXPORT(rt_set_errno);
  96:rt-thread/src/kservice.c **** 
  97:rt-thread/src/kservice.c **** /**
  98:rt-thread/src/kservice.c ****  * This function returns errno.
  99:rt-thread/src/kservice.c ****  *
 100:rt-thread/src/kservice.c ****  * @return the errno in the system
 101:rt-thread/src/kservice.c ****  */
 102:rt-thread/src/kservice.c **** int *_rt_errno(void)
 103:rt-thread/src/kservice.c **** {
 104:rt-thread/src/kservice.c ****     rt_thread_t tid;
 105:rt-thread/src/kservice.c **** 
 106:rt-thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
 107:rt-thread/src/kservice.c ****         return (int *)&__rt_errno;
 108:rt-thread/src/kservice.c **** 
 109:rt-thread/src/kservice.c ****     tid = rt_thread_self();
 110:rt-thread/src/kservice.c ****     if (tid != RT_NULL)
 111:rt-thread/src/kservice.c ****         return (int *) & (tid->error);
 112:rt-thread/src/kservice.c **** 
 113:rt-thread/src/kservice.c ****     return (int *)&__rt_errno;
 114:rt-thread/src/kservice.c **** }
 115:rt-thread/src/kservice.c **** RTM_EXPORT(_rt_errno);
 116:rt-thread/src/kservice.c **** 
 117:rt-thread/src/kservice.c **** /**
 118:rt-thread/src/kservice.c ****  * This function will set the content of memory to specified value
 119:rt-thread/src/kservice.c ****  *
 120:rt-thread/src/kservice.c ****  * @param s the address of source memory
 121:rt-thread/src/kservice.c ****  * @param c the value shall be set in content
 122:rt-thread/src/kservice.c ****  * @param count the copied length
 123:rt-thread/src/kservice.c ****  *
 124:rt-thread/src/kservice.c ****  * @return the address of source memory
 125:rt-thread/src/kservice.c ****  */
 126:rt-thread/src/kservice.c **** void *rt_memset(void *s, int c, rt_ubase_t count)
 127:rt-thread/src/kservice.c **** {
 128:rt-thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 129:rt-thread/src/kservice.c ****     char *xs = (char *)s;
 130:rt-thread/src/kservice.c **** 
 131:rt-thread/src/kservice.c ****     while (count--)
 132:rt-thread/src/kservice.c ****         *xs++ = c;
 133:rt-thread/src/kservice.c **** 
 134:rt-thread/src/kservice.c ****     return s;
 135:rt-thread/src/kservice.c **** #else
 136:rt-thread/src/kservice.c **** #define LBLOCKSIZE      (sizeof(long))
 137:rt-thread/src/kservice.c **** #define UNALIGNED(X)    ((long)X & (LBLOCKSIZE - 1))
 138:rt-thread/src/kservice.c **** #define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)
 139:rt-thread/src/kservice.c **** 
 140:rt-thread/src/kservice.c ****     unsigned int i;
 141:rt-thread/src/kservice.c ****     char *m = (char *)s;
 142:rt-thread/src/kservice.c ****     unsigned long buffer;
 143:rt-thread/src/kservice.c ****     unsigned long *aligned_addr;
 144:rt-thread/src/kservice.c ****     unsigned int d = c & 0xff;  /* To avoid sign extension, copy C to an
 145:rt-thread/src/kservice.c ****                                 unsigned variable.  */
 146:rt-thread/src/kservice.c **** 
ARM GAS  /tmp/ccGzdbPs.s 			page 4


 147:rt-thread/src/kservice.c ****     if (!TOO_SMALL(count) && !UNALIGNED(s))
 148:rt-thread/src/kservice.c ****     {
 149:rt-thread/src/kservice.c ****         /* If we get this far, we know that n is large and m is word-aligned. */
 150:rt-thread/src/kservice.c ****         aligned_addr = (unsigned long *)s;
 151:rt-thread/src/kservice.c **** 
 152:rt-thread/src/kservice.c ****         /* Store D into each char sized location in BUFFER so that
 153:rt-thread/src/kservice.c ****          * we can set large blocks quickly.
 154:rt-thread/src/kservice.c ****          */
 155:rt-thread/src/kservice.c ****         if (LBLOCKSIZE == 4)
 156:rt-thread/src/kservice.c ****         {
 157:rt-thread/src/kservice.c ****             buffer = (d << 8) | d;
 158:rt-thread/src/kservice.c ****             buffer |= (buffer << 16);
 159:rt-thread/src/kservice.c ****         }
 160:rt-thread/src/kservice.c ****         else
 161:rt-thread/src/kservice.c ****         {
 162:rt-thread/src/kservice.c ****             buffer = 0;
 163:rt-thread/src/kservice.c ****             for (i = 0; i < LBLOCKSIZE; i ++)
 164:rt-thread/src/kservice.c ****                 buffer = (buffer << 8) | d;
 165:rt-thread/src/kservice.c ****         }
 166:rt-thread/src/kservice.c **** 
 167:rt-thread/src/kservice.c ****         while (count >= LBLOCKSIZE * 4)
 168:rt-thread/src/kservice.c ****         {
 169:rt-thread/src/kservice.c ****             *aligned_addr++ = buffer;
 170:rt-thread/src/kservice.c ****             *aligned_addr++ = buffer;
 171:rt-thread/src/kservice.c ****             *aligned_addr++ = buffer;
 172:rt-thread/src/kservice.c ****             *aligned_addr++ = buffer;
 173:rt-thread/src/kservice.c ****             count -= 4 * LBLOCKSIZE;
 174:rt-thread/src/kservice.c ****         }
 175:rt-thread/src/kservice.c **** 
 176:rt-thread/src/kservice.c ****         while (count >= LBLOCKSIZE)
 177:rt-thread/src/kservice.c ****         {
 178:rt-thread/src/kservice.c ****             *aligned_addr++ = buffer;
 179:rt-thread/src/kservice.c ****             count -= LBLOCKSIZE;
 180:rt-thread/src/kservice.c ****         }
 181:rt-thread/src/kservice.c **** 
 182:rt-thread/src/kservice.c ****         /* Pick up the remainder with a bytewise loop. */
 183:rt-thread/src/kservice.c ****         m = (char *)aligned_addr;
 184:rt-thread/src/kservice.c ****     }
 185:rt-thread/src/kservice.c **** 
 186:rt-thread/src/kservice.c ****     while (count--)
 187:rt-thread/src/kservice.c ****     {
 188:rt-thread/src/kservice.c ****         *m++ = (char)d;
 189:rt-thread/src/kservice.c ****     }
 190:rt-thread/src/kservice.c **** 
 191:rt-thread/src/kservice.c ****     return s;
 192:rt-thread/src/kservice.c **** 
 193:rt-thread/src/kservice.c **** #undef LBLOCKSIZE
 194:rt-thread/src/kservice.c **** #undef UNALIGNED
 195:rt-thread/src/kservice.c **** #undef TOO_SMALL
 196:rt-thread/src/kservice.c **** #endif
 197:rt-thread/src/kservice.c **** }
 198:rt-thread/src/kservice.c **** RTM_EXPORT(rt_memset);
 199:rt-thread/src/kservice.c **** 
 200:rt-thread/src/kservice.c **** /**
 201:rt-thread/src/kservice.c ****  * This function will copy memory content from source address to destination
 202:rt-thread/src/kservice.c ****  * address.
 203:rt-thread/src/kservice.c ****  *
ARM GAS  /tmp/ccGzdbPs.s 			page 5


 204:rt-thread/src/kservice.c ****  * @param dst the address of destination memory
 205:rt-thread/src/kservice.c ****  * @param src  the address of source memory
 206:rt-thread/src/kservice.c ****  * @param count the copied length
 207:rt-thread/src/kservice.c ****  *
 208:rt-thread/src/kservice.c ****  * @return the address of destination memory
 209:rt-thread/src/kservice.c ****  */
 210:rt-thread/src/kservice.c **** void *rt_memcpy(void *dst, const void *src, rt_ubase_t count)
 211:rt-thread/src/kservice.c **** {
 212:rt-thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 213:rt-thread/src/kservice.c ****     char *tmp = (char *)dst, *s = (char *)src;
 214:rt-thread/src/kservice.c ****     rt_ubase_t len;
 215:rt-thread/src/kservice.c **** 
 216:rt-thread/src/kservice.c ****     if (tmp <= s || tmp > (s + count))
 217:rt-thread/src/kservice.c ****     {
 218:rt-thread/src/kservice.c ****         while (count--)
 219:rt-thread/src/kservice.c ****             *tmp ++ = *s ++;
 220:rt-thread/src/kservice.c ****     }
 221:rt-thread/src/kservice.c ****     else
 222:rt-thread/src/kservice.c ****     {
 223:rt-thread/src/kservice.c ****         for (len = count; len > 0; len --)
 224:rt-thread/src/kservice.c ****             tmp[len - 1] = s[len - 1];
 225:rt-thread/src/kservice.c ****     }
 226:rt-thread/src/kservice.c **** 
 227:rt-thread/src/kservice.c ****     return dst;
 228:rt-thread/src/kservice.c **** #else
 229:rt-thread/src/kservice.c **** 
 230:rt-thread/src/kservice.c **** #define UNALIGNED(X, Y) \
 231:rt-thread/src/kservice.c ****     (((long)X & (sizeof (long) - 1)) | ((long)Y & (sizeof (long) - 1)))
 232:rt-thread/src/kservice.c **** #define BIGBLOCKSIZE    (sizeof (long) << 2)
 233:rt-thread/src/kservice.c **** #define LITTLEBLOCKSIZE (sizeof (long))
 234:rt-thread/src/kservice.c **** #define TOO_SMALL(LEN)  ((LEN) < BIGBLOCKSIZE)
 235:rt-thread/src/kservice.c **** 
 236:rt-thread/src/kservice.c ****     char *dst_ptr = (char *)dst;
 237:rt-thread/src/kservice.c ****     char *src_ptr = (char *)src;
 238:rt-thread/src/kservice.c ****     long *aligned_dst;
 239:rt-thread/src/kservice.c ****     long *aligned_src;
 240:rt-thread/src/kservice.c ****     int len = count;
 241:rt-thread/src/kservice.c **** 
 242:rt-thread/src/kservice.c ****     /* If the size is small, or either SRC or DST is unaligned,
 243:rt-thread/src/kservice.c ****     then punt into the byte copy loop.  This should be rare. */
 244:rt-thread/src/kservice.c ****     if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
 245:rt-thread/src/kservice.c ****     {
 246:rt-thread/src/kservice.c ****         aligned_dst = (long *)dst_ptr;
 247:rt-thread/src/kservice.c ****         aligned_src = (long *)src_ptr;
 248:rt-thread/src/kservice.c **** 
 249:rt-thread/src/kservice.c ****         /* Copy 4X long words at a time if possible. */
 250:rt-thread/src/kservice.c ****         while (len >= BIGBLOCKSIZE)
 251:rt-thread/src/kservice.c ****         {
 252:rt-thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 253:rt-thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 254:rt-thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 255:rt-thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 256:rt-thread/src/kservice.c ****             len -= BIGBLOCKSIZE;
 257:rt-thread/src/kservice.c ****         }
 258:rt-thread/src/kservice.c **** 
 259:rt-thread/src/kservice.c ****         /* Copy one long word at a time if possible. */
 260:rt-thread/src/kservice.c ****         while (len >= LITTLEBLOCKSIZE)
ARM GAS  /tmp/ccGzdbPs.s 			page 6


 261:rt-thread/src/kservice.c ****         {
 262:rt-thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 263:rt-thread/src/kservice.c ****             len -= LITTLEBLOCKSIZE;
 264:rt-thread/src/kservice.c ****         }
 265:rt-thread/src/kservice.c **** 
 266:rt-thread/src/kservice.c ****         /* Pick up any residual with a byte copier. */
 267:rt-thread/src/kservice.c ****         dst_ptr = (char *)aligned_dst;
 268:rt-thread/src/kservice.c ****         src_ptr = (char *)aligned_src;
 269:rt-thread/src/kservice.c ****     }
 270:rt-thread/src/kservice.c **** 
 271:rt-thread/src/kservice.c ****     while (len--)
 272:rt-thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 273:rt-thread/src/kservice.c **** 
 274:rt-thread/src/kservice.c ****     return dst;
 275:rt-thread/src/kservice.c **** #undef UNALIGNED
 276:rt-thread/src/kservice.c **** #undef BIGBLOCKSIZE
 277:rt-thread/src/kservice.c **** #undef LITTLEBLOCKSIZE
 278:rt-thread/src/kservice.c **** #undef TOO_SMALL
 279:rt-thread/src/kservice.c **** #endif
 280:rt-thread/src/kservice.c **** }
 281:rt-thread/src/kservice.c **** RTM_EXPORT(rt_memcpy);
 282:rt-thread/src/kservice.c **** 
 283:rt-thread/src/kservice.c **** /**
 284:rt-thread/src/kservice.c ****  * This function will move memory content from source address to destination
 285:rt-thread/src/kservice.c ****  * address.
 286:rt-thread/src/kservice.c ****  *
 287:rt-thread/src/kservice.c ****  * @param dest the address of destination memory
 288:rt-thread/src/kservice.c ****  * @param src  the address of source memory
 289:rt-thread/src/kservice.c ****  * @param n the copied length
 290:rt-thread/src/kservice.c ****  *
 291:rt-thread/src/kservice.c ****  * @return the address of destination memory
 292:rt-thread/src/kservice.c ****  */
 293:rt-thread/src/kservice.c **** void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
 294:rt-thread/src/kservice.c **** {
 295:rt-thread/src/kservice.c ****     char *tmp = (char *)dest, *s = (char *)src;
 296:rt-thread/src/kservice.c **** 
 297:rt-thread/src/kservice.c ****     if (s < tmp && tmp < s + n)
 298:rt-thread/src/kservice.c ****     {
 299:rt-thread/src/kservice.c ****         tmp += n;
 300:rt-thread/src/kservice.c ****         s += n;
 301:rt-thread/src/kservice.c **** 
 302:rt-thread/src/kservice.c ****         while (n--)
 303:rt-thread/src/kservice.c ****             *(--tmp) = *(--s);
 304:rt-thread/src/kservice.c ****     }
 305:rt-thread/src/kservice.c ****     else
 306:rt-thread/src/kservice.c ****     {
 307:rt-thread/src/kservice.c ****         while (n--)
 308:rt-thread/src/kservice.c ****             *tmp++ = *s++;
 309:rt-thread/src/kservice.c ****     }
 310:rt-thread/src/kservice.c **** 
 311:rt-thread/src/kservice.c ****     return dest;
 312:rt-thread/src/kservice.c **** }
 313:rt-thread/src/kservice.c **** RTM_EXPORT(rt_memmove);
 314:rt-thread/src/kservice.c **** 
 315:rt-thread/src/kservice.c **** /**
 316:rt-thread/src/kservice.c ****  * This function will compare two areas of memory
 317:rt-thread/src/kservice.c ****  *
ARM GAS  /tmp/ccGzdbPs.s 			page 7


 318:rt-thread/src/kservice.c ****  * @param cs one area of memory
 319:rt-thread/src/kservice.c ****  * @param ct another area of memory
 320:rt-thread/src/kservice.c ****  * @param count the size of the area
 321:rt-thread/src/kservice.c ****  *
 322:rt-thread/src/kservice.c ****  * @return the result
 323:rt-thread/src/kservice.c ****  */
 324:rt-thread/src/kservice.c **** rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
 325:rt-thread/src/kservice.c **** {
 326:rt-thread/src/kservice.c ****     const unsigned char *su1, *su2;
 327:rt-thread/src/kservice.c ****     int res = 0;
 328:rt-thread/src/kservice.c **** 
 329:rt-thread/src/kservice.c ****     for (su1 = (const unsigned char *)cs, su2 = (const unsigned char *)ct; 0 < count; ++su1, ++su2,
 330:rt-thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 331:rt-thread/src/kservice.c ****             break;
 332:rt-thread/src/kservice.c **** 
 333:rt-thread/src/kservice.c ****     return res;
 334:rt-thread/src/kservice.c **** }
 335:rt-thread/src/kservice.c **** RTM_EXPORT(rt_memcmp);
 336:rt-thread/src/kservice.c **** 
 337:rt-thread/src/kservice.c **** /**
 338:rt-thread/src/kservice.c ****  * This function will return the first occurrence of a string.
 339:rt-thread/src/kservice.c ****  *
 340:rt-thread/src/kservice.c ****  * @param s1 the source string
 341:rt-thread/src/kservice.c ****  * @param s2 the find string
 342:rt-thread/src/kservice.c ****  *
 343:rt-thread/src/kservice.c ****  * @return the first occurrence of a s2 in s1, or RT_NULL if no found.
 344:rt-thread/src/kservice.c ****  */
 345:rt-thread/src/kservice.c **** char *rt_strstr(const char *s1, const char *s2)
 346:rt-thread/src/kservice.c **** {
 347:rt-thread/src/kservice.c ****     int l1, l2;
 348:rt-thread/src/kservice.c **** 
 349:rt-thread/src/kservice.c ****     l2 = rt_strlen(s2);
 350:rt-thread/src/kservice.c ****     if (!l2)
 351:rt-thread/src/kservice.c ****         return (char *)s1;
 352:rt-thread/src/kservice.c ****     l1 = rt_strlen(s1);
 353:rt-thread/src/kservice.c ****     while (l1 >= l2)
 354:rt-thread/src/kservice.c ****     {
 355:rt-thread/src/kservice.c ****         l1 --;
 356:rt-thread/src/kservice.c ****         if (!rt_memcmp(s1, s2, l2))
 357:rt-thread/src/kservice.c ****             return (char *)s1;
 358:rt-thread/src/kservice.c ****         s1 ++;
 359:rt-thread/src/kservice.c ****     }
 360:rt-thread/src/kservice.c **** 
 361:rt-thread/src/kservice.c ****     return RT_NULL;
 362:rt-thread/src/kservice.c **** }
 363:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strstr);
 364:rt-thread/src/kservice.c **** 
 365:rt-thread/src/kservice.c **** /**
 366:rt-thread/src/kservice.c ****  * This function will compare two strings while ignoring differences in case
 367:rt-thread/src/kservice.c ****  *
 368:rt-thread/src/kservice.c ****  * @param a the string to be compared
 369:rt-thread/src/kservice.c ****  * @param b the string to be compared
 370:rt-thread/src/kservice.c ****  *
 371:rt-thread/src/kservice.c ****  * @return the result
 372:rt-thread/src/kservice.c ****  */
 373:rt-thread/src/kservice.c **** rt_uint32_t rt_strcasecmp(const char *a, const char *b)
 374:rt-thread/src/kservice.c **** {
ARM GAS  /tmp/ccGzdbPs.s 			page 8


 375:rt-thread/src/kservice.c ****     int ca, cb;
 376:rt-thread/src/kservice.c **** 
 377:rt-thread/src/kservice.c ****     do
 378:rt-thread/src/kservice.c ****     {
 379:rt-thread/src/kservice.c ****         ca = *a++ & 0xff;
 380:rt-thread/src/kservice.c ****         cb = *b++ & 0xff;
 381:rt-thread/src/kservice.c ****         if (ca >= 'A' && ca <= 'Z')
 382:rt-thread/src/kservice.c ****             ca += 'a' - 'A';
 383:rt-thread/src/kservice.c ****         if (cb >= 'A' && cb <= 'Z')
 384:rt-thread/src/kservice.c ****             cb += 'a' - 'A';
 385:rt-thread/src/kservice.c ****     }
 386:rt-thread/src/kservice.c ****     while (ca == cb && ca != '\0');
 387:rt-thread/src/kservice.c **** 
 388:rt-thread/src/kservice.c ****     return ca - cb;
 389:rt-thread/src/kservice.c **** }
 390:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strcasecmp);
 391:rt-thread/src/kservice.c **** 
 392:rt-thread/src/kservice.c **** /**
 393:rt-thread/src/kservice.c ****  * This function will copy string no more than n bytes.
 394:rt-thread/src/kservice.c ****  *
 395:rt-thread/src/kservice.c ****  * @param dst the string to copy
 396:rt-thread/src/kservice.c ****  * @param src the string to be copied
 397:rt-thread/src/kservice.c ****  * @param n the maximum copied length
 398:rt-thread/src/kservice.c ****  *
 399:rt-thread/src/kservice.c ****  * @return the result
 400:rt-thread/src/kservice.c ****  */
 401:rt-thread/src/kservice.c **** char *rt_strncpy(char *dst, const char *src, rt_ubase_t n)
 402:rt-thread/src/kservice.c **** {
 403:rt-thread/src/kservice.c ****     if (n != 0)
 404:rt-thread/src/kservice.c ****     {
 405:rt-thread/src/kservice.c ****         char *d = dst;
 406:rt-thread/src/kservice.c ****         const char *s = src;
 407:rt-thread/src/kservice.c **** 
 408:rt-thread/src/kservice.c ****         do
 409:rt-thread/src/kservice.c ****         {
 410:rt-thread/src/kservice.c ****             if ((*d++ = *s++) == 0)
 411:rt-thread/src/kservice.c ****             {
 412:rt-thread/src/kservice.c ****                 /* NUL pad the remaining n-1 bytes */
 413:rt-thread/src/kservice.c ****                 while (--n != 0)
 414:rt-thread/src/kservice.c ****                     *d++ = 0;
 415:rt-thread/src/kservice.c ****                 break;
 416:rt-thread/src/kservice.c ****             }
 417:rt-thread/src/kservice.c ****         } while (--n != 0);
 418:rt-thread/src/kservice.c ****     }
 419:rt-thread/src/kservice.c **** 
 420:rt-thread/src/kservice.c ****     return (dst);
 421:rt-thread/src/kservice.c **** }
 422:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strncpy);
 423:rt-thread/src/kservice.c **** 
 424:rt-thread/src/kservice.c **** /**
 425:rt-thread/src/kservice.c ****  * This function will compare two strings with specified maximum length
 426:rt-thread/src/kservice.c ****  *
 427:rt-thread/src/kservice.c ****  * @param cs the string to be compared
 428:rt-thread/src/kservice.c ****  * @param ct the string to be compared
 429:rt-thread/src/kservice.c ****  * @param count the maximum compare length
 430:rt-thread/src/kservice.c ****  *
 431:rt-thread/src/kservice.c ****  * @return the result
ARM GAS  /tmp/ccGzdbPs.s 			page 9


 432:rt-thread/src/kservice.c ****  */
 433:rt-thread/src/kservice.c **** rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
 434:rt-thread/src/kservice.c **** {
 435:rt-thread/src/kservice.c ****     register signed char __res = 0;
 436:rt-thread/src/kservice.c **** 
 437:rt-thread/src/kservice.c ****     while (count)
 438:rt-thread/src/kservice.c ****     {
 439:rt-thread/src/kservice.c ****         if ((__res = *cs - *ct++) != 0 || !*cs++)
 440:rt-thread/src/kservice.c ****             break;
 441:rt-thread/src/kservice.c ****         count --;
 442:rt-thread/src/kservice.c ****     }
 443:rt-thread/src/kservice.c **** 
 444:rt-thread/src/kservice.c ****     return __res;
 445:rt-thread/src/kservice.c **** }
 446:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strncmp);
 447:rt-thread/src/kservice.c **** 
 448:rt-thread/src/kservice.c **** /**
 449:rt-thread/src/kservice.c ****  * This function will compare two strings without specified length
 450:rt-thread/src/kservice.c ****  *
 451:rt-thread/src/kservice.c ****  * @param cs the string to be compared
 452:rt-thread/src/kservice.c ****  * @param ct the string to be compared
 453:rt-thread/src/kservice.c ****  *
 454:rt-thread/src/kservice.c ****  * @return the result
 455:rt-thread/src/kservice.c ****  */
 456:rt-thread/src/kservice.c **** rt_int32_t rt_strcmp(const char *cs, const char *ct)
 457:rt-thread/src/kservice.c **** {
 458:rt-thread/src/kservice.c ****     while (*cs && *cs == *ct)
 459:rt-thread/src/kservice.c ****         cs++, ct++;
 460:rt-thread/src/kservice.c **** 
 461:rt-thread/src/kservice.c ****     return (*cs - *ct);
 462:rt-thread/src/kservice.c **** }
 463:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strcmp);
 464:rt-thread/src/kservice.c **** 
 465:rt-thread/src/kservice.c **** /**
 466:rt-thread/src/kservice.c ****  * The  strnlen()  function  returns the number of characters in the
 467:rt-thread/src/kservice.c ****  * string pointed to by s, excluding the terminating null byte ('\0'),
 468:rt-thread/src/kservice.c ****  * but at most maxlen.  In doing this, strnlen() looks only at the
 469:rt-thread/src/kservice.c ****  * first maxlen characters in the string pointed to by s and never
 470:rt-thread/src/kservice.c ****  * beyond s+maxlen.
 471:rt-thread/src/kservice.c ****  *
 472:rt-thread/src/kservice.c ****  * @param s the string
 473:rt-thread/src/kservice.c ****  * @param maxlen the max size
 474:rt-thread/src/kservice.c ****  * @return the length of string
 475:rt-thread/src/kservice.c ****  */
 476:rt-thread/src/kservice.c **** rt_size_t rt_strnlen(const char *s, rt_ubase_t maxlen)
 477:rt-thread/src/kservice.c **** {
 478:rt-thread/src/kservice.c ****     const char *sc;
 479:rt-thread/src/kservice.c **** 
 480:rt-thread/src/kservice.c ****     for (sc = s; *sc != '\0' && (rt_ubase_t)(sc - s) < maxlen; ++sc) /* nothing */
 481:rt-thread/src/kservice.c ****         ;
 482:rt-thread/src/kservice.c **** 
 483:rt-thread/src/kservice.c ****     return sc - s;
 484:rt-thread/src/kservice.c **** }
 485:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strnlen);
 486:rt-thread/src/kservice.c **** 
 487:rt-thread/src/kservice.c **** /**
 488:rt-thread/src/kservice.c ****  * This function will return the length of a string, which terminate will
ARM GAS  /tmp/ccGzdbPs.s 			page 10


 489:rt-thread/src/kservice.c ****  * null character.
 490:rt-thread/src/kservice.c ****  *
 491:rt-thread/src/kservice.c ****  * @param s the string
 492:rt-thread/src/kservice.c ****  *
 493:rt-thread/src/kservice.c ****  * @return the length of string
 494:rt-thread/src/kservice.c ****  */
 495:rt-thread/src/kservice.c **** rt_size_t rt_strlen(const char *s)
 496:rt-thread/src/kservice.c **** {
 497:rt-thread/src/kservice.c ****     const char *sc;
 498:rt-thread/src/kservice.c **** 
 499:rt-thread/src/kservice.c ****     for (sc = s; *sc != '\0'; ++sc) /* nothing */
 500:rt-thread/src/kservice.c ****         ;
 501:rt-thread/src/kservice.c **** 
 502:rt-thread/src/kservice.c ****     return sc - s;
 503:rt-thread/src/kservice.c **** }
 504:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strlen);
 505:rt-thread/src/kservice.c **** 
 506:rt-thread/src/kservice.c **** #ifdef RT_USING_HEAP
 507:rt-thread/src/kservice.c **** /**
 508:rt-thread/src/kservice.c ****  * This function will duplicate a string.
 509:rt-thread/src/kservice.c ****  *
 510:rt-thread/src/kservice.c ****  * @param s the string to be duplicated
 511:rt-thread/src/kservice.c ****  *
 512:rt-thread/src/kservice.c ****  * @return the duplicated string pointer
 513:rt-thread/src/kservice.c ****  */
 514:rt-thread/src/kservice.c **** char *rt_strdup(const char *s)
 515:rt-thread/src/kservice.c **** {
 516:rt-thread/src/kservice.c ****     rt_size_t len = rt_strlen(s) + 1;
 517:rt-thread/src/kservice.c ****     char *tmp = (char *)rt_malloc(len);
 518:rt-thread/src/kservice.c **** 
 519:rt-thread/src/kservice.c ****     if (!tmp)
 520:rt-thread/src/kservice.c ****         return RT_NULL;
 521:rt-thread/src/kservice.c **** 
 522:rt-thread/src/kservice.c ****     rt_memcpy(tmp, s, len);
 523:rt-thread/src/kservice.c **** 
 524:rt-thread/src/kservice.c ****     return tmp;
 525:rt-thread/src/kservice.c **** }
 526:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strdup);
 527:rt-thread/src/kservice.c **** #if defined(__CC_ARM) || defined(__CLANG_ARM)
 528:rt-thread/src/kservice.c **** char *strdup(const char *s) __attribute__((alias("rt_strdup")));
 529:rt-thread/src/kservice.c **** #endif
 530:rt-thread/src/kservice.c **** #endif
 531:rt-thread/src/kservice.c **** 
 532:rt-thread/src/kservice.c **** /**
 533:rt-thread/src/kservice.c ****  * This function will show the version of rt-thread rtos
 534:rt-thread/src/kservice.c ****  */
 535:rt-thread/src/kservice.c **** void rt_show_version(void)
 536:rt-thread/src/kservice.c **** {
 537:rt-thread/src/kservice.c ****     rt_kprintf("\n \\ | /\n");
 538:rt-thread/src/kservice.c ****     rt_kprintf("- RT -     Thread Operating System\n");
 539:rt-thread/src/kservice.c ****     rt_kprintf(" / | \\     %d.%d.%d build %s\n",
 540:rt-thread/src/kservice.c ****                RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__);
 541:rt-thread/src/kservice.c ****     rt_kprintf(" 2006 - 2019 Copyright by rt-thread team\n");
 542:rt-thread/src/kservice.c **** }
 543:rt-thread/src/kservice.c **** RTM_EXPORT(rt_show_version);
 544:rt-thread/src/kservice.c **** 
 545:rt-thread/src/kservice.c **** /* private function */
ARM GAS  /tmp/ccGzdbPs.s 			page 11


 546:rt-thread/src/kservice.c **** #define isdigit(c)  ((unsigned)((c) - '0') < 10)
 547:rt-thread/src/kservice.c **** 
 548:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 549:rt-thread/src/kservice.c **** rt_inline int divide(long long *n, int base)
 550:rt-thread/src/kservice.c **** {
 551:rt-thread/src/kservice.c ****     int res;
 552:rt-thread/src/kservice.c **** 
 553:rt-thread/src/kservice.c ****     /* optimized for processor which does not support divide instructions. */
 554:rt-thread/src/kservice.c ****     if (base == 10)
 555:rt-thread/src/kservice.c ****     {
 556:rt-thread/src/kservice.c ****         res = (int)(((unsigned long long)*n) % 10U);
 557:rt-thread/src/kservice.c ****         *n = (long long)(((unsigned long long)*n) / 10U);
 558:rt-thread/src/kservice.c ****     }
 559:rt-thread/src/kservice.c ****     else
 560:rt-thread/src/kservice.c ****     {
 561:rt-thread/src/kservice.c ****         res = (int)(((unsigned long long)*n) % 16U);
 562:rt-thread/src/kservice.c ****         *n = (long long)(((unsigned long long)*n) / 16U);
 563:rt-thread/src/kservice.c ****     }
 564:rt-thread/src/kservice.c **** 
 565:rt-thread/src/kservice.c ****     return res;
 566:rt-thread/src/kservice.c **** }
 567:rt-thread/src/kservice.c **** #else
 568:rt-thread/src/kservice.c **** rt_inline int divide(long *n, int base)
 569:rt-thread/src/kservice.c **** {
 570:rt-thread/src/kservice.c ****     int res;
 571:rt-thread/src/kservice.c **** 
 572:rt-thread/src/kservice.c ****     /* optimized for processor which does not support divide instructions. */
 573:rt-thread/src/kservice.c ****     if (base == 10)
 574:rt-thread/src/kservice.c ****     {
 575:rt-thread/src/kservice.c ****         res = (int)(((unsigned long)*n) % 10U);
 576:rt-thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 10U);
 577:rt-thread/src/kservice.c ****     }
 578:rt-thread/src/kservice.c ****     else
 579:rt-thread/src/kservice.c ****     {
 580:rt-thread/src/kservice.c ****         res = (int)(((unsigned long)*n) % 16U);
 581:rt-thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 16U);
 582:rt-thread/src/kservice.c ****     }
 583:rt-thread/src/kservice.c **** 
 584:rt-thread/src/kservice.c ****     return res;
 585:rt-thread/src/kservice.c **** }
 586:rt-thread/src/kservice.c **** #endif
 587:rt-thread/src/kservice.c **** 
 588:rt-thread/src/kservice.c **** rt_inline int skip_atoi(const char **s)
 589:rt-thread/src/kservice.c **** {
 590:rt-thread/src/kservice.c ****     register int i = 0;
 591:rt-thread/src/kservice.c ****     while (isdigit(**s))
 592:rt-thread/src/kservice.c ****         i = i * 10 + *((*s)++) - '0';
 593:rt-thread/src/kservice.c **** 
 594:rt-thread/src/kservice.c ****     return i;
 595:rt-thread/src/kservice.c **** }
 596:rt-thread/src/kservice.c **** 
 597:rt-thread/src/kservice.c **** #define ZEROPAD     (1 << 0)    /* pad with zero */
 598:rt-thread/src/kservice.c **** #define SIGN        (1 << 1)    /* unsigned/signed long */
 599:rt-thread/src/kservice.c **** #define PLUS        (1 << 2)    /* show plus */
 600:rt-thread/src/kservice.c **** #define SPACE       (1 << 3)    /* space if plus */
 601:rt-thread/src/kservice.c **** #define LEFT        (1 << 4)    /* left justified */
 602:rt-thread/src/kservice.c **** #define SPECIAL     (1 << 5)    /* 0x */
ARM GAS  /tmp/ccGzdbPs.s 			page 12


 603:rt-thread/src/kservice.c **** #define LARGE       (1 << 6)    /* use 'ABCDEF' instead of 'abcdef' */
 604:rt-thread/src/kservice.c **** 
 605:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 606:rt-thread/src/kservice.c **** static char *print_number(char *buf,
 607:rt-thread/src/kservice.c ****                           char *end,
 608:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 609:rt-thread/src/kservice.c ****                           long long  num,
 610:rt-thread/src/kservice.c **** #else
 611:rt-thread/src/kservice.c ****                           long  num,
 612:rt-thread/src/kservice.c **** #endif
 613:rt-thread/src/kservice.c ****                           int   base,
 614:rt-thread/src/kservice.c ****                           int   s,
 615:rt-thread/src/kservice.c ****                           int   precision,
 616:rt-thread/src/kservice.c ****                           int   type)
 617:rt-thread/src/kservice.c **** #else
 618:rt-thread/src/kservice.c **** static char *print_number(char *buf,
 619:rt-thread/src/kservice.c ****                           char *end,
 620:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 621:rt-thread/src/kservice.c ****                           long long  num,
 622:rt-thread/src/kservice.c **** #else
 623:rt-thread/src/kservice.c ****                           long  num,
 624:rt-thread/src/kservice.c **** #endif
 625:rt-thread/src/kservice.c ****                           int   base,
 626:rt-thread/src/kservice.c ****                           int   s,
 627:rt-thread/src/kservice.c ****                           int   type)
 628:rt-thread/src/kservice.c **** #endif
 629:rt-thread/src/kservice.c **** {
  27              		.loc 1 629 0
  28              		.cfi_startproc
  29              		@ args = 12, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 36
  35              		.cfi_offset 4, -36
  36              		.cfi_offset 5, -32
  37              		.cfi_offset 6, -28
  38              		.cfi_offset 7, -24
  39              		.cfi_offset 8, -20
  40              		.cfi_offset 9, -16
  41              		.cfi_offset 10, -12
  42              		.cfi_offset 11, -8
  43              		.cfi_offset 14, -4
  44 0004 85B0     		sub	sp, sp, #20
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 56
  47 0006 0F9E     		ldr	r6, [sp, #60]
  48 0008 109F     		ldr	r7, [sp, #64]
  49              	.LVL1:
 630:rt-thread/src/kservice.c ****     char c, sign;
 631:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 632:rt-thread/src/kservice.c ****     char tmp[32];
 633:rt-thread/src/kservice.c **** #else
 634:rt-thread/src/kservice.c ****     char tmp[16];
 635:rt-thread/src/kservice.c **** #endif
 636:rt-thread/src/kservice.c ****     int precision_bak = precision;
ARM GAS  /tmp/ccGzdbPs.s 			page 13


 637:rt-thread/src/kservice.c ****     const char *digits;
 638:rt-thread/src/kservice.c ****     static const char small_digits[] = "0123456789abcdef";
 639:rt-thread/src/kservice.c ****     static const char large_digits[] = "0123456789ABCDEF";
 640:rt-thread/src/kservice.c ****     register int i;
 641:rt-thread/src/kservice.c ****     register int size;
 642:rt-thread/src/kservice.c **** 
 643:rt-thread/src/kservice.c ****     size = s;
 644:rt-thread/src/kservice.c **** 
 645:rt-thread/src/kservice.c ****     digits = (type & LARGE) ? large_digits : small_digits;
  50              		.loc 1 645 0
  51 000a 17F0400F 		tst	r7, #64
  52 000e 19D0     		beq	.L33
  53 0010 DFF85491 		ldr	r9, .L44+4
  54              	.L2:
  55              	.LVL2:
 646:rt-thread/src/kservice.c ****     if (type & LEFT)
  56              		.loc 1 646 0 discriminator 4
  57 0014 17F0100F 		tst	r7, #16
  58 0018 01D0     		beq	.L3
 647:rt-thread/src/kservice.c ****         type &= ~ZEROPAD;
  59              		.loc 1 647 0
  60 001a 27F00107 		bic	r7, r7, #1
  61              	.LVL3:
  62              	.L3:
 648:rt-thread/src/kservice.c **** 
 649:rt-thread/src/kservice.c ****     c = (type & ZEROPAD) ? '0' : ' ';
  63              		.loc 1 649 0
  64 001e 17F0010F 		tst	r7, #1
  65 0022 12D0     		beq	.L34
  66 0024 4FF0300E 		mov	lr, #48
  67              	.L4:
  68              	.LVL4:
 650:rt-thread/src/kservice.c **** 
 651:rt-thread/src/kservice.c ****     /* get sign */
 652:rt-thread/src/kservice.c ****     sign = 0;
 653:rt-thread/src/kservice.c ****     if (type & SIGN)
  69              		.loc 1 653 0 discriminator 4
  70 0028 17F0020F 		tst	r7, #2
  71 002c 14D0     		beq	.L35
 654:rt-thread/src/kservice.c ****     {
 655:rt-thread/src/kservice.c ****         if (num < 0)
  72              		.loc 1 655 0
  73 002e 002A     		cmp	r2, #0
  74 0030 0EDB     		blt	.L41
 656:rt-thread/src/kservice.c ****         {
 657:rt-thread/src/kservice.c ****             sign = '-';
 658:rt-thread/src/kservice.c ****             num = -num;
 659:rt-thread/src/kservice.c ****         }
 660:rt-thread/src/kservice.c ****         else if (type & PLUS)
  75              		.loc 1 660 0
  76 0032 17F0040F 		tst	r7, #4
  77 0036 26D1     		bne	.L36
 661:rt-thread/src/kservice.c ****             sign = '+';
 662:rt-thread/src/kservice.c ****         else if (type & SPACE)
  78              		.loc 1 662 0
  79 0038 17F0080F 		tst	r7, #8
  80 003c 26D1     		bne	.L37
ARM GAS  /tmp/ccGzdbPs.s 			page 14


 652:rt-thread/src/kservice.c ****     if (type & SIGN)
  81              		.loc 1 652 0
  82 003e 4FF0000C 		mov	ip, #0
  83 0042 0BE0     		b	.L5
  84              	.LVL5:
  85              	.L33:
 645:rt-thread/src/kservice.c ****     if (type & LEFT)
  86              		.loc 1 645 0
  87 0044 DFF82491 		ldr	r9, .L44+8
  88 0048 E4E7     		b	.L2
  89              	.LVL6:
  90              	.L34:
 649:rt-thread/src/kservice.c **** 
  91              		.loc 1 649 0
  92 004a 4FF0200E 		mov	lr, #32
  93 004e EBE7     		b	.L4
  94              	.LVL7:
  95              	.L41:
 658:rt-thread/src/kservice.c ****         }
  96              		.loc 1 658 0
  97 0050 5242     		negs	r2, r2
  98              	.LVL8:
 657:rt-thread/src/kservice.c ****             num = -num;
  99              		.loc 1 657 0
 100 0052 4FF02D0C 		mov	ip, #45
 101 0056 01E0     		b	.L5
 102              	.LVL9:
 103              	.L35:
 652:rt-thread/src/kservice.c ****     if (type & SIGN)
 104              		.loc 1 652 0
 105 0058 4FF0000C 		mov	ip, #0
 106              	.LVL10:
 107              	.L5:
 663:rt-thread/src/kservice.c ****             sign = ' ';
 664:rt-thread/src/kservice.c ****     }
 665:rt-thread/src/kservice.c **** 
 666:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_SPECIAL
 667:rt-thread/src/kservice.c ****     if (type & SPECIAL)
 668:rt-thread/src/kservice.c ****     {
 669:rt-thread/src/kservice.c ****         if (base == 16)
 670:rt-thread/src/kservice.c ****             size -= 2;
 671:rt-thread/src/kservice.c ****         else if (base == 8)
 672:rt-thread/src/kservice.c ****             size--;
 673:rt-thread/src/kservice.c ****     }
 674:rt-thread/src/kservice.c **** #endif
 675:rt-thread/src/kservice.c **** 
 676:rt-thread/src/kservice.c ****     i = 0;
 677:rt-thread/src/kservice.c ****     if (num == 0)
 108              		.loc 1 677 0
 109 005c BABB     		cbnz	r2, .L38
 110              	.LVL11:
 678:rt-thread/src/kservice.c ****         tmp[i++] = '0';
 111              		.loc 1 678 0
 112 005e 3023     		movs	r3, #48
 113              	.LVL12:
 114 0060 8DF80030 		strb	r3, [sp]
 115 0064 0124     		movs	r4, #1
ARM GAS  /tmp/ccGzdbPs.s 			page 15


 116              	.LVL13:
 117              	.L8:
 679:rt-thread/src/kservice.c ****     else
 680:rt-thread/src/kservice.c ****     {
 681:rt-thread/src/kservice.c ****         while (num != 0)
 682:rt-thread/src/kservice.c ****             tmp[i++] = digits[divide(&num, base)];
 683:rt-thread/src/kservice.c ****     }
 684:rt-thread/src/kservice.c **** 
 685:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 686:rt-thread/src/kservice.c ****     if (i > precision)
 118              		.loc 1 686 0
 119 0066 B442     		cmp	r4, r6
 120 0068 33DC     		bgt	.L39
 121 006a 3246     		mov	r2, r6
 122              	.LVL14:
 123              	.L12:
 687:rt-thread/src/kservice.c ****         precision = i;
 688:rt-thread/src/kservice.c ****     size -= precision;
 124              		.loc 1 688 0
 125 006c 0E9D     		ldr	r5, [sp, #56]
 126 006e AD1A     		subs	r5, r5, r2
 127              	.LVL15:
 689:rt-thread/src/kservice.c **** #else
 690:rt-thread/src/kservice.c ****     size -= i;
 691:rt-thread/src/kservice.c **** #endif
 692:rt-thread/src/kservice.c **** 
 693:rt-thread/src/kservice.c ****     if (!(type & (ZEROPAD | LEFT)))
 128              		.loc 1 693 0
 129 0070 17F0110F 		tst	r7, #17
 130 0074 39D1     		bne	.L13
 694:rt-thread/src/kservice.c ****     {
 695:rt-thread/src/kservice.c ****         if ((sign) && (size > 0))
 131              		.loc 1 695 0
 132 0076 BCF1000F 		cmp	ip, #0
 133 007a 02D0     		beq	.L14
 134              		.loc 1 695 0 is_stmt 0 discriminator 1
 135 007c 002D     		cmp	r5, #0
 136 007e 00DD     		ble	.L14
 696:rt-thread/src/kservice.c ****             size--;
 137              		.loc 1 696 0 is_stmt 1
 138 0080 013D     		subs	r5, r5, #1
 139              	.LVL16:
 140              	.L14:
 687:rt-thread/src/kservice.c ****     size -= precision;
 141              		.loc 1 687 0
 142 0082 2B46     		mov	r3, r5
 143 0084 29E0     		b	.L15
 144              	.LVL17:
 145              	.L36:
 661:rt-thread/src/kservice.c ****         else if (type & SPACE)
 146              		.loc 1 661 0
 147 0086 4FF02B0C 		mov	ip, #43
 148 008a E7E7     		b	.L5
 149              	.L37:
 663:rt-thread/src/kservice.c ****     }
 150              		.loc 1 663 0
 151 008c 4FF0200C 		mov	ip, #32
ARM GAS  /tmp/ccGzdbPs.s 			page 16


 152 0090 E4E7     		b	.L5
 153              	.LVL18:
 154              	.L42:
 155              	.LBB8:
 156              	.LBB9:
 575:rt-thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 10U);
 157              		.loc 1 575 0
 158 0092 344D     		ldr	r5, .L44
 159 0094 A5FB02A5 		umull	r10, r5, r5, r2
 160 0098 ED08     		lsrs	r5, r5, #3
 161 009a AA46     		mov	r10, r5
 162 009c 05EB8505 		add	r5, r5, r5, lsl #2
 163 00a0 4FEA450B 		lsl	fp, r5, #1
 164 00a4 A2EB0B0B 		sub	fp, r2, fp
 165              	.LVL19:
 576:rt-thread/src/kservice.c ****     }
 166              		.loc 1 576 0
 167 00a8 5246     		mov	r2, r10
 168              	.LVL20:
 169              	.L10:
 170              	.LBE9:
 171              	.LBE8:
 682:rt-thread/src/kservice.c ****     }
 172              		.loc 1 682 0
 173 00aa 19F80B50 		ldrb	r5, [r9, fp]	@ zero_extendqisi2
 174 00ae 0DF1100A 		add	r10, sp, #16
 175 00b2 5444     		add	r4, r4, r10
 176 00b4 04F8105C 		strb	r5, [r4, #-16]
 177 00b8 4446     		mov	r4, r8
 178              	.LVL21:
 179              	.L7:
 681:rt-thread/src/kservice.c ****             tmp[i++] = digits[divide(&num, base)];
 180              		.loc 1 681 0
 181 00ba 002A     		cmp	r2, #0
 182 00bc D3D0     		beq	.L8
 682:rt-thread/src/kservice.c ****     }
 183              		.loc 1 682 0
 184 00be 04F10108 		add	r8, r4, #1
 185              	.LVL22:
 186              	.LBB11:
 187              	.LBB10:
 573:rt-thread/src/kservice.c ****     {
 188              		.loc 1 573 0
 189 00c2 0A2B     		cmp	r3, #10
 190 00c4 E5D0     		beq	.L42
 580:rt-thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 16U);
 191              		.loc 1 580 0
 192 00c6 02F00F0B 		and	fp, r2, #15
 193              	.LVL23:
 581:rt-thread/src/kservice.c ****     }
 194              		.loc 1 581 0
 195 00ca 1209     		lsrs	r2, r2, #4
 196              	.LVL24:
 197 00cc EDE7     		b	.L10
 198              	.LVL25:
 199              	.L38:
 200              	.LBE10:
ARM GAS  /tmp/ccGzdbPs.s 			page 17


 201              	.LBE11:
 202 00ce 0024     		movs	r4, #0
 203 00d0 F3E7     		b	.L7
 204              	.LVL26:
 205              	.L39:
 687:rt-thread/src/kservice.c ****     size -= precision;
 206              		.loc 1 687 0
 207 00d2 2246     		mov	r2, r4
 208              	.LVL27:
 209 00d4 CAE7     		b	.L12
 210              	.LVL28:
 211              	.L16:
 697:rt-thread/src/kservice.c **** 
 698:rt-thread/src/kservice.c ****         while (size-- > 0)
 699:rt-thread/src/kservice.c ****         {
 700:rt-thread/src/kservice.c ****             if (buf < end)
 701:rt-thread/src/kservice.c ****                 *buf = ' ';
 702:rt-thread/src/kservice.c ****             ++ buf;
 212              		.loc 1 702 0
 213 00d6 0130     		adds	r0, r0, #1
 214              	.LVL29:
 698:rt-thread/src/kservice.c ****         {
 215              		.loc 1 698 0
 216 00d8 2B46     		mov	r3, r5
 217              	.LVL30:
 218              	.L15:
 219 00da 5D1E     		subs	r5, r3, #1
 220              	.LVL31:
 221 00dc 002B     		cmp	r3, #0
 222 00de 04DD     		ble	.L13
 700:rt-thread/src/kservice.c ****                 *buf = ' ';
 223              		.loc 1 700 0
 224 00e0 8842     		cmp	r0, r1
 225 00e2 F8D2     		bcs	.L16
 701:rt-thread/src/kservice.c ****             ++ buf;
 226              		.loc 1 701 0
 227 00e4 2023     		movs	r3, #32
 228 00e6 0370     		strb	r3, [r0]
 229 00e8 F5E7     		b	.L16
 230              	.L13:
 703:rt-thread/src/kservice.c ****         }
 704:rt-thread/src/kservice.c ****     }
 705:rt-thread/src/kservice.c **** 
 706:rt-thread/src/kservice.c ****     if (sign)
 231              		.loc 1 706 0
 232 00ea BCF1000F 		cmp	ip, #0
 233 00ee 05D0     		beq	.L18
 707:rt-thread/src/kservice.c ****     {
 708:rt-thread/src/kservice.c ****         if (buf < end)
 234              		.loc 1 708 0
 235 00f0 8842     		cmp	r0, r1
 236 00f2 01D2     		bcs	.L19
 709:rt-thread/src/kservice.c ****         {
 710:rt-thread/src/kservice.c ****             *buf = sign;
 237              		.loc 1 710 0
 238 00f4 80F800C0 		strb	ip, [r0]
 239              	.L19:
ARM GAS  /tmp/ccGzdbPs.s 			page 18


 711:rt-thread/src/kservice.c ****         }
 712:rt-thread/src/kservice.c ****         -- size;
 240              		.loc 1 712 0
 241 00f8 013D     		subs	r5, r5, #1
 242              	.LVL32:
 713:rt-thread/src/kservice.c ****         ++ buf;
 243              		.loc 1 713 0
 244 00fa 0130     		adds	r0, r0, #1
 245              	.LVL33:
 246              	.L18:
 714:rt-thread/src/kservice.c ****     }
 715:rt-thread/src/kservice.c **** 
 716:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_SPECIAL
 717:rt-thread/src/kservice.c ****     if (type & SPECIAL)
 718:rt-thread/src/kservice.c ****     {
 719:rt-thread/src/kservice.c ****         if (base == 8)
 720:rt-thread/src/kservice.c ****         {
 721:rt-thread/src/kservice.c ****             if (buf < end)
 722:rt-thread/src/kservice.c ****                 *buf = '0';
 723:rt-thread/src/kservice.c ****             ++ buf;
 724:rt-thread/src/kservice.c ****         }
 725:rt-thread/src/kservice.c ****         else if (base == 16)
 726:rt-thread/src/kservice.c ****         {
 727:rt-thread/src/kservice.c ****             if (buf < end)
 728:rt-thread/src/kservice.c ****                 *buf = '0';
 729:rt-thread/src/kservice.c ****             ++ buf;
 730:rt-thread/src/kservice.c ****             if (buf < end)
 731:rt-thread/src/kservice.c ****             {
 732:rt-thread/src/kservice.c ****                 *buf = type & LARGE ? 'X' : 'x';
 733:rt-thread/src/kservice.c ****             }
 734:rt-thread/src/kservice.c ****             ++ buf;
 735:rt-thread/src/kservice.c ****         }
 736:rt-thread/src/kservice.c ****     }
 737:rt-thread/src/kservice.c **** #endif
 738:rt-thread/src/kservice.c **** 
 739:rt-thread/src/kservice.c ****     /* no align to the left */
 740:rt-thread/src/kservice.c ****     if (!(type & LEFT))
 247              		.loc 1 740 0
 248 00fc 17F0100F 		tst	r7, #16
 249 0100 03D0     		beq	.L20
 250 0102 2B46     		mov	r3, r5
 251 0104 0BE0     		b	.L24
 252              	.LVL34:
 253              	.L22:
 741:rt-thread/src/kservice.c ****     {
 742:rt-thread/src/kservice.c ****         while (size-- > 0)
 743:rt-thread/src/kservice.c ****         {
 744:rt-thread/src/kservice.c ****             if (buf < end)
 745:rt-thread/src/kservice.c ****                 *buf = c;
 746:rt-thread/src/kservice.c ****             ++ buf;
 254              		.loc 1 746 0
 255 0106 0130     		adds	r0, r0, #1
 256              	.LVL35:
 742:rt-thread/src/kservice.c ****         {
 257              		.loc 1 742 0
 258 0108 1D46     		mov	r5, r3
 259              	.LVL36:
ARM GAS  /tmp/ccGzdbPs.s 			page 19


 260              	.L20:
 261 010a 6B1E     		subs	r3, r5, #1
 262              	.LVL37:
 263 010c 002D     		cmp	r5, #0
 264 010e 06DD     		ble	.L24
 744:rt-thread/src/kservice.c ****                 *buf = c;
 265              		.loc 1 744 0
 266 0110 8842     		cmp	r0, r1
 267 0112 F8D2     		bcs	.L22
 745:rt-thread/src/kservice.c ****             ++ buf;
 268              		.loc 1 745 0
 269 0114 80F800E0 		strb	lr, [r0]
 270 0118 F5E7     		b	.L22
 271              	.LVL38:
 272              	.L25:
 747:rt-thread/src/kservice.c ****         }
 748:rt-thread/src/kservice.c ****     }
 749:rt-thread/src/kservice.c **** 
 750:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 751:rt-thread/src/kservice.c ****     while (i < precision--)
 752:rt-thread/src/kservice.c ****     {
 753:rt-thread/src/kservice.c ****         if (buf < end)
 754:rt-thread/src/kservice.c ****             *buf = '0';
 755:rt-thread/src/kservice.c ****         ++ buf;
 273              		.loc 1 755 0
 274 011a 0130     		adds	r0, r0, #1
 275              	.LVL39:
 751:rt-thread/src/kservice.c ****     {
 276              		.loc 1 751 0
 277 011c 2A46     		mov	r2, r5
 278              	.LVL40:
 279              	.L24:
 280 011e 551E     		subs	r5, r2, #1
 281              	.LVL41:
 282 0120 A242     		cmp	r2, r4
 283 0122 06DD     		ble	.L27
 753:rt-thread/src/kservice.c ****             *buf = '0';
 284              		.loc 1 753 0
 285 0124 8842     		cmp	r0, r1
 286 0126 F8D2     		bcs	.L25
 754:rt-thread/src/kservice.c ****         ++ buf;
 287              		.loc 1 754 0
 288 0128 3022     		movs	r2, #48
 289 012a 0270     		strb	r2, [r0]
 290 012c F5E7     		b	.L25
 291              	.LVL42:
 292              	.L28:
 756:rt-thread/src/kservice.c ****     }
 757:rt-thread/src/kservice.c **** #endif
 758:rt-thread/src/kservice.c **** 
 759:rt-thread/src/kservice.c ****     /* put number in the temporary buffer */
 760:rt-thread/src/kservice.c ****     while (i-- > 0 && (precision_bak != 0))
 761:rt-thread/src/kservice.c ****     {
 762:rt-thread/src/kservice.c ****         if (buf < end)
 763:rt-thread/src/kservice.c ****             *buf = tmp[i];
 764:rt-thread/src/kservice.c ****         ++ buf;
 293              		.loc 1 764 0
ARM GAS  /tmp/ccGzdbPs.s 			page 20


 294 012e 0130     		adds	r0, r0, #1
 295              	.LVL43:
 760:rt-thread/src/kservice.c ****     {
 296              		.loc 1 760 0
 297 0130 1446     		mov	r4, r2
 298              	.LVL44:
 299              	.L27:
 300 0132 621E     		subs	r2, r4, #1
 301              	.LVL45:
 302 0134 002C     		cmp	r4, #0
 303 0136 0ADD     		ble	.L29
 760:rt-thread/src/kservice.c ****     {
 304              		.loc 1 760 0 is_stmt 0 discriminator 1
 305 0138 4EB1     		cbz	r6, .L29
 762:rt-thread/src/kservice.c ****             *buf = tmp[i];
 306              		.loc 1 762 0 is_stmt 1
 307 013a 8842     		cmp	r0, r1
 308 013c F7D2     		bcs	.L28
 763:rt-thread/src/kservice.c ****         ++ buf;
 309              		.loc 1 763 0
 310 013e 04AC     		add	r4, sp, #16
 311 0140 1444     		add	r4, r4, r2
 312 0142 14F8104C 		ldrb	r4, [r4, #-16]	@ zero_extendqisi2
 313 0146 0470     		strb	r4, [r0]
 314 0148 F1E7     		b	.L28
 315              	.LVL46:
 316              	.L31:
 765:rt-thread/src/kservice.c ****     }
 766:rt-thread/src/kservice.c **** 
 767:rt-thread/src/kservice.c ****     while (size-- > 0)
 768:rt-thread/src/kservice.c ****     {
 769:rt-thread/src/kservice.c ****         if (buf < end)
 770:rt-thread/src/kservice.c ****             *buf = ' ';
 771:rt-thread/src/kservice.c ****         ++ buf;
 317              		.loc 1 771 0
 318 014a 0130     		adds	r0, r0, #1
 319              	.LVL47:
 767:rt-thread/src/kservice.c ****     {
 320              		.loc 1 767 0
 321 014c 1346     		mov	r3, r2
 322              	.LVL48:
 323              	.L29:
 324 014e 5A1E     		subs	r2, r3, #1
 325              	.LVL49:
 326 0150 002B     		cmp	r3, #0
 327 0152 04DD     		ble	.L43
 769:rt-thread/src/kservice.c ****             *buf = ' ';
 328              		.loc 1 769 0
 329 0154 8842     		cmp	r0, r1
 330 0156 F8D2     		bcs	.L31
 770:rt-thread/src/kservice.c ****         ++ buf;
 331              		.loc 1 770 0
 332 0158 2023     		movs	r3, #32
 333 015a 0370     		strb	r3, [r0]
 334 015c F5E7     		b	.L31
 335              	.L43:
 772:rt-thread/src/kservice.c ****     }
ARM GAS  /tmp/ccGzdbPs.s 			page 21


 773:rt-thread/src/kservice.c **** 
 774:rt-thread/src/kservice.c ****     return buf;
 775:rt-thread/src/kservice.c **** }
 336              		.loc 1 775 0
 337 015e 05B0     		add	sp, sp, #20
 338              	.LCFI2:
 339              		.cfi_def_cfa_offset 36
 340              		@ sp needed
 341 0160 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 342              	.LVL50:
 343              	.L45:
 344              		.align	2
 345              	.L44:
 346 0164 CDCCCCCC 		.word	-858993459
 347 0168 00000000 		.word	.LANCHOR0
 348 016c 00000000 		.word	.LANCHOR1
 349              		.cfi_endproc
 350              	.LFE33:
 352              		.section	.text.rt_get_errno,"ax",%progbits
 353              		.align	1
 354              		.global	rt_get_errno
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu fpv4-sp-d16
 360              	rt_get_errno:
 361              	.LFB15:
  51:rt-thread/src/kservice.c ****     rt_thread_t tid;
 362              		.loc 1 51 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366 0000 08B5     		push	{r3, lr}
 367              	.LCFI3:
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 3, -8
 370              		.cfi_offset 14, -4
  54:rt-thread/src/kservice.c ****     {
 371              		.loc 1 54 0
 372 0002 FFF7FEFF 		bl	rt_interrupt_get_nest
 373              	.LVL51:
 374 0006 10B1     		cbz	r0, .L47
  57:rt-thread/src/kservice.c ****     }
 375              		.loc 1 57 0
 376 0008 054B     		ldr	r3, .L52
 377 000a 1868     		ldr	r0, [r3]
 378 000c 08BD     		pop	{r3, pc}
 379              	.L47:
  60:rt-thread/src/kservice.c ****     if (tid == RT_NULL)
 380              		.loc 1 60 0
 381 000e FFF7FEFF 		bl	rt_thread_self
 382              	.LVL52:
  61:rt-thread/src/kservice.c ****         return __rt_errno;
 383              		.loc 1 61 0
 384 0012 08B1     		cbz	r0, .L51
  64:rt-thread/src/kservice.c **** }
 385              		.loc 1 64 0
ARM GAS  /tmp/ccGzdbPs.s 			page 22


 386 0014 006B     		ldr	r0, [r0, #48]
 387              	.LVL53:
  65:rt-thread/src/kservice.c **** RTM_EXPORT(rt_get_errno);
 388              		.loc 1 65 0
 389 0016 08BD     		pop	{r3, pc}
 390              	.LVL54:
 391              	.L51:
  62:rt-thread/src/kservice.c **** 
 392              		.loc 1 62 0
 393 0018 014B     		ldr	r3, .L52
 394 001a 1868     		ldr	r0, [r3]
 395              	.LVL55:
 396 001c 08BD     		pop	{r3, pc}
 397              	.L53:
 398 001e 00BF     		.align	2
 399              	.L52:
 400 0020 00000000 		.word	.LANCHOR2
 401              		.cfi_endproc
 402              	.LFE15:
 404              		.section	.text.rt_set_errno,"ax",%progbits
 405              		.align	1
 406              		.global	rt_set_errno
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 410              		.fpu fpv4-sp-d16
 412              	rt_set_errno:
 413              	.LFB16:
  74:rt-thread/src/kservice.c ****     rt_thread_t tid;
 414              		.loc 1 74 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              	.LVL56:
 419 0000 10B5     		push	{r4, lr}
 420              	.LCFI4:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 4, -8
 423              		.cfi_offset 14, -4
 424 0002 0446     		mov	r4, r0
  77:rt-thread/src/kservice.c ****     {
 425              		.loc 1 77 0
 426 0004 FFF7FEFF 		bl	rt_interrupt_get_nest
 427              	.LVL57:
 428 0008 10B1     		cbz	r0, .L55
  80:rt-thread/src/kservice.c **** 
 429              		.loc 1 80 0
 430 000a 054B     		ldr	r3, .L60
 431 000c 1C60     		str	r4, [r3]
  82:rt-thread/src/kservice.c ****     }
 432              		.loc 1 82 0
 433 000e 10BD     		pop	{r4, pc}
 434              	.LVL58:
 435              	.L55:
  85:rt-thread/src/kservice.c ****     if (tid == RT_NULL)
 436              		.loc 1 85 0
 437 0010 FFF7FEFF 		bl	rt_thread_self
ARM GAS  /tmp/ccGzdbPs.s 			page 23


 438              	.LVL59:
  86:rt-thread/src/kservice.c ****     {
 439              		.loc 1 86 0
 440 0014 08B1     		cbz	r0, .L59
  93:rt-thread/src/kservice.c **** }
 441              		.loc 1 93 0
 442 0016 0463     		str	r4, [r0, #48]
 443 0018 10BD     		pop	{r4, pc}
 444              	.LVL60:
 445              	.L59:
  88:rt-thread/src/kservice.c **** 
 446              		.loc 1 88 0
 447 001a 014B     		ldr	r3, .L60
 448 001c 1C60     		str	r4, [r3]
  90:rt-thread/src/kservice.c ****     }
 449              		.loc 1 90 0
 450 001e 10BD     		pop	{r4, pc}
 451              	.LVL61:
 452              	.L61:
 453              		.align	2
 454              	.L60:
 455 0020 00000000 		.word	.LANCHOR2
 456              		.cfi_endproc
 457              	.LFE16:
 459              		.section	.text._rt_errno,"ax",%progbits
 460              		.align	1
 461              		.global	_rt_errno
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 465              		.fpu fpv4-sp-d16
 467              	_rt_errno:
 468              	.LFB17:
 103:rt-thread/src/kservice.c ****     rt_thread_t tid;
 469              		.loc 1 103 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473 0000 08B5     		push	{r3, lr}
 474              	.LCFI5:
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 3, -8
 477              		.cfi_offset 14, -4
 106:rt-thread/src/kservice.c ****         return (int *)&__rt_errno;
 478              		.loc 1 106 0
 479 0002 FFF7FEFF 		bl	rt_interrupt_get_nest
 480              	.LVL62:
 481 0006 08B1     		cbz	r0, .L67
 107:rt-thread/src/kservice.c **** 
 482              		.loc 1 107 0
 483 0008 0448     		ldr	r0, .L68
 484 000a 08BD     		pop	{r3, pc}
 485              	.L67:
 109:rt-thread/src/kservice.c ****     if (tid != RT_NULL)
 486              		.loc 1 109 0
 487 000c FFF7FEFF 		bl	rt_thread_self
 488              	.LVL63:
ARM GAS  /tmp/ccGzdbPs.s 			page 24


 110:rt-thread/src/kservice.c ****         return (int *) & (tid->error);
 489              		.loc 1 110 0
 490 0010 08B1     		cbz	r0, .L65
 111:rt-thread/src/kservice.c **** 
 491              		.loc 1 111 0
 492 0012 3030     		adds	r0, r0, #48
 493              	.LVL64:
 494 0014 08BD     		pop	{r3, pc}
 495              	.LVL65:
 496              	.L65:
 113:rt-thread/src/kservice.c **** }
 497              		.loc 1 113 0
 498 0016 0148     		ldr	r0, .L68
 499              	.LVL66:
 114:rt-thread/src/kservice.c **** RTM_EXPORT(_rt_errno);
 500              		.loc 1 114 0
 501 0018 08BD     		pop	{r3, pc}
 502              	.L69:
 503 001a 00BF     		.align	2
 504              	.L68:
 505 001c 00000000 		.word	.LANCHOR2
 506              		.cfi_endproc
 507              	.LFE17:
 509              		.section	.text.rt_memset,"ax",%progbits
 510              		.align	1
 511              		.global	rt_memset
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 515              		.fpu fpv4-sp-d16
 517              	rt_memset:
 518              	.LFB18:
 127:rt-thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 519              		.loc 1 127 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524              	.LVL67:
 525 0000 10B4     		push	{r4}
 526              	.LCFI6:
 527              		.cfi_def_cfa_offset 4
 528              		.cfi_offset 4, -4
 529              	.LVL68:
 147:rt-thread/src/kservice.c ****     {
 530              		.loc 1 147 0
 531 0002 032A     		cmp	r2, #3
 532 0004 05D9     		bls	.L79
 533 0006 CCB2     		uxtb	r4, r1
 534              	.LVL69:
 147:rt-thread/src/kservice.c ****     {
 535              		.loc 1 147 0 is_stmt 0 discriminator 1
 536 0008 10F0030F 		tst	r0, #3
 537 000c 03D0     		beq	.L72
 141:rt-thread/src/kservice.c ****     unsigned long buffer;
 538              		.loc 1 141 0 is_stmt 1
 539 000e 0346     		mov	r3, r0
ARM GAS  /tmp/ccGzdbPs.s 			page 25


 540 0010 19E0     		b	.L73
 541              	.LVL70:
 542              	.L79:
 543 0012 0346     		mov	r3, r0
 544 0014 17E0     		b	.L73
 545              	.LVL71:
 546              	.L72:
 157:rt-thread/src/kservice.c ****             buffer |= (buffer << 16);
 547              		.loc 1 157 0
 548 0016 44EA0424 		orr	r4, r4, r4, lsl #8
 549              	.LVL72:
 158:rt-thread/src/kservice.c ****         }
 550              		.loc 1 158 0
 551 001a 44EA0444 		orr	r4, r4, r4, lsl #16
 552              	.LVL73:
 150:rt-thread/src/kservice.c **** 
 553              		.loc 1 150 0
 554 001e 0346     		mov	r3, r0
 555 0020 05E0     		b	.L74
 556              	.LVL74:
 557              	.L75:
 169:rt-thread/src/kservice.c ****             *aligned_addr++ = buffer;
 558              		.loc 1 169 0
 559 0022 1C60     		str	r4, [r3]
 560              	.LVL75:
 170:rt-thread/src/kservice.c ****             *aligned_addr++ = buffer;
 561              		.loc 1 170 0
 562 0024 5C60     		str	r4, [r3, #4]
 563              	.LVL76:
 171:rt-thread/src/kservice.c ****             *aligned_addr++ = buffer;
 564              		.loc 1 171 0
 565 0026 9C60     		str	r4, [r3, #8]
 566              	.LVL77:
 172:rt-thread/src/kservice.c ****             count -= 4 * LBLOCKSIZE;
 567              		.loc 1 172 0
 568 0028 DC60     		str	r4, [r3, #12]
 173:rt-thread/src/kservice.c ****         }
 569              		.loc 1 173 0
 570 002a 103A     		subs	r2, r2, #16
 571              	.LVL78:
 172:rt-thread/src/kservice.c ****             count -= 4 * LBLOCKSIZE;
 572              		.loc 1 172 0
 573 002c 1033     		adds	r3, r3, #16
 574              	.LVL79:
 575              	.L74:
 167:rt-thread/src/kservice.c ****         {
 576              		.loc 1 167 0
 577 002e 0F2A     		cmp	r2, #15
 578 0030 F7D8     		bhi	.L75
 579 0032 02E0     		b	.L76
 580              	.L77:
 581              	.LVL80:
 178:rt-thread/src/kservice.c ****             count -= LBLOCKSIZE;
 582              		.loc 1 178 0
 583 0034 1C60     		str	r4, [r3]
 179:rt-thread/src/kservice.c ****         }
 584              		.loc 1 179 0
ARM GAS  /tmp/ccGzdbPs.s 			page 26


 585 0036 043A     		subs	r2, r2, #4
 586              	.LVL81:
 178:rt-thread/src/kservice.c ****             count -= LBLOCKSIZE;
 587              		.loc 1 178 0
 588 0038 0433     		adds	r3, r3, #4
 589              	.LVL82:
 590              	.L76:
 176:rt-thread/src/kservice.c ****         {
 591              		.loc 1 176 0
 592 003a 032A     		cmp	r2, #3
 593 003c FAD8     		bhi	.L77
 594 003e 02E0     		b	.L73
 595              	.LVL83:
 596              	.L78:
 188:rt-thread/src/kservice.c ****     }
 597              		.loc 1 188 0
 598 0040 1970     		strb	r1, [r3]
 599 0042 0133     		adds	r3, r3, #1
 600              	.LVL84:
 186:rt-thread/src/kservice.c ****     {
 601              		.loc 1 186 0
 602 0044 2246     		mov	r2, r4
 603              	.LVL85:
 604              	.L73:
 605 0046 541E     		subs	r4, r2, #1
 606              	.LVL86:
 607 0048 002A     		cmp	r2, #0
 608 004a F9D1     		bne	.L78
 197:rt-thread/src/kservice.c **** RTM_EXPORT(rt_memset);
 609              		.loc 1 197 0
 610 004c 5DF8044B 		ldr	r4, [sp], #4
 611              	.LCFI7:
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 614              	.LVL87:
 615 0050 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE18:
 619              		.section	.text.rt_memcpy,"ax",%progbits
 620              		.align	1
 621              		.global	rt_memcpy
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu fpv4-sp-d16
 627              	rt_memcpy:
 628              	.LFB19:
 211:rt-thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 629              		.loc 1 211 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634              	.LVL88:
 635 0000 10B4     		push	{r4}
 636              	.LCFI8:
 637              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccGzdbPs.s 			page 27


 638              		.cfi_offset 4, -4
 639              	.LVL89:
 244:rt-thread/src/kservice.c ****     {
 640              		.loc 1 244 0
 641 0002 0F2A     		cmp	r2, #15
 642 0004 06D9     		bls	.L89
 244:rt-thread/src/kservice.c ****     {
 643              		.loc 1 244 0 is_stmt 0 discriminator 1
 644 0006 41EA0003 		orr	r3, r1, r0
 645 000a 13F0030F 		tst	r3, #3
 646 000e 11D0     		beq	.L90
 236:rt-thread/src/kservice.c ****     char *src_ptr = (char *)src;
 647              		.loc 1 236 0 is_stmt 1
 648 0010 0346     		mov	r3, r0
 649 0012 1EE0     		b	.L84
 650              	.L89:
 651 0014 0346     		mov	r3, r0
 652 0016 1CE0     		b	.L84
 653              	.LVL90:
 654              	.L85:
 252:rt-thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 655              		.loc 1 252 0
 656 0018 0C68     		ldr	r4, [r1]
 657 001a 1C60     		str	r4, [r3]
 658              	.LVL91:
 253:rt-thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 659              		.loc 1 253 0
 660 001c 4C68     		ldr	r4, [r1, #4]
 661 001e 5C60     		str	r4, [r3, #4]
 662              	.LVL92:
 254:rt-thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 663              		.loc 1 254 0
 664 0020 8C68     		ldr	r4, [r1, #8]
 665 0022 9C60     		str	r4, [r3, #8]
 666              	.LVL93:
 255:rt-thread/src/kservice.c ****             len -= BIGBLOCKSIZE;
 667              		.loc 1 255 0
 668 0024 CC68     		ldr	r4, [r1, #12]
 669 0026 DC60     		str	r4, [r3, #12]
 256:rt-thread/src/kservice.c ****         }
 670              		.loc 1 256 0
 671 0028 103A     		subs	r2, r2, #16
 672              	.LVL94:
 255:rt-thread/src/kservice.c ****             len -= BIGBLOCKSIZE;
 673              		.loc 1 255 0
 674 002a 1031     		adds	r1, r1, #16
 675              	.LVL95:
 676 002c 1033     		adds	r3, r3, #16
 677              	.LVL96:
 678              	.L83:
 250:rt-thread/src/kservice.c ****         {
 679              		.loc 1 250 0
 680 002e 0F2A     		cmp	r2, #15
 681 0030 F2D8     		bhi	.L85
 682 0032 06E0     		b	.L86
 683              	.LVL97:
 684              	.L90:
ARM GAS  /tmp/ccGzdbPs.s 			page 28


 685 0034 0346     		mov	r3, r0
 686 0036 FAE7     		b	.L83
 687              	.LVL98:
 688              	.L87:
 262:rt-thread/src/kservice.c ****             len -= LITTLEBLOCKSIZE;
 689              		.loc 1 262 0
 690 0038 0C68     		ldr	r4, [r1]
 691 003a 1C60     		str	r4, [r3]
 263:rt-thread/src/kservice.c ****         }
 692              		.loc 1 263 0
 693 003c 043A     		subs	r2, r2, #4
 694              	.LVL99:
 262:rt-thread/src/kservice.c ****             len -= LITTLEBLOCKSIZE;
 695              		.loc 1 262 0
 696 003e 0431     		adds	r1, r1, #4
 697              	.LVL100:
 698 0040 0433     		adds	r3, r3, #4
 699              	.LVL101:
 700              	.L86:
 260:rt-thread/src/kservice.c ****         {
 701              		.loc 1 260 0
 702 0042 032A     		cmp	r2, #3
 703 0044 F8D8     		bhi	.L87
 704 0046 04E0     		b	.L84
 705              	.LVL102:
 706              	.L88:
 272:rt-thread/src/kservice.c **** 
 707              		.loc 1 272 0
 708 0048 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 709 004a 1A70     		strb	r2, [r3]
 271:rt-thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 710              		.loc 1 271 0
 711 004c 2246     		mov	r2, r4
 272:rt-thread/src/kservice.c **** 
 712              		.loc 1 272 0
 713 004e 0131     		adds	r1, r1, #1
 714              	.LVL103:
 715 0050 0133     		adds	r3, r3, #1
 716              	.LVL104:
 717              	.L84:
 271:rt-thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 718              		.loc 1 271 0
 719 0052 541E     		subs	r4, r2, #1
 720              	.LVL105:
 721 0054 002A     		cmp	r2, #0
 722 0056 F7D1     		bne	.L88
 280:rt-thread/src/kservice.c **** RTM_EXPORT(rt_memcpy);
 723              		.loc 1 280 0
 724 0058 5DF8044B 		ldr	r4, [sp], #4
 725              	.LCFI9:
 726              		.cfi_restore 4
 727              		.cfi_def_cfa_offset 0
 728              	.LVL106:
 729 005c 7047     		bx	lr
 730              		.cfi_endproc
 731              	.LFE19:
 733              		.section	.text.rt_memmove,"ax",%progbits
ARM GAS  /tmp/ccGzdbPs.s 			page 29


 734              		.align	1
 735              		.global	rt_memmove
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu fpv4-sp-d16
 741              	rt_memmove:
 742              	.LFB20:
 294:rt-thread/src/kservice.c ****     char *tmp = (char *)dest, *s = (char *)src;
 743              		.loc 1 294 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748              	.LVL107:
 749 0000 10B4     		push	{r4}
 750              	.LCFI10:
 751              		.cfi_def_cfa_offset 4
 752              		.cfi_offset 4, -4
 753              	.LVL108:
 297:rt-thread/src/kservice.c ****     {
 754              		.loc 1 297 0
 755 0002 8842     		cmp	r0, r1
 756 0004 18D9     		bls	.L98
 297:rt-thread/src/kservice.c ****     {
 757              		.loc 1 297 0 is_stmt 0 discriminator 1
 758 0006 8B18     		adds	r3, r1, r2
 759 0008 9842     		cmp	r0, r3
 760 000a 17D2     		bcs	.L99
 299:rt-thread/src/kservice.c ****         s += n;
 761              		.loc 1 299 0 is_stmt 1
 762 000c 8118     		adds	r1, r0, r2
 763              	.LVL109:
 302:rt-thread/src/kservice.c ****             *(--tmp) = *(--s);
 764              		.loc 1 302 0
 765 000e 04E0     		b	.L94
 766              	.LVL110:
 767              	.L95:
 303:rt-thread/src/kservice.c ****     }
 768              		.loc 1 303 0
 769 0010 13F8012D 		ldrb	r2, [r3, #-1]!	@ zero_extendqisi2
 770              	.LVL111:
 771 0014 01F8012D 		strb	r2, [r1, #-1]!
 772              	.LVL112:
 302:rt-thread/src/kservice.c ****             *(--tmp) = *(--s);
 773              		.loc 1 302 0
 774 0018 2246     		mov	r2, r4
 775              	.LVL113:
 776              	.L94:
 777 001a 541E     		subs	r4, r2, #1
 778              	.LVL114:
 779 001c 002A     		cmp	r2, #0
 780 001e F7D1     		bne	.L95
 781 0020 07E0     		b	.L96
 782              	.LVL115:
 783              	.L97:
 308:rt-thread/src/kservice.c ****     }
ARM GAS  /tmp/ccGzdbPs.s 			page 30


 784              		.loc 1 308 0
 785 0022 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 786 0024 1A70     		strb	r2, [r3]
 787 0026 0131     		adds	r1, r1, #1
 788              	.LVL116:
 789 0028 0133     		adds	r3, r3, #1
 790              	.LVL117:
 307:rt-thread/src/kservice.c ****             *tmp++ = *s++;
 791              		.loc 1 307 0
 792 002a 2246     		mov	r2, r4
 793              	.LVL118:
 794              	.L93:
 795 002c 541E     		subs	r4, r2, #1
 796              	.LVL119:
 797 002e 002A     		cmp	r2, #0
 798 0030 F7D1     		bne	.L97
 799              	.LVL120:
 800              	.L96:
 312:rt-thread/src/kservice.c **** RTM_EXPORT(rt_memmove);
 801              		.loc 1 312 0
 802 0032 5DF8044B 		ldr	r4, [sp], #4
 803              	.LCFI11:
 804              		.cfi_remember_state
 805              		.cfi_restore 4
 806              		.cfi_def_cfa_offset 0
 807              	.LVL121:
 808 0036 7047     		bx	lr
 809              	.LVL122:
 810              	.L98:
 811              	.LCFI12:
 812              		.cfi_restore_state
 813 0038 0346     		mov	r3, r0
 814 003a F7E7     		b	.L93
 815              	.L99:
 816 003c 0346     		mov	r3, r0
 817 003e F5E7     		b	.L93
 818              		.cfi_endproc
 819              	.LFE20:
 821              		.section	.text.rt_memcmp,"ax",%progbits
 822              		.align	1
 823              		.global	rt_memcmp
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu fpv4-sp-d16
 829              	rt_memcmp:
 830              	.LFB21:
 325:rt-thread/src/kservice.c ****     const unsigned char *su1, *su2;
 831              		.loc 1 325 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              		@ link register save eliminated.
 836              	.LVL123:
 327:rt-thread/src/kservice.c **** 
 837              		.loc 1 327 0
 838 0000 0023     		movs	r3, #0
ARM GAS  /tmp/ccGzdbPs.s 			page 31


 839              	.LVL124:
 329:rt-thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 840              		.loc 1 329 0
 841 0002 6AB1     		cbz	r2, .L109
 325:rt-thread/src/kservice.c ****     const unsigned char *su1, *su2;
 842              		.loc 1 325 0
 843 0004 10B4     		push	{r4}
 844              	.LCFI13:
 845              		.cfi_def_cfa_offset 4
 846              		.cfi_offset 4, -4
 847              	.LVL125:
 848              	.L104:
 330:rt-thread/src/kservice.c ****             break;
 849              		.loc 1 330 0
 850 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 851              	.LVL126:
 852 0008 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 853              	.LVL127:
 854 000a 1B1B     		subs	r3, r3, r4
 855              	.LVL128:
 856 000c 04D1     		bne	.L101
 329:rt-thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 857              		.loc 1 329 0 discriminator 2
 858 000e 0130     		adds	r0, r0, #1
 859              	.LVL129:
 860 0010 0131     		adds	r1, r1, #1
 861              	.LVL130:
 862 0012 013A     		subs	r2, r2, #1
 863              	.LVL131:
 864 0014 002A     		cmp	r2, #0
 865 0016 F6D1     		bne	.L104
 866              	.L101:
 334:rt-thread/src/kservice.c **** RTM_EXPORT(rt_memcmp);
 867              		.loc 1 334 0
 868 0018 1846     		mov	r0, r3
 869              	.LVL132:
 870 001a 5DF8044B 		ldr	r4, [sp], #4
 871              	.LCFI14:
 872              		.cfi_restore 4
 873              		.cfi_def_cfa_offset 0
 874 001e 7047     		bx	lr
 875              	.LVL133:
 876              	.L109:
 877 0020 1846     		mov	r0, r3
 878              	.LVL134:
 879 0022 7047     		bx	lr
 880              		.cfi_endproc
 881              	.LFE21:
 883              		.section	.text.rt_strcasecmp,"ax",%progbits
 884              		.align	1
 885              		.global	rt_strcasecmp
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 889              		.fpu fpv4-sp-d16
 891              	rt_strcasecmp:
 892              	.LFB23:
ARM GAS  /tmp/ccGzdbPs.s 			page 32


 374:rt-thread/src/kservice.c ****     int ca, cb;
 893              		.loc 1 374 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898              	.LVL135:
 899 0000 70B4     		push	{r4, r5, r6}
 900              	.LCFI15:
 901              		.cfi_def_cfa_offset 12
 902              		.cfi_offset 4, -12
 903              		.cfi_offset 5, -8
 904              		.cfi_offset 6, -4
 905 0002 04E0     		b	.L114
 906              	.LVL136:
 907              	.L112:
 386:rt-thread/src/kservice.c **** 
 908              		.loc 1 386 0
 909 0004 A342     		cmp	r3, r4
 910 0006 13D1     		bne	.L113
 379:rt-thread/src/kservice.c ****         cb = *b++ & 0xff;
 911              		.loc 1 379 0 discriminator 1
 912 0008 3046     		mov	r0, r6
 380:rt-thread/src/kservice.c ****         if (ca >= 'A' && ca <= 'Z')
 913              		.loc 1 380 0 discriminator 1
 914 000a 2946     		mov	r1, r5
 386:rt-thread/src/kservice.c **** 
 915              		.loc 1 386 0 discriminator 1
 916 000c 83B1     		cbz	r3, .L113
 917              	.LVL137:
 918              	.L114:
 379:rt-thread/src/kservice.c ****         cb = *b++ & 0xff;
 919              		.loc 1 379 0
 920 000e 461C     		adds	r6, r0, #1
 921              	.LVL138:
 922 0010 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 923              	.LVL139:
 380:rt-thread/src/kservice.c ****         if (ca >= 'A' && ca <= 'Z')
 924              		.loc 1 380 0
 925 0012 4D1C     		adds	r5, r1, #1
 926              	.LVL140:
 927 0014 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 928 0016 1446     		mov	r4, r2
 929              	.LVL141:
 381:rt-thread/src/kservice.c ****             ca += 'a' - 'A';
 930              		.loc 1 381 0
 931 0018 A3F14101 		sub	r1, r3, #65
 932 001c 1929     		cmp	r1, #25
 933 001e 00D8     		bhi	.L111
 382:rt-thread/src/kservice.c ****         if (cb >= 'A' && cb <= 'Z')
 934              		.loc 1 382 0
 935 0020 2033     		adds	r3, r3, #32
 936              	.LVL142:
 937              	.L111:
 383:rt-thread/src/kservice.c ****             cb += 'a' - 'A';
 938              		.loc 1 383 0
 939 0022 A2F14101 		sub	r1, r2, #65
ARM GAS  /tmp/ccGzdbPs.s 			page 33


 940 0026 1929     		cmp	r1, #25
 941 0028 ECD8     		bhi	.L112
 384:rt-thread/src/kservice.c ****     }
 942              		.loc 1 384 0
 943 002a 02F12004 		add	r4, r2, #32
 944              	.LVL143:
 945 002e E9E7     		b	.L112
 946              	.L113:
 389:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strcasecmp);
 947              		.loc 1 389 0
 948 0030 181B     		subs	r0, r3, r4
 949 0032 70BC     		pop	{r4, r5, r6}
 950              	.LCFI16:
 951              		.cfi_restore 6
 952              		.cfi_restore 5
 953              		.cfi_restore 4
 954              		.cfi_def_cfa_offset 0
 955              	.LVL144:
 956 0034 7047     		bx	lr
 957              		.cfi_endproc
 958              	.LFE23:
 960              		.section	.text.rt_strncpy,"ax",%progbits
 961              		.align	1
 962              		.global	rt_strncpy
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu fpv4-sp-d16
 968              	rt_strncpy:
 969              	.LFB24:
 402:rt-thread/src/kservice.c ****     if (n != 0)
 970              		.loc 1 402 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              		@ link register save eliminated.
 975              	.LVL145:
 403:rt-thread/src/kservice.c ****     {
 976              		.loc 1 403 0
 977 0000 92B1     		cbz	r2, .L127
 402:rt-thread/src/kservice.c ****     if (n != 0)
 978              		.loc 1 402 0
 979 0002 30B4     		push	{r4, r5}
 980              	.LCFI17:
 981              		.cfi_def_cfa_offset 8
 982              		.cfi_offset 4, -8
 983              		.cfi_offset 5, -4
 984 0004 1346     		mov	r3, r2
 985 0006 0446     		mov	r4, r0
 986              	.LVL146:
 987              	.L121:
 988              	.LBB12:
 410:rt-thread/src/kservice.c ****             {
 989              		.loc 1 410 0
 990 0008 621C     		adds	r2, r4, #1
 991              	.LVL147:
 992 000a 4D1C     		adds	r5, r1, #1
ARM GAS  /tmp/ccGzdbPs.s 			page 34


 993              	.LVL148:
 994 000c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 995 000e 2170     		strb	r1, [r4]
 996 0010 39B1     		cbz	r1, .L118
 997              	.LVL149:
 998 0012 1446     		mov	r4, r2
 999 0014 2946     		mov	r1, r5
 417:rt-thread/src/kservice.c ****     }
 1000              		.loc 1 417 0
 1001 0016 013B     		subs	r3, r3, #1
 1002              	.LVL150:
 1003 0018 F6D1     		bne	.L121
 1004 001a 04E0     		b	.L117
 1005              	.L120:
 1006              	.LVL151:
 414:rt-thread/src/kservice.c ****                 break;
 1007              		.loc 1 414 0
 1008 001c 0021     		movs	r1, #0
 1009 001e 1170     		strb	r1, [r2]
 1010 0020 0132     		adds	r2, r2, #1
 1011              	.LVL152:
 1012              	.L118:
 413:rt-thread/src/kservice.c ****                     *d++ = 0;
 1013              		.loc 1 413 0
 1014 0022 013B     		subs	r3, r3, #1
 1015              	.LVL153:
 1016 0024 FAD1     		bne	.L120
 1017              	.L117:
 1018              	.LBE12:
 421:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strncpy);
 1019              		.loc 1 421 0
 1020 0026 30BC     		pop	{r4, r5}
 1021              	.LCFI18:
 1022              		.cfi_restore 5
 1023              		.cfi_restore 4
 1024              		.cfi_def_cfa_offset 0
 1025              	.LVL154:
 1026              	.L127:
 1027 0028 7047     		bx	lr
 1028              		.cfi_endproc
 1029              	.LFE24:
 1031              		.section	.text.rt_strncmp,"ax",%progbits
 1032              		.align	1
 1033              		.global	rt_strncmp
 1034              		.syntax unified
 1035              		.thumb
 1036              		.thumb_func
 1037              		.fpu fpv4-sp-d16
 1039              	rt_strncmp:
 1040              	.LFB25:
 434:rt-thread/src/kservice.c ****     register signed char __res = 0;
 1041              		.loc 1 434 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 0
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045              		@ link register save eliminated.
 1046              	.LVL155:
ARM GAS  /tmp/ccGzdbPs.s 			page 35


 435:rt-thread/src/kservice.c **** 
 1047              		.loc 1 435 0
 1048 0000 0023     		movs	r3, #0
 1049              	.LVL156:
 437:rt-thread/src/kservice.c ****     {
 1050              		.loc 1 437 0
 1051 0002 7AB1     		cbz	r2, .L136
 434:rt-thread/src/kservice.c ****     register signed char __res = 0;
 1052              		.loc 1 434 0
 1053 0004 30B4     		push	{r4, r5}
 1054              	.LCFI19:
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 4, -8
 1057              		.cfi_offset 5, -4
 1058              	.L131:
 439:rt-thread/src/kservice.c ****             break;
 1059              		.loc 1 439 0
 1060 0006 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 1061 0008 4D1C     		adds	r5, r1, #1
 1062              	.LVL157:
 1063 000a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1064              	.LVL158:
 1065 000c E31A     		subs	r3, r4, r3
 1066 000e 5BB2     		sxtb	r3, r3
 1067              	.LVL159:
 1068 0010 2BB9     		cbnz	r3, .L130
 439:rt-thread/src/kservice.c ****             break;
 1069              		.loc 1 439 0 is_stmt 0 discriminator 1
 1070 0012 0130     		adds	r0, r0, #1
 1071              	.LVL160:
 1072 0014 1CB1     		cbz	r4, .L130
 441:rt-thread/src/kservice.c ****     }
 1073              		.loc 1 441 0 is_stmt 1
 1074 0016 013A     		subs	r2, r2, #1
 1075              	.LVL161:
 439:rt-thread/src/kservice.c ****             break;
 1076              		.loc 1 439 0
 1077 0018 2946     		mov	r1, r5
 437:rt-thread/src/kservice.c ****     {
 1078              		.loc 1 437 0
 1079 001a 002A     		cmp	r2, #0
 1080 001c F3D1     		bne	.L131
 1081              	.L130:
 445:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strncmp);
 1082              		.loc 1 445 0
 1083 001e 1846     		mov	r0, r3
 1084              	.LVL162:
 1085 0020 30BC     		pop	{r4, r5}
 1086              	.LCFI20:
 1087              		.cfi_restore 5
 1088              		.cfi_restore 4
 1089              		.cfi_def_cfa_offset 0
 1090              	.LVL163:
 1091 0022 7047     		bx	lr
 1092              	.LVL164:
 1093              	.L136:
 1094 0024 1846     		mov	r0, r3
ARM GAS  /tmp/ccGzdbPs.s 			page 36


 1095              	.LVL165:
 1096 0026 7047     		bx	lr
 1097              		.cfi_endproc
 1098              	.LFE25:
 1100              		.section	.text.rt_strcmp,"ax",%progbits
 1101              		.align	1
 1102              		.global	rt_strcmp
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	rt_strcmp:
 1109              	.LFB26:
 457:rt-thread/src/kservice.c ****     while (*cs && *cs == *ct)
 1110              		.loc 1 457 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              		@ link register save eliminated.
 1115              	.LVL166:
 458:rt-thread/src/kservice.c ****         cs++, ct++;
 1116              		.loc 1 458 0
 1117 0000 01E0     		b	.L138
 1118              	.L140:
 459:rt-thread/src/kservice.c **** 
 1119              		.loc 1 459 0
 1120 0002 0130     		adds	r0, r0, #1
 1121              	.LVL167:
 1122 0004 0131     		adds	r1, r1, #1
 1123              	.LVL168:
 1124              	.L138:
 458:rt-thread/src/kservice.c ****         cs++, ct++;
 1125              		.loc 1 458 0
 1126 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1127 0008 13B1     		cbz	r3, .L139
 458:rt-thread/src/kservice.c ****         cs++, ct++;
 1128              		.loc 1 458 0 is_stmt 0 discriminator 1
 1129 000a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1130 000c 9342     		cmp	r3, r2
 1131 000e F8D0     		beq	.L140
 1132              	.L139:
 461:rt-thread/src/kservice.c **** }
 1133              		.loc 1 461 0 is_stmt 1
 1134 0010 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1135              	.LVL169:
 462:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strcmp);
 1136              		.loc 1 462 0
 1137 0012 181A     		subs	r0, r3, r0
 1138 0014 7047     		bx	lr
 1139              		.cfi_endproc
 1140              	.LFE26:
 1142              		.section	.text.rt_strnlen,"ax",%progbits
 1143              		.align	1
 1144              		.global	rt_strnlen
 1145              		.syntax unified
 1146              		.thumb
 1147              		.thumb_func
ARM GAS  /tmp/ccGzdbPs.s 			page 37


 1148              		.fpu fpv4-sp-d16
 1150              	rt_strnlen:
 1151              	.LFB27:
 477:rt-thread/src/kservice.c ****     const char *sc;
 1152              		.loc 1 477 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 0
 1155              		@ frame_needed = 0, uses_anonymous_args = 0
 1156              		@ link register save eliminated.
 1157              	.LVL170:
 480:rt-thread/src/kservice.c ****         ;
 1158              		.loc 1 480 0
 1159 0000 0346     		mov	r3, r0
 1160 0002 00E0     		b	.L142
 1161              	.LVL171:
 1162              	.L144:
 480:rt-thread/src/kservice.c ****         ;
 1163              		.loc 1 480 0 is_stmt 0 discriminator 4
 1164 0004 0133     		adds	r3, r3, #1
 1165              	.LVL172:
 1166              	.L142:
 480:rt-thread/src/kservice.c ****         ;
 1167              		.loc 1 480 0 discriminator 1
 1168 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1169 0008 12B1     		cbz	r2, .L143
 480:rt-thread/src/kservice.c ****         ;
 1170              		.loc 1 480 0 discriminator 3
 1171 000a 1A1A     		subs	r2, r3, r0
 1172 000c 8A42     		cmp	r2, r1
 1173 000e F9D3     		bcc	.L144
 1174              	.L143:
 484:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strnlen);
 1175              		.loc 1 484 0 is_stmt 1
 1176 0010 181A     		subs	r0, r3, r0
 1177              	.LVL173:
 1178 0012 7047     		bx	lr
 1179              		.cfi_endproc
 1180              	.LFE27:
 1182              		.section	.text.rt_strlen,"ax",%progbits
 1183              		.align	1
 1184              		.global	rt_strlen
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu fpv4-sp-d16
 1190              	rt_strlen:
 1191              	.LFB28:
 496:rt-thread/src/kservice.c ****     const char *sc;
 1192              		.loc 1 496 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              		@ link register save eliminated.
 1197              	.LVL174:
 499:rt-thread/src/kservice.c ****         ;
 1198              		.loc 1 499 0
 1199 0000 0346     		mov	r3, r0
ARM GAS  /tmp/ccGzdbPs.s 			page 38


 1200 0002 00E0     		b	.L146
 1201              	.LVL175:
 1202              	.L147:
 499:rt-thread/src/kservice.c ****         ;
 1203              		.loc 1 499 0 is_stmt 0 discriminator 3
 1204 0004 0133     		adds	r3, r3, #1
 1205              	.LVL176:
 1206              	.L146:
 499:rt-thread/src/kservice.c ****         ;
 1207              		.loc 1 499 0 discriminator 1
 1208 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1209 0008 002A     		cmp	r2, #0
 1210 000a FBD1     		bne	.L147
 503:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strlen);
 1211              		.loc 1 503 0 is_stmt 1
 1212 000c 181A     		subs	r0, r3, r0
 1213              	.LVL177:
 1214 000e 7047     		bx	lr
 1215              		.cfi_endproc
 1216              	.LFE28:
 1218              		.section	.text.rt_strstr,"ax",%progbits
 1219              		.align	1
 1220              		.global	rt_strstr
 1221              		.syntax unified
 1222              		.thumb
 1223              		.thumb_func
 1224              		.fpu fpv4-sp-d16
 1226              	rt_strstr:
 1227              	.LFB22:
 346:rt-thread/src/kservice.c ****     int l1, l2;
 1228              		.loc 1 346 0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 0
 1231              		@ frame_needed = 0, uses_anonymous_args = 0
 1232              	.LVL178:
 1233 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1234              	.LCFI21:
 1235              		.cfi_def_cfa_offset 24
 1236              		.cfi_offset 4, -24
 1237              		.cfi_offset 5, -20
 1238              		.cfi_offset 6, -16
 1239              		.cfi_offset 7, -12
 1240              		.cfi_offset 8, -8
 1241              		.cfi_offset 14, -4
 1242 0004 0446     		mov	r4, r0
 1243 0006 0F46     		mov	r7, r1
 349:rt-thread/src/kservice.c ****     if (!l2)
 1244              		.loc 1 349 0
 1245 0008 0846     		mov	r0, r1
 1246              	.LVL179:
 1247 000a FFF7FEFF 		bl	rt_strlen
 1248              	.LVL180:
 350:rt-thread/src/kservice.c ****         return (char *)s1;
 1249              		.loc 1 350 0
 1250 000e 10B9     		cbnz	r0, .L155
 351:rt-thread/src/kservice.c ****     l1 = rt_strlen(s1);
 1251              		.loc 1 351 0
ARM GAS  /tmp/ccGzdbPs.s 			page 39


 1252 0010 2046     		mov	r0, r4
 1253              	.LVL181:
 1254 0012 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1255              	.LVL182:
 1256              	.L155:
 1257 0016 0646     		mov	r6, r0
 1258 0018 8046     		mov	r8, r0
 352:rt-thread/src/kservice.c ****     while (l1 >= l2)
 1259              		.loc 1 352 0
 1260 001a 2046     		mov	r0, r4
 1261              	.LVL183:
 1262 001c FFF7FEFF 		bl	rt_strlen
 1263              	.LVL184:
 1264 0020 0546     		mov	r5, r0
 1265              	.LVL185:
 1266              	.L150:
 353:rt-thread/src/kservice.c ****     {
 1267              		.loc 1 353 0
 1268 0022 4545     		cmp	r5, r8
 1269 0024 08DB     		blt	.L156
 355:rt-thread/src/kservice.c ****         if (!rt_memcmp(s1, s2, l2))
 1270              		.loc 1 355 0
 1271 0026 013D     		subs	r5, r5, #1
 1272              	.LVL186:
 356:rt-thread/src/kservice.c ****             return (char *)s1;
 1273              		.loc 1 356 0
 1274 0028 3246     		mov	r2, r6
 1275 002a 3946     		mov	r1, r7
 1276 002c 2046     		mov	r0, r4
 1277 002e FFF7FEFF 		bl	rt_memcmp
 1278              	.LVL187:
 1279 0032 20B1     		cbz	r0, .L153
 358:rt-thread/src/kservice.c ****     }
 1280              		.loc 1 358 0
 1281 0034 0134     		adds	r4, r4, #1
 1282              	.LVL188:
 1283 0036 F4E7     		b	.L150
 1284              	.L156:
 361:rt-thread/src/kservice.c **** }
 1285              		.loc 1 361 0
 1286 0038 0020     		movs	r0, #0
 1287 003a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1288              	.LVL189:
 1289              	.L153:
 357:rt-thread/src/kservice.c ****         s1 ++;
 1290              		.loc 1 357 0
 1291 003e 2046     		mov	r0, r4
 362:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strstr);
 1292              		.loc 1 362 0
 1293 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1294              		.cfi_endproc
 1295              	.LFE22:
 1297              		.section	.text.rt_strdup,"ax",%progbits
 1298              		.align	1
 1299              		.global	rt_strdup
 1300              		.syntax unified
 1301              		.thumb
ARM GAS  /tmp/ccGzdbPs.s 			page 40


 1302              		.thumb_func
 1303              		.fpu fpv4-sp-d16
 1305              	rt_strdup:
 1306              	.LFB29:
 515:rt-thread/src/kservice.c ****     rt_size_t len = rt_strlen(s) + 1;
 1307              		.loc 1 515 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 0
 1310              		@ frame_needed = 0, uses_anonymous_args = 0
 1311              	.LVL190:
 1312 0000 70B5     		push	{r4, r5, r6, lr}
 1313              	.LCFI22:
 1314              		.cfi_def_cfa_offset 16
 1315              		.cfi_offset 4, -16
 1316              		.cfi_offset 5, -12
 1317              		.cfi_offset 6, -8
 1318              		.cfi_offset 14, -4
 1319 0002 0646     		mov	r6, r0
 516:rt-thread/src/kservice.c ****     char *tmp = (char *)rt_malloc(len);
 1320              		.loc 1 516 0
 1321 0004 FFF7FEFF 		bl	rt_strlen
 1322              	.LVL191:
 1323 0008 451C     		adds	r5, r0, #1
 1324              	.LVL192:
 517:rt-thread/src/kservice.c **** 
 1325              		.loc 1 517 0
 1326 000a 2846     		mov	r0, r5
 1327 000c FFF7FEFF 		bl	rt_malloc
 1328              	.LVL193:
 519:rt-thread/src/kservice.c ****         return RT_NULL;
 1329              		.loc 1 519 0
 1330 0010 0446     		mov	r4, r0
 1331 0012 18B1     		cbz	r0, .L157
 522:rt-thread/src/kservice.c **** 
 1332              		.loc 1 522 0
 1333 0014 2A46     		mov	r2, r5
 1334 0016 3146     		mov	r1, r6
 1335 0018 FFF7FEFF 		bl	rt_memcpy
 1336              	.LVL194:
 1337              	.L157:
 525:rt-thread/src/kservice.c **** RTM_EXPORT(rt_strdup);
 1338              		.loc 1 525 0
 1339 001c 2046     		mov	r0, r4
 1340 001e 70BD     		pop	{r4, r5, r6, pc}
 1341              		.cfi_endproc
 1342              	.LFE29:
 1344              		.section	.text.rt_vsnprintf,"ax",%progbits
 1345              		.align	1
 1346              		.global	rt_vsnprintf
 1347              		.syntax unified
 1348              		.thumb
 1349              		.thumb_func
 1350              		.fpu fpv4-sp-d16
 1352              	rt_vsnprintf:
 1353              	.LFB34:
 776:rt-thread/src/kservice.c **** 
 777:rt-thread/src/kservice.c **** rt_int32_t rt_vsnprintf(char       *buf,
ARM GAS  /tmp/ccGzdbPs.s 			page 41


 778:rt-thread/src/kservice.c ****                         rt_size_t   size,
 779:rt-thread/src/kservice.c ****                         const char *fmt,
 780:rt-thread/src/kservice.c ****                         va_list     args)
 781:rt-thread/src/kservice.c **** {
 1354              		.loc 1 781 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 8
 1357              		@ frame_needed = 0, uses_anonymous_args = 0
 1358              	.LVL195:
 1359 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1360              	.LCFI23:
 1361              		.cfi_def_cfa_offset 36
 1362              		.cfi_offset 4, -36
 1363              		.cfi_offset 5, -32
 1364              		.cfi_offset 6, -28
 1365              		.cfi_offset 7, -24
 1366              		.cfi_offset 8, -20
 1367              		.cfi_offset 9, -16
 1368              		.cfi_offset 10, -12
 1369              		.cfi_offset 11, -8
 1370              		.cfi_offset 14, -4
 1371 0004 87B0     		sub	sp, sp, #28
 1372              	.LCFI24:
 1373              		.cfi_def_cfa_offset 64
 1374 0006 8346     		mov	fp, r0
 1375 0008 0491     		str	r1, [sp, #16]
 1376 000a 1446     		mov	r4, r2
 1377 000c 0593     		str	r3, [sp, #20]
 1378              	.LVL196:
 782:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 783:rt-thread/src/kservice.c ****     unsigned long long num;
 784:rt-thread/src/kservice.c **** #else
 785:rt-thread/src/kservice.c ****     rt_uint32_t num;
 786:rt-thread/src/kservice.c **** #endif
 787:rt-thread/src/kservice.c ****     int i, len;
 788:rt-thread/src/kservice.c ****     char *str, *end, c;
 789:rt-thread/src/kservice.c ****     const char *s;
 790:rt-thread/src/kservice.c **** 
 791:rt-thread/src/kservice.c ****     rt_uint8_t base;            /* the base of number */
 792:rt-thread/src/kservice.c ****     rt_uint8_t flags;           /* flags to print number */
 793:rt-thread/src/kservice.c ****     rt_uint8_t qualifier;       /* 'h', 'l', or 'L' for integer fields */
 794:rt-thread/src/kservice.c ****     rt_int32_t field_width;     /* width of output field */
 795:rt-thread/src/kservice.c **** 
 796:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 797:rt-thread/src/kservice.c ****     int precision;      /* min. # of digits for integers and max for a string */
 798:rt-thread/src/kservice.c **** #endif
 799:rt-thread/src/kservice.c **** 
 800:rt-thread/src/kservice.c ****     str = buf;
 801:rt-thread/src/kservice.c ****     end = buf + size;
 802:rt-thread/src/kservice.c **** 
 803:rt-thread/src/kservice.c ****     /* Make sure end is always >= buf */
 804:rt-thread/src/kservice.c ****     if (end < buf)
 1379              		.loc 1 804 0
 1380 000e 10EB0109 		adds	r9, r0, r1
 1381              	.LVL197:
 1382 0012 03D3     		bcc	.L161
 1383              	.LVL198:
ARM GAS  /tmp/ccGzdbPs.s 			page 42


 805:rt-thread/src/kservice.c ****     {
 806:rt-thread/src/kservice.c ****         end  = ((char *) - 1);
 807:rt-thread/src/kservice.c ****         size = end - buf;
 1384              		.loc 1 807 0
 1385 0014 C343     		mvns	r3, r0
 1386 0016 0493     		str	r3, [sp, #16]
 1387              	.LVL199:
 806:rt-thread/src/kservice.c ****         size = end - buf;
 1388              		.loc 1 806 0
 1389 0018 4FF0FF39 		mov	r9, #-1
 1390              	.LVL200:
 1391              	.L161:
 808:rt-thread/src/kservice.c ****     }
 809:rt-thread/src/kservice.c **** 
 810:rt-thread/src/kservice.c ****     for (; *fmt ; ++fmt)
 811:rt-thread/src/kservice.c ****     {
 812:rt-thread/src/kservice.c ****         if (*fmt != '%')
 813:rt-thread/src/kservice.c ****         {
 814:rt-thread/src/kservice.c ****             if (str < end)
 815:rt-thread/src/kservice.c ****                 *str = *fmt;
 816:rt-thread/src/kservice.c ****             ++ str;
 817:rt-thread/src/kservice.c ****             continue;
 818:rt-thread/src/kservice.c ****         }
 819:rt-thread/src/kservice.c **** 
 820:rt-thread/src/kservice.c ****         /* process flags */
 821:rt-thread/src/kservice.c ****         flags = 0;
 822:rt-thread/src/kservice.c **** 
 823:rt-thread/src/kservice.c ****         while (1)
 824:rt-thread/src/kservice.c ****         {
 825:rt-thread/src/kservice.c ****             /* skips the first '%' also */
 826:rt-thread/src/kservice.c ****             ++ fmt;
 827:rt-thread/src/kservice.c ****             if (*fmt == '-') flags |= LEFT;
 828:rt-thread/src/kservice.c ****             else if (*fmt == '+') flags |= PLUS;
 829:rt-thread/src/kservice.c ****             else if (*fmt == ' ') flags |= SPACE;
 830:rt-thread/src/kservice.c ****             else if (*fmt == '#') flags |= SPECIAL;
 831:rt-thread/src/kservice.c ****             else if (*fmt == '0') flags |= ZEROPAD;
 832:rt-thread/src/kservice.c ****             else break;
 833:rt-thread/src/kservice.c ****         }
 834:rt-thread/src/kservice.c **** 
 835:rt-thread/src/kservice.c ****         /* get field width */
 836:rt-thread/src/kservice.c ****         field_width = -1;
 837:rt-thread/src/kservice.c ****         if (isdigit(*fmt)) field_width = skip_atoi(&fmt);
 838:rt-thread/src/kservice.c ****         else if (*fmt == '*')
 839:rt-thread/src/kservice.c ****         {
 840:rt-thread/src/kservice.c ****             ++ fmt;
 841:rt-thread/src/kservice.c ****             /* it's the next argument */
 842:rt-thread/src/kservice.c ****             field_width = va_arg(args, int);
 843:rt-thread/src/kservice.c ****             if (field_width < 0)
 844:rt-thread/src/kservice.c ****             {
 845:rt-thread/src/kservice.c ****                 field_width = -field_width;
 846:rt-thread/src/kservice.c ****                 flags |= LEFT;
 847:rt-thread/src/kservice.c ****             }
 848:rt-thread/src/kservice.c ****         }
 849:rt-thread/src/kservice.c **** 
 850:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 851:rt-thread/src/kservice.c ****         /* get the precision */
 852:rt-thread/src/kservice.c ****         precision = -1;
ARM GAS  /tmp/ccGzdbPs.s 			page 43


 853:rt-thread/src/kservice.c ****         if (*fmt == '.')
 854:rt-thread/src/kservice.c ****         {
 855:rt-thread/src/kservice.c ****             ++ fmt;
 856:rt-thread/src/kservice.c ****             if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 857:rt-thread/src/kservice.c ****             else if (*fmt == '*')
 858:rt-thread/src/kservice.c ****             {
 859:rt-thread/src/kservice.c ****                 ++ fmt;
 860:rt-thread/src/kservice.c ****                 /* it's the next argument */
 861:rt-thread/src/kservice.c ****                 precision = va_arg(args, int);
 862:rt-thread/src/kservice.c ****             }
 863:rt-thread/src/kservice.c ****             if (precision < 0) precision = 0;
 864:rt-thread/src/kservice.c ****         }
 865:rt-thread/src/kservice.c **** #endif
 866:rt-thread/src/kservice.c ****         /* get the conversion qualifier */
 867:rt-thread/src/kservice.c ****         qualifier = 0;
 868:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 869:rt-thread/src/kservice.c ****         if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
 870:rt-thread/src/kservice.c **** #else
 871:rt-thread/src/kservice.c ****         if (*fmt == 'h' || *fmt == 'l')
 872:rt-thread/src/kservice.c **** #endif
 873:rt-thread/src/kservice.c ****         {
 874:rt-thread/src/kservice.c ****             qualifier = *fmt;
 875:rt-thread/src/kservice.c ****             ++ fmt;
 876:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 877:rt-thread/src/kservice.c ****             if (qualifier == 'l' && *fmt == 'l')
 878:rt-thread/src/kservice.c ****             {
 879:rt-thread/src/kservice.c ****                 qualifier = 'L';
 880:rt-thread/src/kservice.c ****                 ++ fmt;
 881:rt-thread/src/kservice.c ****             }
 882:rt-thread/src/kservice.c **** #endif
 883:rt-thread/src/kservice.c ****         }
 884:rt-thread/src/kservice.c **** 
 885:rt-thread/src/kservice.c ****         /* the default base */
 886:rt-thread/src/kservice.c ****         base = 10;
 887:rt-thread/src/kservice.c **** 
 888:rt-thread/src/kservice.c ****         switch (*fmt)
 889:rt-thread/src/kservice.c ****         {
 890:rt-thread/src/kservice.c ****         case 'c':
 891:rt-thread/src/kservice.c ****             if (!(flags & LEFT))
 892:rt-thread/src/kservice.c ****             {
 893:rt-thread/src/kservice.c ****                 while (--field_width > 0)
 894:rt-thread/src/kservice.c ****                 {
 895:rt-thread/src/kservice.c ****                     if (str < end) *str = ' ';
 896:rt-thread/src/kservice.c ****                     ++ str;
 897:rt-thread/src/kservice.c ****                 }
 898:rt-thread/src/kservice.c ****             }
 899:rt-thread/src/kservice.c **** 
 900:rt-thread/src/kservice.c ****             /* get character */
 901:rt-thread/src/kservice.c ****             c = (rt_uint8_t)va_arg(args, int);
 902:rt-thread/src/kservice.c ****             if (str < end) *str = c;
 903:rt-thread/src/kservice.c ****             ++ str;
 904:rt-thread/src/kservice.c **** 
 905:rt-thread/src/kservice.c ****             /* put width */
 906:rt-thread/src/kservice.c ****             while (--field_width > 0)
 907:rt-thread/src/kservice.c ****             {
 908:rt-thread/src/kservice.c ****                 if (str < end) *str = ' ';
 909:rt-thread/src/kservice.c ****                 ++ str;
ARM GAS  /tmp/ccGzdbPs.s 			page 44


 910:rt-thread/src/kservice.c ****             }
 911:rt-thread/src/kservice.c ****             continue;
 912:rt-thread/src/kservice.c **** 
 913:rt-thread/src/kservice.c ****         case 's':
 914:rt-thread/src/kservice.c ****             s = va_arg(args, char *);
 915:rt-thread/src/kservice.c ****             if (!s) s = "(NULL)";
 916:rt-thread/src/kservice.c **** 
 917:rt-thread/src/kservice.c ****             len = rt_strlen(s);
 918:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 919:rt-thread/src/kservice.c ****             if (precision > 0 && len > precision) len = precision;
 920:rt-thread/src/kservice.c **** #endif
 921:rt-thread/src/kservice.c **** 
 922:rt-thread/src/kservice.c ****             if (!(flags & LEFT))
 923:rt-thread/src/kservice.c ****             {
 924:rt-thread/src/kservice.c ****                 while (len < field_width--)
 925:rt-thread/src/kservice.c ****                 {
 926:rt-thread/src/kservice.c ****                     if (str < end) *str = ' ';
 927:rt-thread/src/kservice.c ****                     ++ str;
 928:rt-thread/src/kservice.c ****                 }
 929:rt-thread/src/kservice.c ****             }
 930:rt-thread/src/kservice.c **** 
 931:rt-thread/src/kservice.c ****             for (i = 0; i < len; ++i)
 932:rt-thread/src/kservice.c ****             {
 933:rt-thread/src/kservice.c ****                 if (str < end) *str = *s;
 934:rt-thread/src/kservice.c ****                 ++ str;
 935:rt-thread/src/kservice.c ****                 ++ s;
 936:rt-thread/src/kservice.c ****             }
 937:rt-thread/src/kservice.c **** 
 938:rt-thread/src/kservice.c ****             while (len < field_width--)
 939:rt-thread/src/kservice.c ****             {
 940:rt-thread/src/kservice.c ****                 if (str < end) *str = ' ';
 941:rt-thread/src/kservice.c ****                 ++ str;
 942:rt-thread/src/kservice.c ****             }
 943:rt-thread/src/kservice.c ****             continue;
 944:rt-thread/src/kservice.c **** 
 945:rt-thread/src/kservice.c ****         case 'p':
 946:rt-thread/src/kservice.c ****             if (field_width == -1)
 947:rt-thread/src/kservice.c ****             {
 948:rt-thread/src/kservice.c ****                 field_width = sizeof(void *) << 1;
 949:rt-thread/src/kservice.c ****                 flags |= ZEROPAD;
 950:rt-thread/src/kservice.c ****             }
 951:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 952:rt-thread/src/kservice.c ****             str = print_number(str, end,
 953:rt-thread/src/kservice.c ****                                (long)va_arg(args, void *),
 954:rt-thread/src/kservice.c ****                                16, field_width, precision, flags);
 955:rt-thread/src/kservice.c **** #else
 956:rt-thread/src/kservice.c ****             str = print_number(str, end,
 957:rt-thread/src/kservice.c ****                                (long)va_arg(args, void *),
 958:rt-thread/src/kservice.c ****                                16, field_width, flags);
 959:rt-thread/src/kservice.c **** #endif
 960:rt-thread/src/kservice.c ****             continue;
 961:rt-thread/src/kservice.c **** 
 962:rt-thread/src/kservice.c ****         case '%':
 963:rt-thread/src/kservice.c ****             if (str < end) *str = '%';
 964:rt-thread/src/kservice.c ****             ++ str;
 965:rt-thread/src/kservice.c ****             continue;
 966:rt-thread/src/kservice.c **** 
ARM GAS  /tmp/ccGzdbPs.s 			page 45


 967:rt-thread/src/kservice.c ****         /* integer number formats - set up the flags and "break" */
 968:rt-thread/src/kservice.c ****         case 'o':
 969:rt-thread/src/kservice.c ****             base = 8;
 970:rt-thread/src/kservice.c ****             break;
 971:rt-thread/src/kservice.c **** 
 972:rt-thread/src/kservice.c ****         case 'X':
 973:rt-thread/src/kservice.c ****             flags |= LARGE;
 974:rt-thread/src/kservice.c ****         case 'x':
 975:rt-thread/src/kservice.c ****             base = 16;
 1392              		.loc 1 975 0 discriminator 1
 1393 001c 5F46     		mov	r7, fp
 1394 001e 01E0     		b	.L162
 1395              	.LVL201:
 1396              	.L164:
 816:rt-thread/src/kservice.c ****             continue;
 1397              		.loc 1 816 0
 1398 0020 0137     		adds	r7, r7, #1
 1399              	.LVL202:
 1400              	.L165:
 810:rt-thread/src/kservice.c ****     {
 1401              		.loc 1 810 0
 1402 0022 0134     		adds	r4, r4, #1
 1403              	.LVL203:
 1404              	.L162:
 810:rt-thread/src/kservice.c ****     {
 1405              		.loc 1 810 0 is_stmt 0 discriminator 1
 1406 0024 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1407 0026 002B     		cmp	r3, #0
 1408 0028 00F09181 		beq	.L240
 812:rt-thread/src/kservice.c ****         {
 1409              		.loc 1 812 0 is_stmt 1
 1410 002c 252B     		cmp	r3, #37
 1411 002e 03D0     		beq	.L226
 814:rt-thread/src/kservice.c ****                 *str = *fmt;
 1412              		.loc 1 814 0
 1413 0030 4F45     		cmp	r7, r9
 1414 0032 F5D2     		bcs	.L164
 815:rt-thread/src/kservice.c ****             ++ str;
 1415              		.loc 1 815 0
 1416 0034 3B70     		strb	r3, [r7]
 1417 0036 F3E7     		b	.L164
 1418              	.L226:
 1419 0038 0025     		movs	r5, #0
 1420 003a 02E0     		b	.L163
 1421              	.LVL204:
 1422              	.L241:
 827:rt-thread/src/kservice.c ****             else if (*fmt == '+') flags |= PLUS;
 1423              		.loc 1 827 0 discriminator 1
 1424 003c 45F01005 		orr	r5, r5, #16
 1425              	.LVL205:
 1426              	.L167:
 1427 0040 1446     		mov	r4, r2
 1428              	.LVL206:
 1429              	.L163:
 826:rt-thread/src/kservice.c ****             if (*fmt == '-') flags |= LEFT;
 1430              		.loc 1 826 0
 1431 0042 621C     		adds	r2, r4, #1
ARM GAS  /tmp/ccGzdbPs.s 			page 46


 1432              	.LVL207:
 827:rt-thread/src/kservice.c ****             else if (*fmt == '+') flags |= PLUS;
 1433              		.loc 1 827 0
 1434 0044 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1435 0046 2D2B     		cmp	r3, #45
 1436 0048 F8D0     		beq	.L241
 828:rt-thread/src/kservice.c ****             else if (*fmt == ' ') flags |= SPACE;
 1437              		.loc 1 828 0
 1438 004a 2B2B     		cmp	r3, #43
 1439 004c 08D0     		beq	.L242
 829:rt-thread/src/kservice.c ****             else if (*fmt == '#') flags |= SPECIAL;
 1440              		.loc 1 829 0
 1441 004e 202B     		cmp	r3, #32
 1442 0050 09D0     		beq	.L243
 830:rt-thread/src/kservice.c ****             else if (*fmt == '0') flags |= ZEROPAD;
 1443              		.loc 1 830 0
 1444 0052 232B     		cmp	r3, #35
 1445 0054 0AD0     		beq	.L244
 831:rt-thread/src/kservice.c ****             else break;
 1446              		.loc 1 831 0
 1447 0056 302B     		cmp	r3, #48
 1448 0058 0BD1     		bne	.L171
 831:rt-thread/src/kservice.c ****             else break;
 1449              		.loc 1 831 0 is_stmt 0 discriminator 1
 1450 005a 45F00105 		orr	r5, r5, #1
 1451              	.LVL208:
 1452 005e EFE7     		b	.L167
 1453              	.L242:
 828:rt-thread/src/kservice.c ****             else if (*fmt == ' ') flags |= SPACE;
 1454              		.loc 1 828 0 is_stmt 1 discriminator 1
 1455 0060 45F00405 		orr	r5, r5, #4
 1456              	.LVL209:
 1457 0064 ECE7     		b	.L167
 1458              	.L243:
 829:rt-thread/src/kservice.c ****             else if (*fmt == '#') flags |= SPECIAL;
 1459              		.loc 1 829 0 discriminator 1
 1460 0066 45F00805 		orr	r5, r5, #8
 1461              	.LVL210:
 1462 006a E9E7     		b	.L167
 1463              	.L244:
 830:rt-thread/src/kservice.c ****             else if (*fmt == '0') flags |= ZEROPAD;
 1464              		.loc 1 830 0 discriminator 1
 1465 006c 45F02005 		orr	r5, r5, #32
 1466              	.LVL211:
 1467 0070 E6E7     		b	.L167
 1468              	.L171:
 1469              	.LVL212:
 837:rt-thread/src/kservice.c ****         else if (*fmt == '*')
 1470              		.loc 1 837 0
 1471 0072 A3F13001 		sub	r1, r3, #48
 1472 0076 0929     		cmp	r1, #9
 1473 0078 79D9     		bls	.L227
 838:rt-thread/src/kservice.c ****         {
 1474              		.loc 1 838 0
 1475 007a 2A2B     		cmp	r3, #42
 1476 007c 79D0     		beq	.L245
 826:rt-thread/src/kservice.c ****             if (*fmt == '-') flags |= LEFT;
ARM GAS  /tmp/ccGzdbPs.s 			page 47


 1477              		.loc 1 826 0
 1478 007e 1446     		mov	r4, r2
 836:rt-thread/src/kservice.c ****         if (isdigit(*fmt)) field_width = skip_atoi(&fmt);
 1479              		.loc 1 836 0
 1480 0080 4FF0FF36 		mov	r6, #-1
 1481 0084 0BE0     		b	.L175
 1482              	.LVL213:
 1483              	.L174:
 1484              	.LBB13:
 1485              	.LBB14:
 592:rt-thread/src/kservice.c **** 
 1486              		.loc 1 592 0
 1487 0086 06EB8606 		add	r6, r6, r6, lsl #2
 1488              	.LVL214:
 1489 008a 7300     		lsls	r3, r6, #1
 1490 008c 0132     		adds	r2, r2, #1
 1491              	.LVL215:
 1492 008e 5E18     		adds	r6, r3, r1
 1493 0090 303E     		subs	r6, r6, #48
 1494              	.LVL216:
 1495              	.L172:
 591:rt-thread/src/kservice.c ****         i = i * 10 + *((*s)++) - '0';
 1496              		.loc 1 591 0
 1497 0092 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1498 0094 A1F13003 		sub	r3, r1, #48
 1499 0098 092B     		cmp	r3, #9
 1500 009a F4D9     		bls	.L174
 1501 009c 1446     		mov	r4, r2
 1502              	.LVL217:
 1503              	.L175:
 1504              	.LBE14:
 1505              	.LBE13:
 853:rt-thread/src/kservice.c ****         {
 1506              		.loc 1 853 0
 1507 009e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1508 00a0 2E2B     		cmp	r3, #46
 1509 00a2 71D0     		beq	.L246
 852:rt-thread/src/kservice.c ****         if (*fmt == '.')
 1510              		.loc 1 852 0
 1511 00a4 4FF0FF38 		mov	r8, #-1
 1512              	.LVL218:
 1513              	.L176:
 871:rt-thread/src/kservice.c **** #endif
 1514              		.loc 1 871 0
 1515 00a8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1516 00aa 682B     		cmp	r3, #104
 1517 00ac 00F09880 		beq	.L181
 871:rt-thread/src/kservice.c **** #endif
 1518              		.loc 1 871 0 is_stmt 0 discriminator 1
 1519 00b0 6C2B     		cmp	r3, #108
 1520 00b2 00F09580 		beq	.L181
 867:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 1521              		.loc 1 867 0 is_stmt 1
 1522 00b6 0022     		movs	r2, #0
 1523              	.LVL219:
 1524              	.L182:
 888:rt-thread/src/kservice.c ****         {
ARM GAS  /tmp/ccGzdbPs.s 			page 48


 1525              		.loc 1 888 0
 1526 00b8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1527 00ba 253B     		subs	r3, r3, #37
 1528 00bc 532B     		cmp	r3, #83
 1529 00be 00F21381 		bhi	.L183
 1530 00c2 DFE813F0 		tbh	[pc, r3, lsl #1]
 1531              	.L185:
 1532 00c6 0101     		.2byte	(.L184-.L185)/2
 1533 00c8 1101     		.2byte	(.L183-.L185)/2
 1534 00ca 1101     		.2byte	(.L183-.L185)/2
 1535 00cc 1101     		.2byte	(.L183-.L185)/2
 1536 00ce 1101     		.2byte	(.L183-.L185)/2
 1537 00d0 1101     		.2byte	(.L183-.L185)/2
 1538 00d2 1101     		.2byte	(.L183-.L185)/2
 1539 00d4 1101     		.2byte	(.L183-.L185)/2
 1540 00d6 1101     		.2byte	(.L183-.L185)/2
 1541 00d8 1101     		.2byte	(.L183-.L185)/2
 1542 00da 1101     		.2byte	(.L183-.L185)/2
 1543 00dc 1101     		.2byte	(.L183-.L185)/2
 1544 00de 1101     		.2byte	(.L183-.L185)/2
 1545 00e0 1101     		.2byte	(.L183-.L185)/2
 1546 00e2 1101     		.2byte	(.L183-.L185)/2
 1547 00e4 1101     		.2byte	(.L183-.L185)/2
 1548 00e6 1101     		.2byte	(.L183-.L185)/2
 1549 00e8 1101     		.2byte	(.L183-.L185)/2
 1550 00ea 1101     		.2byte	(.L183-.L185)/2
 1551 00ec 1101     		.2byte	(.L183-.L185)/2
 1552 00ee 1101     		.2byte	(.L183-.L185)/2
 1553 00f0 1101     		.2byte	(.L183-.L185)/2
 1554 00f2 1101     		.2byte	(.L183-.L185)/2
 1555 00f4 1101     		.2byte	(.L183-.L185)/2
 1556 00f6 1101     		.2byte	(.L183-.L185)/2
 1557 00f8 1101     		.2byte	(.L183-.L185)/2
 1558 00fa 1101     		.2byte	(.L183-.L185)/2
 1559 00fc 1101     		.2byte	(.L183-.L185)/2
 1560 00fe 1101     		.2byte	(.L183-.L185)/2
 1561 0100 1101     		.2byte	(.L183-.L185)/2
 1562 0102 1101     		.2byte	(.L183-.L185)/2
 1563 0104 1101     		.2byte	(.L183-.L185)/2
 1564 0106 1101     		.2byte	(.L183-.L185)/2
 1565 0108 1101     		.2byte	(.L183-.L185)/2
 1566 010a 1101     		.2byte	(.L183-.L185)/2
 1567 010c 1101     		.2byte	(.L183-.L185)/2
 1568 010e 1101     		.2byte	(.L183-.L185)/2
 1569 0110 1101     		.2byte	(.L183-.L185)/2
 1570 0112 1101     		.2byte	(.L183-.L185)/2
 1571 0114 1101     		.2byte	(.L183-.L185)/2
 1572 0116 1101     		.2byte	(.L183-.L185)/2
 1573 0118 1101     		.2byte	(.L183-.L185)/2
 1574 011a 1101     		.2byte	(.L183-.L185)/2
 1575 011c 1101     		.2byte	(.L183-.L185)/2
 1576 011e 1101     		.2byte	(.L183-.L185)/2
 1577 0120 1101     		.2byte	(.L183-.L185)/2
 1578 0122 1101     		.2byte	(.L183-.L185)/2
 1579 0124 1101     		.2byte	(.L183-.L185)/2
 1580 0126 1101     		.2byte	(.L183-.L185)/2
 1581 0128 1101     		.2byte	(.L183-.L185)/2
ARM GAS  /tmp/ccGzdbPs.s 			page 49


 1582 012a 1101     		.2byte	(.L183-.L185)/2
 1583 012c 0901     		.2byte	(.L186-.L185)/2
 1584 012e 1101     		.2byte	(.L183-.L185)/2
 1585 0130 1101     		.2byte	(.L183-.L185)/2
 1586 0132 1101     		.2byte	(.L183-.L185)/2
 1587 0134 1101     		.2byte	(.L183-.L185)/2
 1588 0136 1101     		.2byte	(.L183-.L185)/2
 1589 0138 1101     		.2byte	(.L183-.L185)/2
 1590 013a 1101     		.2byte	(.L183-.L185)/2
 1591 013c 1101     		.2byte	(.L183-.L185)/2
 1592 013e 1101     		.2byte	(.L183-.L185)/2
 1593 0140 1101     		.2byte	(.L183-.L185)/2
 1594 0142 9000     		.2byte	(.L187-.L185)/2
 1595 0144 0D01     		.2byte	(.L188-.L185)/2
 1596 0146 1101     		.2byte	(.L183-.L185)/2
 1597 0148 1101     		.2byte	(.L183-.L185)/2
 1598 014a 1101     		.2byte	(.L183-.L185)/2
 1599 014c 1101     		.2byte	(.L183-.L185)/2
 1600 014e 0D01     		.2byte	(.L188-.L185)/2
 1601 0150 1101     		.2byte	(.L183-.L185)/2
 1602 0152 1101     		.2byte	(.L183-.L185)/2
 1603 0154 1101     		.2byte	(.L183-.L185)/2
 1604 0156 1101     		.2byte	(.L183-.L185)/2
 1605 0158 1101     		.2byte	(.L183-.L185)/2
 1606 015a 0701     		.2byte	(.L189-.L185)/2
 1607 015c EB00     		.2byte	(.L190-.L185)/2
 1608 015e 1101     		.2byte	(.L183-.L185)/2
 1609 0160 1101     		.2byte	(.L183-.L185)/2
 1610 0162 AF00     		.2byte	(.L191-.L185)/2
 1611 0164 1101     		.2byte	(.L183-.L185)/2
 1612 0166 2001     		.2byte	(.L192-.L185)/2
 1613 0168 1101     		.2byte	(.L183-.L185)/2
 1614 016a 1101     		.2byte	(.L183-.L185)/2
 1615 016c 2201     		.2byte	(.L234-.L185)/2
 1616              	.LVL220:
 1617              		.p2align 1
 1618              	.L227:
 1619 016e 0026     		movs	r6, #0
 1620 0170 8FE7     		b	.L172
 1621              	.L245:
 840:rt-thread/src/kservice.c ****             /* it's the next argument */
 1622              		.loc 1 840 0
 1623 0172 0234     		adds	r4, r4, #2
 1624              	.LVL221:
 842:rt-thread/src/kservice.c ****             if (field_width < 0)
 1625              		.loc 1 842 0
 1626 0174 059B     		ldr	r3, [sp, #20]
 1627 0176 1A1D     		adds	r2, r3, #4
 1628 0178 0592     		str	r2, [sp, #20]
 1629 017a 1E68     		ldr	r6, [r3]
 1630              	.LVL222:
 843:rt-thread/src/kservice.c ****             {
 1631              		.loc 1 843 0
 1632 017c 002E     		cmp	r6, #0
 1633 017e 8EDA     		bge	.L175
 845:rt-thread/src/kservice.c ****                 flags |= LEFT;
 1634              		.loc 1 845 0
ARM GAS  /tmp/ccGzdbPs.s 			page 50


 1635 0180 7642     		negs	r6, r6
 1636              	.LVL223:
 846:rt-thread/src/kservice.c ****             }
 1637              		.loc 1 846 0
 1638 0182 45F01005 		orr	r5, r5, #16
 1639              	.LVL224:
 1640 0186 8AE7     		b	.L175
 1641              	.LVL225:
 1642              	.L246:
 855:rt-thread/src/kservice.c ****             if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 1643              		.loc 1 855 0
 1644 0188 621C     		adds	r2, r4, #1
 1645              	.LVL226:
 856:rt-thread/src/kservice.c ****             else if (*fmt == '*')
 1646              		.loc 1 856 0
 1647 018a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1648 018c A3F13001 		sub	r1, r3, #48
 1649 0190 0929     		cmp	r1, #9
 1650 0192 1BD9     		bls	.L230
 857:rt-thread/src/kservice.c ****             {
 1651              		.loc 1 857 0
 1652 0194 2A2B     		cmp	r3, #42
 1653 0196 1CD0     		beq	.L247
 855:rt-thread/src/kservice.c ****             if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 1654              		.loc 1 855 0
 1655 0198 1446     		mov	r4, r2
 852:rt-thread/src/kservice.c ****         if (*fmt == '.')
 1656              		.loc 1 852 0
 1657 019a 4FF0FF38 		mov	r8, #-1
 1658 019e 0EE0     		b	.L180
 1659              	.LVL227:
 1660              	.L179:
 1661              	.LBB15:
 1662              	.LBB16:
 592:rt-thread/src/kservice.c **** 
 1663              		.loc 1 592 0
 1664 01a0 08EB8808 		add	r8, r8, r8, lsl #2
 1665              	.LVL228:
 1666 01a4 4FEA4803 		lsl	r3, r8, #1
 1667 01a8 0132     		adds	r2, r2, #1
 1668              	.LVL229:
 1669 01aa 03EB0108 		add	r8, r3, r1
 1670 01ae A8F13008 		sub	r8, r8, #48
 1671              	.LVL230:
 1672              	.L177:
 591:rt-thread/src/kservice.c ****         i = i * 10 + *((*s)++) - '0';
 1673              		.loc 1 591 0
 1674 01b2 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1675 01b4 A1F13003 		sub	r3, r1, #48
 1676 01b8 092B     		cmp	r3, #9
 1677 01ba F1D9     		bls	.L179
 1678 01bc 1446     		mov	r4, r2
 1679              	.LVL231:
 1680              	.L180:
 1681              	.LBE16:
 1682              	.LBE15:
 863:rt-thread/src/kservice.c ****         }
ARM GAS  /tmp/ccGzdbPs.s 			page 51


 1683              		.loc 1 863 0
 1684 01be B8F1000F 		cmp	r8, #0
 1685 01c2 BFF671AF 		bge	.L176
 1686 01c6 4FF00008 		mov	r8, #0
 1687              	.LVL232:
 1688 01ca 6DE7     		b	.L176
 1689              	.LVL233:
 1690              	.L230:
 1691 01cc 4FF00008 		mov	r8, #0
 1692 01d0 EFE7     		b	.L177
 1693              	.L247:
 859:rt-thread/src/kservice.c ****                 /* it's the next argument */
 1694              		.loc 1 859 0
 1695 01d2 0234     		adds	r4, r4, #2
 1696              	.LVL234:
 861:rt-thread/src/kservice.c ****             }
 1697              		.loc 1 861 0
 1698 01d4 059B     		ldr	r3, [sp, #20]
 1699 01d6 1A1D     		adds	r2, r3, #4
 1700 01d8 0592     		str	r2, [sp, #20]
 1701 01da D3F80080 		ldr	r8, [r3]
 1702 01de EEE7     		b	.L180
 1703              	.LVL235:
 1704              	.L181:
 875:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 1705              		.loc 1 875 0
 1706 01e0 0134     		adds	r4, r4, #1
 1707              	.LVL236:
 874:rt-thread/src/kservice.c ****             ++ fmt;
 1708              		.loc 1 874 0
 1709 01e2 1A46     		mov	r2, r3
 1710 01e4 68E7     		b	.L182
 1711              	.LVL237:
 1712              	.L187:
 891:rt-thread/src/kservice.c ****             {
 1713              		.loc 1 891 0
 1714 01e6 15F0100F 		tst	r5, #16
 1715 01ea 09D0     		beq	.L194
 1716              	.L195:
 901:rt-thread/src/kservice.c ****             if (str < end) *str = c;
 1717              		.loc 1 901 0
 1718 01ec 059B     		ldr	r3, [sp, #20]
 1719 01ee 1A1D     		adds	r2, r3, #4
 1720              	.LVL238:
 1721 01f0 0592     		str	r2, [sp, #20]
 1722 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1723              	.LVL239:
 902:rt-thread/src/kservice.c ****             ++ str;
 1724              		.loc 1 902 0
 1725 01f4 4F45     		cmp	r7, r9
 1726 01f6 00D2     		bcs	.L198
 902:rt-thread/src/kservice.c ****             ++ str;
 1727              		.loc 1 902 0 is_stmt 0 discriminator 1
 1728 01f8 3B70     		strb	r3, [r7]
 1729              	.L198:
 903:rt-thread/src/kservice.c **** 
 1730              		.loc 1 903 0 is_stmt 1
ARM GAS  /tmp/ccGzdbPs.s 			page 52


 1731 01fa 0137     		adds	r7, r7, #1
 1732              	.LVL240:
 906:rt-thread/src/kservice.c ****             {
 1733              		.loc 1 906 0
 1734 01fc 09E0     		b	.L199
 1735              	.LVL241:
 1736              	.L196:
 896:rt-thread/src/kservice.c ****                 }
 1737              		.loc 1 896 0
 1738 01fe 0137     		adds	r7, r7, #1
 1739              	.LVL242:
 1740              	.L194:
 893:rt-thread/src/kservice.c ****                 {
 1741              		.loc 1 893 0
 1742 0200 013E     		subs	r6, r6, #1
 1743              	.LVL243:
 1744 0202 002E     		cmp	r6, #0
 1745 0204 F2DD     		ble	.L195
 895:rt-thread/src/kservice.c ****                     ++ str;
 1746              		.loc 1 895 0
 1747 0206 4F45     		cmp	r7, r9
 1748 0208 F9D2     		bcs	.L196
 895:rt-thread/src/kservice.c ****                     ++ str;
 1749              		.loc 1 895 0 is_stmt 0 discriminator 1
 1750 020a 2023     		movs	r3, #32
 1751 020c 3B70     		strb	r3, [r7]
 1752 020e F6E7     		b	.L196
 1753              	.LVL244:
 1754              	.L200:
 909:rt-thread/src/kservice.c ****             }
 1755              		.loc 1 909 0 is_stmt 1
 1756 0210 0137     		adds	r7, r7, #1
 1757              	.LVL245:
 1758              	.L199:
 906:rt-thread/src/kservice.c ****             {
 1759              		.loc 1 906 0
 1760 0212 013E     		subs	r6, r6, #1
 1761              	.LVL246:
 1762 0214 002E     		cmp	r6, #0
 1763 0216 7FF704AF 		ble	.L165
 908:rt-thread/src/kservice.c ****                 ++ str;
 1764              		.loc 1 908 0
 1765 021a 4F45     		cmp	r7, r9
 1766 021c F8D2     		bcs	.L200
 908:rt-thread/src/kservice.c ****                 ++ str;
 1767              		.loc 1 908 0 is_stmt 0 discriminator 1
 1768 021e 2023     		movs	r3, #32
 1769 0220 3B70     		strb	r3, [r7]
 1770 0222 F5E7     		b	.L200
 1771              	.LVL247:
 1772              	.L191:
 914:rt-thread/src/kservice.c ****             if (!s) s = "(NULL)";
 1773              		.loc 1 914 0 is_stmt 1
 1774 0224 059B     		ldr	r3, [sp, #20]
 1775 0226 1A1D     		adds	r2, r3, #4
 1776              	.LVL248:
 1777 0228 0592     		str	r2, [sp, #20]
ARM GAS  /tmp/ccGzdbPs.s 			page 53


 1778 022a D3F800A0 		ldr	r10, [r3]
 915:rt-thread/src/kservice.c **** 
 1779              		.loc 1 915 0
 1780 022e BAF1000F 		cmp	r10, #0
 1781 0232 0DD0     		beq	.L248
 1782              	.L202:
 1783              	.LVL249:
 917:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 1784              		.loc 1 917 0
 1785 0234 5046     		mov	r0, r10
 1786 0236 FFF7FEFF 		bl	rt_strlen
 1787              	.LVL250:
 919:rt-thread/src/kservice.c **** #endif
 1788              		.loc 1 919 0
 1789 023a B8F1000F 		cmp	r8, #0
 1790 023e 02DD     		ble	.L203
 919:rt-thread/src/kservice.c **** #endif
 1791              		.loc 1 919 0 is_stmt 0 discriminator 1
 1792 0240 8045     		cmp	r8, r0
 1793 0242 00DA     		bge	.L203
 919:rt-thread/src/kservice.c **** #endif
 1794              		.loc 1 919 0
 1795 0244 4046     		mov	r0, r8
 1796              	.LVL251:
 1797              	.L203:
 922:rt-thread/src/kservice.c ****             {
 1798              		.loc 1 922 0 is_stmt 1
 1799 0246 15F0100F 		tst	r5, #16
 1800 024a 06D0     		beq	.L204
 1801              	.L205:
 1802              	.LVL252:
 931:rt-thread/src/kservice.c ****             {
 1803              		.loc 1 931 0
 1804 024c 0023     		movs	r3, #0
 1805 024e 12E0     		b	.L208
 1806              	.LVL253:
 1807              	.L248:
 915:rt-thread/src/kservice.c **** 
 1808              		.loc 1 915 0
 1809 0250 DFF818A1 		ldr	r10, .L254
 1810 0254 EEE7     		b	.L202
 1811              	.LVL254:
 1812              	.L206:
 927:rt-thread/src/kservice.c ****                 }
 1813              		.loc 1 927 0
 1814 0256 0137     		adds	r7, r7, #1
 1815              	.LVL255:
 924:rt-thread/src/kservice.c ****                 {
 1816              		.loc 1 924 0
 1817 0258 1E46     		mov	r6, r3
 1818              	.LVL256:
 1819              	.L204:
 1820 025a 731E     		subs	r3, r6, #1
 1821              	.LVL257:
 1822 025c B042     		cmp	r0, r6
 1823 025e 04DA     		bge	.L249
 926:rt-thread/src/kservice.c ****                     ++ str;
ARM GAS  /tmp/ccGzdbPs.s 			page 54


 1824              		.loc 1 926 0
 1825 0260 4F45     		cmp	r7, r9
 1826 0262 F8D2     		bcs	.L206
 926:rt-thread/src/kservice.c ****                     ++ str;
 1827              		.loc 1 926 0 is_stmt 0 discriminator 1
 1828 0264 2022     		movs	r2, #32
 1829 0266 3A70     		strb	r2, [r7]
 1830 0268 F5E7     		b	.L206
 1831              	.L249:
 924:rt-thread/src/kservice.c ****                 {
 1832              		.loc 1 924 0 is_stmt 1
 1833 026a 1E46     		mov	r6, r3
 1834 026c EEE7     		b	.L205
 1835              	.LVL258:
 1836              	.L209:
 934:rt-thread/src/kservice.c ****                 ++ s;
 1837              		.loc 1 934 0 discriminator 2
 1838 026e 0137     		adds	r7, r7, #1
 1839              	.LVL259:
 935:rt-thread/src/kservice.c ****             }
 1840              		.loc 1 935 0 discriminator 2
 1841 0270 0AF1010A 		add	r10, r10, #1
 1842              	.LVL260:
 931:rt-thread/src/kservice.c ****             {
 1843              		.loc 1 931 0 discriminator 2
 1844 0274 0133     		adds	r3, r3, #1
 1845              	.LVL261:
 1846              	.L208:
 931:rt-thread/src/kservice.c ****             {
 1847              		.loc 1 931 0 is_stmt 0 discriminator 1
 1848 0276 8342     		cmp	r3, r0
 1849 0278 07DA     		bge	.L211
 933:rt-thread/src/kservice.c ****                 ++ str;
 1850              		.loc 1 933 0 is_stmt 1
 1851 027a 4F45     		cmp	r7, r9
 1852 027c F7D2     		bcs	.L209
 933:rt-thread/src/kservice.c ****                 ++ str;
 1853              		.loc 1 933 0 is_stmt 0 discriminator 1
 1854 027e 9AF80020 		ldrb	r2, [r10]	@ zero_extendqisi2
 1855 0282 3A70     		strb	r2, [r7]
 1856 0284 F3E7     		b	.L209
 1857              	.LVL262:
 1858              	.L212:
 941:rt-thread/src/kservice.c ****             }
 1859              		.loc 1 941 0 is_stmt 1
 1860 0286 0137     		adds	r7, r7, #1
 1861              	.LVL263:
 938:rt-thread/src/kservice.c ****             {
 1862              		.loc 1 938 0
 1863 0288 1E46     		mov	r6, r3
 1864              	.LVL264:
 1865              	.L211:
 1866 028a 731E     		subs	r3, r6, #1
 1867              	.LVL265:
 1868 028c B042     		cmp	r0, r6
 1869 028e BFF6C8AE 		bge	.L165
 940:rt-thread/src/kservice.c ****                 ++ str;
ARM GAS  /tmp/ccGzdbPs.s 			page 55


 1870              		.loc 1 940 0
 1871 0292 4F45     		cmp	r7, r9
 1872 0294 F7D2     		bcs	.L212
 940:rt-thread/src/kservice.c ****                 ++ str;
 1873              		.loc 1 940 0 is_stmt 0 discriminator 1
 1874 0296 2022     		movs	r2, #32
 1875 0298 3A70     		strb	r2, [r7]
 1876 029a F4E7     		b	.L212
 1877              	.LVL266:
 1878              	.L190:
 946:rt-thread/src/kservice.c ****             {
 1879              		.loc 1 946 0 is_stmt 1
 1880 029c B6F1FF3F 		cmp	r6, #-1
 1881 02a0 0ED0     		beq	.L250
 1882              	.LVL267:
 1883              	.L214:
 953:rt-thread/src/kservice.c ****                                16, field_width, precision, flags);
 1884              		.loc 1 953 0
 1885 02a2 059B     		ldr	r3, [sp, #20]
 1886 02a4 1A1D     		adds	r2, r3, #4
 1887              	.LVL268:
 1888 02a6 0592     		str	r2, [sp, #20]
 1889 02a8 1A68     		ldr	r2, [r3]
 952:rt-thread/src/kservice.c ****                                (long)va_arg(args, void *),
 1890              		.loc 1 952 0
 1891 02aa 0295     		str	r5, [sp, #8]
 1892 02ac CDF80480 		str	r8, [sp, #4]
 1893 02b0 0096     		str	r6, [sp]
 1894 02b2 1023     		movs	r3, #16
 1895 02b4 4946     		mov	r1, r9
 1896 02b6 3846     		mov	r0, r7
 1897 02b8 FFF7FEFF 		bl	print_number
 1898              	.LVL269:
 1899 02bc 0746     		mov	r7, r0
 1900              	.LVL270:
 960:rt-thread/src/kservice.c **** 
 1901              		.loc 1 960 0
 1902 02be B0E6     		b	.L165
 1903              	.LVL271:
 1904              	.L250:
 949:rt-thread/src/kservice.c ****             }
 1905              		.loc 1 949 0
 1906 02c0 45F00105 		orr	r5, r5, #1
 1907              	.LVL272:
 948:rt-thread/src/kservice.c ****                 flags |= ZEROPAD;
 1908              		.loc 1 948 0
 1909 02c4 0826     		movs	r6, #8
 1910 02c6 ECE7     		b	.L214
 1911              	.LVL273:
 1912              	.L184:
 963:rt-thread/src/kservice.c ****             ++ str;
 1913              		.loc 1 963 0
 1914 02c8 4F45     		cmp	r7, r9
 1915 02ca 01D2     		bcs	.L215
 963:rt-thread/src/kservice.c ****             ++ str;
 1916              		.loc 1 963 0 is_stmt 0 discriminator 1
 1917 02cc 2523     		movs	r3, #37
ARM GAS  /tmp/ccGzdbPs.s 			page 56


 1918 02ce 3B70     		strb	r3, [r7]
 1919              	.L215:
 964:rt-thread/src/kservice.c ****             continue;
 1920              		.loc 1 964 0 is_stmt 1
 1921 02d0 0137     		adds	r7, r7, #1
 1922              	.LVL274:
 965:rt-thread/src/kservice.c **** 
 1923              		.loc 1 965 0
 1924 02d2 A6E6     		b	.L165
 1925              	.L189:
 1926              	.LVL275:
 969:rt-thread/src/kservice.c ****             break;
 1927              		.loc 1 969 0
 1928 02d4 0823     		movs	r3, #8
 970:rt-thread/src/kservice.c **** 
 1929              		.loc 1 970 0
 1930 02d6 19E0     		b	.L193
 1931              	.LVL276:
 1932              	.L186:
 973:rt-thread/src/kservice.c ****         case 'x':
 1933              		.loc 1 973 0
 1934 02d8 45F04005 		orr	r5, r5, #64
 1935              	.LVL277:
 1936              		.loc 1 975 0
 1937 02dc 1023     		movs	r3, #16
 1938 02de 15E0     		b	.L193
 1939              	.L188:
 976:rt-thread/src/kservice.c ****             break;
 977:rt-thread/src/kservice.c **** 
 978:rt-thread/src/kservice.c ****         case 'd':
 979:rt-thread/src/kservice.c ****         case 'i':
 980:rt-thread/src/kservice.c ****             flags |= SIGN;
 1940              		.loc 1 980 0
 1941 02e0 45F00205 		orr	r5, r5, #2
 1942              	.LVL278:
 886:rt-thread/src/kservice.c **** 
 1943              		.loc 1 886 0
 1944 02e4 0A23     		movs	r3, #10
 1945 02e6 11E0     		b	.L193
 1946              	.L183:
 981:rt-thread/src/kservice.c ****         case 'u':
 982:rt-thread/src/kservice.c ****             break;
 983:rt-thread/src/kservice.c **** 
 984:rt-thread/src/kservice.c ****         default:
 985:rt-thread/src/kservice.c ****             if (str < end) *str = '%';
 1947              		.loc 1 985 0
 1948 02e8 4F45     		cmp	r7, r9
 1949 02ea 01D2     		bcs	.L216
 1950              		.loc 1 985 0 is_stmt 0 discriminator 1
 1951 02ec 2523     		movs	r3, #37
 1952 02ee 3B70     		strb	r3, [r7]
 1953              	.L216:
 986:rt-thread/src/kservice.c ****             ++ str;
 1954              		.loc 1 986 0 is_stmt 1
 1955 02f0 7A1C     		adds	r2, r7, #1
 1956              	.LVL279:
 987:rt-thread/src/kservice.c **** 
ARM GAS  /tmp/ccGzdbPs.s 			page 57


 988:rt-thread/src/kservice.c ****             if (*fmt)
 1957              		.loc 1 988 0
 1958 02f2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1959 02f4 23B1     		cbz	r3, .L217
 989:rt-thread/src/kservice.c ****             {
 990:rt-thread/src/kservice.c ****                 if (str < end) *str = *fmt;
 1960              		.loc 1 990 0
 1961 02f6 9145     		cmp	r9, r2
 1962 02f8 00D9     		bls	.L218
 1963              		.loc 1 990 0 is_stmt 0 discriminator 1
 1964 02fa 7B70     		strb	r3, [r7, #1]
 1965              	.L218:
 991:rt-thread/src/kservice.c ****                 ++ str;
 1966              		.loc 1 991 0 is_stmt 1
 1967 02fc 0237     		adds	r7, r7, #2
 1968              	.LVL280:
 1969 02fe 90E6     		b	.L165
 1970              	.LVL281:
 1971              	.L217:
 992:rt-thread/src/kservice.c ****             }
 993:rt-thread/src/kservice.c ****             else
 994:rt-thread/src/kservice.c ****             {
 995:rt-thread/src/kservice.c ****                 -- fmt;
 1972              		.loc 1 995 0
 1973 0300 013C     		subs	r4, r4, #1
 1974              	.LVL282:
 986:rt-thread/src/kservice.c **** 
 1975              		.loc 1 986 0
 1976 0302 1746     		mov	r7, r2
 1977              	.LVL283:
 996:rt-thread/src/kservice.c ****             }
 997:rt-thread/src/kservice.c ****             continue;
 1978              		.loc 1 997 0
 1979 0304 8DE6     		b	.L165
 1980              	.LVL284:
 1981              	.L192:
 886:rt-thread/src/kservice.c **** 
 1982              		.loc 1 886 0
 1983 0306 0A23     		movs	r3, #10
 1984 0308 00E0     		b	.L193
 1985              	.L234:
 975:rt-thread/src/kservice.c ****             break;
 1986              		.loc 1 975 0
 1987 030a 1023     		movs	r3, #16
 1988              	.LVL285:
 1989              	.L193:
 998:rt-thread/src/kservice.c ****         }
 999:rt-thread/src/kservice.c **** 
1000:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
1001:rt-thread/src/kservice.c ****         if (qualifier == 'L') num = va_arg(args, long long);
1002:rt-thread/src/kservice.c ****         else if (qualifier == 'l')
1003:rt-thread/src/kservice.c **** #else
1004:rt-thread/src/kservice.c ****         if (qualifier == 'l')
 1990              		.loc 1 1004 0
 1991 030c 6C2A     		cmp	r2, #108
 1992 030e 0FD0     		beq	.L251
1005:rt-thread/src/kservice.c **** #endif
ARM GAS  /tmp/ccGzdbPs.s 			page 58


1006:rt-thread/src/kservice.c ****         {
1007:rt-thread/src/kservice.c ****             num = va_arg(args, rt_uint32_t);
1008:rt-thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int32_t)num;
1009:rt-thread/src/kservice.c ****         }
1010:rt-thread/src/kservice.c ****         else if (qualifier == 'h')
 1993              		.loc 1 1010 0
 1994 0310 682A     		cmp	r2, #104
 1995 0312 12D0     		beq	.L252
1011:rt-thread/src/kservice.c ****         {
1012:rt-thread/src/kservice.c ****             num = (rt_uint16_t)va_arg(args, rt_int32_t);
1013:rt-thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int16_t)num;
1014:rt-thread/src/kservice.c ****         }
1015:rt-thread/src/kservice.c ****         else
1016:rt-thread/src/kservice.c ****         {
1017:rt-thread/src/kservice.c ****             num = va_arg(args, rt_uint32_t);
 1996              		.loc 1 1017 0
 1997 0314 059A     		ldr	r2, [sp, #20]
 1998              	.LVL286:
 1999 0316 111D     		adds	r1, r2, #4
 2000 0318 0591     		str	r1, [sp, #20]
 2001 031a 1268     		ldr	r2, [r2]
 2002              	.L221:
 2003              	.LVL287:
1018:rt-thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int32_t)num;
1019:rt-thread/src/kservice.c ****         }
1020:rt-thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
1021:rt-thread/src/kservice.c ****         str = print_number(str, end, num, base, field_width, precision, flags);
 2004              		.loc 1 1021 0
 2005 031c 0295     		str	r5, [sp, #8]
 2006 031e CDF80480 		str	r8, [sp, #4]
 2007 0322 0096     		str	r6, [sp]
 2008 0324 4946     		mov	r1, r9
 2009 0326 3846     		mov	r0, r7
 2010 0328 FFF7FEFF 		bl	print_number
 2011              	.LVL288:
 2012 032c 0746     		mov	r7, r0
 2013              	.LVL289:
 2014 032e 78E6     		b	.L165
 2015              	.LVL290:
 2016              	.L251:
1007:rt-thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int32_t)num;
 2017              		.loc 1 1007 0
 2018 0330 059A     		ldr	r2, [sp, #20]
 2019              	.LVL291:
 2020 0332 111D     		adds	r1, r2, #4
 2021 0334 0591     		str	r1, [sp, #20]
 2022 0336 1268     		ldr	r2, [r2]
 2023 0338 F0E7     		b	.L221
 2024              	.LVL292:
 2025              	.L252:
1012:rt-thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int16_t)num;
 2026              		.loc 1 1012 0
 2027 033a 059A     		ldr	r2, [sp, #20]
 2028              	.LVL293:
 2029 033c 111D     		adds	r1, r2, #4
 2030 033e 0591     		str	r1, [sp, #20]
 2031 0340 1168     		ldr	r1, [r2]
ARM GAS  /tmp/ccGzdbPs.s 			page 59


 2032 0342 8AB2     		uxth	r2, r1
 2033              	.LVL294:
1013:rt-thread/src/kservice.c ****         }
 2034              		.loc 1 1013 0
 2035 0344 15F0020F 		tst	r5, #2
 2036 0348 E8D0     		beq	.L221
1013:rt-thread/src/kservice.c ****         }
 2037              		.loc 1 1013 0 is_stmt 0 discriminator 1
 2038 034a 0AB2     		sxth	r2, r1
 2039              	.LVL295:
 2040 034c E6E7     		b	.L221
 2041              	.LVL296:
 2042              	.L240:
1022:rt-thread/src/kservice.c **** #else
1023:rt-thread/src/kservice.c ****         str = print_number(str, end, num, base, field_width, flags);
1024:rt-thread/src/kservice.c **** #endif
1025:rt-thread/src/kservice.c ****     }
1026:rt-thread/src/kservice.c **** 
1027:rt-thread/src/kservice.c ****     if (size > 0)
 2043              		.loc 1 1027 0 is_stmt 1
 2044 034e 049B     		ldr	r3, [sp, #16]
 2045 0350 23B1     		cbz	r3, .L224
1028:rt-thread/src/kservice.c ****     {
1029:rt-thread/src/kservice.c ****         if (str < end) *str = '\0';
 2046              		.loc 1 1029 0
 2047 0352 4F45     		cmp	r7, r9
 2048 0354 07D3     		bcc	.L253
1030:rt-thread/src/kservice.c ****         else
1031:rt-thread/src/kservice.c ****         {
1032:rt-thread/src/kservice.c ****             end[-1] = '\0';
 2049              		.loc 1 1032 0
 2050 0356 0023     		movs	r3, #0
 2051 0358 09F8013C 		strb	r3, [r9, #-1]
 2052              	.L224:
1033:rt-thread/src/kservice.c ****         }
1034:rt-thread/src/kservice.c ****     }
1035:rt-thread/src/kservice.c **** 
1036:rt-thread/src/kservice.c ****     /* the trailing null byte doesn't count towards the total
1037:rt-thread/src/kservice.c ****     * ++str;
1038:rt-thread/src/kservice.c ****     */
1039:rt-thread/src/kservice.c ****     return str - buf;
1040:rt-thread/src/kservice.c **** }
 2053              		.loc 1 1040 0
 2054 035c A7EB0B00 		sub	r0, r7, fp
 2055 0360 07B0     		add	sp, sp, #28
 2056              	.LCFI25:
 2057              		.cfi_remember_state
 2058              		.cfi_def_cfa_offset 36
 2059              		@ sp needed
 2060 0362 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2061              	.LVL297:
 2062              	.L253:
 2063              	.LCFI26:
 2064              		.cfi_restore_state
1029:rt-thread/src/kservice.c ****         else
 2065              		.loc 1 1029 0 discriminator 1
 2066 0366 0023     		movs	r3, #0
ARM GAS  /tmp/ccGzdbPs.s 			page 60


 2067 0368 3B70     		strb	r3, [r7]
 2068 036a F7E7     		b	.L224
 2069              	.L255:
 2070              		.align	2
 2071              	.L254:
 2072 036c 00000000 		.word	.LC0
 2073              		.cfi_endproc
 2074              	.LFE34:
 2076              		.section	.text.rt_snprintf,"ax",%progbits
 2077              		.align	1
 2078              		.global	rt_snprintf
 2079              		.syntax unified
 2080              		.thumb
 2081              		.thumb_func
 2082              		.fpu fpv4-sp-d16
 2084              	rt_snprintf:
 2085              	.LFB35:
1041:rt-thread/src/kservice.c **** RTM_EXPORT(rt_vsnprintf);
1042:rt-thread/src/kservice.c **** 
1043:rt-thread/src/kservice.c **** /**
1044:rt-thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1045:rt-thread/src/kservice.c ****  *
1046:rt-thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1047:rt-thread/src/kservice.c ****  * @param size the size of buffer
1048:rt-thread/src/kservice.c ****  * @param fmt the format
1049:rt-thread/src/kservice.c ****  */
1050:rt-thread/src/kservice.c **** rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *fmt, ...)
1051:rt-thread/src/kservice.c **** {
 2086              		.loc 1 1051 0
 2087              		.cfi_startproc
 2088              		@ args = 4, pretend = 8, frame = 8
 2089              		@ frame_needed = 0, uses_anonymous_args = 1
 2090              	.LVL298:
 2091 0000 0CB4     		push	{r2, r3}
 2092              	.LCFI27:
 2093              		.cfi_def_cfa_offset 8
 2094              		.cfi_offset 2, -8
 2095              		.cfi_offset 3, -4
 2096 0002 00B5     		push	{lr}
 2097              	.LCFI28:
 2098              		.cfi_def_cfa_offset 12
 2099              		.cfi_offset 14, -12
 2100 0004 83B0     		sub	sp, sp, #12
 2101              	.LCFI29:
 2102              		.cfi_def_cfa_offset 24
 2103 0006 04AB     		add	r3, sp, #16
 2104 0008 53F8042B 		ldr	r2, [r3], #4
1052:rt-thread/src/kservice.c ****     rt_int32_t n;
1053:rt-thread/src/kservice.c ****     va_list args;
1054:rt-thread/src/kservice.c **** 
1055:rt-thread/src/kservice.c ****     va_start(args, fmt);
 2105              		.loc 1 1055 0
 2106 000c 0193     		str	r3, [sp, #4]
1056:rt-thread/src/kservice.c ****     n = rt_vsnprintf(buf, size, fmt, args);
 2107              		.loc 1 1056 0
 2108 000e FFF7FEFF 		bl	rt_vsnprintf
 2109              	.LVL299:
ARM GAS  /tmp/ccGzdbPs.s 			page 61


1057:rt-thread/src/kservice.c ****     va_end(args);
1058:rt-thread/src/kservice.c **** 
1059:rt-thread/src/kservice.c ****     return n;
1060:rt-thread/src/kservice.c **** }
 2110              		.loc 1 1060 0
 2111 0012 03B0     		add	sp, sp, #12
 2112              	.LCFI30:
 2113              		.cfi_def_cfa_offset 12
 2114              		@ sp needed
 2115 0014 5DF804EB 		ldr	lr, [sp], #4
 2116              	.LCFI31:
 2117              		.cfi_restore 14
 2118              		.cfi_def_cfa_offset 8
 2119 0018 02B0     		add	sp, sp, #8
 2120              	.LCFI32:
 2121              		.cfi_restore 3
 2122              		.cfi_restore 2
 2123              		.cfi_def_cfa_offset 0
 2124 001a 7047     		bx	lr
 2125              		.cfi_endproc
 2126              	.LFE35:
 2128              		.section	.text.rt_vsprintf,"ax",%progbits
 2129              		.align	1
 2130              		.global	rt_vsprintf
 2131              		.syntax unified
 2132              		.thumb
 2133              		.thumb_func
 2134              		.fpu fpv4-sp-d16
 2136              	rt_vsprintf:
 2137              	.LFB36:
1061:rt-thread/src/kservice.c **** RTM_EXPORT(rt_snprintf);
1062:rt-thread/src/kservice.c **** 
1063:rt-thread/src/kservice.c **** /**
1064:rt-thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1065:rt-thread/src/kservice.c ****  *
1066:rt-thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1067:rt-thread/src/kservice.c ****  * @param arg_ptr the arg_ptr
1068:rt-thread/src/kservice.c ****  * @param format the format
1069:rt-thread/src/kservice.c ****  */
1070:rt-thread/src/kservice.c **** rt_int32_t rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
1071:rt-thread/src/kservice.c **** {
 2138              		.loc 1 1071 0
 2139              		.cfi_startproc
 2140              		@ args = 0, pretend = 0, frame = 0
 2141              		@ frame_needed = 0, uses_anonymous_args = 0
 2142              	.LVL300:
 2143 0000 08B5     		push	{r3, lr}
 2144              	.LCFI33:
 2145              		.cfi_def_cfa_offset 8
 2146              		.cfi_offset 3, -8
 2147              		.cfi_offset 14, -4
1072:rt-thread/src/kservice.c ****     return rt_vsnprintf(buf, (rt_size_t) - 1, format, arg_ptr);
 2148              		.loc 1 1072 0
 2149 0002 1346     		mov	r3, r2
 2150 0004 0A46     		mov	r2, r1
 2151              	.LVL301:
 2152 0006 4FF0FF31 		mov	r1, #-1
ARM GAS  /tmp/ccGzdbPs.s 			page 62


 2153              	.LVL302:
 2154 000a FFF7FEFF 		bl	rt_vsnprintf
 2155              	.LVL303:
1073:rt-thread/src/kservice.c **** }
 2156              		.loc 1 1073 0
 2157 000e 08BD     		pop	{r3, pc}
 2158              		.cfi_endproc
 2159              	.LFE36:
 2161              		.section	.text.rt_sprintf,"ax",%progbits
 2162              		.align	1
 2163              		.global	rt_sprintf
 2164              		.syntax unified
 2165              		.thumb
 2166              		.thumb_func
 2167              		.fpu fpv4-sp-d16
 2169              	rt_sprintf:
 2170              	.LFB37:
1074:rt-thread/src/kservice.c **** RTM_EXPORT(rt_vsprintf);
1075:rt-thread/src/kservice.c **** 
1076:rt-thread/src/kservice.c **** /**
1077:rt-thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1078:rt-thread/src/kservice.c ****  *
1079:rt-thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1080:rt-thread/src/kservice.c ****  * @param format the format
1081:rt-thread/src/kservice.c ****  */
1082:rt-thread/src/kservice.c **** rt_int32_t rt_sprintf(char *buf, const char *format, ...)
1083:rt-thread/src/kservice.c **** {
 2171              		.loc 1 1083 0
 2172              		.cfi_startproc
 2173              		@ args = 4, pretend = 12, frame = 8
 2174              		@ frame_needed = 0, uses_anonymous_args = 1
 2175              	.LVL304:
 2176 0000 0EB4     		push	{r1, r2, r3}
 2177              	.LCFI34:
 2178              		.cfi_def_cfa_offset 12
 2179              		.cfi_offset 1, -12
 2180              		.cfi_offset 2, -8
 2181              		.cfi_offset 3, -4
 2182 0002 00B5     		push	{lr}
 2183              	.LCFI35:
 2184              		.cfi_def_cfa_offset 16
 2185              		.cfi_offset 14, -16
 2186 0004 82B0     		sub	sp, sp, #8
 2187              	.LCFI36:
 2188              		.cfi_def_cfa_offset 24
 2189 0006 03AA     		add	r2, sp, #12
 2190 0008 52F8041B 		ldr	r1, [r2], #4
1084:rt-thread/src/kservice.c ****     rt_int32_t n;
1085:rt-thread/src/kservice.c ****     va_list arg_ptr;
1086:rt-thread/src/kservice.c **** 
1087:rt-thread/src/kservice.c ****     va_start(arg_ptr, format);
 2191              		.loc 1 1087 0
 2192 000c 0192     		str	r2, [sp, #4]
1088:rt-thread/src/kservice.c ****     n = rt_vsprintf(buf, format, arg_ptr);
 2193              		.loc 1 1088 0
 2194 000e FFF7FEFF 		bl	rt_vsprintf
 2195              	.LVL305:
ARM GAS  /tmp/ccGzdbPs.s 			page 63


1089:rt-thread/src/kservice.c ****     va_end(arg_ptr);
1090:rt-thread/src/kservice.c **** 
1091:rt-thread/src/kservice.c ****     return n;
1092:rt-thread/src/kservice.c **** }
 2196              		.loc 1 1092 0
 2197 0012 02B0     		add	sp, sp, #8
 2198              	.LCFI37:
 2199              		.cfi_def_cfa_offset 16
 2200              		@ sp needed
 2201 0014 5DF804EB 		ldr	lr, [sp], #4
 2202              	.LCFI38:
 2203              		.cfi_restore 14
 2204              		.cfi_def_cfa_offset 12
 2205 0018 03B0     		add	sp, sp, #12
 2206              	.LCFI39:
 2207              		.cfi_restore 3
 2208              		.cfi_restore 2
 2209              		.cfi_restore 1
 2210              		.cfi_def_cfa_offset 0
 2211 001a 7047     		bx	lr
 2212              		.cfi_endproc
 2213              	.LFE37:
 2215              		.section	.text.rt_console_get_device,"ax",%progbits
 2216              		.align	1
 2217              		.global	rt_console_get_device
 2218              		.syntax unified
 2219              		.thumb
 2220              		.thumb_func
 2221              		.fpu fpv4-sp-d16
 2223              	rt_console_get_device:
 2224              	.LFB38:
1093:rt-thread/src/kservice.c **** RTM_EXPORT(rt_sprintf);
1094:rt-thread/src/kservice.c **** 
1095:rt-thread/src/kservice.c **** #ifdef RT_USING_CONSOLE
1096:rt-thread/src/kservice.c **** 
1097:rt-thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1098:rt-thread/src/kservice.c **** /**
1099:rt-thread/src/kservice.c ****  * This function returns the device using in console.
1100:rt-thread/src/kservice.c ****  *
1101:rt-thread/src/kservice.c ****  * @return the device using in console or RT_NULL
1102:rt-thread/src/kservice.c ****  */
1103:rt-thread/src/kservice.c **** rt_device_t rt_console_get_device(void)
1104:rt-thread/src/kservice.c **** {
 2225              		.loc 1 1104 0
 2226              		.cfi_startproc
 2227              		@ args = 0, pretend = 0, frame = 0
 2228              		@ frame_needed = 0, uses_anonymous_args = 0
 2229              		@ link register save eliminated.
1105:rt-thread/src/kservice.c ****     return _console_device;
1106:rt-thread/src/kservice.c **** }
 2230              		.loc 1 1106 0
 2231 0000 014B     		ldr	r3, .L263
 2232 0002 1868     		ldr	r0, [r3]
 2233 0004 7047     		bx	lr
 2234              	.L264:
 2235 0006 00BF     		.align	2
 2236              	.L263:
ARM GAS  /tmp/ccGzdbPs.s 			page 64


 2237 0008 00000000 		.word	.LANCHOR3
 2238              		.cfi_endproc
 2239              	.LFE38:
 2241              		.section	.text.rt_console_set_device,"ax",%progbits
 2242              		.align	1
 2243              		.global	rt_console_set_device
 2244              		.syntax unified
 2245              		.thumb
 2246              		.thumb_func
 2247              		.fpu fpv4-sp-d16
 2249              	rt_console_set_device:
 2250              	.LFB39:
1107:rt-thread/src/kservice.c **** RTM_EXPORT(rt_console_get_device);
1108:rt-thread/src/kservice.c **** 
1109:rt-thread/src/kservice.c **** /**
1110:rt-thread/src/kservice.c ****  * This function will set a device as console device.
1111:rt-thread/src/kservice.c ****  * After set a device to console, all output of rt_kprintf will be
1112:rt-thread/src/kservice.c ****  * redirected to this new device.
1113:rt-thread/src/kservice.c ****  *
1114:rt-thread/src/kservice.c ****  * @param name the name of new console device
1115:rt-thread/src/kservice.c ****  *
1116:rt-thread/src/kservice.c ****  * @return the old console device handler
1117:rt-thread/src/kservice.c ****  */
1118:rt-thread/src/kservice.c **** rt_device_t rt_console_set_device(const char *name)
1119:rt-thread/src/kservice.c **** {
 2251              		.loc 1 1119 0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 0
 2254              		@ frame_needed = 0, uses_anonymous_args = 0
 2255              	.LVL306:
 2256 0000 38B5     		push	{r3, r4, r5, lr}
 2257              	.LCFI40:
 2258              		.cfi_def_cfa_offset 16
 2259              		.cfi_offset 3, -16
 2260              		.cfi_offset 4, -12
 2261              		.cfi_offset 5, -8
 2262              		.cfi_offset 14, -4
1120:rt-thread/src/kservice.c ****     rt_device_t new_device, old_device;
1121:rt-thread/src/kservice.c **** 
1122:rt-thread/src/kservice.c ****     /* save old device */
1123:rt-thread/src/kservice.c ****     old_device = _console_device;
 2263              		.loc 1 1123 0
 2264 0002 094B     		ldr	r3, .L269
 2265 0004 1D68     		ldr	r5, [r3]
 2266              	.LVL307:
1124:rt-thread/src/kservice.c **** 
1125:rt-thread/src/kservice.c ****     /* find new console device */
1126:rt-thread/src/kservice.c ****     new_device = rt_device_find(name);
 2267              		.loc 1 1126 0
 2268 0006 FFF7FEFF 		bl	rt_device_find
 2269              	.LVL308:
1127:rt-thread/src/kservice.c ****     if (new_device != RT_NULL)
 2270              		.loc 1 1127 0
 2271 000a 58B1     		cbz	r0, .L265
 2272 000c 0446     		mov	r4, r0
1128:rt-thread/src/kservice.c ****     {
1129:rt-thread/src/kservice.c ****         if (_console_device != RT_NULL)
ARM GAS  /tmp/ccGzdbPs.s 			page 65


 2273              		.loc 1 1129 0
 2274 000e 064B     		ldr	r3, .L269
 2275 0010 1868     		ldr	r0, [r3]
 2276              	.LVL309:
 2277 0012 08B1     		cbz	r0, .L267
1130:rt-thread/src/kservice.c ****         {
1131:rt-thread/src/kservice.c ****             /* close old console device */
1132:rt-thread/src/kservice.c ****             rt_device_close(_console_device);
 2278              		.loc 1 1132 0
 2279 0014 FFF7FEFF 		bl	rt_device_close
 2280              	.LVL310:
 2281              	.L267:
1133:rt-thread/src/kservice.c ****         }
1134:rt-thread/src/kservice.c **** 
1135:rt-thread/src/kservice.c ****         /* set new console device */
1136:rt-thread/src/kservice.c ****         rt_device_open(new_device, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_STREAM);
 2282              		.loc 1 1136 0
 2283 0018 4321     		movs	r1, #67
 2284 001a 2046     		mov	r0, r4
 2285 001c FFF7FEFF 		bl	rt_device_open
 2286              	.LVL311:
1137:rt-thread/src/kservice.c ****         _console_device = new_device;
 2287              		.loc 1 1137 0
 2288 0020 014B     		ldr	r3, .L269
 2289 0022 1C60     		str	r4, [r3]
 2290              	.LVL312:
 2291              	.L265:
1138:rt-thread/src/kservice.c ****     }
1139:rt-thread/src/kservice.c **** 
1140:rt-thread/src/kservice.c ****     return old_device;
1141:rt-thread/src/kservice.c **** }
 2292              		.loc 1 1141 0
 2293 0024 2846     		mov	r0, r5
 2294 0026 38BD     		pop	{r3, r4, r5, pc}
 2295              	.LVL313:
 2296              	.L270:
 2297              		.align	2
 2298              	.L269:
 2299 0028 00000000 		.word	.LANCHOR3
 2300              		.cfi_endproc
 2301              	.LFE39:
 2303              		.section	.text.rt_hw_console_output,"ax",%progbits
 2304              		.align	1
 2305              		.weak	rt_hw_console_output
 2306              		.syntax unified
 2307              		.thumb
 2308              		.thumb_func
 2309              		.fpu fpv4-sp-d16
 2311              	rt_hw_console_output:
 2312              	.LFB40:
1142:rt-thread/src/kservice.c **** RTM_EXPORT(rt_console_set_device);
1143:rt-thread/src/kservice.c **** #endif
1144:rt-thread/src/kservice.c **** 
1145:rt-thread/src/kservice.c **** RT_WEAK void rt_hw_console_output(const char *str)
1146:rt-thread/src/kservice.c **** {
 2313              		.loc 1 1146 0
 2314              		.cfi_startproc
ARM GAS  /tmp/ccGzdbPs.s 			page 66


 2315              		@ args = 0, pretend = 0, frame = 0
 2316              		@ frame_needed = 0, uses_anonymous_args = 0
 2317              		@ link register save eliminated.
 2318              	.LVL314:
 2319 0000 7047     		bx	lr
 2320              		.cfi_endproc
 2321              	.LFE40:
 2323              		.section	.text.rt_kputs,"ax",%progbits
 2324              		.align	1
 2325              		.global	rt_kputs
 2326              		.syntax unified
 2327              		.thumb
 2328              		.thumb_func
 2329              		.fpu fpv4-sp-d16
 2331              	rt_kputs:
 2332              	.LFB41:
1147:rt-thread/src/kservice.c ****     /* empty console output */
1148:rt-thread/src/kservice.c **** }
1149:rt-thread/src/kservice.c **** RTM_EXPORT(rt_hw_console_output);
1150:rt-thread/src/kservice.c **** 
1151:rt-thread/src/kservice.c **** /**
1152:rt-thread/src/kservice.c ****  * This function will put string to the console.
1153:rt-thread/src/kservice.c ****  *
1154:rt-thread/src/kservice.c ****  * @param str the string output to the console.
1155:rt-thread/src/kservice.c ****  */
1156:rt-thread/src/kservice.c **** void rt_kputs(const char *str)
1157:rt-thread/src/kservice.c **** {
 2333              		.loc 1 1157 0
 2334              		.cfi_startproc
 2335              		@ args = 0, pretend = 0, frame = 0
 2336              		@ frame_needed = 0, uses_anonymous_args = 0
 2337              	.LVL315:
1158:rt-thread/src/kservice.c ****     if (!str) return;
 2338              		.loc 1 1158 0
 2339 0000 B8B1     		cbz	r0, .L276
1157:rt-thread/src/kservice.c ****     if (!str) return;
 2340              		.loc 1 1157 0
 2341 0002 70B5     		push	{r4, r5, r6, lr}
 2342              	.LCFI41:
 2343              		.cfi_def_cfa_offset 16
 2344              		.cfi_offset 4, -16
 2345              		.cfi_offset 5, -12
 2346              		.cfi_offset 6, -8
 2347              		.cfi_offset 14, -4
 2348 0004 0446     		mov	r4, r0
1159:rt-thread/src/kservice.c **** 
1160:rt-thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1161:rt-thread/src/kservice.c ****     if (_console_device == RT_NULL)
 2349              		.loc 1 1161 0
 2350 0006 0B4B     		ldr	r3, .L280
 2351 0008 1D68     		ldr	r5, [r3]
 2352 000a 7DB1     		cbz	r5, .L279
 2353              	.LBB17:
1162:rt-thread/src/kservice.c ****     {
1163:rt-thread/src/kservice.c ****         rt_hw_console_output(str);
1164:rt-thread/src/kservice.c ****     }
1165:rt-thread/src/kservice.c ****     else
ARM GAS  /tmp/ccGzdbPs.s 			page 67


1166:rt-thread/src/kservice.c ****     {
1167:rt-thread/src/kservice.c ****         rt_uint16_t old_flag = _console_device->open_flag;
 2354              		.loc 1 1167 0
 2355 000c 2E8B     		ldrh	r6, [r5, #24]
 2356              	.LVL316:
1168:rt-thread/src/kservice.c **** 
1169:rt-thread/src/kservice.c ****         _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
 2357              		.loc 1 1169 0
 2358 000e 46F04003 		orr	r3, r6, #64
 2359 0012 2B83     		strh	r3, [r5, #24]	@ movhi
1170:rt-thread/src/kservice.c ****         rt_device_write(_console_device, 0, str, rt_strlen(str));
 2360              		.loc 1 1170 0
 2361 0014 FFF7FEFF 		bl	rt_strlen
 2362              	.LVL317:
 2363 0018 0346     		mov	r3, r0
 2364 001a 2246     		mov	r2, r4
 2365 001c 0021     		movs	r1, #0
 2366 001e 2846     		mov	r0, r5
 2367 0020 FFF7FEFF 		bl	rt_device_write
 2368              	.LVL318:
1171:rt-thread/src/kservice.c ****         _console_device->open_flag = old_flag;
 2369              		.loc 1 1171 0
 2370 0024 034B     		ldr	r3, .L280
 2371 0026 1B68     		ldr	r3, [r3]
 2372 0028 1E83     		strh	r6, [r3, #24]	@ movhi
 2373 002a 70BD     		pop	{r4, r5, r6, pc}
 2374              	.LVL319:
 2375              	.L279:
 2376              	.LBE17:
1163:rt-thread/src/kservice.c ****     }
 2377              		.loc 1 1163 0
 2378 002c FFF7FEFF 		bl	rt_hw_console_output
 2379              	.LVL320:
 2380 0030 70BD     		pop	{r4, r5, r6, pc}
 2381              	.LVL321:
 2382              	.L276:
 2383              	.LCFI42:
 2384              		.cfi_def_cfa_offset 0
 2385              		.cfi_restore 4
 2386              		.cfi_restore 5
 2387              		.cfi_restore 6
 2388              		.cfi_restore 14
 2389 0032 7047     		bx	lr
 2390              	.L281:
 2391              		.align	2
 2392              	.L280:
 2393 0034 00000000 		.word	.LANCHOR3
 2394              		.cfi_endproc
 2395              	.LFE41:
 2397              		.section	.text.rt_kprintf,"ax",%progbits
 2398              		.align	1
 2399              		.global	rt_kprintf
 2400              		.syntax unified
 2401              		.thumb
 2402              		.thumb_func
 2403              		.fpu fpv4-sp-d16
 2405              	rt_kprintf:
ARM GAS  /tmp/ccGzdbPs.s 			page 68


 2406              	.LFB42:
1172:rt-thread/src/kservice.c ****     }
1173:rt-thread/src/kservice.c **** #else
1174:rt-thread/src/kservice.c ****     rt_hw_console_output(str);
1175:rt-thread/src/kservice.c **** #endif
1176:rt-thread/src/kservice.c **** }
1177:rt-thread/src/kservice.c **** 
1178:rt-thread/src/kservice.c **** /**
1179:rt-thread/src/kservice.c ****  * This function will print a formatted string on system console
1180:rt-thread/src/kservice.c ****  *
1181:rt-thread/src/kservice.c ****  * @param fmt the format
1182:rt-thread/src/kservice.c ****  */
1183:rt-thread/src/kservice.c **** void rt_kprintf(const char *fmt, ...)
1184:rt-thread/src/kservice.c **** {
 2407              		.loc 1 1184 0
 2408              		.cfi_startproc
 2409              		@ args = 4, pretend = 16, frame = 8
 2410              		@ frame_needed = 0, uses_anonymous_args = 1
 2411              	.LVL322:
 2412 0000 0FB4     		push	{r0, r1, r2, r3}
 2413              	.LCFI43:
 2414              		.cfi_def_cfa_offset 16
 2415              		.cfi_offset 0, -16
 2416              		.cfi_offset 1, -12
 2417              		.cfi_offset 2, -8
 2418              		.cfi_offset 3, -4
 2419 0002 30B5     		push	{r4, r5, lr}
 2420              	.LCFI44:
 2421              		.cfi_def_cfa_offset 28
 2422              		.cfi_offset 4, -28
 2423              		.cfi_offset 5, -24
 2424              		.cfi_offset 14, -20
 2425 0004 83B0     		sub	sp, sp, #12
 2426              	.LCFI45:
 2427              		.cfi_def_cfa_offset 40
 2428 0006 06AB     		add	r3, sp, #24
 2429 0008 53F8042B 		ldr	r2, [r3], #4
1185:rt-thread/src/kservice.c ****     va_list args;
1186:rt-thread/src/kservice.c ****     rt_size_t length;
1187:rt-thread/src/kservice.c ****     static char rt_log_buf[RT_CONSOLEBUF_SIZE];
1188:rt-thread/src/kservice.c **** 
1189:rt-thread/src/kservice.c ****     va_start(args, fmt);
 2430              		.loc 1 1189 0
 2431 000c 0193     		str	r3, [sp, #4]
1190:rt-thread/src/kservice.c ****     /* the return value of vsnprintf is the number of bytes that would be
1191:rt-thread/src/kservice.c ****      * written to buffer had if the size of the buffer been sufficiently
1192:rt-thread/src/kservice.c ****      * large excluding the terminating null byte. If the output string
1193:rt-thread/src/kservice.c ****      * would be larger than the rt_log_buf, we have to adjust the output
1194:rt-thread/src/kservice.c ****      * length. */
1195:rt-thread/src/kservice.c ****     length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 2432              		.loc 1 1195 0
 2433 000e FF21     		movs	r1, #255
 2434 0010 0F48     		ldr	r0, .L289
 2435 0012 FFF7FEFF 		bl	rt_vsnprintf
 2436              	.LVL323:
1196:rt-thread/src/kservice.c ****     if (length > RT_CONSOLEBUF_SIZE - 1)
 2437              		.loc 1 1196 0
ARM GAS  /tmp/ccGzdbPs.s 			page 69


 2438 0016 FF28     		cmp	r0, #255
 2439 0018 00D9     		bls	.L283
1197:rt-thread/src/kservice.c ****         length = RT_CONSOLEBUF_SIZE - 1;
 2440              		.loc 1 1197 0
 2441 001a FF20     		movs	r0, #255
 2442              	.LVL324:
 2443              	.L283:
1198:rt-thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1199:rt-thread/src/kservice.c ****     if (_console_device == RT_NULL)
 2444              		.loc 1 1199 0
 2445 001c 0D4B     		ldr	r3, .L289+4
 2446 001e 1C68     		ldr	r4, [r3]
 2447 0020 8CB1     		cbz	r4, .L288
 2448              	.LBB18:
1200:rt-thread/src/kservice.c ****     {
1201:rt-thread/src/kservice.c ****         rt_hw_console_output(rt_log_buf);
1202:rt-thread/src/kservice.c ****     }
1203:rt-thread/src/kservice.c ****     else
1204:rt-thread/src/kservice.c ****     {
1205:rt-thread/src/kservice.c ****         rt_uint16_t old_flag = _console_device->open_flag;
 2449              		.loc 1 1205 0
 2450 0022 258B     		ldrh	r5, [r4, #24]
 2451              	.LVL325:
1206:rt-thread/src/kservice.c **** 
1207:rt-thread/src/kservice.c ****         _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
 2452              		.loc 1 1207 0
 2453 0024 45F04003 		orr	r3, r5, #64
 2454 0028 2383     		strh	r3, [r4, #24]	@ movhi
1208:rt-thread/src/kservice.c ****         rt_device_write(_console_device, 0, rt_log_buf, length);
 2455              		.loc 1 1208 0
 2456 002a 0346     		mov	r3, r0
 2457 002c 084A     		ldr	r2, .L289
 2458 002e 0021     		movs	r1, #0
 2459 0030 2046     		mov	r0, r4
 2460              	.LVL326:
 2461 0032 FFF7FEFF 		bl	rt_device_write
 2462              	.LVL327:
1209:rt-thread/src/kservice.c ****         _console_device->open_flag = old_flag;
 2463              		.loc 1 1209 0
 2464 0036 074B     		ldr	r3, .L289+4
 2465 0038 1B68     		ldr	r3, [r3]
 2466 003a 1D83     		strh	r5, [r3, #24]	@ movhi
 2467              	.LVL328:
 2468              	.L282:
 2469              	.LBE18:
1210:rt-thread/src/kservice.c ****     }
1211:rt-thread/src/kservice.c **** #else
1212:rt-thread/src/kservice.c ****     rt_hw_console_output(rt_log_buf);
1213:rt-thread/src/kservice.c **** #endif
1214:rt-thread/src/kservice.c ****     va_end(args);
1215:rt-thread/src/kservice.c **** }
 2470              		.loc 1 1215 0
 2471 003c 03B0     		add	sp, sp, #12
 2472              	.LCFI46:
 2473              		.cfi_remember_state
 2474              		.cfi_def_cfa_offset 28
 2475              		@ sp needed
ARM GAS  /tmp/ccGzdbPs.s 			page 70


 2476 003e BDE83040 		pop	{r4, r5, lr}
 2477              	.LCFI47:
 2478              		.cfi_restore 14
 2479              		.cfi_restore 5
 2480              		.cfi_restore 4
 2481              		.cfi_def_cfa_offset 16
 2482 0042 04B0     		add	sp, sp, #16
 2483              	.LCFI48:
 2484              		.cfi_restore 3
 2485              		.cfi_restore 2
 2486              		.cfi_restore 1
 2487              		.cfi_restore 0
 2488              		.cfi_def_cfa_offset 0
 2489 0044 7047     		bx	lr
 2490              	.LVL329:
 2491              	.L288:
 2492              	.LCFI49:
 2493              		.cfi_restore_state
1201:rt-thread/src/kservice.c ****     }
 2494              		.loc 1 1201 0
 2495 0046 0248     		ldr	r0, .L289
 2496              	.LVL330:
 2497 0048 FFF7FEFF 		bl	rt_hw_console_output
 2498              	.LVL331:
 2499 004c F6E7     		b	.L282
 2500              	.L290:
 2501 004e 00BF     		.align	2
 2502              	.L289:
 2503 0050 00000000 		.word	.LANCHOR4
 2504 0054 00000000 		.word	.LANCHOR3
 2505              		.cfi_endproc
 2506              	.LFE42:
 2508              		.section	.text.rt_show_version,"ax",%progbits
 2509              		.align	1
 2510              		.global	rt_show_version
 2511              		.syntax unified
 2512              		.thumb
 2513              		.thumb_func
 2514              		.fpu fpv4-sp-d16
 2516              	rt_show_version:
 2517              	.LFB30:
 536:rt-thread/src/kservice.c ****     rt_kprintf("\n \\ | /\n");
 2518              		.loc 1 536 0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 0
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
 2522 0000 00B5     		push	{lr}
 2523              	.LCFI50:
 2524              		.cfi_def_cfa_offset 4
 2525              		.cfi_offset 14, -4
 2526 0002 83B0     		sub	sp, sp, #12
 2527              	.LCFI51:
 2528              		.cfi_def_cfa_offset 16
 537:rt-thread/src/kservice.c ****     rt_kprintf("- RT -     Thread Operating System\n");
 2529              		.loc 1 537 0
 2530 0004 0948     		ldr	r0, .L293
 2531 0006 FFF7FEFF 		bl	rt_kprintf
ARM GAS  /tmp/ccGzdbPs.s 			page 71


 2532              	.LVL332:
 538:rt-thread/src/kservice.c ****     rt_kprintf(" / | \\     %d.%d.%d build %s\n",
 2533              		.loc 1 538 0
 2534 000a 0948     		ldr	r0, .L293+4
 2535 000c FFF7FEFF 		bl	rt_kprintf
 2536              	.LVL333:
 539:rt-thread/src/kservice.c ****                RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__);
 2537              		.loc 1 539 0
 2538 0010 084B     		ldr	r3, .L293+8
 2539 0012 0093     		str	r3, [sp]
 2540 0014 0223     		movs	r3, #2
 2541 0016 0022     		movs	r2, #0
 2542 0018 0421     		movs	r1, #4
 2543 001a 0748     		ldr	r0, .L293+12
 2544 001c FFF7FEFF 		bl	rt_kprintf
 2545              	.LVL334:
 541:rt-thread/src/kservice.c **** }
 2546              		.loc 1 541 0
 2547 0020 0648     		ldr	r0, .L293+16
 2548 0022 FFF7FEFF 		bl	rt_kprintf
 2549              	.LVL335:
 542:rt-thread/src/kservice.c **** RTM_EXPORT(rt_show_version);
 2550              		.loc 1 542 0
 2551 0026 03B0     		add	sp, sp, #12
 2552              	.LCFI52:
 2553              		.cfi_def_cfa_offset 4
 2554              		@ sp needed
 2555 0028 5DF804FB 		ldr	pc, [sp], #4
 2556              	.L294:
 2557              		.align	2
 2558              	.L293:
 2559 002c 00000000 		.word	.LC1
 2560 0030 0C000000 		.word	.LC2
 2561 0034 50000000 		.word	.LC4
 2562 0038 30000000 		.word	.LC3
 2563 003c 5C000000 		.word	.LC5
 2564              		.cfi_endproc
 2565              	.LFE30:
 2567              		.section	.text.rt_malloc_align,"ax",%progbits
 2568              		.align	1
 2569              		.global	rt_malloc_align
 2570              		.syntax unified
 2571              		.thumb
 2572              		.thumb_func
 2573              		.fpu fpv4-sp-d16
 2575              	rt_malloc_align:
 2576              	.LFB43:
1216:rt-thread/src/kservice.c **** RTM_EXPORT(rt_kprintf);
1217:rt-thread/src/kservice.c **** #endif
1218:rt-thread/src/kservice.c **** 
1219:rt-thread/src/kservice.c **** #ifdef RT_USING_HEAP
1220:rt-thread/src/kservice.c **** /**
1221:rt-thread/src/kservice.c ****  * This function allocates a memory block, which address is aligned to the
1222:rt-thread/src/kservice.c ****  * specified alignment size.
1223:rt-thread/src/kservice.c ****  *
1224:rt-thread/src/kservice.c ****  * @param size the allocated memory block size
1225:rt-thread/src/kservice.c ****  * @param align the alignment size
ARM GAS  /tmp/ccGzdbPs.s 			page 72


1226:rt-thread/src/kservice.c ****  *
1227:rt-thread/src/kservice.c ****  * @return the allocated memory block on successful, otherwise returns RT_NULL
1228:rt-thread/src/kservice.c ****  */
1229:rt-thread/src/kservice.c **** void *rt_malloc_align(rt_size_t size, rt_size_t align)
1230:rt-thread/src/kservice.c **** {
 2577              		.loc 1 1230 0
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 0
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
 2581              	.LVL336:
 2582 0000 10B5     		push	{r4, lr}
 2583              	.LCFI53:
 2584              		.cfi_def_cfa_offset 8
 2585              		.cfi_offset 4, -8
 2586              		.cfi_offset 14, -4
 2587              	.LVL337:
1231:rt-thread/src/kservice.c ****     void *ptr;
1232:rt-thread/src/kservice.c ****     void *align_ptr;
1233:rt-thread/src/kservice.c ****     int uintptr_size;
1234:rt-thread/src/kservice.c ****     rt_size_t align_size;
1235:rt-thread/src/kservice.c **** 
1236:rt-thread/src/kservice.c ****     /* sizeof pointer */
1237:rt-thread/src/kservice.c ****     uintptr_size = sizeof(void*);
1238:rt-thread/src/kservice.c ****     uintptr_size -= 1;
1239:rt-thread/src/kservice.c **** 
1240:rt-thread/src/kservice.c ****     /* align the alignment size to uintptr size byte */
1241:rt-thread/src/kservice.c ****     align = ((align + uintptr_size) & ~uintptr_size);
 2588              		.loc 1 1241 0
 2589 0002 0331     		adds	r1, r1, #3
 2590              	.LVL338:
 2591 0004 21F00304 		bic	r4, r1, #3
 2592              	.LVL339:
1242:rt-thread/src/kservice.c **** 
1243:rt-thread/src/kservice.c ****     /* get total aligned size */
1244:rt-thread/src/kservice.c ****     align_size = ((size + uintptr_size) & ~uintptr_size) + align;
 2593              		.loc 1 1244 0
 2594 0008 0330     		adds	r0, r0, #3
 2595              	.LVL340:
 2596 000a 20F00300 		bic	r0, r0, #3
 2597              	.LVL341:
1245:rt-thread/src/kservice.c ****     /* allocate memory block from heap */
1246:rt-thread/src/kservice.c ****     ptr = rt_malloc(align_size);
 2598              		.loc 1 1246 0
 2599 000e 2044     		add	r0, r0, r4
 2600              	.LVL342:
 2601 0010 FFF7FEFF 		bl	rt_malloc
 2602              	.LVL343:
1247:rt-thread/src/kservice.c ****     if (ptr != RT_NULL)
 2603              		.loc 1 1247 0
 2604 0014 0346     		mov	r3, r0
 2605 0016 30B1     		cbz	r0, .L295
1248:rt-thread/src/kservice.c ****     {
1249:rt-thread/src/kservice.c ****         /* the allocated memory block is aligned */
1250:rt-thread/src/kservice.c ****         if (((rt_ubase_t)ptr & (align - 1)) == 0)
 2606              		.loc 1 1250 0
 2607 0018 621E     		subs	r2, r4, #1
 2608 001a 0146     		mov	r1, r0
ARM GAS  /tmp/ccGzdbPs.s 			page 73


 2609 001c 1042     		tst	r0, r2
 2610 001e 04D1     		bne	.L297
1251:rt-thread/src/kservice.c ****         {
1252:rt-thread/src/kservice.c ****             align_ptr = (void *)((rt_ubase_t)ptr + align);
 2611              		.loc 1 1252 0
 2612 0020 2344     		add	r3, r3, r4
 2613              	.LVL344:
 2614              	.L298:
1253:rt-thread/src/kservice.c ****         }
1254:rt-thread/src/kservice.c ****         else
1255:rt-thread/src/kservice.c ****         {
1256:rt-thread/src/kservice.c ****             align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
1257:rt-thread/src/kservice.c ****         }
1258:rt-thread/src/kservice.c **** 
1259:rt-thread/src/kservice.c ****         /* set the pointer before alignment pointer to the real pointer */
1260:rt-thread/src/kservice.c ****         *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
 2615              		.loc 1 1260 0
 2616 0022 43F8041C 		str	r1, [r3, #-4]
 2617              	.LVL345:
 2618              	.L295:
1261:rt-thread/src/kservice.c **** 
1262:rt-thread/src/kservice.c ****         ptr = align_ptr;
1263:rt-thread/src/kservice.c ****     }
1264:rt-thread/src/kservice.c **** 
1265:rt-thread/src/kservice.c ****     return ptr;
1266:rt-thread/src/kservice.c **** }
 2619              		.loc 1 1266 0
 2620 0026 1846     		mov	r0, r3
 2621 0028 10BD     		pop	{r4, pc}
 2622              	.LVL346:
 2623              	.L297:
1256:rt-thread/src/kservice.c ****         }
 2624              		.loc 1 1256 0
 2625 002a 2344     		add	r3, r3, r4
 2626 002c 013B     		subs	r3, r3, #1
 2627 002e 6442     		negs	r4, r4
 2628              	.LVL347:
 2629 0030 2340     		ands	r3, r3, r4
 2630              	.LVL348:
 2631 0032 F6E7     		b	.L298
 2632              		.cfi_endproc
 2633              	.LFE43:
 2635              		.section	.text.rt_free_align,"ax",%progbits
 2636              		.align	1
 2637              		.global	rt_free_align
 2638              		.syntax unified
 2639              		.thumb
 2640              		.thumb_func
 2641              		.fpu fpv4-sp-d16
 2643              	rt_free_align:
 2644              	.LFB44:
1267:rt-thread/src/kservice.c **** RTM_EXPORT(rt_malloc_align);
1268:rt-thread/src/kservice.c **** 
1269:rt-thread/src/kservice.c **** /**
1270:rt-thread/src/kservice.c ****  * This function release the memory block, which is allocated by
1271:rt-thread/src/kservice.c ****  * rt_malloc_align function and address is aligned.
1272:rt-thread/src/kservice.c ****  *
ARM GAS  /tmp/ccGzdbPs.s 			page 74


1273:rt-thread/src/kservice.c ****  * @param ptr the memory block pointer
1274:rt-thread/src/kservice.c ****  */
1275:rt-thread/src/kservice.c **** void rt_free_align(void *ptr)
1276:rt-thread/src/kservice.c **** {
 2645              		.loc 1 1276 0
 2646              		.cfi_startproc
 2647              		@ args = 0, pretend = 0, frame = 0
 2648              		@ frame_needed = 0, uses_anonymous_args = 0
 2649              	.LVL349:
 2650 0000 08B5     		push	{r3, lr}
 2651              	.LCFI54:
 2652              		.cfi_def_cfa_offset 8
 2653              		.cfi_offset 3, -8
 2654              		.cfi_offset 14, -4
 2655              	.LVL350:
1277:rt-thread/src/kservice.c ****     void *real_ptr;
1278:rt-thread/src/kservice.c **** 
1279:rt-thread/src/kservice.c ****     real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
1280:rt-thread/src/kservice.c ****     rt_free(real_ptr);
 2656              		.loc 1 1280 0
 2657 0002 50F8040C 		ldr	r0, [r0, #-4]
 2658              	.LVL351:
 2659 0006 FFF7FEFF 		bl	rt_free
 2660              	.LVL352:
 2661 000a 08BD     		pop	{r3, pc}
 2662              		.cfi_endproc
 2663              	.LFE44:
 2665              		.section	.bss.__rt_errno,"aw",%nobits
 2666              		.align	2
 2667              		.set	.LANCHOR2,. + 0
 2670              	__rt_errno:
 2671 0000 00000000 		.space	4
 2672              		.section	.bss._console_device,"aw",%nobits
 2673              		.align	2
 2674              		.set	.LANCHOR3,. + 0
 2677              	_console_device:
 2678 0000 00000000 		.space	4
 2679              		.section	.bss.rt_log_buf.6933,"aw",%nobits
 2680              		.align	2
 2681              		.set	.LANCHOR4,. + 0
 2684              	rt_log_buf.6933:
 2685 0000 00000000 		.space	256
 2685      00000000 
 2685      00000000 
 2685      00000000 
 2685      00000000 
 2686              		.section	.rodata.large_digits.6823,"a",%progbits
 2687              		.align	2
 2688              		.set	.LANCHOR0,. + 0
 2691              	large_digits.6823:
 2692 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 2692      34353637 
 2692      38394142 
 2692      43444546 
 2692      00
 2693              		.section	.rodata.rt_show_version.str1.4,"aMS",%progbits,1
 2694              		.align	2
ARM GAS  /tmp/ccGzdbPs.s 			page 75


 2695              	.LC1:
 2696 0000 0A205C20 		.ascii	"\012 \\ | /\012\000"
 2696      7C202F0A 
 2696      00
 2697 0009 000000   		.space	3
 2698              	.LC2:
 2699 000c 2D205254 		.ascii	"- RT -     Thread Operating System\012\000"
 2699      202D2020 
 2699      20202054 
 2699      68726561 
 2699      64204F70 
 2700              	.LC3:
 2701 0030 202F207C 		.ascii	" / | \\     %d.%d.%d build %s\012\000"
 2701      205C2020 
 2701      20202025 
 2701      642E2564 
 2701      2E256420 
 2702 004e 0000     		.space	2
 2703              	.LC4:
 2704 0050 4D617220 		.ascii	"Mar 29 2020\000"
 2704      32392032 
 2704      30323000 
 2705              	.LC5:
 2706 005c 20323030 		.ascii	" 2006 - 2019 Copyright by rt-thread team\012\000"
 2706      36202D20 
 2706      32303139 
 2706      20436F70 
 2706      79726967 
 2707              		.section	.rodata.rt_vsnprintf.str1.4,"aMS",%progbits,1
 2708              		.align	2
 2709              	.LC0:
 2710 0000 284E554C 		.ascii	"(NULL)\000"
 2710      4C2900
 2711              		.section	.rodata.small_digits.6822,"a",%progbits
 2712              		.align	2
 2713              		.set	.LANCHOR1,. + 0
 2716              	small_digits.6822:
 2717 0000 30313233 		.ascii	"0123456789abcdef\000"
 2717      34353637 
 2717      38396162 
 2717      63646566 
 2717      00
 2718              		.text
 2719              	.Letext0:
 2720              		.file 2 "rt-thread/include/rtdef.h"
 2721              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h"
 2722              		.file 4 "<built-in>"
 2723              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 2724              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 2725              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2726              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 2727              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 2728              		.file 10 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 2729              		.file 11 "rt-thread/components/finsh/finsh_api.h"
 2730              		.file 12 "rt-thread/include/rtthread.h"
ARM GAS  /tmp/ccGzdbPs.s 			page 76


DEFINED SYMBOLS
                            *ABS*:0000000000000000 kservice.c
     /tmp/ccGzdbPs.s:18     .text.print_number:0000000000000000 $t
     /tmp/ccGzdbPs.s:24     .text.print_number:0000000000000000 print_number
     /tmp/ccGzdbPs.s:346    .text.print_number:0000000000000164 $d
     /tmp/ccGzdbPs.s:353    .text.rt_get_errno:0000000000000000 $t
     /tmp/ccGzdbPs.s:360    .text.rt_get_errno:0000000000000000 rt_get_errno
     /tmp/ccGzdbPs.s:400    .text.rt_get_errno:0000000000000020 $d
     /tmp/ccGzdbPs.s:405    .text.rt_set_errno:0000000000000000 $t
     /tmp/ccGzdbPs.s:412    .text.rt_set_errno:0000000000000000 rt_set_errno
     /tmp/ccGzdbPs.s:455    .text.rt_set_errno:0000000000000020 $d
     /tmp/ccGzdbPs.s:460    .text._rt_errno:0000000000000000 $t
     /tmp/ccGzdbPs.s:467    .text._rt_errno:0000000000000000 _rt_errno
     /tmp/ccGzdbPs.s:505    .text._rt_errno:000000000000001c $d
     /tmp/ccGzdbPs.s:510    .text.rt_memset:0000000000000000 $t
     /tmp/ccGzdbPs.s:517    .text.rt_memset:0000000000000000 rt_memset
     /tmp/ccGzdbPs.s:620    .text.rt_memcpy:0000000000000000 $t
     /tmp/ccGzdbPs.s:627    .text.rt_memcpy:0000000000000000 rt_memcpy
     /tmp/ccGzdbPs.s:734    .text.rt_memmove:0000000000000000 $t
     /tmp/ccGzdbPs.s:741    .text.rt_memmove:0000000000000000 rt_memmove
     /tmp/ccGzdbPs.s:822    .text.rt_memcmp:0000000000000000 $t
     /tmp/ccGzdbPs.s:829    .text.rt_memcmp:0000000000000000 rt_memcmp
     /tmp/ccGzdbPs.s:884    .text.rt_strcasecmp:0000000000000000 $t
     /tmp/ccGzdbPs.s:891    .text.rt_strcasecmp:0000000000000000 rt_strcasecmp
     /tmp/ccGzdbPs.s:961    .text.rt_strncpy:0000000000000000 $t
     /tmp/ccGzdbPs.s:968    .text.rt_strncpy:0000000000000000 rt_strncpy
     /tmp/ccGzdbPs.s:1032   .text.rt_strncmp:0000000000000000 $t
     /tmp/ccGzdbPs.s:1039   .text.rt_strncmp:0000000000000000 rt_strncmp
     /tmp/ccGzdbPs.s:1101   .text.rt_strcmp:0000000000000000 $t
     /tmp/ccGzdbPs.s:1108   .text.rt_strcmp:0000000000000000 rt_strcmp
     /tmp/ccGzdbPs.s:1143   .text.rt_strnlen:0000000000000000 $t
     /tmp/ccGzdbPs.s:1150   .text.rt_strnlen:0000000000000000 rt_strnlen
     /tmp/ccGzdbPs.s:1183   .text.rt_strlen:0000000000000000 $t
     /tmp/ccGzdbPs.s:1190   .text.rt_strlen:0000000000000000 rt_strlen
     /tmp/ccGzdbPs.s:1219   .text.rt_strstr:0000000000000000 $t
     /tmp/ccGzdbPs.s:1226   .text.rt_strstr:0000000000000000 rt_strstr
     /tmp/ccGzdbPs.s:1298   .text.rt_strdup:0000000000000000 $t
     /tmp/ccGzdbPs.s:1305   .text.rt_strdup:0000000000000000 rt_strdup
     /tmp/ccGzdbPs.s:1345   .text.rt_vsnprintf:0000000000000000 $t
     /tmp/ccGzdbPs.s:1352   .text.rt_vsnprintf:0000000000000000 rt_vsnprintf
     /tmp/ccGzdbPs.s:1532   .text.rt_vsnprintf:00000000000000c6 $d
     /tmp/ccGzdbPs.s:1617   .text.rt_vsnprintf:000000000000016e $t
     /tmp/ccGzdbPs.s:2072   .text.rt_vsnprintf:000000000000036c $d
     /tmp/ccGzdbPs.s:2077   .text.rt_snprintf:0000000000000000 $t
     /tmp/ccGzdbPs.s:2084   .text.rt_snprintf:0000000000000000 rt_snprintf
     /tmp/ccGzdbPs.s:2129   .text.rt_vsprintf:0000000000000000 $t
     /tmp/ccGzdbPs.s:2136   .text.rt_vsprintf:0000000000000000 rt_vsprintf
     /tmp/ccGzdbPs.s:2162   .text.rt_sprintf:0000000000000000 $t
     /tmp/ccGzdbPs.s:2169   .text.rt_sprintf:0000000000000000 rt_sprintf
     /tmp/ccGzdbPs.s:2216   .text.rt_console_get_device:0000000000000000 $t
     /tmp/ccGzdbPs.s:2223   .text.rt_console_get_device:0000000000000000 rt_console_get_device
     /tmp/ccGzdbPs.s:2237   .text.rt_console_get_device:0000000000000008 $d
     /tmp/ccGzdbPs.s:2242   .text.rt_console_set_device:0000000000000000 $t
     /tmp/ccGzdbPs.s:2249   .text.rt_console_set_device:0000000000000000 rt_console_set_device
     /tmp/ccGzdbPs.s:2299   .text.rt_console_set_device:0000000000000028 $d
     /tmp/ccGzdbPs.s:2304   .text.rt_hw_console_output:0000000000000000 $t
     /tmp/ccGzdbPs.s:2311   .text.rt_hw_console_output:0000000000000000 rt_hw_console_output
ARM GAS  /tmp/ccGzdbPs.s 			page 77


     /tmp/ccGzdbPs.s:2324   .text.rt_kputs:0000000000000000 $t
     /tmp/ccGzdbPs.s:2331   .text.rt_kputs:0000000000000000 rt_kputs
     /tmp/ccGzdbPs.s:2393   .text.rt_kputs:0000000000000034 $d
     /tmp/ccGzdbPs.s:2398   .text.rt_kprintf:0000000000000000 $t
     /tmp/ccGzdbPs.s:2405   .text.rt_kprintf:0000000000000000 rt_kprintf
     /tmp/ccGzdbPs.s:2503   .text.rt_kprintf:0000000000000050 $d
     /tmp/ccGzdbPs.s:2509   .text.rt_show_version:0000000000000000 $t
     /tmp/ccGzdbPs.s:2516   .text.rt_show_version:0000000000000000 rt_show_version
     /tmp/ccGzdbPs.s:2559   .text.rt_show_version:000000000000002c $d
     /tmp/ccGzdbPs.s:2568   .text.rt_malloc_align:0000000000000000 $t
     /tmp/ccGzdbPs.s:2575   .text.rt_malloc_align:0000000000000000 rt_malloc_align
     /tmp/ccGzdbPs.s:2636   .text.rt_free_align:0000000000000000 $t
     /tmp/ccGzdbPs.s:2643   .text.rt_free_align:0000000000000000 rt_free_align
     /tmp/ccGzdbPs.s:2666   .bss.__rt_errno:0000000000000000 $d
     /tmp/ccGzdbPs.s:2670   .bss.__rt_errno:0000000000000000 __rt_errno
     /tmp/ccGzdbPs.s:2673   .bss._console_device:0000000000000000 $d
     /tmp/ccGzdbPs.s:2677   .bss._console_device:0000000000000000 _console_device
     /tmp/ccGzdbPs.s:2680   .bss.rt_log_buf.6933:0000000000000000 $d
     /tmp/ccGzdbPs.s:2684   .bss.rt_log_buf.6933:0000000000000000 rt_log_buf.6933
     /tmp/ccGzdbPs.s:2687   .rodata.large_digits.6823:0000000000000000 $d
     /tmp/ccGzdbPs.s:2691   .rodata.large_digits.6823:0000000000000000 large_digits.6823
     /tmp/ccGzdbPs.s:2694   .rodata.rt_show_version.str1.4:0000000000000000 $d
     /tmp/ccGzdbPs.s:2708   .rodata.rt_vsnprintf.str1.4:0000000000000000 $d
     /tmp/ccGzdbPs.s:2712   .rodata.small_digits.6822:0000000000000000 $d
     /tmp/ccGzdbPs.s:2716   .rodata.small_digits.6822:0000000000000000 small_digits.6822
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_interrupt_get_nest
rt_thread_self
rt_malloc
rt_device_find
rt_device_close
rt_device_open
rt_device_write
rt_free
