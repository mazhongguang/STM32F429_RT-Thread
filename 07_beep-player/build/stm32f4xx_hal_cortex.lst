ARM GAS  /tmp/cc3kNpfC.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_cortex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_NVIC_SetPriorityGrouping,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_NVIC_SetPriorityGrouping
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_NVIC_SetPriorityGrouping:
  26              	.LFB119:
  27              		.file 1 "HALLIB/Src/stm32f4xx_hal_cortex.c"
   1:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
   2:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @file    stm32f4xx_hal_cortex.c
   4:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *           + Peripheral Control functions 
  10:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *
  11:HALLIB/Src/stm32f4xx_hal_cortex.c ****   @verbatim  
  12:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ==============================================================================
  13:HALLIB/Src/stm32f4xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ==============================================================================
  15:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
  16:HALLIB/Src/stm32f4xx_hal_cortex.c ****     [..]  
  17:HALLIB/Src/stm32f4xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  18:HALLIB/Src/stm32f4xx_hal_cortex.c ****     ===========================================================
  19:HALLIB/Src/stm32f4xx_hal_cortex.c ****     [..]     
  20:HALLIB/Src/stm32f4xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  21:HALLIB/Src/stm32f4xx_hal_cortex.c ****     The Cortex-M4 exceptions are managed by CMSIS functions.
  22:HALLIB/Src/stm32f4xx_hal_cortex.c ****    
  23:HALLIB/Src/stm32f4xx_hal_cortex.c ****     (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping()
  24:HALLIB/Src/stm32f4xx_hal_cortex.c ****         function according to the following table.
  25:HALLIB/Src/stm32f4xx_hal_cortex.c ****     (#) Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority(). 
  26:HALLIB/Src/stm32f4xx_hal_cortex.c ****     (#) Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ().
  27:HALLIB/Src/stm32f4xx_hal_cortex.c ****     (#) please refer to programming manual for details in how to configure priority. 
  28:HALLIB/Src/stm32f4xx_hal_cortex.c ****       
  29:HALLIB/Src/stm32f4xx_hal_cortex.c ****      -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ preemption is no more possible. 
  30:HALLIB/Src/stm32f4xx_hal_cortex.c ****          The pending IRQ priority will be managed only by the sub priority.
  31:HALLIB/Src/stm32f4xx_hal_cortex.c ****    
ARM GAS  /tmp/cc3kNpfC.s 			page 2


  32:HALLIB/Src/stm32f4xx_hal_cortex.c ****      -@- IRQ priority order (sorted by highest to lowest priority):
  33:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (+@) Lowest preemption priority
  34:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (+@) Lowest sub priority
  35:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (+@) Lowest hardware priority (IRQ number)
  36:HALLIB/Src/stm32f4xx_hal_cortex.c ****  
  37:HALLIB/Src/stm32f4xx_hal_cortex.c ****     [..]  
  38:HALLIB/Src/stm32f4xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  39:HALLIB/Src/stm32f4xx_hal_cortex.c ****     ========================================================
  40:HALLIB/Src/stm32f4xx_hal_cortex.c ****     [..]
  41:HALLIB/Src/stm32f4xx_hal_cortex.c ****     Setup SysTick Timer for time base.
  42:HALLIB/Src/stm32f4xx_hal_cortex.c ****            
  43:HALLIB/Src/stm32f4xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config() function calls the SysTick_Config() function which
  44:HALLIB/Src/stm32f4xx_hal_cortex.c ****        is a CMSIS function that:
  45:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  46:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value 0x0F.
  47:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  48:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  49:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  50:HALLIB/Src/stm32f4xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  51:HALLIB/Src/stm32f4xx_hal_cortex.c ****     
  52:HALLIB/Src/stm32f4xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  53:HALLIB/Src/stm32f4xx_hal_cortex.c ****        __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  54:HALLIB/Src/stm32f4xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
  55:HALLIB/Src/stm32f4xx_hal_cortex.c ****        inside the stm32f4xx_hal_cortex.h file.
  56:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
  57:HALLIB/Src/stm32f4xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  58:HALLIB/Src/stm32f4xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  59:HALLIB/Src/stm32f4xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  60:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
  61:HALLIB/Src/stm32f4xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  62:HALLIB/Src/stm32f4xx_hal_cortex.c ****                             
  63:HALLIB/Src/stm32f4xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  64:HALLIB/Src/stm32f4xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  65:HALLIB/Src/stm32f4xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  66:HALLIB/Src/stm32f4xx_hal_cortex.c ****    
  67:HALLIB/Src/stm32f4xx_hal_cortex.c ****   @endverbatim
  68:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ******************************************************************************
  69:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @attention
  70:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *
  71:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  72:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * All rights reserved.</center></h2>
  73:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *
  74:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  75:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * the "License"; You may not use this file except in compliance with the
  76:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * License. You may obtain a copy of the License at:
  77:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  78:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *
  79:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ******************************************************************************
  80:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
  81:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
  82:HALLIB/Src/stm32f4xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  83:HALLIB/Src/stm32f4xx_hal_cortex.c **** #include "stm32f4xx_hal.h"
  84:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
  85:HALLIB/Src/stm32f4xx_hal_cortex.c **** /** @addtogroup STM32F4xx_HAL_Driver
  86:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @{
  87:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
  88:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 3


  89:HALLIB/Src/stm32f4xx_hal_cortex.c **** /** @defgroup CORTEX CORTEX
  90:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief CORTEX HAL module driver
  91:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @{
  92:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
  93:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
  94:HALLIB/Src/stm32f4xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
  95:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
  96:HALLIB/Src/stm32f4xx_hal_cortex.c **** /* Private types -------------------------------------------------------------*/
  97:HALLIB/Src/stm32f4xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
  98:HALLIB/Src/stm32f4xx_hal_cortex.c **** /* Private constants ---------------------------------------------------------*/
  99:HALLIB/Src/stm32f4xx_hal_cortex.c **** /* Private macros ------------------------------------------------------------*/
 100:HALLIB/Src/stm32f4xx_hal_cortex.c **** /* Private functions ---------------------------------------------------------*/
 101:HALLIB/Src/stm32f4xx_hal_cortex.c **** /* Exported functions --------------------------------------------------------*/
 102:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 103:HALLIB/Src/stm32f4xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
 104:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @{
 105:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 106:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 107:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 108:HALLIB/Src/stm32f4xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions
 109:HALLIB/Src/stm32f4xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions 
 110:HALLIB/Src/stm32f4xx_hal_cortex.c ****  *
 111:HALLIB/Src/stm32f4xx_hal_cortex.c **** @verbatim    
 112:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ==============================================================================
 113:HALLIB/Src/stm32f4xx_hal_cortex.c ****               ##### Initialization and de-initialization functions #####
 114:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ==============================================================================
 115:HALLIB/Src/stm32f4xx_hal_cortex.c ****     [..]
 116:HALLIB/Src/stm32f4xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 117:HALLIB/Src/stm32f4xx_hal_cortex.c ****       Systick functionalities 
 118:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 119:HALLIB/Src/stm32f4xx_hal_cortex.c **** @endverbatim
 120:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @{
 121:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 122:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 123:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 124:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 125:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Sets the priority grouping field (preemption priority and subpriority)
 126:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         using the required unlock sequence.
 127:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  PriorityGroup The priority grouping bits length. 
 128:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 129:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
 130:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                    4 bits for subpriority
 131:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
 132:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                    3 bits for subpriority
 133:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
 134:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                    2 bits for subpriority
 135:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
 136:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                    1 bits for subpriority
 137:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
 138:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                    0 bits for subpriority
 139:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 140:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         The pending IRQ priority will be managed only by the subpriority. 
 141:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 142:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 143:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 144:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
  28              		.loc 1 144 0
ARM GAS  /tmp/cc3kNpfC.s 			page 4


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              	.LBB44:
  35              	.LBB45:
  36              		.file 2 "CORE/core_cm4.h"
   1:CORE/core_cm4.h **** /**************************************************************************//**
   2:CORE/core_cm4.h ****  * @file     core_cm4.h
   3:CORE/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:CORE/core_cm4.h ****  * @version  V4.30
   5:CORE/core_cm4.h ****  * @date     20. October 2015
   6:CORE/core_cm4.h ****  ******************************************************************************/
   7:CORE/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:CORE/core_cm4.h **** 
   9:CORE/core_cm4.h ****    All rights reserved.
  10:CORE/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:CORE/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:CORE/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:CORE/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:CORE/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:CORE/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:CORE/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:CORE/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:CORE/core_cm4.h ****      to endorse or promote products derived from this software without
  19:CORE/core_cm4.h ****      specific prior written permission.
  20:CORE/core_cm4.h ****    *
  21:CORE/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:CORE/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:CORE/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:CORE/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:CORE/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:CORE/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:CORE/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:CORE/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:CORE/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:CORE/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:CORE/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:CORE/core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:CORE/core_cm4.h **** 
  34:CORE/core_cm4.h **** 
  35:CORE/core_cm4.h **** #if   defined ( __ICCARM__ )
  36:CORE/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:CORE/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:CORE/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:CORE/core_cm4.h **** #endif
  40:CORE/core_cm4.h **** 
  41:CORE/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:CORE/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:CORE/core_cm4.h **** 
  44:CORE/core_cm4.h **** #include <stdint.h>
  45:CORE/core_cm4.h **** 
  46:CORE/core_cm4.h **** #ifdef __cplusplus
  47:CORE/core_cm4.h ****  extern "C" {
  48:CORE/core_cm4.h **** #endif
  49:CORE/core_cm4.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 5


  50:CORE/core_cm4.h **** /**
  51:CORE/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:CORE/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:CORE/core_cm4.h **** 
  54:CORE/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:CORE/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:CORE/core_cm4.h **** 
  57:CORE/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:CORE/core_cm4.h ****      Unions are used for effective representation of core registers.
  59:CORE/core_cm4.h **** 
  60:CORE/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:CORE/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:CORE/core_cm4.h ****  */
  63:CORE/core_cm4.h **** 
  64:CORE/core_cm4.h **** 
  65:CORE/core_cm4.h **** /*******************************************************************************
  66:CORE/core_cm4.h ****  *                 CMSIS definitions
  67:CORE/core_cm4.h ****  ******************************************************************************/
  68:CORE/core_cm4.h **** /**
  69:CORE/core_cm4.h ****   \ingroup Cortex_M4
  70:CORE/core_cm4.h ****   @{
  71:CORE/core_cm4.h ****  */
  72:CORE/core_cm4.h **** 
  73:CORE/core_cm4.h **** /*  CMSIS CM4 definitions */
  74:CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:CORE/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:CORE/core_cm4.h **** 
  79:CORE/core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:CORE/core_cm4.h **** 
  81:CORE/core_cm4.h **** 
  82:CORE/core_cm4.h **** #if   defined ( __CC_ARM )
  83:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:CORE/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:CORE/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:CORE/core_cm4.h **** 
  87:CORE/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:CORE/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:CORE/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:CORE/core_cm4.h **** 
  92:CORE/core_cm4.h **** #elif defined ( __GNUC__ )
  93:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:CORE/core_cm4.h **** 
  97:CORE/core_cm4.h **** #elif defined ( __ICCARM__ )
  98:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:CORE/core_cm4.h **** 
 102:CORE/core_cm4.h **** #elif defined ( __TMS470__ )
 103:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:CORE/core_cm4.h **** 
 106:CORE/core_cm4.h **** #elif defined ( __TASKING__ )
ARM GAS  /tmp/cc3kNpfC.s 			page 6


 107:CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:CORE/core_cm4.h **** 
 111:CORE/core_cm4.h **** #elif defined ( __CSMC__ )
 112:CORE/core_cm4.h ****   #define __packed
 113:CORE/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:CORE/core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:CORE/core_cm4.h **** 
 117:CORE/core_cm4.h **** #else
 118:CORE/core_cm4.h ****   #error Unknown compiler
 119:CORE/core_cm4.h **** #endif
 120:CORE/core_cm4.h **** 
 121:CORE/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:CORE/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:CORE/core_cm4.h **** */
 124:CORE/core_cm4.h **** #if defined ( __CC_ARM )
 125:CORE/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:CORE/core_cm4.h ****       #define __FPU_USED       1U
 128:CORE/core_cm4.h ****     #else
 129:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:CORE/core_cm4.h ****       #define __FPU_USED       0U
 131:CORE/core_cm4.h ****     #endif
 132:CORE/core_cm4.h ****   #else
 133:CORE/core_cm4.h ****     #define __FPU_USED         0U
 134:CORE/core_cm4.h ****   #endif
 135:CORE/core_cm4.h **** 
 136:CORE/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:CORE/core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:CORE/core_cm4.h ****       #define __FPU_USED       1U
 140:CORE/core_cm4.h ****     #else
 141:CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:CORE/core_cm4.h ****       #define __FPU_USED       0U
 143:CORE/core_cm4.h ****     #endif
 144:CORE/core_cm4.h ****   #else
 145:CORE/core_cm4.h ****     #define __FPU_USED         0U
 146:CORE/core_cm4.h ****   #endif
 147:CORE/core_cm4.h **** 
 148:CORE/core_cm4.h **** #elif defined ( __GNUC__ )
 149:CORE/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:CORE/core_cm4.h ****       #define __FPU_USED       1U
 152:CORE/core_cm4.h ****     #else
 153:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:CORE/core_cm4.h ****       #define __FPU_USED       0U
 155:CORE/core_cm4.h ****     #endif
 156:CORE/core_cm4.h ****   #else
 157:CORE/core_cm4.h ****     #define __FPU_USED         0U
 158:CORE/core_cm4.h ****   #endif
 159:CORE/core_cm4.h **** 
 160:CORE/core_cm4.h **** #elif defined ( __ICCARM__ )
 161:CORE/core_cm4.h ****   #if defined __ARMVFP__
 162:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:CORE/core_cm4.h ****       #define __FPU_USED       1U
ARM GAS  /tmp/cc3kNpfC.s 			page 7


 164:CORE/core_cm4.h ****     #else
 165:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:CORE/core_cm4.h ****       #define __FPU_USED       0U
 167:CORE/core_cm4.h ****     #endif
 168:CORE/core_cm4.h ****   #else
 169:CORE/core_cm4.h ****     #define __FPU_USED         0U
 170:CORE/core_cm4.h ****   #endif
 171:CORE/core_cm4.h **** 
 172:CORE/core_cm4.h **** #elif defined ( __TMS470__ )
 173:CORE/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:CORE/core_cm4.h ****       #define __FPU_USED       1U
 176:CORE/core_cm4.h ****     #else
 177:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:CORE/core_cm4.h ****       #define __FPU_USED       0U
 179:CORE/core_cm4.h ****     #endif
 180:CORE/core_cm4.h ****   #else
 181:CORE/core_cm4.h ****     #define __FPU_USED         0U
 182:CORE/core_cm4.h ****   #endif
 183:CORE/core_cm4.h **** 
 184:CORE/core_cm4.h **** #elif defined ( __TASKING__ )
 185:CORE/core_cm4.h ****   #if defined __FPU_VFP__
 186:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:CORE/core_cm4.h ****       #define __FPU_USED       1U
 188:CORE/core_cm4.h ****     #else
 189:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:CORE/core_cm4.h ****       #define __FPU_USED       0U
 191:CORE/core_cm4.h ****     #endif
 192:CORE/core_cm4.h ****   #else
 193:CORE/core_cm4.h ****     #define __FPU_USED         0U
 194:CORE/core_cm4.h ****   #endif
 195:CORE/core_cm4.h **** 
 196:CORE/core_cm4.h **** #elif defined ( __CSMC__ )
 197:CORE/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:CORE/core_cm4.h ****       #define __FPU_USED       1U
 200:CORE/core_cm4.h ****     #else
 201:CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:CORE/core_cm4.h ****       #define __FPU_USED       0U
 203:CORE/core_cm4.h ****     #endif
 204:CORE/core_cm4.h ****   #else
 205:CORE/core_cm4.h ****     #define __FPU_USED         0U
 206:CORE/core_cm4.h ****   #endif
 207:CORE/core_cm4.h **** 
 208:CORE/core_cm4.h **** #endif
 209:CORE/core_cm4.h **** 
 210:CORE/core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:CORE/core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:CORE/core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:CORE/core_cm4.h **** 
 214:CORE/core_cm4.h **** #ifdef __cplusplus
 215:CORE/core_cm4.h **** }
 216:CORE/core_cm4.h **** #endif
 217:CORE/core_cm4.h **** 
 218:CORE/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:CORE/core_cm4.h **** 
 220:CORE/core_cm4.h **** #ifndef __CMSIS_GENERIC
ARM GAS  /tmp/cc3kNpfC.s 			page 8


 221:CORE/core_cm4.h **** 
 222:CORE/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:CORE/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:CORE/core_cm4.h **** 
 225:CORE/core_cm4.h **** #ifdef __cplusplus
 226:CORE/core_cm4.h ****  extern "C" {
 227:CORE/core_cm4.h **** #endif
 228:CORE/core_cm4.h **** 
 229:CORE/core_cm4.h **** /* check device defines and use defaults */
 230:CORE/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:CORE/core_cm4.h ****   #ifndef __CM4_REV
 232:CORE/core_cm4.h ****     #define __CM4_REV               0x0000U
 233:CORE/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:CORE/core_cm4.h ****   #endif
 235:CORE/core_cm4.h **** 
 236:CORE/core_cm4.h ****   #ifndef __FPU_PRESENT
 237:CORE/core_cm4.h ****     #define __FPU_PRESENT             0U
 238:CORE/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:CORE/core_cm4.h ****   #endif
 240:CORE/core_cm4.h **** 
 241:CORE/core_cm4.h ****   #ifndef __MPU_PRESENT
 242:CORE/core_cm4.h ****     #define __MPU_PRESENT             0U
 243:CORE/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:CORE/core_cm4.h ****   #endif
 245:CORE/core_cm4.h **** 
 246:CORE/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:CORE/core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:CORE/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:CORE/core_cm4.h ****   #endif
 250:CORE/core_cm4.h **** 
 251:CORE/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:CORE/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:CORE/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:CORE/core_cm4.h ****   #endif
 255:CORE/core_cm4.h **** #endif
 256:CORE/core_cm4.h **** 
 257:CORE/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:CORE/core_cm4.h **** /**
 259:CORE/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:CORE/core_cm4.h **** 
 261:CORE/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:CORE/core_cm4.h ****     \li to specify the access to peripheral variables.
 263:CORE/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:CORE/core_cm4.h **** */
 265:CORE/core_cm4.h **** #ifdef __cplusplus
 266:CORE/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:CORE/core_cm4.h **** #else
 268:CORE/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:CORE/core_cm4.h **** #endif
 270:CORE/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:CORE/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:CORE/core_cm4.h **** 
 273:CORE/core_cm4.h **** /* following defines should be used for structure members */
 274:CORE/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:CORE/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:CORE/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:CORE/core_cm4.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 9


 278:CORE/core_cm4.h **** /*@} end of group Cortex_M4 */
 279:CORE/core_cm4.h **** 
 280:CORE/core_cm4.h **** 
 281:CORE/core_cm4.h **** 
 282:CORE/core_cm4.h **** /*******************************************************************************
 283:CORE/core_cm4.h ****  *                 Register Abstraction
 284:CORE/core_cm4.h ****   Core Register contain:
 285:CORE/core_cm4.h ****   - Core Register
 286:CORE/core_cm4.h ****   - Core NVIC Register
 287:CORE/core_cm4.h ****   - Core SCB Register
 288:CORE/core_cm4.h ****   - Core SysTick Register
 289:CORE/core_cm4.h ****   - Core Debug Register
 290:CORE/core_cm4.h ****   - Core MPU Register
 291:CORE/core_cm4.h ****   - Core FPU Register
 292:CORE/core_cm4.h ****  ******************************************************************************/
 293:CORE/core_cm4.h **** /**
 294:CORE/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:CORE/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:CORE/core_cm4.h **** */
 297:CORE/core_cm4.h **** 
 298:CORE/core_cm4.h **** /**
 299:CORE/core_cm4.h ****   \ingroup    CMSIS_core_register
 300:CORE/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:CORE/core_cm4.h ****   \brief      Core Register type definitions.
 302:CORE/core_cm4.h ****   @{
 303:CORE/core_cm4.h ****  */
 304:CORE/core_cm4.h **** 
 305:CORE/core_cm4.h **** /**
 306:CORE/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:CORE/core_cm4.h ****  */
 308:CORE/core_cm4.h **** typedef union
 309:CORE/core_cm4.h **** {
 310:CORE/core_cm4.h ****   struct
 311:CORE/core_cm4.h ****   {
 312:CORE/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:CORE/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:CORE/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:CORE/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:CORE/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:CORE/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:CORE/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:CORE/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:CORE/core_cm4.h **** } APSR_Type;
 323:CORE/core_cm4.h **** 
 324:CORE/core_cm4.h **** /* APSR Register Definitions */
 325:CORE/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:CORE/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:CORE/core_cm4.h **** 
 328:CORE/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:CORE/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:CORE/core_cm4.h **** 
 331:CORE/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:CORE/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:CORE/core_cm4.h **** 
 334:CORE/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
ARM GAS  /tmp/cc3kNpfC.s 			page 10


 335:CORE/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:CORE/core_cm4.h **** 
 337:CORE/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:CORE/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:CORE/core_cm4.h **** 
 340:CORE/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:CORE/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:CORE/core_cm4.h **** 
 343:CORE/core_cm4.h **** 
 344:CORE/core_cm4.h **** /**
 345:CORE/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:CORE/core_cm4.h ****  */
 347:CORE/core_cm4.h **** typedef union
 348:CORE/core_cm4.h **** {
 349:CORE/core_cm4.h ****   struct
 350:CORE/core_cm4.h ****   {
 351:CORE/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:CORE/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:CORE/core_cm4.h **** } IPSR_Type;
 356:CORE/core_cm4.h **** 
 357:CORE/core_cm4.h **** /* IPSR Register Definitions */
 358:CORE/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:CORE/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:CORE/core_cm4.h **** 
 361:CORE/core_cm4.h **** 
 362:CORE/core_cm4.h **** /**
 363:CORE/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:CORE/core_cm4.h ****  */
 365:CORE/core_cm4.h **** typedef union
 366:CORE/core_cm4.h **** {
 367:CORE/core_cm4.h ****   struct
 368:CORE/core_cm4.h ****   {
 369:CORE/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:CORE/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:CORE/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:CORE/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:CORE/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:CORE/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:CORE/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:CORE/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:CORE/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:CORE/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:CORE/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:CORE/core_cm4.h **** } xPSR_Type;
 383:CORE/core_cm4.h **** 
 384:CORE/core_cm4.h **** /* xPSR Register Definitions */
 385:CORE/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:CORE/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:CORE/core_cm4.h **** 
 388:CORE/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:CORE/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:CORE/core_cm4.h **** 
 391:CORE/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
ARM GAS  /tmp/cc3kNpfC.s 			page 11


 392:CORE/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:CORE/core_cm4.h **** 
 394:CORE/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:CORE/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:CORE/core_cm4.h **** 
 397:CORE/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:CORE/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:CORE/core_cm4.h **** 
 400:CORE/core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:CORE/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:CORE/core_cm4.h **** 
 403:CORE/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:CORE/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:CORE/core_cm4.h **** 
 406:CORE/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:CORE/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:CORE/core_cm4.h **** 
 409:CORE/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:CORE/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:CORE/core_cm4.h **** 
 412:CORE/core_cm4.h **** 
 413:CORE/core_cm4.h **** /**
 414:CORE/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:CORE/core_cm4.h ****  */
 416:CORE/core_cm4.h **** typedef union
 417:CORE/core_cm4.h **** {
 418:CORE/core_cm4.h ****   struct
 419:CORE/core_cm4.h ****   {
 420:CORE/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:CORE/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:CORE/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:CORE/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:CORE/core_cm4.h **** } CONTROL_Type;
 427:CORE/core_cm4.h **** 
 428:CORE/core_cm4.h **** /* CONTROL Register Definitions */
 429:CORE/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:CORE/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:CORE/core_cm4.h **** 
 432:CORE/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:CORE/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:CORE/core_cm4.h **** 
 435:CORE/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:CORE/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:CORE/core_cm4.h **** 
 438:CORE/core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:CORE/core_cm4.h **** 
 440:CORE/core_cm4.h **** 
 441:CORE/core_cm4.h **** /**
 442:CORE/core_cm4.h ****   \ingroup    CMSIS_core_register
 443:CORE/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:CORE/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:CORE/core_cm4.h ****   @{
 446:CORE/core_cm4.h ****  */
 447:CORE/core_cm4.h **** 
 448:CORE/core_cm4.h **** /**
ARM GAS  /tmp/cc3kNpfC.s 			page 12


 449:CORE/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:CORE/core_cm4.h ****  */
 451:CORE/core_cm4.h **** typedef struct
 452:CORE/core_cm4.h **** {
 453:CORE/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:CORE/core_cm4.h ****         uint32_t RESERVED0[24U];
 455:CORE/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:CORE/core_cm4.h ****         uint32_t RSERVED1[24U];
 457:CORE/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:CORE/core_cm4.h ****         uint32_t RESERVED2[24U];
 459:CORE/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:CORE/core_cm4.h ****         uint32_t RESERVED3[24U];
 461:CORE/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:CORE/core_cm4.h ****         uint32_t RESERVED4[56U];
 463:CORE/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:CORE/core_cm4.h ****         uint32_t RESERVED5[644U];
 465:CORE/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:CORE/core_cm4.h **** }  NVIC_Type;
 467:CORE/core_cm4.h **** 
 468:CORE/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:CORE/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:CORE/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:CORE/core_cm4.h **** 
 472:CORE/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:CORE/core_cm4.h **** 
 474:CORE/core_cm4.h **** 
 475:CORE/core_cm4.h **** /**
 476:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 477:CORE/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:CORE/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:CORE/core_cm4.h ****   @{
 480:CORE/core_cm4.h ****  */
 481:CORE/core_cm4.h **** 
 482:CORE/core_cm4.h **** /**
 483:CORE/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:CORE/core_cm4.h ****  */
 485:CORE/core_cm4.h **** typedef struct
 486:CORE/core_cm4.h **** {
 487:CORE/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:CORE/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:CORE/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:CORE/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:CORE/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:CORE/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:CORE/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:CORE/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:CORE/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:CORE/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:CORE/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:CORE/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:CORE/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:CORE/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:CORE/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:CORE/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:CORE/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:CORE/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:CORE/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
ARM GAS  /tmp/cc3kNpfC.s 			page 13


 506:CORE/core_cm4.h ****         uint32_t RESERVED0[5U];
 507:CORE/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:CORE/core_cm4.h **** } SCB_Type;
 509:CORE/core_cm4.h **** 
 510:CORE/core_cm4.h **** /* SCB CPUID Register Definitions */
 511:CORE/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:CORE/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:CORE/core_cm4.h **** 
 514:CORE/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:CORE/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:CORE/core_cm4.h **** 
 517:CORE/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:CORE/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:CORE/core_cm4.h **** 
 520:CORE/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:CORE/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:CORE/core_cm4.h **** 
 523:CORE/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:CORE/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:CORE/core_cm4.h **** 
 526:CORE/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:CORE/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:CORE/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:CORE/core_cm4.h **** 
 530:CORE/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:CORE/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:CORE/core_cm4.h **** 
 533:CORE/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:CORE/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:CORE/core_cm4.h **** 
 536:CORE/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:CORE/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:CORE/core_cm4.h **** 
 539:CORE/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:CORE/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:CORE/core_cm4.h **** 
 542:CORE/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:CORE/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:CORE/core_cm4.h **** 
 545:CORE/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:CORE/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:CORE/core_cm4.h **** 
 548:CORE/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:CORE/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:CORE/core_cm4.h **** 
 551:CORE/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:CORE/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:CORE/core_cm4.h **** 
 554:CORE/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:CORE/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:CORE/core_cm4.h **** 
 557:CORE/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:CORE/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:CORE/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:CORE/core_cm4.h **** 
 561:CORE/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
ARM GAS  /tmp/cc3kNpfC.s 			page 14


 563:CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:CORE/core_cm4.h **** 
 565:CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:CORE/core_cm4.h **** 
 568:CORE/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:CORE/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:CORE/core_cm4.h **** 
 571:CORE/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:CORE/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:CORE/core_cm4.h **** 
 574:CORE/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:CORE/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:CORE/core_cm4.h **** 
 577:CORE/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:CORE/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:CORE/core_cm4.h **** 
 580:CORE/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:CORE/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:CORE/core_cm4.h **** 
 583:CORE/core_cm4.h **** /* SCB System Control Register Definitions */
 584:CORE/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:CORE/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:CORE/core_cm4.h **** 
 587:CORE/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:CORE/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:CORE/core_cm4.h **** 
 590:CORE/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:CORE/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:CORE/core_cm4.h **** 
 593:CORE/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:CORE/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:CORE/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:CORE/core_cm4.h **** 
 597:CORE/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:CORE/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:CORE/core_cm4.h **** 
 600:CORE/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:CORE/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:CORE/core_cm4.h **** 
 603:CORE/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:CORE/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:CORE/core_cm4.h **** 
 606:CORE/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:CORE/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:CORE/core_cm4.h **** 
 609:CORE/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:CORE/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:CORE/core_cm4.h **** 
 612:CORE/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:CORE/core_cm4.h **** 
 616:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:CORE/core_cm4.h **** 
 619:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
ARM GAS  /tmp/cc3kNpfC.s 			page 15


 620:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:CORE/core_cm4.h **** 
 622:CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:CORE/core_cm4.h **** 
 625:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:CORE/core_cm4.h **** 
 628:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:CORE/core_cm4.h **** 
 631:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:CORE/core_cm4.h **** 
 634:CORE/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:CORE/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:CORE/core_cm4.h **** 
 637:CORE/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:CORE/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:CORE/core_cm4.h **** 
 640:CORE/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:CORE/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:CORE/core_cm4.h **** 
 643:CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:CORE/core_cm4.h **** 
 646:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:CORE/core_cm4.h **** 
 649:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:CORE/core_cm4.h **** 
 652:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:CORE/core_cm4.h **** 
 655:CORE/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:CORE/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:CORE/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:CORE/core_cm4.h **** 
 659:CORE/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:CORE/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:CORE/core_cm4.h **** 
 662:CORE/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:CORE/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:CORE/core_cm4.h **** 
 665:CORE/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:CORE/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:CORE/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:CORE/core_cm4.h **** 
 669:CORE/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:CORE/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:CORE/core_cm4.h **** 
 672:CORE/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:CORE/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:CORE/core_cm4.h **** 
 675:CORE/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:CORE/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
ARM GAS  /tmp/cc3kNpfC.s 			page 16


 677:CORE/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:CORE/core_cm4.h **** 
 679:CORE/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:CORE/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:CORE/core_cm4.h **** 
 682:CORE/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:CORE/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:CORE/core_cm4.h **** 
 685:CORE/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:CORE/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:CORE/core_cm4.h **** 
 688:CORE/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:CORE/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:CORE/core_cm4.h **** 
 691:CORE/core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:CORE/core_cm4.h **** 
 693:CORE/core_cm4.h **** 
 694:CORE/core_cm4.h **** /**
 695:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 696:CORE/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:CORE/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:CORE/core_cm4.h ****   @{
 699:CORE/core_cm4.h ****  */
 700:CORE/core_cm4.h **** 
 701:CORE/core_cm4.h **** /**
 702:CORE/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:CORE/core_cm4.h ****  */
 704:CORE/core_cm4.h **** typedef struct
 705:CORE/core_cm4.h **** {
 706:CORE/core_cm4.h ****         uint32_t RESERVED0[1U];
 707:CORE/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:CORE/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:CORE/core_cm4.h **** } SCnSCB_Type;
 710:CORE/core_cm4.h **** 
 711:CORE/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:CORE/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:CORE/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:CORE/core_cm4.h **** 
 715:CORE/core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:CORE/core_cm4.h **** 
 719:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:CORE/core_cm4.h **** 
 722:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:CORE/core_cm4.h **** 
 725:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:CORE/core_cm4.h **** 
 728:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:CORE/core_cm4.h **** 
 731:CORE/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:CORE/core_cm4.h **** 
 733:CORE/core_cm4.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 17


 734:CORE/core_cm4.h **** /**
 735:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 736:CORE/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:CORE/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:CORE/core_cm4.h ****   @{
 739:CORE/core_cm4.h ****  */
 740:CORE/core_cm4.h **** 
 741:CORE/core_cm4.h **** /**
 742:CORE/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:CORE/core_cm4.h ****  */
 744:CORE/core_cm4.h **** typedef struct
 745:CORE/core_cm4.h **** {
 746:CORE/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:CORE/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:CORE/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:CORE/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:CORE/core_cm4.h **** } SysTick_Type;
 751:CORE/core_cm4.h **** 
 752:CORE/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:CORE/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:CORE/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:CORE/core_cm4.h **** 
 756:CORE/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:CORE/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:CORE/core_cm4.h **** 
 759:CORE/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:CORE/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:CORE/core_cm4.h **** 
 762:CORE/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:CORE/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:CORE/core_cm4.h **** 
 765:CORE/core_cm4.h **** /* SysTick Reload Register Definitions */
 766:CORE/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:CORE/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:CORE/core_cm4.h **** 
 769:CORE/core_cm4.h **** /* SysTick Current Register Definitions */
 770:CORE/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:CORE/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:CORE/core_cm4.h **** 
 773:CORE/core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:CORE/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:CORE/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:CORE/core_cm4.h **** 
 777:CORE/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:CORE/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:CORE/core_cm4.h **** 
 780:CORE/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:CORE/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:CORE/core_cm4.h **** 
 783:CORE/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:CORE/core_cm4.h **** 
 785:CORE/core_cm4.h **** 
 786:CORE/core_cm4.h **** /**
 787:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 788:CORE/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:CORE/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:CORE/core_cm4.h ****   @{
ARM GAS  /tmp/cc3kNpfC.s 			page 18


 791:CORE/core_cm4.h ****  */
 792:CORE/core_cm4.h **** 
 793:CORE/core_cm4.h **** /**
 794:CORE/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:CORE/core_cm4.h ****  */
 796:CORE/core_cm4.h **** typedef struct
 797:CORE/core_cm4.h **** {
 798:CORE/core_cm4.h ****   __OM  union
 799:CORE/core_cm4.h ****   {
 800:CORE/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:CORE/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:CORE/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:CORE/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:CORE/core_cm4.h ****         uint32_t RESERVED0[864U];
 805:CORE/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:CORE/core_cm4.h ****         uint32_t RESERVED1[15U];
 807:CORE/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:CORE/core_cm4.h ****         uint32_t RESERVED2[15U];
 809:CORE/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:CORE/core_cm4.h ****         uint32_t RESERVED3[29U];
 811:CORE/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:CORE/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:CORE/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:CORE/core_cm4.h ****         uint32_t RESERVED4[43U];
 815:CORE/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:CORE/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:CORE/core_cm4.h ****         uint32_t RESERVED5[6U];
 818:CORE/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:CORE/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:CORE/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:CORE/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:CORE/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:CORE/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:CORE/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:CORE/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:CORE/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:CORE/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:CORE/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:CORE/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:CORE/core_cm4.h **** } ITM_Type;
 831:CORE/core_cm4.h **** 
 832:CORE/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:CORE/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:CORE/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:CORE/core_cm4.h **** 
 836:CORE/core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:CORE/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:CORE/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:CORE/core_cm4.h **** 
 840:CORE/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:CORE/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:CORE/core_cm4.h **** 
 843:CORE/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:CORE/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:CORE/core_cm4.h **** 
 846:CORE/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:CORE/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
ARM GAS  /tmp/cc3kNpfC.s 			page 19


 848:CORE/core_cm4.h **** 
 849:CORE/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:CORE/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:CORE/core_cm4.h **** 
 852:CORE/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:CORE/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:CORE/core_cm4.h **** 
 855:CORE/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:CORE/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:CORE/core_cm4.h **** 
 858:CORE/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:CORE/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:CORE/core_cm4.h **** 
 861:CORE/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:CORE/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:CORE/core_cm4.h **** 
 864:CORE/core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:CORE/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:CORE/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:CORE/core_cm4.h **** 
 868:CORE/core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:CORE/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:CORE/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:CORE/core_cm4.h **** 
 872:CORE/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:CORE/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:CORE/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:CORE/core_cm4.h **** 
 876:CORE/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:CORE/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:CORE/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:CORE/core_cm4.h **** 
 880:CORE/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:CORE/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:CORE/core_cm4.h **** 
 883:CORE/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:CORE/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:CORE/core_cm4.h **** 
 886:CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:CORE/core_cm4.h **** 
 888:CORE/core_cm4.h **** 
 889:CORE/core_cm4.h **** /**
 890:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:CORE/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:CORE/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:CORE/core_cm4.h ****   @{
 894:CORE/core_cm4.h ****  */
 895:CORE/core_cm4.h **** 
 896:CORE/core_cm4.h **** /**
 897:CORE/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:CORE/core_cm4.h ****  */
 899:CORE/core_cm4.h **** typedef struct
 900:CORE/core_cm4.h **** {
 901:CORE/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:CORE/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:CORE/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:CORE/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
ARM GAS  /tmp/cc3kNpfC.s 			page 20


 905:CORE/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:CORE/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:CORE/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:CORE/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:CORE/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:CORE/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:CORE/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:CORE/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:CORE/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:CORE/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:CORE/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:CORE/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:CORE/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:CORE/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:CORE/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:CORE/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:CORE/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:CORE/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:CORE/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:CORE/core_cm4.h **** } DWT_Type;
 925:CORE/core_cm4.h **** 
 926:CORE/core_cm4.h **** /* DWT Control Register Definitions */
 927:CORE/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:CORE/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:CORE/core_cm4.h **** 
 930:CORE/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:CORE/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:CORE/core_cm4.h **** 
 933:CORE/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:CORE/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:CORE/core_cm4.h **** 
 936:CORE/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:CORE/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:CORE/core_cm4.h **** 
 939:CORE/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:CORE/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:CORE/core_cm4.h **** 
 942:CORE/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:CORE/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:CORE/core_cm4.h **** 
 945:CORE/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:CORE/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:CORE/core_cm4.h **** 
 948:CORE/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:CORE/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:CORE/core_cm4.h **** 
 951:CORE/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:CORE/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:CORE/core_cm4.h **** 
 954:CORE/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:CORE/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:CORE/core_cm4.h **** 
 957:CORE/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:CORE/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:CORE/core_cm4.h **** 
 960:CORE/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:CORE/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
ARM GAS  /tmp/cc3kNpfC.s 			page 21


 962:CORE/core_cm4.h **** 
 963:CORE/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:CORE/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:CORE/core_cm4.h **** 
 966:CORE/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:CORE/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:CORE/core_cm4.h **** 
 969:CORE/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:CORE/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:CORE/core_cm4.h **** 
 972:CORE/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:CORE/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:CORE/core_cm4.h **** 
 975:CORE/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:CORE/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:CORE/core_cm4.h **** 
 978:CORE/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:CORE/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:CORE/core_cm4.h **** 
 981:CORE/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:CORE/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:CORE/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:CORE/core_cm4.h **** 
 985:CORE/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:CORE/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:CORE/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:CORE/core_cm4.h **** 
 989:CORE/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:CORE/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:CORE/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:CORE/core_cm4.h **** 
 993:CORE/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:CORE/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:CORE/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:CORE/core_cm4.h **** 
 997:CORE/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:CORE/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:CORE/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:CORE/core_cm4.h **** 
1001:CORE/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:CORE/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:CORE/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:CORE/core_cm4.h **** 
1005:CORE/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:CORE/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:CORE/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:CORE/core_cm4.h **** 
1009:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:CORE/core_cm4.h **** 
1012:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:CORE/core_cm4.h **** 
1015:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:CORE/core_cm4.h **** 
1018:CORE/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
ARM GAS  /tmp/cc3kNpfC.s 			page 22


1019:CORE/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:CORE/core_cm4.h **** 
1021:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:CORE/core_cm4.h **** 
1024:CORE/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:CORE/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:CORE/core_cm4.h **** 
1027:CORE/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:CORE/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:CORE/core_cm4.h **** 
1030:CORE/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:CORE/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:CORE/core_cm4.h **** 
1033:CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:CORE/core_cm4.h **** 
1035:CORE/core_cm4.h **** 
1036:CORE/core_cm4.h **** /**
1037:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:CORE/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:CORE/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:CORE/core_cm4.h ****   @{
1041:CORE/core_cm4.h ****  */
1042:CORE/core_cm4.h **** 
1043:CORE/core_cm4.h **** /**
1044:CORE/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:CORE/core_cm4.h ****  */
1046:CORE/core_cm4.h **** typedef struct
1047:CORE/core_cm4.h **** {
1048:CORE/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:CORE/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:CORE/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:CORE/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:CORE/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:CORE/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:CORE/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:CORE/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:CORE/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:CORE/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:CORE/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:CORE/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:CORE/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:CORE/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:CORE/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:CORE/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:CORE/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:CORE/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:CORE/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:CORE/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:CORE/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:CORE/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:CORE/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:CORE/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:CORE/core_cm4.h **** } TPI_Type;
1073:CORE/core_cm4.h **** 
1074:CORE/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:CORE/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
ARM GAS  /tmp/cc3kNpfC.s 			page 23


1076:CORE/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:CORE/core_cm4.h **** 
1078:CORE/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:CORE/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:CORE/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:CORE/core_cm4.h **** 
1082:CORE/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:CORE/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:CORE/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:CORE/core_cm4.h **** 
1086:CORE/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:CORE/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:CORE/core_cm4.h **** 
1089:CORE/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:CORE/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:CORE/core_cm4.h **** 
1092:CORE/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:CORE/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:CORE/core_cm4.h **** 
1095:CORE/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:CORE/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:CORE/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:CORE/core_cm4.h **** 
1099:CORE/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:CORE/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:CORE/core_cm4.h **** 
1102:CORE/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:CORE/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:CORE/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:CORE/core_cm4.h **** 
1106:CORE/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:CORE/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:CORE/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:CORE/core_cm4.h **** 
1110:CORE/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:CORE/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:CORE/core_cm4.h **** 
1113:CORE/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:CORE/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:CORE/core_cm4.h **** 
1116:CORE/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:CORE/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:CORE/core_cm4.h **** 
1119:CORE/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:CORE/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:CORE/core_cm4.h **** 
1122:CORE/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:CORE/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:CORE/core_cm4.h **** 
1125:CORE/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:CORE/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:CORE/core_cm4.h **** 
1128:CORE/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:CORE/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:CORE/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:CORE/core_cm4.h **** 
1132:CORE/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
ARM GAS  /tmp/cc3kNpfC.s 			page 24


1133:CORE/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:CORE/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:CORE/core_cm4.h **** 
1136:CORE/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:CORE/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:CORE/core_cm4.h **** 
1139:CORE/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:CORE/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:CORE/core_cm4.h **** 
1142:CORE/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:CORE/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:CORE/core_cm4.h **** 
1145:CORE/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:CORE/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:CORE/core_cm4.h **** 
1148:CORE/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:CORE/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:CORE/core_cm4.h **** 
1151:CORE/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:CORE/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:CORE/core_cm4.h **** 
1154:CORE/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:CORE/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:CORE/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:CORE/core_cm4.h **** 
1158:CORE/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:CORE/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:CORE/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:CORE/core_cm4.h **** 
1162:CORE/core_cm4.h **** /* TPI DEVID Register Definitions */
1163:CORE/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:CORE/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:CORE/core_cm4.h **** 
1166:CORE/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:CORE/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:CORE/core_cm4.h **** 
1169:CORE/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:CORE/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:CORE/core_cm4.h **** 
1172:CORE/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:CORE/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:CORE/core_cm4.h **** 
1175:CORE/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:CORE/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:CORE/core_cm4.h **** 
1178:CORE/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:CORE/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:CORE/core_cm4.h **** 
1181:CORE/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:CORE/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:CORE/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:CORE/core_cm4.h **** 
1185:CORE/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:CORE/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:CORE/core_cm4.h **** 
1188:CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:CORE/core_cm4.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 25


1190:CORE/core_cm4.h **** 
1191:CORE/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:CORE/core_cm4.h **** /**
1193:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
1194:CORE/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:CORE/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:CORE/core_cm4.h ****   @{
1197:CORE/core_cm4.h ****  */
1198:CORE/core_cm4.h **** 
1199:CORE/core_cm4.h **** /**
1200:CORE/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:CORE/core_cm4.h ****  */
1202:CORE/core_cm4.h **** typedef struct
1203:CORE/core_cm4.h **** {
1204:CORE/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:CORE/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:CORE/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:CORE/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:CORE/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:CORE/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:CORE/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:CORE/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:CORE/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:CORE/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:CORE/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:CORE/core_cm4.h **** } MPU_Type;
1216:CORE/core_cm4.h **** 
1217:CORE/core_cm4.h **** /* MPU Type Register Definitions */
1218:CORE/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:CORE/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:CORE/core_cm4.h **** 
1221:CORE/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:CORE/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:CORE/core_cm4.h **** 
1224:CORE/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:CORE/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:CORE/core_cm4.h **** 
1227:CORE/core_cm4.h **** /* MPU Control Register Definitions */
1228:CORE/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:CORE/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:CORE/core_cm4.h **** 
1231:CORE/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:CORE/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:CORE/core_cm4.h **** 
1234:CORE/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:CORE/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:CORE/core_cm4.h **** 
1237:CORE/core_cm4.h **** /* MPU Region Number Register Definitions */
1238:CORE/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:CORE/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:CORE/core_cm4.h **** 
1241:CORE/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:CORE/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:CORE/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:CORE/core_cm4.h **** 
1245:CORE/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:CORE/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
ARM GAS  /tmp/cc3kNpfC.s 			page 26


1247:CORE/core_cm4.h **** 
1248:CORE/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:CORE/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:CORE/core_cm4.h **** 
1251:CORE/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:CORE/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:CORE/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:CORE/core_cm4.h **** 
1255:CORE/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:CORE/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:CORE/core_cm4.h **** 
1258:CORE/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:CORE/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:CORE/core_cm4.h **** 
1261:CORE/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:CORE/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:CORE/core_cm4.h **** 
1264:CORE/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:CORE/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:CORE/core_cm4.h **** 
1267:CORE/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:CORE/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:CORE/core_cm4.h **** 
1270:CORE/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:CORE/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:CORE/core_cm4.h **** 
1273:CORE/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:CORE/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:CORE/core_cm4.h **** 
1276:CORE/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:CORE/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:CORE/core_cm4.h **** 
1279:CORE/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:CORE/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:CORE/core_cm4.h **** 
1282:CORE/core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:CORE/core_cm4.h **** #endif
1284:CORE/core_cm4.h **** 
1285:CORE/core_cm4.h **** 
1286:CORE/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:CORE/core_cm4.h **** /**
1288:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
1289:CORE/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:CORE/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:CORE/core_cm4.h ****   @{
1292:CORE/core_cm4.h ****  */
1293:CORE/core_cm4.h **** 
1294:CORE/core_cm4.h **** /**
1295:CORE/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:CORE/core_cm4.h ****  */
1297:CORE/core_cm4.h **** typedef struct
1298:CORE/core_cm4.h **** {
1299:CORE/core_cm4.h ****         uint32_t RESERVED0[1U];
1300:CORE/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:CORE/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:CORE/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:CORE/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
ARM GAS  /tmp/cc3kNpfC.s 			page 27


1304:CORE/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:CORE/core_cm4.h **** } FPU_Type;
1306:CORE/core_cm4.h **** 
1307:CORE/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:CORE/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:CORE/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:CORE/core_cm4.h **** 
1311:CORE/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:CORE/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:CORE/core_cm4.h **** 
1314:CORE/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:CORE/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:CORE/core_cm4.h **** 
1317:CORE/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:CORE/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:CORE/core_cm4.h **** 
1320:CORE/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:CORE/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:CORE/core_cm4.h **** 
1323:CORE/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:CORE/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:CORE/core_cm4.h **** 
1326:CORE/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:CORE/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:CORE/core_cm4.h **** 
1329:CORE/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:CORE/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:CORE/core_cm4.h **** 
1332:CORE/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:CORE/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:CORE/core_cm4.h **** 
1335:CORE/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:CORE/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:CORE/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:CORE/core_cm4.h **** 
1339:CORE/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:CORE/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:CORE/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:CORE/core_cm4.h **** 
1343:CORE/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:CORE/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:CORE/core_cm4.h **** 
1346:CORE/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:CORE/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:CORE/core_cm4.h **** 
1349:CORE/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:CORE/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:CORE/core_cm4.h **** 
1352:CORE/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:CORE/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:CORE/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:CORE/core_cm4.h **** 
1356:CORE/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:CORE/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:CORE/core_cm4.h **** 
1359:CORE/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:CORE/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
ARM GAS  /tmp/cc3kNpfC.s 			page 28


1361:CORE/core_cm4.h **** 
1362:CORE/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:CORE/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:CORE/core_cm4.h **** 
1365:CORE/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:CORE/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:CORE/core_cm4.h **** 
1368:CORE/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:CORE/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:CORE/core_cm4.h **** 
1371:CORE/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:CORE/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:CORE/core_cm4.h **** 
1374:CORE/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:CORE/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:CORE/core_cm4.h **** 
1377:CORE/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:CORE/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:CORE/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:CORE/core_cm4.h **** 
1381:CORE/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:CORE/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:CORE/core_cm4.h **** 
1384:CORE/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:CORE/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:CORE/core_cm4.h **** 
1387:CORE/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:CORE/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:CORE/core_cm4.h **** 
1390:CORE/core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:CORE/core_cm4.h **** #endif
1392:CORE/core_cm4.h **** 
1393:CORE/core_cm4.h **** 
1394:CORE/core_cm4.h **** /**
1395:CORE/core_cm4.h ****   \ingroup  CMSIS_core_register
1396:CORE/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:CORE/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:CORE/core_cm4.h ****   @{
1399:CORE/core_cm4.h ****  */
1400:CORE/core_cm4.h **** 
1401:CORE/core_cm4.h **** /**
1402:CORE/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:CORE/core_cm4.h ****  */
1404:CORE/core_cm4.h **** typedef struct
1405:CORE/core_cm4.h **** {
1406:CORE/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:CORE/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:CORE/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:CORE/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:CORE/core_cm4.h **** } CoreDebug_Type;
1411:CORE/core_cm4.h **** 
1412:CORE/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:CORE/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:CORE/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:CORE/core_cm4.h **** 
1416:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
ARM GAS  /tmp/cc3kNpfC.s 			page 29


1418:CORE/core_cm4.h **** 
1419:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:CORE/core_cm4.h **** 
1422:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:CORE/core_cm4.h **** 
1425:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:CORE/core_cm4.h **** 
1428:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:CORE/core_cm4.h **** 
1431:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:CORE/core_cm4.h **** 
1434:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:CORE/core_cm4.h **** 
1437:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:CORE/core_cm4.h **** 
1440:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:CORE/core_cm4.h **** 
1443:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:CORE/core_cm4.h **** 
1446:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:CORE/core_cm4.h **** 
1449:CORE/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:CORE/core_cm4.h **** 
1453:CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:CORE/core_cm4.h **** 
1456:CORE/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:CORE/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:CORE/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:CORE/core_cm4.h **** 
1460:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:CORE/core_cm4.h **** 
1463:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:CORE/core_cm4.h **** 
1466:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:CORE/core_cm4.h **** 
1469:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:CORE/core_cm4.h **** 
1472:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:CORE/core_cm4.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 30


1475:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:CORE/core_cm4.h **** 
1478:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:CORE/core_cm4.h **** 
1481:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:CORE/core_cm4.h **** 
1484:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:CORE/core_cm4.h **** 
1487:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:CORE/core_cm4.h **** 
1490:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:CORE/core_cm4.h **** 
1493:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:CORE/core_cm4.h **** 
1496:CORE/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:CORE/core_cm4.h **** 
1498:CORE/core_cm4.h **** 
1499:CORE/core_cm4.h **** /**
1500:CORE/core_cm4.h ****   \ingroup    CMSIS_core_register
1501:CORE/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:CORE/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:CORE/core_cm4.h ****   @{
1504:CORE/core_cm4.h ****  */
1505:CORE/core_cm4.h **** 
1506:CORE/core_cm4.h **** /**
1507:CORE/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:CORE/core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:CORE/core_cm4.h ****   \param[in] value  Value of the bit field.
1510:CORE/core_cm4.h ****   \return           Masked and shifted value.
1511:CORE/core_cm4.h **** */
1512:CORE/core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:CORE/core_cm4.h **** 
1514:CORE/core_cm4.h **** /**
1515:CORE/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:CORE/core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:CORE/core_cm4.h ****   \param[in] value  Value of register.
1518:CORE/core_cm4.h ****   \return           Masked and shifted bit field value.
1519:CORE/core_cm4.h **** */
1520:CORE/core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:CORE/core_cm4.h **** 
1522:CORE/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:CORE/core_cm4.h **** 
1524:CORE/core_cm4.h **** 
1525:CORE/core_cm4.h **** /**
1526:CORE/core_cm4.h ****   \ingroup    CMSIS_core_register
1527:CORE/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:CORE/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:CORE/core_cm4.h ****   @{
1530:CORE/core_cm4.h ****  */
1531:CORE/core_cm4.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 31


1532:CORE/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:CORE/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:CORE/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:CORE/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:CORE/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:CORE/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:CORE/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:CORE/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:CORE/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:CORE/core_cm4.h **** 
1542:CORE/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:CORE/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:CORE/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:CORE/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:CORE/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:CORE/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:CORE/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:CORE/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:CORE/core_cm4.h **** 
1551:CORE/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:CORE/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:CORE/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:CORE/core_cm4.h **** #endif
1555:CORE/core_cm4.h **** 
1556:CORE/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:CORE/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:CORE/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:CORE/core_cm4.h **** #endif
1560:CORE/core_cm4.h **** 
1561:CORE/core_cm4.h **** /*@} */
1562:CORE/core_cm4.h **** 
1563:CORE/core_cm4.h **** 
1564:CORE/core_cm4.h **** 
1565:CORE/core_cm4.h **** /*******************************************************************************
1566:CORE/core_cm4.h ****  *                Hardware Abstraction Layer
1567:CORE/core_cm4.h ****   Core Function Interface contains:
1568:CORE/core_cm4.h ****   - Core NVIC Functions
1569:CORE/core_cm4.h ****   - Core SysTick Functions
1570:CORE/core_cm4.h ****   - Core Debug Functions
1571:CORE/core_cm4.h ****   - Core Register Access Functions
1572:CORE/core_cm4.h ****  ******************************************************************************/
1573:CORE/core_cm4.h **** /**
1574:CORE/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:CORE/core_cm4.h **** */
1576:CORE/core_cm4.h **** 
1577:CORE/core_cm4.h **** 
1578:CORE/core_cm4.h **** 
1579:CORE/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:CORE/core_cm4.h **** /**
1581:CORE/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:CORE/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:CORE/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:CORE/core_cm4.h ****   @{
1585:CORE/core_cm4.h ****  */
1586:CORE/core_cm4.h **** 
1587:CORE/core_cm4.h **** /**
1588:CORE/core_cm4.h ****   \brief   Set Priority Grouping
ARM GAS  /tmp/cc3kNpfC.s 			page 32


1589:CORE/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:CORE/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:CORE/core_cm4.h ****            Only values from 0..7 are used.
1592:CORE/core_cm4.h ****            In case of a conflict between priority grouping and available
1593:CORE/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:CORE/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:CORE/core_cm4.h ****  */
1596:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:CORE/core_cm4.h **** {
1598:CORE/core_cm4.h ****   uint32_t reg_value;
1599:CORE/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:CORE/core_cm4.h **** 
1601:CORE/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
  37              		.loc 2 1601 0
  38 0000 074A     		ldr	r2, .L2
  39 0002 D368     		ldr	r3, [r2, #12]
  40              	.LVL1:
1602:CORE/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
  41              		.loc 2 1602 0
  42 0004 23F4E063 		bic	r3, r3, #1792
  43              	.LVL2:
  44 0008 1B04     		lsls	r3, r3, #16
  45 000a 1B0C     		lsrs	r3, r3, #16
  46              	.LVL3:
1603:CORE/core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:CORE/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:CORE/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
  47              		.loc 2 1605 0
  48 000c 0002     		lsls	r0, r0, #8
  49              	.LVL4:
  50 000e 00F4E060 		and	r0, r0, #1792
1604:CORE/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
  51              		.loc 2 1604 0
  52 0012 1843     		orrs	r0, r0, r3
1603:CORE/core_cm4.h ****   reg_value  =  (reg_value                                   |
  53              		.loc 2 1603 0
  54 0014 40F0BF60 		orr	r0, r0, #100139008
  55 0018 40F40030 		orr	r0, r0, #131072
  56              	.LVL5:
1606:CORE/core_cm4.h ****   SCB->AIRCR =  reg_value;
  57              		.loc 2 1606 0
  58 001c D060     		str	r0, [r2, #12]
  59              	.LVL6:
  60 001e 7047     		bx	lr
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 0020 00ED00E0 		.word	-536810240
  65              	.LBE45:
  66              	.LBE44:
  67              		.cfi_endproc
  68              	.LFE119:
  70              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
  71              		.align	1
  72              		.global	HAL_NVIC_SetPriority
  73              		.syntax unified
  74              		.thumb
ARM GAS  /tmp/cc3kNpfC.s 			page 33


  75              		.thumb_func
  76              		.fpu fpv4-sp-d16
  78              	HAL_NVIC_SetPriority:
  79              	.LFB120:
 145:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 146:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 147:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 148:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
 149:HALLIB/Src/stm32f4xx_hal_cortex.c ****   NVIC_SetPriorityGrouping(PriorityGroup);
 150:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 151:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 152:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 153:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 154:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 155:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 156:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 157:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  PreemptPriority The preemption priority for the IRQn channel.
 158:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 159:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority 
 160:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  SubPriority the subpriority level for the IRQ channel.
 161:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 162:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority.          
 163:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 164:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 165:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 166:HALLIB/Src/stm32f4xx_hal_cortex.c **** { 
  80              		.loc 1 166 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              	.LVL7:
  86 0000 30B4     		push	{r4, r5}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 5, -4
  91              	.LVL8:
  92              	.LBB46:
  93              	.LBB47:
1607:CORE/core_cm4.h **** }
1608:CORE/core_cm4.h **** 
1609:CORE/core_cm4.h **** 
1610:CORE/core_cm4.h **** /**
1611:CORE/core_cm4.h ****   \brief   Get Priority Grouping
1612:CORE/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:CORE/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:CORE/core_cm4.h ****  */
1615:CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:CORE/core_cm4.h **** {
1617:CORE/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
  94              		.loc 2 1617 0
  95 0002 164B     		ldr	r3, .L11
  96 0004 DB68     		ldr	r3, [r3, #12]
  97 0006 C3F30223 		ubfx	r3, r3, #8, #3
  98              	.LVL9:
  99              	.LBE47:
ARM GAS  /tmp/cc3kNpfC.s 			page 34


 100              	.LBE46:
 101              	.LBB48:
 102              	.LBB49:
1618:CORE/core_cm4.h **** }
1619:CORE/core_cm4.h **** 
1620:CORE/core_cm4.h **** 
1621:CORE/core_cm4.h **** /**
1622:CORE/core_cm4.h ****   \brief   Enable External Interrupt
1623:CORE/core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:CORE/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:CORE/core_cm4.h ****  */
1626:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:CORE/core_cm4.h **** {
1628:CORE/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1629:CORE/core_cm4.h **** }
1630:CORE/core_cm4.h **** 
1631:CORE/core_cm4.h **** 
1632:CORE/core_cm4.h **** /**
1633:CORE/core_cm4.h ****   \brief   Disable External Interrupt
1634:CORE/core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:CORE/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:CORE/core_cm4.h ****  */
1637:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:CORE/core_cm4.h **** {
1639:CORE/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:CORE/core_cm4.h **** }
1641:CORE/core_cm4.h **** 
1642:CORE/core_cm4.h **** 
1643:CORE/core_cm4.h **** /**
1644:CORE/core_cm4.h ****   \brief   Get Pending Interrupt
1645:CORE/core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:CORE/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:CORE/core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:CORE/core_cm4.h ****   \return             1  Interrupt status is pending.
1649:CORE/core_cm4.h ****  */
1650:CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:CORE/core_cm4.h **** {
1652:CORE/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:CORE/core_cm4.h **** }
1654:CORE/core_cm4.h **** 
1655:CORE/core_cm4.h **** 
1656:CORE/core_cm4.h **** /**
1657:CORE/core_cm4.h ****   \brief   Set Pending Interrupt
1658:CORE/core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:CORE/core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:CORE/core_cm4.h ****  */
1661:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:CORE/core_cm4.h **** {
1663:CORE/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:CORE/core_cm4.h **** }
1665:CORE/core_cm4.h **** 
1666:CORE/core_cm4.h **** 
1667:CORE/core_cm4.h **** /**
1668:CORE/core_cm4.h ****   \brief   Clear Pending Interrupt
1669:CORE/core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:CORE/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:CORE/core_cm4.h ****  */
ARM GAS  /tmp/cc3kNpfC.s 			page 35


1672:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:CORE/core_cm4.h **** {
1674:CORE/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:CORE/core_cm4.h **** }
1676:CORE/core_cm4.h **** 
1677:CORE/core_cm4.h **** 
1678:CORE/core_cm4.h **** /**
1679:CORE/core_cm4.h ****   \brief   Get Active Interrupt
1680:CORE/core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:CORE/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:CORE/core_cm4.h ****   \return             0  Interrupt status is not active.
1683:CORE/core_cm4.h ****   \return             1  Interrupt status is active.
1684:CORE/core_cm4.h ****  */
1685:CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:CORE/core_cm4.h **** {
1687:CORE/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:CORE/core_cm4.h **** }
1689:CORE/core_cm4.h **** 
1690:CORE/core_cm4.h **** 
1691:CORE/core_cm4.h **** /**
1692:CORE/core_cm4.h ****   \brief   Set Interrupt Priority
1693:CORE/core_cm4.h ****   \details Sets the priority of an interrupt.
1694:CORE/core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:CORE/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:CORE/core_cm4.h ****   \param [in]  priority  Priority to set.
1697:CORE/core_cm4.h ****  */
1698:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:CORE/core_cm4.h **** {
1700:CORE/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1701:CORE/core_cm4.h ****   {
1702:CORE/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1703:CORE/core_cm4.h ****   }
1704:CORE/core_cm4.h ****   else
1705:CORE/core_cm4.h ****   {
1706:CORE/core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1707:CORE/core_cm4.h ****   }
1708:CORE/core_cm4.h **** }
1709:CORE/core_cm4.h **** 
1710:CORE/core_cm4.h **** 
1711:CORE/core_cm4.h **** /**
1712:CORE/core_cm4.h ****   \brief   Get Interrupt Priority
1713:CORE/core_cm4.h ****   \details Reads the priority of an interrupt.
1714:CORE/core_cm4.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1715:CORE/core_cm4.h ****            or negative to specify an internal (core) interrupt.
1716:CORE/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1717:CORE/core_cm4.h ****   \return             Interrupt Priority.
1718:CORE/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1719:CORE/core_cm4.h ****  */
1720:CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1721:CORE/core_cm4.h **** {
1722:CORE/core_cm4.h **** 
1723:CORE/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1724:CORE/core_cm4.h ****   {
1725:CORE/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1726:CORE/core_cm4.h ****   }
1727:CORE/core_cm4.h ****   else
1728:CORE/core_cm4.h ****   {
ARM GAS  /tmp/cc3kNpfC.s 			page 36


1729:CORE/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1730:CORE/core_cm4.h ****   }
1731:CORE/core_cm4.h **** }
1732:CORE/core_cm4.h **** 
1733:CORE/core_cm4.h **** 
1734:CORE/core_cm4.h **** /**
1735:CORE/core_cm4.h ****   \brief   Encode Priority
1736:CORE/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1737:CORE/core_cm4.h ****            preemptive priority value, and subpriority value.
1738:CORE/core_cm4.h ****            In case of a conflict between priority grouping and available
1739:CORE/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1740:CORE/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1741:CORE/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1742:CORE/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1743:CORE/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1744:CORE/core_cm4.h ****  */
1745:CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1746:CORE/core_cm4.h **** {
1747:CORE/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1748:CORE/core_cm4.h ****   uint32_t PreemptPriorityBits;
1749:CORE/core_cm4.h ****   uint32_t SubPriorityBits;
1750:CORE/core_cm4.h **** 
1751:CORE/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 103              		.loc 2 1751 0
 104 000a C3F10704 		rsb	r4, r3, #7
 105 000e 042C     		cmp	r4, #4
 106 0010 28BF     		it	cs
 107 0012 0424     		movcs	r4, #4
 108              	.LVL10:
1752:CORE/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 109              		.loc 2 1752 0
 110 0014 1D1D     		adds	r5, r3, #4
 111 0016 062D     		cmp	r5, #6
 112 0018 17D9     		bls	.L8
 113 001a 033B     		subs	r3, r3, #3
 114              	.LVL11:
 115              	.L5:
1753:CORE/core_cm4.h **** 
1754:CORE/core_cm4.h ****   return (
1755:CORE/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 116              		.loc 2 1755 0
 117 001c 0125     		movs	r5, #1
 118              	.LVL12:
 119 001e 05FA04F4 		lsl	r4, r5, r4
 120              	.LVL13:
 121 0022 013C     		subs	r4, r4, #1
 122 0024 2140     		ands	r1, r1, r4
 123              	.LVL14:
 124 0026 9940     		lsls	r1, r1, r3
1756:CORE/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 125              		.loc 2 1756 0
 126 0028 05FA03F3 		lsl	r3, r5, r3
 127              	.LVL15:
 128 002c 013B     		subs	r3, r3, #1
 129 002e 1340     		ands	r3, r3, r2
1755:CORE/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 130              		.loc 2 1755 0
ARM GAS  /tmp/cc3kNpfC.s 			page 37


 131 0030 1943     		orrs	r1, r1, r3
 132              	.LVL16:
 133              	.LBE49:
 134              	.LBE48:
 135              	.LBB51:
 136              	.LBB52:
1700:CORE/core_cm4.h ****   {
 137              		.loc 2 1700 0
 138 0032 0028     		cmp	r0, #0
 139 0034 0BDB     		blt	.L10
1706:CORE/core_cm4.h ****   }
 140              		.loc 2 1706 0
 141 0036 0901     		lsls	r1, r1, #4
 142 0038 C9B2     		uxtb	r1, r1
 143 003a 00F16040 		add	r0, r0, #-536870912
 144              	.LVL17:
 145 003e 00F56140 		add	r0, r0, #57600
 146 0042 80F80013 		strb	r1, [r0, #768]
 147              	.LVL18:
 148              	.L4:
 149              	.LBE52:
 150              	.LBE51:
 167:HALLIB/Src/stm32f4xx_hal_cortex.c ****   uint32_t prioritygroup = 0x00U;
 168:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 169:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 170:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 171:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 172:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 173:HALLIB/Src/stm32f4xx_hal_cortex.c ****   prioritygroup = NVIC_GetPriorityGrouping();
 174:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 175:HALLIB/Src/stm32f4xx_hal_cortex.c ****   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 176:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 151              		.loc 1 176 0
 152 0046 30BC     		pop	{r4, r5}
 153              	.LCFI1:
 154              		.cfi_remember_state
 155              		.cfi_restore 5
 156              		.cfi_restore 4
 157              		.cfi_def_cfa_offset 0
 158 0048 7047     		bx	lr
 159              	.LVL19:
 160              	.L8:
 161              	.LCFI2:
 162              		.cfi_restore_state
 163              	.LBB54:
 164              	.LBB50:
1752:CORE/core_cm4.h **** 
 165              		.loc 2 1752 0
 166 004a 0023     		movs	r3, #0
 167              	.LVL20:
 168 004c E6E7     		b	.L5
 169              	.LVL21:
 170              	.L10:
 171              	.LBE50:
 172              	.LBE54:
 173              	.LBB55:
 174              	.LBB53:
ARM GAS  /tmp/cc3kNpfC.s 			page 38


1702:CORE/core_cm4.h ****   }
 175              		.loc 2 1702 0
 176 004e 00F00F00 		and	r0, r0, #15
 177              	.LVL22:
 178 0052 0901     		lsls	r1, r1, #4
 179 0054 C9B2     		uxtb	r1, r1
 180 0056 024B     		ldr	r3, .L11+4
 181 0058 1954     		strb	r1, [r3, r0]
 182 005a F4E7     		b	.L4
 183              	.L12:
 184              		.align	2
 185              	.L11:
 186 005c 00ED00E0 		.word	-536810240
 187 0060 14ED00E0 		.word	-536810220
 188              	.LBE53:
 189              	.LBE55:
 190              		.cfi_endproc
 191              	.LFE120:
 193              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 194              		.align	1
 195              		.global	HAL_NVIC_EnableIRQ
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu fpv4-sp-d16
 201              	HAL_NVIC_EnableIRQ:
 202              	.LFB121:
 177:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 178:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 179:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
 180:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 181:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         function should be called before. 
 182:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 183:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 184:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 185:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 186:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 187:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 188:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 203              		.loc 1 188 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208              	.LVL23:
 209              	.LBB56:
 210              	.LBB57:
1628:CORE/core_cm4.h **** }
 211              		.loc 2 1628 0
 212 0000 4209     		lsrs	r2, r0, #5
 213 0002 00F01F00 		and	r0, r0, #31
 214              	.LVL24:
 215 0006 0123     		movs	r3, #1
 216 0008 03FA00F0 		lsl	r0, r3, r0
 217 000c 014B     		ldr	r3, .L14
 218 000e 43F82200 		str	r0, [r3, r2, lsl #2]
 219              	.LVL25:
ARM GAS  /tmp/cc3kNpfC.s 			page 39


 220 0012 7047     		bx	lr
 221              	.L15:
 222              		.align	2
 223              	.L14:
 224 0014 00E100E0 		.word	-536813312
 225              	.LBE57:
 226              	.LBE56:
 227              		.cfi_endproc
 228              	.LFE121:
 230              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 231              		.align	1
 232              		.global	HAL_NVIC_DisableIRQ
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu fpv4-sp-d16
 238              	HAL_NVIC_DisableIRQ:
 239              	.LFB122:
 189:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 190:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 191:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 192:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Enable interrupt */
 193:HALLIB/Src/stm32f4xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 194:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 195:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 196:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 197:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
 198:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 199:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 200:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 201:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 202:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 203:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 204:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 240              		.loc 1 204 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              	.LVL26:
 246              	.LBB58:
 247              	.LBB59:
1639:CORE/core_cm4.h **** }
 248              		.loc 2 1639 0
 249 0000 4309     		lsrs	r3, r0, #5
 250 0002 00F01F00 		and	r0, r0, #31
 251              	.LVL27:
 252 0006 0122     		movs	r2, #1
 253 0008 02FA00F0 		lsl	r0, r2, r0
 254 000c 2033     		adds	r3, r3, #32
 255 000e 024A     		ldr	r2, .L17
 256 0010 42F82300 		str	r0, [r2, r3, lsl #2]
 257              	.LVL28:
 258 0014 7047     		bx	lr
 259              	.L18:
 260 0016 00BF     		.align	2
 261              	.L17:
ARM GAS  /tmp/cc3kNpfC.s 			page 40


 262 0018 00E100E0 		.word	-536813312
 263              	.LBE59:
 264              	.LBE58:
 265              		.cfi_endproc
 266              	.LFE122:
 268              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 269              		.align	1
 270              		.global	HAL_NVIC_SystemReset
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu fpv4-sp-d16
 276              	HAL_NVIC_SystemReset:
 277              	.LFB123:
 205:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 206:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 207:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 208:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Disable interrupt */
 209:HALLIB/Src/stm32f4xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 210:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 211:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 212:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 213:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Initiates a system reset request to reset the MCU.
 214:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 215:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 216:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 217:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 278              		.loc 1 217 0
 279              		.cfi_startproc
 280              		@ Volatile: function does not return.
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 284              	.LBB66:
 285              	.LBB67:
 286              	.LBB68:
 287              	.LBB69:
 288              		.file 3 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:CORE/cmsis_gcc.h ****  * @version  V5.0.4
   5:CORE/cmsis_gcc.h ****  * @date     09. April 2018
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /*
   8:CORE/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:CORE/cmsis_gcc.h ****  *
  10:CORE/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:CORE/cmsis_gcc.h ****  *
  12:CORE/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:CORE/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:CORE/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:CORE/cmsis_gcc.h ****  *
  16:CORE/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:CORE/cmsis_gcc.h ****  *
  18:CORE/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:CORE/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /tmp/cc3kNpfC.s 			page 41


  20:CORE/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:CORE/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:CORE/cmsis_gcc.h ****  * limitations under the License.
  23:CORE/cmsis_gcc.h ****  */
  24:CORE/cmsis_gcc.h **** 
  25:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:CORE/cmsis_gcc.h **** 
  28:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:CORE/cmsis_gcc.h **** #ifndef __has_builtin
  36:CORE/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:CORE/cmsis_gcc.h **** #endif
  38:CORE/cmsis_gcc.h **** 
  39:CORE/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:CORE/cmsis_gcc.h **** #ifndef   __ASM
  41:CORE/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:CORE/cmsis_gcc.h **** #endif
  43:CORE/cmsis_gcc.h **** #ifndef   __INLINE
  44:CORE/cmsis_gcc.h ****   #define __INLINE                               inline
  45:CORE/cmsis_gcc.h **** #endif
  46:CORE/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:CORE/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:CORE/cmsis_gcc.h **** #endif
  49:CORE/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:CORE/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:CORE/cmsis_gcc.h **** #endif                                           
  52:CORE/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:CORE/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:CORE/cmsis_gcc.h **** #endif
  55:CORE/cmsis_gcc.h **** #ifndef   __USED
  56:CORE/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:CORE/cmsis_gcc.h **** #endif
  58:CORE/cmsis_gcc.h **** #ifndef   __WEAK
  59:CORE/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:CORE/cmsis_gcc.h **** #endif
  61:CORE/cmsis_gcc.h **** #ifndef   __PACKED
  62:CORE/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:CORE/cmsis_gcc.h **** #endif
  64:CORE/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:CORE/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:CORE/cmsis_gcc.h **** #endif
  67:CORE/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:CORE/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:CORE/cmsis_gcc.h **** #endif
  70:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:CORE/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  /tmp/cc3kNpfC.s 			page 42


  77:CORE/cmsis_gcc.h **** #endif
  78:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:CORE/cmsis_gcc.h **** #endif
  86:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:CORE/cmsis_gcc.h **** #endif
  94:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:CORE/cmsis_gcc.h **** #endif
 102:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:CORE/cmsis_gcc.h **** #endif
 110:CORE/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:CORE/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:CORE/cmsis_gcc.h **** #endif
 113:CORE/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:CORE/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:CORE/cmsis_gcc.h **** #endif
 116:CORE/cmsis_gcc.h **** 
 117:CORE/cmsis_gcc.h **** 
 118:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:CORE/cmsis_gcc.h ****   @{
 122:CORE/cmsis_gcc.h ****  */
 123:CORE/cmsis_gcc.h **** 
 124:CORE/cmsis_gcc.h **** /**
 125:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:CORE/cmsis_gcc.h ****  */
 129:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:CORE/cmsis_gcc.h **** {
 131:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:CORE/cmsis_gcc.h **** }
 133:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 43


 134:CORE/cmsis_gcc.h **** 
 135:CORE/cmsis_gcc.h **** /**
 136:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:CORE/cmsis_gcc.h ****  */
 140:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:CORE/cmsis_gcc.h **** {
 142:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:CORE/cmsis_gcc.h **** }
 144:CORE/cmsis_gcc.h **** 
 145:CORE/cmsis_gcc.h **** 
 146:CORE/cmsis_gcc.h **** /**
 147:CORE/cmsis_gcc.h ****   \brief   Get Control Register
 148:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:CORE/cmsis_gcc.h ****   \return               Control Register value
 150:CORE/cmsis_gcc.h ****  */
 151:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:CORE/cmsis_gcc.h **** {
 153:CORE/cmsis_gcc.h ****   uint32_t result;
 154:CORE/cmsis_gcc.h **** 
 155:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:CORE/cmsis_gcc.h ****   return(result);
 157:CORE/cmsis_gcc.h **** }
 158:CORE/cmsis_gcc.h **** 
 159:CORE/cmsis_gcc.h **** 
 160:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:CORE/cmsis_gcc.h **** /**
 162:CORE/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:CORE/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:CORE/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:CORE/cmsis_gcc.h ****  */
 166:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:CORE/cmsis_gcc.h **** {
 168:CORE/cmsis_gcc.h ****   uint32_t result;
 169:CORE/cmsis_gcc.h **** 
 170:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:CORE/cmsis_gcc.h ****   return(result);
 172:CORE/cmsis_gcc.h **** }
 173:CORE/cmsis_gcc.h **** #endif
 174:CORE/cmsis_gcc.h **** 
 175:CORE/cmsis_gcc.h **** 
 176:CORE/cmsis_gcc.h **** /**
 177:CORE/cmsis_gcc.h ****   \brief   Set Control Register
 178:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:CORE/cmsis_gcc.h ****  */
 181:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:CORE/cmsis_gcc.h **** {
 183:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:CORE/cmsis_gcc.h **** }
 185:CORE/cmsis_gcc.h **** 
 186:CORE/cmsis_gcc.h **** 
 187:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:CORE/cmsis_gcc.h **** /**
 189:CORE/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:CORE/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
ARM GAS  /tmp/cc3kNpfC.s 			page 44


 191:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:CORE/cmsis_gcc.h ****  */
 193:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:CORE/cmsis_gcc.h **** {
 195:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:CORE/cmsis_gcc.h **** }
 197:CORE/cmsis_gcc.h **** #endif
 198:CORE/cmsis_gcc.h **** 
 199:CORE/cmsis_gcc.h **** 
 200:CORE/cmsis_gcc.h **** /**
 201:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 204:CORE/cmsis_gcc.h ****  */
 205:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:CORE/cmsis_gcc.h **** {
 207:CORE/cmsis_gcc.h ****   uint32_t result;
 208:CORE/cmsis_gcc.h **** 
 209:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:CORE/cmsis_gcc.h ****   return(result);
 211:CORE/cmsis_gcc.h **** }
 212:CORE/cmsis_gcc.h **** 
 213:CORE/cmsis_gcc.h **** 
 214:CORE/cmsis_gcc.h **** /**
 215:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 216:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:CORE/cmsis_gcc.h ****   \return               APSR Register value
 218:CORE/cmsis_gcc.h ****  */
 219:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:CORE/cmsis_gcc.h **** {
 221:CORE/cmsis_gcc.h ****   uint32_t result;
 222:CORE/cmsis_gcc.h **** 
 223:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:CORE/cmsis_gcc.h ****   return(result);
 225:CORE/cmsis_gcc.h **** }
 226:CORE/cmsis_gcc.h **** 
 227:CORE/cmsis_gcc.h **** 
 228:CORE/cmsis_gcc.h **** /**
 229:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:CORE/cmsis_gcc.h ****   \return               xPSR Register value
 232:CORE/cmsis_gcc.h ****  */
 233:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:CORE/cmsis_gcc.h **** {
 235:CORE/cmsis_gcc.h ****   uint32_t result;
 236:CORE/cmsis_gcc.h **** 
 237:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:CORE/cmsis_gcc.h ****   return(result);
 239:CORE/cmsis_gcc.h **** }
 240:CORE/cmsis_gcc.h **** 
 241:CORE/cmsis_gcc.h **** 
 242:CORE/cmsis_gcc.h **** /**
 243:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:CORE/cmsis_gcc.h ****   \return               PSP Register value
 246:CORE/cmsis_gcc.h ****  */
 247:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
ARM GAS  /tmp/cc3kNpfC.s 			page 45


 248:CORE/cmsis_gcc.h **** {
 249:CORE/cmsis_gcc.h ****   uint32_t result;
 250:CORE/cmsis_gcc.h **** 
 251:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:CORE/cmsis_gcc.h ****   return(result);
 253:CORE/cmsis_gcc.h **** }
 254:CORE/cmsis_gcc.h **** 
 255:CORE/cmsis_gcc.h **** 
 256:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:CORE/cmsis_gcc.h **** /**
 258:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:CORE/cmsis_gcc.h ****   \return               PSP Register value
 261:CORE/cmsis_gcc.h ****  */
 262:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:CORE/cmsis_gcc.h **** {
 264:CORE/cmsis_gcc.h ****   uint32_t result;
 265:CORE/cmsis_gcc.h **** 
 266:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:CORE/cmsis_gcc.h ****   return(result);
 268:CORE/cmsis_gcc.h **** }
 269:CORE/cmsis_gcc.h **** #endif
 270:CORE/cmsis_gcc.h **** 
 271:CORE/cmsis_gcc.h **** 
 272:CORE/cmsis_gcc.h **** /**
 273:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:CORE/cmsis_gcc.h ****  */
 277:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:CORE/cmsis_gcc.h **** {
 279:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:CORE/cmsis_gcc.h **** }
 281:CORE/cmsis_gcc.h **** 
 282:CORE/cmsis_gcc.h **** 
 283:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:CORE/cmsis_gcc.h **** /**
 285:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:CORE/cmsis_gcc.h ****  */
 289:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:CORE/cmsis_gcc.h **** {
 291:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:CORE/cmsis_gcc.h **** }
 293:CORE/cmsis_gcc.h **** #endif
 294:CORE/cmsis_gcc.h **** 
 295:CORE/cmsis_gcc.h **** 
 296:CORE/cmsis_gcc.h **** /**
 297:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:CORE/cmsis_gcc.h ****   \return               MSP Register value
 300:CORE/cmsis_gcc.h ****  */
 301:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:CORE/cmsis_gcc.h **** {
 303:CORE/cmsis_gcc.h ****   uint32_t result;
 304:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 46


 305:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:CORE/cmsis_gcc.h ****   return(result);
 307:CORE/cmsis_gcc.h **** }
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** 
 310:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:CORE/cmsis_gcc.h **** /**
 312:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:CORE/cmsis_gcc.h ****   \return               MSP Register value
 315:CORE/cmsis_gcc.h ****  */
 316:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:CORE/cmsis_gcc.h **** {
 318:CORE/cmsis_gcc.h ****   uint32_t result;
 319:CORE/cmsis_gcc.h **** 
 320:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:CORE/cmsis_gcc.h ****   return(result);
 322:CORE/cmsis_gcc.h **** }
 323:CORE/cmsis_gcc.h **** #endif
 324:CORE/cmsis_gcc.h **** 
 325:CORE/cmsis_gcc.h **** 
 326:CORE/cmsis_gcc.h **** /**
 327:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:CORE/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:CORE/cmsis_gcc.h ****  */
 331:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:CORE/cmsis_gcc.h **** {
 333:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:CORE/cmsis_gcc.h **** }
 335:CORE/cmsis_gcc.h **** 
 336:CORE/cmsis_gcc.h **** 
 337:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:CORE/cmsis_gcc.h **** /**
 339:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:CORE/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:CORE/cmsis_gcc.h ****  */
 343:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:CORE/cmsis_gcc.h **** {
 345:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:CORE/cmsis_gcc.h **** }
 347:CORE/cmsis_gcc.h **** #endif
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** 
 350:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:CORE/cmsis_gcc.h **** /**
 352:CORE/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:CORE/cmsis_gcc.h ****   \return               SP Register value
 355:CORE/cmsis_gcc.h ****  */
 356:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:CORE/cmsis_gcc.h **** {
 358:CORE/cmsis_gcc.h ****   uint32_t result;
 359:CORE/cmsis_gcc.h **** 
 360:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:CORE/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/cc3kNpfC.s 			page 47


 362:CORE/cmsis_gcc.h **** }
 363:CORE/cmsis_gcc.h **** 
 364:CORE/cmsis_gcc.h **** 
 365:CORE/cmsis_gcc.h **** /**
 366:CORE/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:CORE/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:CORE/cmsis_gcc.h ****  */
 370:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:CORE/cmsis_gcc.h **** {
 372:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:CORE/cmsis_gcc.h **** }
 374:CORE/cmsis_gcc.h **** #endif
 375:CORE/cmsis_gcc.h **** 
 376:CORE/cmsis_gcc.h **** 
 377:CORE/cmsis_gcc.h **** /**
 378:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 381:CORE/cmsis_gcc.h ****  */
 382:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:CORE/cmsis_gcc.h **** {
 384:CORE/cmsis_gcc.h ****   uint32_t result;
 385:CORE/cmsis_gcc.h **** 
 386:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:CORE/cmsis_gcc.h ****   return(result);
 388:CORE/cmsis_gcc.h **** }
 389:CORE/cmsis_gcc.h **** 
 390:CORE/cmsis_gcc.h **** 
 391:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:CORE/cmsis_gcc.h **** /**
 393:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:CORE/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 396:CORE/cmsis_gcc.h ****  */
 397:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:CORE/cmsis_gcc.h **** {
 399:CORE/cmsis_gcc.h ****   uint32_t result;
 400:CORE/cmsis_gcc.h **** 
 401:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:CORE/cmsis_gcc.h ****   return(result);
 403:CORE/cmsis_gcc.h **** }
 404:CORE/cmsis_gcc.h **** #endif
 405:CORE/cmsis_gcc.h **** 
 406:CORE/cmsis_gcc.h **** 
 407:CORE/cmsis_gcc.h **** /**
 408:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:CORE/cmsis_gcc.h ****  */
 412:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:CORE/cmsis_gcc.h **** {
 414:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:CORE/cmsis_gcc.h **** }
 416:CORE/cmsis_gcc.h **** 
 417:CORE/cmsis_gcc.h **** 
 418:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/cc3kNpfC.s 			page 48


 419:CORE/cmsis_gcc.h **** /**
 420:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:CORE/cmsis_gcc.h ****  */
 424:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:CORE/cmsis_gcc.h **** {
 426:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:CORE/cmsis_gcc.h **** }
 428:CORE/cmsis_gcc.h **** #endif
 429:CORE/cmsis_gcc.h **** 
 430:CORE/cmsis_gcc.h **** 
 431:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:CORE/cmsis_gcc.h **** /**
 435:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 436:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:CORE/cmsis_gcc.h ****  */
 439:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:CORE/cmsis_gcc.h **** {
 441:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:CORE/cmsis_gcc.h **** }
 443:CORE/cmsis_gcc.h **** 
 444:CORE/cmsis_gcc.h **** 
 445:CORE/cmsis_gcc.h **** /**
 446:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 447:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:CORE/cmsis_gcc.h ****  */
 450:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:CORE/cmsis_gcc.h **** {
 452:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:CORE/cmsis_gcc.h **** }
 454:CORE/cmsis_gcc.h **** 
 455:CORE/cmsis_gcc.h **** 
 456:CORE/cmsis_gcc.h **** /**
 457:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 458:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 460:CORE/cmsis_gcc.h ****  */
 461:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:CORE/cmsis_gcc.h **** {
 463:CORE/cmsis_gcc.h ****   uint32_t result;
 464:CORE/cmsis_gcc.h **** 
 465:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:CORE/cmsis_gcc.h ****   return(result);
 467:CORE/cmsis_gcc.h **** }
 468:CORE/cmsis_gcc.h **** 
 469:CORE/cmsis_gcc.h **** 
 470:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:CORE/cmsis_gcc.h **** /**
 472:CORE/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 475:CORE/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc3kNpfC.s 			page 49


 476:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:CORE/cmsis_gcc.h **** {
 478:CORE/cmsis_gcc.h ****   uint32_t result;
 479:CORE/cmsis_gcc.h **** 
 480:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:CORE/cmsis_gcc.h ****   return(result);
 482:CORE/cmsis_gcc.h **** }
 483:CORE/cmsis_gcc.h **** #endif
 484:CORE/cmsis_gcc.h **** 
 485:CORE/cmsis_gcc.h **** 
 486:CORE/cmsis_gcc.h **** /**
 487:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 488:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:CORE/cmsis_gcc.h ****  */
 491:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:CORE/cmsis_gcc.h **** {
 493:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:CORE/cmsis_gcc.h **** }
 495:CORE/cmsis_gcc.h **** 
 496:CORE/cmsis_gcc.h **** 
 497:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:CORE/cmsis_gcc.h **** /**
 499:CORE/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:CORE/cmsis_gcc.h ****  */
 503:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:CORE/cmsis_gcc.h **** {
 505:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:CORE/cmsis_gcc.h **** }
 507:CORE/cmsis_gcc.h **** #endif
 508:CORE/cmsis_gcc.h **** 
 509:CORE/cmsis_gcc.h **** 
 510:CORE/cmsis_gcc.h **** /**
 511:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:CORE/cmsis_gcc.h ****  */
 516:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:CORE/cmsis_gcc.h **** {
 518:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:CORE/cmsis_gcc.h **** }
 520:CORE/cmsis_gcc.h **** 
 521:CORE/cmsis_gcc.h **** 
 522:CORE/cmsis_gcc.h **** /**
 523:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 526:CORE/cmsis_gcc.h ****  */
 527:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:CORE/cmsis_gcc.h **** {
 529:CORE/cmsis_gcc.h ****   uint32_t result;
 530:CORE/cmsis_gcc.h **** 
 531:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:CORE/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/cc3kNpfC.s 			page 50


 533:CORE/cmsis_gcc.h **** }
 534:CORE/cmsis_gcc.h **** 
 535:CORE/cmsis_gcc.h **** 
 536:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:CORE/cmsis_gcc.h **** /**
 538:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 541:CORE/cmsis_gcc.h ****  */
 542:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:CORE/cmsis_gcc.h **** {
 544:CORE/cmsis_gcc.h ****   uint32_t result;
 545:CORE/cmsis_gcc.h **** 
 546:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:CORE/cmsis_gcc.h ****   return(result);
 548:CORE/cmsis_gcc.h **** }
 549:CORE/cmsis_gcc.h **** #endif
 550:CORE/cmsis_gcc.h **** 
 551:CORE/cmsis_gcc.h **** 
 552:CORE/cmsis_gcc.h **** /**
 553:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:CORE/cmsis_gcc.h ****  */
 557:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:CORE/cmsis_gcc.h **** {
 559:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:CORE/cmsis_gcc.h **** }
 561:CORE/cmsis_gcc.h **** 
 562:CORE/cmsis_gcc.h **** 
 563:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:CORE/cmsis_gcc.h **** /**
 565:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:CORE/cmsis_gcc.h ****  */
 569:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:CORE/cmsis_gcc.h **** {
 571:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:CORE/cmsis_gcc.h **** }
 573:CORE/cmsis_gcc.h **** #endif
 574:CORE/cmsis_gcc.h **** 
 575:CORE/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:CORE/cmsis_gcc.h **** 
 579:CORE/cmsis_gcc.h **** 
 580:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:CORE/cmsis_gcc.h **** 
 583:CORE/cmsis_gcc.h **** /**
 584:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:CORE/cmsis_gcc.h ****   mode.
 588:CORE/cmsis_gcc.h ****   
 589:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
ARM GAS  /tmp/cc3kNpfC.s 			page 51


 590:CORE/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:CORE/cmsis_gcc.h ****  */
 592:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:CORE/cmsis_gcc.h **** {
 594:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:CORE/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:CORE/cmsis_gcc.h ****   return 0U;
 598:CORE/cmsis_gcc.h **** #else
 599:CORE/cmsis_gcc.h ****   uint32_t result;
 600:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:CORE/cmsis_gcc.h ****   return result;
 602:CORE/cmsis_gcc.h **** #endif
 603:CORE/cmsis_gcc.h **** }
 604:CORE/cmsis_gcc.h **** 
 605:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:CORE/cmsis_gcc.h **** /**
 607:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:CORE/cmsis_gcc.h **** 
 611:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:CORE/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:CORE/cmsis_gcc.h ****  */
 614:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:CORE/cmsis_gcc.h **** {
 616:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:CORE/cmsis_gcc.h ****   return 0U;
 619:CORE/cmsis_gcc.h **** #else
 620:CORE/cmsis_gcc.h ****   uint32_t result;
 621:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:CORE/cmsis_gcc.h ****   return result;
 623:CORE/cmsis_gcc.h **** #endif
 624:CORE/cmsis_gcc.h **** }
 625:CORE/cmsis_gcc.h **** #endif
 626:CORE/cmsis_gcc.h **** 
 627:CORE/cmsis_gcc.h **** 
 628:CORE/cmsis_gcc.h **** /**
 629:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:CORE/cmsis_gcc.h ****   mode.
 633:CORE/cmsis_gcc.h ****   
 634:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:CORE/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:CORE/cmsis_gcc.h ****  */
 637:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:CORE/cmsis_gcc.h **** {
 639:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:CORE/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:CORE/cmsis_gcc.h **** #else
 644:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:CORE/cmsis_gcc.h **** #endif
 646:CORE/cmsis_gcc.h **** }
ARM GAS  /tmp/cc3kNpfC.s 			page 52


 647:CORE/cmsis_gcc.h **** 
 648:CORE/cmsis_gcc.h **** 
 649:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:CORE/cmsis_gcc.h **** /**
 651:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:CORE/cmsis_gcc.h **** 
 655:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:CORE/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:CORE/cmsis_gcc.h ****  */
 658:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:CORE/cmsis_gcc.h **** {
 660:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:CORE/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:CORE/cmsis_gcc.h **** #else
 664:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:CORE/cmsis_gcc.h **** #endif
 666:CORE/cmsis_gcc.h **** }
 667:CORE/cmsis_gcc.h **** #endif
 668:CORE/cmsis_gcc.h **** 
 669:CORE/cmsis_gcc.h **** 
 670:CORE/cmsis_gcc.h **** /**
 671:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:CORE/cmsis_gcc.h ****   mode.
 675:CORE/cmsis_gcc.h **** 
 676:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:CORE/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:CORE/cmsis_gcc.h ****  */
 679:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:CORE/cmsis_gcc.h **** {
 681:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:CORE/cmsis_gcc.h ****   return 0U;
 685:CORE/cmsis_gcc.h **** #else
 686:CORE/cmsis_gcc.h ****   uint32_t result;
 687:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:CORE/cmsis_gcc.h ****   return result;
 689:CORE/cmsis_gcc.h **** #endif
 690:CORE/cmsis_gcc.h **** }
 691:CORE/cmsis_gcc.h **** 
 692:CORE/cmsis_gcc.h **** 
 693:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:CORE/cmsis_gcc.h **** /**
 695:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:CORE/cmsis_gcc.h **** 
 699:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:CORE/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:CORE/cmsis_gcc.h ****  */
 702:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:CORE/cmsis_gcc.h **** {
ARM GAS  /tmp/cc3kNpfC.s 			page 53


 704:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:CORE/cmsis_gcc.h ****   return 0U;
 707:CORE/cmsis_gcc.h **** #else
 708:CORE/cmsis_gcc.h ****   uint32_t result;
 709:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:CORE/cmsis_gcc.h ****   return result;
 711:CORE/cmsis_gcc.h **** #endif
 712:CORE/cmsis_gcc.h **** }
 713:CORE/cmsis_gcc.h **** #endif
 714:CORE/cmsis_gcc.h **** 
 715:CORE/cmsis_gcc.h **** 
 716:CORE/cmsis_gcc.h **** /**
 717:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:CORE/cmsis_gcc.h ****   mode.
 721:CORE/cmsis_gcc.h **** 
 722:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:CORE/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:CORE/cmsis_gcc.h ****  */
 725:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:CORE/cmsis_gcc.h **** {
 727:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:CORE/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:CORE/cmsis_gcc.h **** #else
 732:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:CORE/cmsis_gcc.h **** #endif
 734:CORE/cmsis_gcc.h **** }
 735:CORE/cmsis_gcc.h **** 
 736:CORE/cmsis_gcc.h **** 
 737:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:CORE/cmsis_gcc.h **** /**
 739:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:CORE/cmsis_gcc.h **** 
 743:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:CORE/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:CORE/cmsis_gcc.h ****  */
 746:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:CORE/cmsis_gcc.h **** {
 748:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:CORE/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:CORE/cmsis_gcc.h **** #else
 752:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:CORE/cmsis_gcc.h **** #endif
 754:CORE/cmsis_gcc.h **** }
 755:CORE/cmsis_gcc.h **** #endif
 756:CORE/cmsis_gcc.h **** 
 757:CORE/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:CORE/cmsis_gcc.h **** 
 760:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/cc3kNpfC.s 			page 54


 761:CORE/cmsis_gcc.h **** /**
 762:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 763:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:CORE/cmsis_gcc.h ****  */
 766:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:CORE/cmsis_gcc.h **** {
 768:CORE/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:CORE/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:CORE/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:CORE/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:CORE/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:CORE/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:CORE/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:CORE/cmsis_gcc.h **** #else
 776:CORE/cmsis_gcc.h ****   uint32_t result;
 777:CORE/cmsis_gcc.h **** 
 778:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:CORE/cmsis_gcc.h ****   return(result);
 780:CORE/cmsis_gcc.h **** #endif
 781:CORE/cmsis_gcc.h **** #else
 782:CORE/cmsis_gcc.h ****   return(0U);
 783:CORE/cmsis_gcc.h **** #endif
 784:CORE/cmsis_gcc.h **** }
 785:CORE/cmsis_gcc.h **** 
 786:CORE/cmsis_gcc.h **** 
 787:CORE/cmsis_gcc.h **** /**
 788:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 789:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:CORE/cmsis_gcc.h ****  */
 792:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:CORE/cmsis_gcc.h **** {
 794:CORE/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:CORE/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:CORE/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:CORE/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:CORE/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:CORE/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:CORE/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:CORE/cmsis_gcc.h **** #else
 802:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:CORE/cmsis_gcc.h **** #endif
 804:CORE/cmsis_gcc.h **** #else
 805:CORE/cmsis_gcc.h ****   (void)fpscr;
 806:CORE/cmsis_gcc.h **** #endif
 807:CORE/cmsis_gcc.h **** }
 808:CORE/cmsis_gcc.h **** 
 809:CORE/cmsis_gcc.h **** 
 810:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:CORE/cmsis_gcc.h **** 
 812:CORE/cmsis_gcc.h **** 
 813:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 816:CORE/cmsis_gcc.h ****   @{
 817:CORE/cmsis_gcc.h **** */
ARM GAS  /tmp/cc3kNpfC.s 			page 55


 818:CORE/cmsis_gcc.h **** 
 819:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:CORE/cmsis_gcc.h **** #else
 827:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:CORE/cmsis_gcc.h **** #endif
 831:CORE/cmsis_gcc.h **** 
 832:CORE/cmsis_gcc.h **** /**
 833:CORE/cmsis_gcc.h ****   \brief   No Operation
 834:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:CORE/cmsis_gcc.h ****  */
 836:CORE/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:CORE/cmsis_gcc.h **** 
 838:CORE/cmsis_gcc.h **** /**
 839:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:CORE/cmsis_gcc.h ****  */
 842:CORE/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:CORE/cmsis_gcc.h **** 
 844:CORE/cmsis_gcc.h **** 
 845:CORE/cmsis_gcc.h **** /**
 846:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 847:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:CORE/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:CORE/cmsis_gcc.h ****  */
 850:CORE/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:CORE/cmsis_gcc.h **** 
 852:CORE/cmsis_gcc.h **** 
 853:CORE/cmsis_gcc.h **** /**
 854:CORE/cmsis_gcc.h ****   \brief   Send Event
 855:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:CORE/cmsis_gcc.h ****  */
 857:CORE/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:CORE/cmsis_gcc.h **** 
 859:CORE/cmsis_gcc.h **** 
 860:CORE/cmsis_gcc.h **** /**
 861:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 865:CORE/cmsis_gcc.h ****  */
 866:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:CORE/cmsis_gcc.h **** {
 868:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:CORE/cmsis_gcc.h **** }
 870:CORE/cmsis_gcc.h **** 
 871:CORE/cmsis_gcc.h **** 
 872:CORE/cmsis_gcc.h **** /**
 873:CORE/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:CORE/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  /tmp/cc3kNpfC.s 			page 56


 875:CORE/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:CORE/cmsis_gcc.h ****  */
 877:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:CORE/cmsis_gcc.h **** {
 879:CORE/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 289              		.loc 3 879 0
 290              		.syntax unified
 291              	@ 879 "CORE/cmsis_gcc.h" 1
 292 0000 BFF34F8F 		dsb 0xF
 293              	@ 0 "" 2
 294              		.thumb
 295              		.syntax unified
 296              	.LBE69:
 297              	.LBE68:
1757:CORE/core_cm4.h ****          );
1758:CORE/core_cm4.h **** }
1759:CORE/core_cm4.h **** 
1760:CORE/core_cm4.h **** 
1761:CORE/core_cm4.h **** /**
1762:CORE/core_cm4.h ****   \brief   Decode Priority
1763:CORE/core_cm4.h ****   \details Decodes an interrupt priority value with a given priority group to
1764:CORE/core_cm4.h ****            preemptive priority value and subpriority value.
1765:CORE/core_cm4.h ****            In case of a conflict between priority grouping and available
1766:CORE/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1767:CORE/core_cm4.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1768:CORE/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1769:CORE/core_cm4.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1770:CORE/core_cm4.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1771:CORE/core_cm4.h ****  */
1772:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1773:CORE/core_cm4.h **** {
1774:CORE/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1775:CORE/core_cm4.h ****   uint32_t PreemptPriorityBits;
1776:CORE/core_cm4.h ****   uint32_t SubPriorityBits;
1777:CORE/core_cm4.h **** 
1778:CORE/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1779:CORE/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1780:CORE/core_cm4.h **** 
1781:CORE/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1782:CORE/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1783:CORE/core_cm4.h **** }
1784:CORE/core_cm4.h **** 
1785:CORE/core_cm4.h **** 
1786:CORE/core_cm4.h **** /**
1787:CORE/core_cm4.h ****   \brief   System Reset
1788:CORE/core_cm4.h ****   \details Initiates a system reset request to reset the MCU.
1789:CORE/core_cm4.h ****  */
1790:CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1791:CORE/core_cm4.h **** {
1792:CORE/core_cm4.h ****   __DSB();                                                          /* Ensure all outstanding memor
1793:CORE/core_cm4.h ****                                                                        buffered write are completed
1794:CORE/core_cm4.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1795:CORE/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 298              		.loc 2 1795 0
 299 0004 0549     		ldr	r1, .L21
 300 0006 CA68     		ldr	r2, [r1, #12]
 301 0008 02F4E062 		and	r2, r2, #1792
ARM GAS  /tmp/cc3kNpfC.s 			page 57


1794:CORE/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 302              		.loc 2 1794 0
 303 000c 044B     		ldr	r3, .L21+4
 304 000e 1343     		orrs	r3, r3, r2
 305 0010 CB60     		str	r3, [r1, #12]
 306              	.LBB70:
 307              	.LBB71:
 308              		.loc 3 879 0
 309              		.syntax unified
 310              	@ 879 "CORE/cmsis_gcc.h" 1
 311 0012 BFF34F8F 		dsb 0xF
 312              	@ 0 "" 2
 313              		.thumb
 314              		.syntax unified
 315              	.L20:
 316              	.LBE71:
 317              	.LBE70:
1796:CORE/core_cm4.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1797:CORE/core_cm4.h ****   __DSB();                                                          /* Ensure completion of memory 
1798:CORE/core_cm4.h **** 
1799:CORE/core_cm4.h ****   for(;;)                                                           /* wait until reset */
1800:CORE/core_cm4.h ****   {
1801:CORE/core_cm4.h ****     __NOP();
 318              		.loc 2 1801 0
 319              		.syntax unified
 320              	@ 1801 "CORE/core_cm4.h" 1
 321 0016 00BF     		nop
 322              	@ 0 "" 2
 323              		.thumb
 324              		.syntax unified
 325 0018 FDE7     		b	.L20
 326              	.L22:
 327 001a 00BF     		.align	2
 328              	.L21:
 329 001c 00ED00E0 		.word	-536810240
 330 0020 0400FA05 		.word	100270084
 331              	.LBE67:
 332              	.LBE66:
 333              		.cfi_endproc
 334              	.LFE123:
 336              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 337              		.align	1
 338              		.global	HAL_SYSTICK_Config
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu fpv4-sp-d16
 344              	HAL_SYSTICK_Config:
 345              	.LFB124:
 218:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* System Reset */
 219:HALLIB/Src/stm32f4xx_hal_cortex.c ****   NVIC_SystemReset();
 220:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 221:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 222:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 223:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 224:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 225:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
ARM GAS  /tmp/cc3kNpfC.s 			page 58


 226:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 227:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                  - 1  Function failed.
 228:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 229:HALLIB/Src/stm32f4xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 230:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 346              		.loc 1 230 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              		@ link register save eliminated.
 351              	.LVL29:
 352              	.LBB72:
 353              	.LBB73:
1802:CORE/core_cm4.h ****   }
1803:CORE/core_cm4.h **** }
1804:CORE/core_cm4.h **** 
1805:CORE/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1806:CORE/core_cm4.h **** 
1807:CORE/core_cm4.h **** 
1808:CORE/core_cm4.h **** 
1809:CORE/core_cm4.h **** /* ##################################    SysTick function  ########################################
1810:CORE/core_cm4.h **** /**
1811:CORE/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1812:CORE/core_cm4.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1813:CORE/core_cm4.h ****   \brief    Functions that configure the System.
1814:CORE/core_cm4.h ****   @{
1815:CORE/core_cm4.h ****  */
1816:CORE/core_cm4.h **** 
1817:CORE/core_cm4.h **** #if (__Vendor_SysTickConfig == 0U)
1818:CORE/core_cm4.h **** 
1819:CORE/core_cm4.h **** /**
1820:CORE/core_cm4.h ****   \brief   System Tick Configuration
1821:CORE/core_cm4.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1822:CORE/core_cm4.h ****            Counter is in free running mode to generate periodic interrupts.
1823:CORE/core_cm4.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1824:CORE/core_cm4.h ****   \return          0  Function succeeded.
1825:CORE/core_cm4.h ****   \return          1  Function failed.
1826:CORE/core_cm4.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1827:CORE/core_cm4.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1828:CORE/core_cm4.h ****            must contain a vendor-specific implementation of this function.
1829:CORE/core_cm4.h ****  */
1830:CORE/core_cm4.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1831:CORE/core_cm4.h **** {
1832:CORE/core_cm4.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 354              		.loc 2 1832 0
 355 0000 0138     		subs	r0, r0, #1
 356              	.LVL30:
 357 0002 B0F1807F 		cmp	r0, #16777216
 358 0006 0AD2     		bcs	.L25
1833:CORE/core_cm4.h ****   {
1834:CORE/core_cm4.h ****     return (1UL);                                                   /* Reload value impossible */
1835:CORE/core_cm4.h ****   }
1836:CORE/core_cm4.h **** 
1837:CORE/core_cm4.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 359              		.loc 2 1837 0
 360 0008 064B     		ldr	r3, .L26
 361 000a 5860     		str	r0, [r3, #4]
ARM GAS  /tmp/cc3kNpfC.s 			page 59


 362              	.LVL31:
 363              	.LBB74:
 364              	.LBB75:
1702:CORE/core_cm4.h ****   }
 365              		.loc 2 1702 0
 366 000c F021     		movs	r1, #240
 367 000e 064A     		ldr	r2, .L26+4
 368 0010 82F82310 		strb	r1, [r2, #35]
 369              	.LVL32:
 370              	.LBE75:
 371              	.LBE74:
1838:CORE/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
1839:CORE/core_cm4.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 372              		.loc 2 1839 0
 373 0014 0020     		movs	r0, #0
 374              	.LVL33:
 375 0016 9860     		str	r0, [r3, #8]
1840:CORE/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 376              		.loc 2 1840 0
 377 0018 0722     		movs	r2, #7
 378 001a 1A60     		str	r2, [r3]
 379 001c 7047     		bx	lr
 380              	.L25:
1834:CORE/core_cm4.h ****   }
 381              		.loc 2 1834 0
 382 001e 0120     		movs	r0, #1
 383              	.LVL34:
 384              	.LBE73:
 385              	.LBE72:
 231:HALLIB/Src/stm32f4xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 232:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 386              		.loc 1 232 0
 387 0020 7047     		bx	lr
 388              	.L27:
 389 0022 00BF     		.align	2
 390              	.L26:
 391 0024 10E000E0 		.word	-536813552
 392 0028 00ED00E0 		.word	-536810240
 393              		.cfi_endproc
 394              	.LFE124:
 396              		.section	.text.HAL_MPU_Disable,"ax",%progbits
 397              		.align	1
 398              		.global	HAL_MPU_Disable
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 402              		.fpu fpv4-sp-d16
 404              	HAL_MPU_Disable:
 405              	.LFB125:
 233:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 234:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @}
 235:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 236:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 237:HALLIB/Src/stm32f4xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
 238:HALLIB/Src/stm32f4xx_hal_cortex.c ****  *  @brief   Cortex control functions 
 239:HALLIB/Src/stm32f4xx_hal_cortex.c ****  *
 240:HALLIB/Src/stm32f4xx_hal_cortex.c **** @verbatim   
ARM GAS  /tmp/cc3kNpfC.s 			page 60


 241:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ==============================================================================
 242:HALLIB/Src/stm32f4xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 243:HALLIB/Src/stm32f4xx_hal_cortex.c ****   ==============================================================================  
 244:HALLIB/Src/stm32f4xx_hal_cortex.c ****     [..]
 245:HALLIB/Src/stm32f4xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 246:HALLIB/Src/stm32f4xx_hal_cortex.c ****       (NVIC, SYSTICK, MPU) functionalities. 
 247:HALLIB/Src/stm32f4xx_hal_cortex.c ****  
 248:HALLIB/Src/stm32f4xx_hal_cortex.c ****       
 249:HALLIB/Src/stm32f4xx_hal_cortex.c **** @endverbatim
 250:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @{
 251:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 252:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 253:HALLIB/Src/stm32f4xx_hal_cortex.c **** #if (__MPU_PRESENT == 1U)
 254:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 255:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Disables the MPU
 256:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 257:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 258:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_MPU_Disable(void)
 259:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 406              		.loc 1 259 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 411              	.LBB76:
 412              	.LBB77:
 880:CORE/cmsis_gcc.h **** }
 881:CORE/cmsis_gcc.h **** 
 882:CORE/cmsis_gcc.h **** 
 883:CORE/cmsis_gcc.h **** /**
 884:CORE/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:CORE/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:CORE/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:CORE/cmsis_gcc.h ****  */
 888:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:CORE/cmsis_gcc.h **** {
 890:CORE/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 413              		.loc 3 890 0
 414              		.syntax unified
 415              	@ 890 "CORE/cmsis_gcc.h" 1
 416 0000 BFF35F8F 		dmb 0xF
 417              	@ 0 "" 2
 418              		.thumb
 419              		.syntax unified
 420              	.LBE77:
 421              	.LBE76:
 260:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Make sure outstanding transfers are done */
 261:HALLIB/Src/stm32f4xx_hal_cortex.c ****   __DMB();
 262:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 263:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Disable fault exceptions */
 264:HALLIB/Src/stm32f4xx_hal_cortex.c ****   SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 422              		.loc 1 264 0
 423 0004 044A     		ldr	r2, .L29
 424 0006 536A     		ldr	r3, [r2, #36]
 425 0008 23F48033 		bic	r3, r3, #65536
 426 000c 5362     		str	r3, [r2, #36]
 265:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
ARM GAS  /tmp/cc3kNpfC.s 			page 61


 266:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Disable the MPU and clear the control register*/
 267:HALLIB/Src/stm32f4xx_hal_cortex.c ****   MPU->CTRL = 0U;
 427              		.loc 1 267 0
 428 000e 0022     		movs	r2, #0
 429 0010 024B     		ldr	r3, .L29+4
 430 0012 5A60     		str	r2, [r3, #4]
 431 0014 7047     		bx	lr
 432              	.L30:
 433 0016 00BF     		.align	2
 434              	.L29:
 435 0018 00ED00E0 		.word	-536810240
 436 001c 90ED00E0 		.word	-536810096
 437              		.cfi_endproc
 438              	.LFE125:
 440              		.section	.text.HAL_MPU_Enable,"ax",%progbits
 441              		.align	1
 442              		.global	HAL_MPU_Enable
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu fpv4-sp-d16
 448              	HAL_MPU_Enable:
 449              	.LFB126:
 268:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 269:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 270:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 271:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Enable the MPU.
 272:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  MPU_Control Specifies the control mode of the MPU during hard fault, 
 273:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *          NMI, FAULTMASK and privileged access to the default memory 
 274:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 275:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF_NONE
 276:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *            @arg MPU_HARDFAULT_NMI
 277:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *            @arg MPU_PRIVILEGED_DEFAULT
 278:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF
 279:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 280:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 281:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_MPU_Enable(uint32_t MPU_Control)
 282:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 450              		.loc 1 282 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455              	.LVL35:
 283:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Enable the MPU */
 284:HALLIB/Src/stm32f4xx_hal_cortex.c ****   MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 456              		.loc 1 284 0
 457 0000 40F00100 		orr	r0, r0, #1
 458              	.LVL36:
 459 0004 054B     		ldr	r3, .L32
 460 0006 5860     		str	r0, [r3, #4]
 285:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 286:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Enable fault exceptions */
 287:HALLIB/Src/stm32f4xx_hal_cortex.c ****   SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 461              		.loc 1 287 0
 462 0008 054A     		ldr	r2, .L32+4
 463 000a 536A     		ldr	r3, [r2, #36]
ARM GAS  /tmp/cc3kNpfC.s 			page 62


 464 000c 43F48033 		orr	r3, r3, #65536
 465 0010 5362     		str	r3, [r2, #36]
 466              	.LBB78:
 467              	.LBB79:
 879:CORE/cmsis_gcc.h **** }
 468              		.loc 3 879 0
 469              		.syntax unified
 470              	@ 879 "CORE/cmsis_gcc.h" 1
 471 0012 BFF34F8F 		dsb 0xF
 472              	@ 0 "" 2
 473              		.thumb
 474              		.syntax unified
 475              	.LBE79:
 476              	.LBE78:
 477              	.LBB80:
 478              	.LBB81:
 868:CORE/cmsis_gcc.h **** }
 479              		.loc 3 868 0
 480              		.syntax unified
 481              	@ 868 "CORE/cmsis_gcc.h" 1
 482 0016 BFF36F8F 		isb 0xF
 483              	@ 0 "" 2
 484              		.thumb
 485              		.syntax unified
 486 001a 7047     		bx	lr
 487              	.L33:
 488              		.align	2
 489              	.L32:
 490 001c 90ED00E0 		.word	-536810096
 491 0020 00ED00E0 		.word	-536810240
 492              	.LBE81:
 493              	.LBE80:
 494              		.cfi_endproc
 495              	.LFE126:
 497              		.section	.text.HAL_MPU_ConfigRegion,"ax",%progbits
 498              		.align	1
 499              		.global	HAL_MPU_ConfigRegion
 500              		.syntax unified
 501              		.thumb
 502              		.thumb_func
 503              		.fpu fpv4-sp-d16
 505              	HAL_MPU_ConfigRegion:
 506              	.LFB127:
 288:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 289:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Ensure MPU setting take effects */
 290:HALLIB/Src/stm32f4xx_hal_cortex.c ****   __DSB();
 291:HALLIB/Src/stm32f4xx_hal_cortex.c ****   __ISB();
 292:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 293:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 294:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 295:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Initializes and configures the Region and the memory to be protected.
 296:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
 297:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                the initialization and configuration information.
 298:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 299:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 300:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
 301:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
ARM GAS  /tmp/cc3kNpfC.s 			page 63


 507              		.loc 1 301 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 512              	.LVL37:
 302:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 303:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 304:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 305:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 306:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Set the Region number */
 307:HALLIB/Src/stm32f4xx_hal_cortex.c ****   MPU->RNR = MPU_Init->Number;
 513              		.loc 1 307 0
 514 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 515 0002 134B     		ldr	r3, .L38
 516 0004 9A60     		str	r2, [r3, #8]
 308:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 309:HALLIB/Src/stm32f4xx_hal_cortex.c ****   if ((MPU_Init->Enable) != RESET)
 517              		.loc 1 309 0
 518 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 519 0008 23B9     		cbnz	r3, .L37
 310:HALLIB/Src/stm32f4xx_hal_cortex.c ****   {
 311:HALLIB/Src/stm32f4xx_hal_cortex.c ****     /* Check the parameters */
 312:HALLIB/Src/stm32f4xx_hal_cortex.c ****     assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 313:HALLIB/Src/stm32f4xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 314:HALLIB/Src/stm32f4xx_hal_cortex.c ****     assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 315:HALLIB/Src/stm32f4xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 316:HALLIB/Src/stm32f4xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 317:HALLIB/Src/stm32f4xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 318:HALLIB/Src/stm32f4xx_hal_cortex.c ****     assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 319:HALLIB/Src/stm32f4xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 320:HALLIB/Src/stm32f4xx_hal_cortex.c ****     
 321:HALLIB/Src/stm32f4xx_hal_cortex.c ****     MPU->RBAR = MPU_Init->BaseAddress;
 322:HALLIB/Src/stm32f4xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 323:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 324:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 325:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 326:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 327:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 328:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 329:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 330:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 331:HALLIB/Src/stm32f4xx_hal_cortex.c ****   }
 332:HALLIB/Src/stm32f4xx_hal_cortex.c ****   else
 333:HALLIB/Src/stm32f4xx_hal_cortex.c ****   {
 334:HALLIB/Src/stm32f4xx_hal_cortex.c ****     MPU->RBAR = 0x00U;
 520              		.loc 1 334 0
 521 000a 114B     		ldr	r3, .L38
 522 000c 0022     		movs	r2, #0
 523 000e DA60     		str	r2, [r3, #12]
 335:HALLIB/Src/stm32f4xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 524              		.loc 1 335 0
 525 0010 1A61     		str	r2, [r3, #16]
 526 0012 7047     		bx	lr
 527              	.L37:
 321:HALLIB/Src/stm32f4xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 528              		.loc 1 321 0
ARM GAS  /tmp/cc3kNpfC.s 			page 64


 529 0014 4368     		ldr	r3, [r0, #4]
 530 0016 0E4A     		ldr	r2, .L38
 531 0018 D360     		str	r3, [r2, #12]
 322:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 532              		.loc 1 322 0
 533 001a 017B     		ldrb	r1, [r0, #12]	@ zero_extendqisi2
 323:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 534              		.loc 1 323 0
 535 001c C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 536 001e 1B06     		lsls	r3, r3, #24
 322:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 537              		.loc 1 322 0
 538 0020 43EA0173 		orr	r3, r3, r1, lsl #28
 324:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 539              		.loc 1 324 0
 540 0024 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 323:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 541              		.loc 1 323 0
 542 0026 43EAC143 		orr	r3, r3, r1, lsl #19
 325:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 543              		.loc 1 325 0
 544 002a 417B     		ldrb	r1, [r0, #13]	@ zero_extendqisi2
 324:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 545              		.loc 1 324 0
 546 002c 43EA8143 		orr	r3, r3, r1, lsl #18
 326:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 547              		.loc 1 326 0
 548 0030 817B     		ldrb	r1, [r0, #14]	@ zero_extendqisi2
 325:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 549              		.loc 1 325 0
 550 0032 43EA4143 		orr	r3, r3, r1, lsl #17
 327:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 551              		.loc 1 327 0
 552 0036 C17B     		ldrb	r1, [r0, #15]	@ zero_extendqisi2
 326:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 553              		.loc 1 326 0
 554 0038 43EA0143 		orr	r3, r3, r1, lsl #16
 328:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 555              		.loc 1 328 0
 556 003c 417A     		ldrb	r1, [r0, #9]	@ zero_extendqisi2
 327:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 557              		.loc 1 327 0
 558 003e 43EA0123 		orr	r3, r3, r1, lsl #8
 329:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 559              		.loc 1 329 0
 560 0042 017A     		ldrb	r1, [r0, #8]	@ zero_extendqisi2
 328:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 561              		.loc 1 328 0
 562 0044 43EA4103 		orr	r3, r3, r1, lsl #1
 330:HALLIB/Src/stm32f4xx_hal_cortex.c ****   }
 563              		.loc 1 330 0
 564 0048 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 329:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 565              		.loc 1 329 0
 566 004a 0B43     		orrs	r3, r3, r1
 322:HALLIB/Src/stm32f4xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 567              		.loc 1 322 0
ARM GAS  /tmp/cc3kNpfC.s 			page 65


 568 004c 1361     		str	r3, [r2, #16]
 569 004e 7047     		bx	lr
 570              	.L39:
 571              		.align	2
 572              	.L38:
 573 0050 90ED00E0 		.word	-536810096
 574              		.cfi_endproc
 575              	.LFE127:
 577              		.section	.text.HAL_NVIC_GetPriorityGrouping,"ax",%progbits
 578              		.align	1
 579              		.global	HAL_NVIC_GetPriorityGrouping
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
 583              		.fpu fpv4-sp-d16
 585              	HAL_NVIC_GetPriorityGrouping:
 586              	.LFB128:
 336:HALLIB/Src/stm32f4xx_hal_cortex.c ****   }
 337:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 338:HALLIB/Src/stm32f4xx_hal_cortex.c **** #endif /* __MPU_PRESENT */
 339:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 340:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 341:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
 342:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
 343:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 344:HALLIB/Src/stm32f4xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriorityGrouping(void)
 345:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 587              		.loc 1 345 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 592              	.LBB82:
 593              	.LBB83:
1617:CORE/core_cm4.h **** }
 594              		.loc 2 1617 0
 595 0000 024B     		ldr	r3, .L41
 596 0002 D868     		ldr	r0, [r3, #12]
 597              	.LBE83:
 598              	.LBE82:
 346:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Get the PRIGROUP[10:8] field value */
 347:HALLIB/Src/stm32f4xx_hal_cortex.c ****   return NVIC_GetPriorityGrouping();
 348:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 599              		.loc 1 348 0
 600 0004 C0F30220 		ubfx	r0, r0, #8, #3
 601 0008 7047     		bx	lr
 602              	.L42:
 603 000a 00BF     		.align	2
 604              	.L41:
 605 000c 00ED00E0 		.word	-536810240
 606              		.cfi_endproc
 607              	.LFE128:
 609              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 610              		.align	1
 611              		.global	HAL_NVIC_GetPriority
 612              		.syntax unified
 613              		.thumb
ARM GAS  /tmp/cc3kNpfC.s 			page 66


 614              		.thumb_func
 615              		.fpu fpv4-sp-d16
 617              	HAL_NVIC_GetPriority:
 618              	.LFB129:
 349:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 350:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 351:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 352:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 353:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 354:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 355:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param   PriorityGroup the priority grouping bits length.
 356:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 357:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
 358:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                      4 bits for subpriority
 359:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
 360:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                      3 bits for subpriority
 361:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
 362:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                      2 bits for subpriority
 363:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
 364:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                      1 bits for subpriority
 365:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
 366:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                                      0 bits for subpriority
 367:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
 368:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
 369:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 370:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 371:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint3
 372:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 619              		.loc 1 372 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 624              	.LVL38:
 625 0000 70B4     		push	{r4, r5, r6}
 626              	.LCFI3:
 627              		.cfi_def_cfa_offset 12
 628              		.cfi_offset 4, -12
 629              		.cfi_offset 5, -8
 630              		.cfi_offset 6, -4
 631              	.LVL39:
 632              	.LBB84:
 633              	.LBB85:
1723:CORE/core_cm4.h ****   {
 634              		.loc 2 1723 0
 635 0002 0028     		cmp	r0, #0
 636              	.LVL40:
 637 0004 1FDB     		blt	.L49
1729:CORE/core_cm4.h ****   }
 638              		.loc 2 1729 0
 639 0006 00F16040 		add	r0, r0, #-536870912
 640 000a 00F56140 		add	r0, r0, #57600
 641 000e 90F80003 		ldrb	r0, [r0, #768]	@ zero_extendqisi2
 642 0012 0509     		lsrs	r5, r0, #4
 643              	.L45:
 644              	.LVL41:
 645              	.LBE85:
ARM GAS  /tmp/cc3kNpfC.s 			page 67


 646              	.LBE84:
 647              	.LBB87:
 648              	.LBB88:
1774:CORE/core_cm4.h ****   uint32_t PreemptPriorityBits;
 649              		.loc 2 1774 0
 650 0014 01F00701 		and	r1, r1, #7
 651              	.LVL42:
1778:CORE/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 652              		.loc 2 1778 0
 653 0018 C1F10704 		rsb	r4, r1, #7
 654 001c 042C     		cmp	r4, #4
 655 001e 28BF     		it	cs
 656 0020 0424     		movcs	r4, #4
 657              	.LVL43:
1779:CORE/core_cm4.h **** 
 658              		.loc 2 1779 0
 659 0022 081D     		adds	r0, r1, #4
 660 0024 0628     		cmp	r0, #6
 661 0026 14D9     		bls	.L47
 662 0028 0339     		subs	r1, r1, #3
 663              	.LVL44:
 664              	.L46:
1781:CORE/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 665              		.loc 2 1781 0
 666 002a 25FA01F6 		lsr	r6, r5, r1
 667 002e 0120     		movs	r0, #1
 668              	.LVL45:
 669 0030 00FA04F4 		lsl	r4, r0, r4
 670              	.LVL46:
 671 0034 013C     		subs	r4, r4, #1
 672 0036 3440     		ands	r4, r4, r6
 673 0038 1460     		str	r4, [r2]
1782:CORE/core_cm4.h **** }
 674              		.loc 2 1782 0
 675 003a 8840     		lsls	r0, r0, r1
 676 003c 0138     		subs	r0, r0, #1
 677 003e 2840     		ands	r0, r0, r5
 678 0040 1860     		str	r0, [r3]
 679              	.LVL47:
 680              	.LBE88:
 681              	.LBE87:
 373:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 374:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 375:HALLIB/Src/stm32f4xx_hal_cortex.c ****  /* Get priority for Cortex-M system or device specific interrupts */
 376:HALLIB/Src/stm32f4xx_hal_cortex.c ****   NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 377:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 682              		.loc 1 377 0
 683 0042 70BC     		pop	{r4, r5, r6}
 684              	.LCFI4:
 685              		.cfi_remember_state
 686              		.cfi_restore 6
 687              		.cfi_restore 5
 688              		.cfi_restore 4
 689              		.cfi_def_cfa_offset 0
 690 0044 7047     		bx	lr
 691              	.LVL48:
 692              	.L49:
ARM GAS  /tmp/cc3kNpfC.s 			page 68


 693              	.LCFI5:
 694              		.cfi_restore_state
 695              	.LBB90:
 696              	.LBB86:
1725:CORE/core_cm4.h ****   }
 697              		.loc 2 1725 0
 698 0046 00F00F00 		and	r0, r0, #15
 699 004a 034C     		ldr	r4, .L50
 700 004c 205C     		ldrb	r0, [r4, r0]	@ zero_extendqisi2
 701 004e 0509     		lsrs	r5, r0, #4
 702 0050 E0E7     		b	.L45
 703              	.LVL49:
 704              	.L47:
 705              	.LBE86:
 706              	.LBE90:
 707              	.LBB91:
 708              	.LBB89:
1779:CORE/core_cm4.h **** 
 709              		.loc 2 1779 0
 710 0052 0021     		movs	r1, #0
 711              	.LVL50:
 712 0054 E9E7     		b	.L46
 713              	.L51:
 714 0056 00BF     		.align	2
 715              	.L50:
 716 0058 14ED00E0 		.word	-536810220
 717              	.LBE89:
 718              	.LBE91:
 719              		.cfi_endproc
 720              	.LFE129:
 722              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 723              		.align	1
 724              		.global	HAL_NVIC_SetPendingIRQ
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu fpv4-sp-d16
 730              	HAL_NVIC_SetPendingIRQ:
 731              	.LFB130:
 378:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 379:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 380:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 381:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 382:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 383:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 384:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 385:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 386:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 387:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 732              		.loc 1 387 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737              	.LVL51:
 738              	.LBB92:
 739              	.LBB93:
ARM GAS  /tmp/cc3kNpfC.s 			page 69


1663:CORE/core_cm4.h **** }
 740              		.loc 2 1663 0
 741 0000 4309     		lsrs	r3, r0, #5
 742 0002 00F01F00 		and	r0, r0, #31
 743              	.LVL52:
 744 0006 0122     		movs	r2, #1
 745 0008 02FA00F0 		lsl	r0, r2, r0
 746 000c 4033     		adds	r3, r3, #64
 747 000e 024A     		ldr	r2, .L53
 748 0010 42F82300 		str	r0, [r2, r3, lsl #2]
 749              	.LVL53:
 750 0014 7047     		bx	lr
 751              	.L54:
 752 0016 00BF     		.align	2
 753              	.L53:
 754 0018 00E100E0 		.word	-536813312
 755              	.LBE93:
 756              	.LBE92:
 757              		.cfi_endproc
 758              	.LFE130:
 760              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 761              		.align	1
 762              		.global	HAL_NVIC_GetPendingIRQ
 763              		.syntax unified
 764              		.thumb
 765              		.thumb_func
 766              		.fpu fpv4-sp-d16
 768              	HAL_NVIC_GetPendingIRQ:
 769              	.LFB131:
 388:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 389:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 390:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 391:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Set interrupt pending */
 392:HALLIB/Src/stm32f4xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 393:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 394:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 395:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 396:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Gets Pending Interrupt (reads the pending register in the NVIC 
 397:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         and returns the pending bit for the specified interrupt).
 398:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 399:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *          This parameter can be an enumerator of IRQn_Type enumeration
 400:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 401:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 402:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 403:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 404:HALLIB/Src/stm32f4xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 405:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 770              		.loc 1 405 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              		@ link register save eliminated.
 775              	.LVL54:
 776              	.LBB94:
 777              	.LBB95:
1652:CORE/core_cm4.h **** }
 778              		.loc 2 1652 0
ARM GAS  /tmp/cc3kNpfC.s 			page 70


 779 0000 4309     		lsrs	r3, r0, #5
 780 0002 4033     		adds	r3, r3, #64
 781 0004 044A     		ldr	r2, .L56
 782 0006 52F82330 		ldr	r3, [r2, r3, lsl #2]
 783 000a 00F01F00 		and	r0, r0, #31
 784              	.LVL55:
 785 000e 23FA00F0 		lsr	r0, r3, r0
 786              	.LVL56:
 787              	.LBE95:
 788              	.LBE94:
 406:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 407:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 408:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 409:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 410:HALLIB/Src/stm32f4xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 411:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 789              		.loc 1 411 0
 790 0012 00F00100 		and	r0, r0, #1
 791 0016 7047     		bx	lr
 792              	.L57:
 793              		.align	2
 794              	.L56:
 795 0018 00E100E0 		.word	-536813312
 796              		.cfi_endproc
 797              	.LFE131:
 799              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 800              		.align	1
 801              		.global	HAL_NVIC_ClearPendingIRQ
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu fpv4-sp-d16
 807              	HAL_NVIC_ClearPendingIRQ:
 808              	.LFB132:
 412:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 413:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 414:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Clears the pending bit of an external interrupt.
 415:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 416:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 417:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 418:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 419:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 420:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 421:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 809              		.loc 1 421 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 814              	.LVL57:
 815              	.LBB96:
 816              	.LBB97:
1674:CORE/core_cm4.h **** }
 817              		.loc 2 1674 0
 818 0000 4309     		lsrs	r3, r0, #5
 819 0002 00F01F00 		and	r0, r0, #31
 820              	.LVL58:
ARM GAS  /tmp/cc3kNpfC.s 			page 71


 821 0006 0122     		movs	r2, #1
 822 0008 02FA00F0 		lsl	r0, r2, r0
 823 000c 6033     		adds	r3, r3, #96
 824 000e 024A     		ldr	r2, .L59
 825 0010 42F82300 		str	r0, [r2, r3, lsl #2]
 826              	.LVL59:
 827 0014 7047     		bx	lr
 828              	.L60:
 829 0016 00BF     		.align	2
 830              	.L59:
 831 0018 00E100E0 		.word	-536813312
 832              	.LBE97:
 833              	.LBE96:
 834              		.cfi_endproc
 835              	.LFE132:
 837              		.section	.text.HAL_NVIC_GetActive,"ax",%progbits
 838              		.align	1
 839              		.global	HAL_NVIC_GetActive
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 843              		.fpu fpv4-sp-d16
 845              	HAL_NVIC_GetActive:
 846              	.LFB133:
 422:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 423:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 424:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 425:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Clear pending interrupt */
 426:HALLIB/Src/stm32f4xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 427:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 428:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 429:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 430:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).
 431:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param IRQn External interrupt number
 432:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 433:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 434:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 435:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 436:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 437:HALLIB/Src/stm32f4xx_hal_cortex.c **** uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
 438:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 847              		.loc 1 438 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 852              	.LVL60:
 853              	.LBB98:
 854              	.LBB99:
1687:CORE/core_cm4.h **** }
 855              		.loc 2 1687 0
 856 0000 4309     		lsrs	r3, r0, #5
 857 0002 8033     		adds	r3, r3, #128
 858 0004 044A     		ldr	r2, .L62
 859 0006 52F82330 		ldr	r3, [r2, r3, lsl #2]
 860 000a 00F01F00 		and	r0, r0, #31
 861              	.LVL61:
ARM GAS  /tmp/cc3kNpfC.s 			page 72


 862 000e 23FA00F0 		lsr	r0, r3, r0
 863              	.LVL62:
 864              	.LBE99:
 865              	.LBE98:
 439:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 440:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 441:HALLIB/Src/stm32f4xx_hal_cortex.c ****   
 442:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Return 1 if active else 0 */
 443:HALLIB/Src/stm32f4xx_hal_cortex.c ****   return NVIC_GetActive(IRQn);
 444:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 866              		.loc 1 444 0
 867 0012 00F00100 		and	r0, r0, #1
 868 0016 7047     		bx	lr
 869              	.L63:
 870              		.align	2
 871              	.L62:
 872 0018 00E100E0 		.word	-536813312
 873              		.cfi_endproc
 874              	.LFE133:
 876              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 877              		.align	1
 878              		.global	HAL_SYSTICK_CLKSourceConfig
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 882              		.fpu fpv4-sp-d16
 884              	HAL_SYSTICK_CLKSourceConfig:
 885              	.LFB134:
 445:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 446:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 447:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  Configures the SysTick clock source.
 448:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @param  CLKSource specifies the SysTick clock source.
 449:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 450:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 451:HALLIB/Src/stm32f4xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 452:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 453:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 454:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 455:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 886              		.loc 1 455 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              		@ link register save eliminated.
 891              	.LVL63:
 456:HALLIB/Src/stm32f4xx_hal_cortex.c ****   /* Check the parameters */
 457:HALLIB/Src/stm32f4xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 458:HALLIB/Src/stm32f4xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 892              		.loc 1 458 0
 893 0000 0428     		cmp	r0, #4
 894 0002 05D0     		beq	.L67
 459:HALLIB/Src/stm32f4xx_hal_cortex.c ****   {
 460:HALLIB/Src/stm32f4xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 461:HALLIB/Src/stm32f4xx_hal_cortex.c ****   }
 462:HALLIB/Src/stm32f4xx_hal_cortex.c ****   else
 463:HALLIB/Src/stm32f4xx_hal_cortex.c ****   {
 464:HALLIB/Src/stm32f4xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
ARM GAS  /tmp/cc3kNpfC.s 			page 73


 895              		.loc 1 464 0
 896 0004 054A     		ldr	r2, .L68
 897 0006 1368     		ldr	r3, [r2]
 898 0008 23F00403 		bic	r3, r3, #4
 899 000c 1360     		str	r3, [r2]
 900 000e 7047     		bx	lr
 901              	.L67:
 460:HALLIB/Src/stm32f4xx_hal_cortex.c ****   }
 902              		.loc 1 460 0
 903 0010 024A     		ldr	r2, .L68
 904 0012 1368     		ldr	r3, [r2]
 905 0014 43F00403 		orr	r3, r3, #4
 906 0018 1360     		str	r3, [r2]
 907 001a 7047     		bx	lr
 908              	.L69:
 909              		.align	2
 910              	.L68:
 911 001c 10E000E0 		.word	-536813552
 912              		.cfi_endproc
 913              	.LFE134:
 915              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 916              		.align	1
 917              		.weak	HAL_SYSTICK_Callback
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	HAL_SYSTICK_Callback:
 924              	.LFB136:
 465:HALLIB/Src/stm32f4xx_hal_cortex.c ****   }
 466:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 467:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 468:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 469:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  This function handles SYSTICK interrupt request.
 470:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 471:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 472:HALLIB/Src/stm32f4xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 473:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 474:HALLIB/Src/stm32f4xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 475:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 476:HALLIB/Src/stm32f4xx_hal_cortex.c **** 
 477:HALLIB/Src/stm32f4xx_hal_cortex.c **** /**
 478:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 479:HALLIB/Src/stm32f4xx_hal_cortex.c ****   * @retval None
 480:HALLIB/Src/stm32f4xx_hal_cortex.c ****   */
 481:HALLIB/Src/stm32f4xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 482:HALLIB/Src/stm32f4xx_hal_cortex.c **** {
 925              		.loc 1 482 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930 0000 7047     		bx	lr
 931              		.cfi_endproc
 932              	.LFE136:
 934              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 935              		.align	1
ARM GAS  /tmp/cc3kNpfC.s 			page 74


 936              		.global	HAL_SYSTICK_IRQHandler
 937              		.syntax unified
 938              		.thumb
 939              		.thumb_func
 940              		.fpu fpv4-sp-d16
 942              	HAL_SYSTICK_IRQHandler:
 943              	.LFB135:
 473:HALLIB/Src/stm32f4xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 944              		.loc 1 473 0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 0
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 473:HALLIB/Src/stm32f4xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 948              		.loc 1 473 0
 949 0000 08B5     		push	{r3, lr}
 950              	.LCFI6:
 951              		.cfi_def_cfa_offset 8
 952              		.cfi_offset 3, -8
 953              		.cfi_offset 14, -4
 474:HALLIB/Src/stm32f4xx_hal_cortex.c **** }
 954              		.loc 1 474 0
 955 0002 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 956              	.LVL64:
 957 0006 08BD     		pop	{r3, pc}
 958              		.cfi_endproc
 959              	.LFE135:
 961              		.text
 962              	.Letext0:
 963              		.file 4 "USER/stm32f429xx.h"
 964              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 965              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 966              		.file 7 "USER/system_stm32f4xx.h"
 967              		.file 8 "USER/stm32f4xx.h"
 968              		.file 9 "HALLIB/Inc/stm32f4xx_hal_cortex.h"
 969              		.file 10 "HALLIB/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc3kNpfC.s 			page 75


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_cortex.c
     /tmp/cc3kNpfC.s:18     .text.HAL_NVIC_SetPriorityGrouping:0000000000000000 $t
     /tmp/cc3kNpfC.s:25     .text.HAL_NVIC_SetPriorityGrouping:0000000000000000 HAL_NVIC_SetPriorityGrouping
     /tmp/cc3kNpfC.s:64     .text.HAL_NVIC_SetPriorityGrouping:0000000000000020 $d
     /tmp/cc3kNpfC.s:71     .text.HAL_NVIC_SetPriority:0000000000000000 $t
     /tmp/cc3kNpfC.s:78     .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
     /tmp/cc3kNpfC.s:186    .text.HAL_NVIC_SetPriority:000000000000005c $d
     /tmp/cc3kNpfC.s:194    .text.HAL_NVIC_EnableIRQ:0000000000000000 $t
     /tmp/cc3kNpfC.s:201    .text.HAL_NVIC_EnableIRQ:0000000000000000 HAL_NVIC_EnableIRQ
     /tmp/cc3kNpfC.s:224    .text.HAL_NVIC_EnableIRQ:0000000000000014 $d
     /tmp/cc3kNpfC.s:231    .text.HAL_NVIC_DisableIRQ:0000000000000000 $t
     /tmp/cc3kNpfC.s:238    .text.HAL_NVIC_DisableIRQ:0000000000000000 HAL_NVIC_DisableIRQ
     /tmp/cc3kNpfC.s:262    .text.HAL_NVIC_DisableIRQ:0000000000000018 $d
     /tmp/cc3kNpfC.s:269    .text.HAL_NVIC_SystemReset:0000000000000000 $t
     /tmp/cc3kNpfC.s:276    .text.HAL_NVIC_SystemReset:0000000000000000 HAL_NVIC_SystemReset
     /tmp/cc3kNpfC.s:329    .text.HAL_NVIC_SystemReset:000000000000001c $d
     /tmp/cc3kNpfC.s:337    .text.HAL_SYSTICK_Config:0000000000000000 $t
     /tmp/cc3kNpfC.s:344    .text.HAL_SYSTICK_Config:0000000000000000 HAL_SYSTICK_Config
     /tmp/cc3kNpfC.s:391    .text.HAL_SYSTICK_Config:0000000000000024 $d
     /tmp/cc3kNpfC.s:397    .text.HAL_MPU_Disable:0000000000000000 $t
     /tmp/cc3kNpfC.s:404    .text.HAL_MPU_Disable:0000000000000000 HAL_MPU_Disable
     /tmp/cc3kNpfC.s:435    .text.HAL_MPU_Disable:0000000000000018 $d
     /tmp/cc3kNpfC.s:441    .text.HAL_MPU_Enable:0000000000000000 $t
     /tmp/cc3kNpfC.s:448    .text.HAL_MPU_Enable:0000000000000000 HAL_MPU_Enable
     /tmp/cc3kNpfC.s:490    .text.HAL_MPU_Enable:000000000000001c $d
     /tmp/cc3kNpfC.s:498    .text.HAL_MPU_ConfigRegion:0000000000000000 $t
     /tmp/cc3kNpfC.s:505    .text.HAL_MPU_ConfigRegion:0000000000000000 HAL_MPU_ConfigRegion
     /tmp/cc3kNpfC.s:573    .text.HAL_MPU_ConfigRegion:0000000000000050 $d
     /tmp/cc3kNpfC.s:578    .text.HAL_NVIC_GetPriorityGrouping:0000000000000000 $t
     /tmp/cc3kNpfC.s:585    .text.HAL_NVIC_GetPriorityGrouping:0000000000000000 HAL_NVIC_GetPriorityGrouping
     /tmp/cc3kNpfC.s:605    .text.HAL_NVIC_GetPriorityGrouping:000000000000000c $d
     /tmp/cc3kNpfC.s:610    .text.HAL_NVIC_GetPriority:0000000000000000 $t
     /tmp/cc3kNpfC.s:617    .text.HAL_NVIC_GetPriority:0000000000000000 HAL_NVIC_GetPriority
     /tmp/cc3kNpfC.s:716    .text.HAL_NVIC_GetPriority:0000000000000058 $d
     /tmp/cc3kNpfC.s:723    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 $t
     /tmp/cc3kNpfC.s:730    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 HAL_NVIC_SetPendingIRQ
     /tmp/cc3kNpfC.s:754    .text.HAL_NVIC_SetPendingIRQ:0000000000000018 $d
     /tmp/cc3kNpfC.s:761    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 $t
     /tmp/cc3kNpfC.s:768    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 HAL_NVIC_GetPendingIRQ
     /tmp/cc3kNpfC.s:795    .text.HAL_NVIC_GetPendingIRQ:0000000000000018 $d
     /tmp/cc3kNpfC.s:800    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 $t
     /tmp/cc3kNpfC.s:807    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 HAL_NVIC_ClearPendingIRQ
     /tmp/cc3kNpfC.s:831    .text.HAL_NVIC_ClearPendingIRQ:0000000000000018 $d
     /tmp/cc3kNpfC.s:838    .text.HAL_NVIC_GetActive:0000000000000000 $t
     /tmp/cc3kNpfC.s:845    .text.HAL_NVIC_GetActive:0000000000000000 HAL_NVIC_GetActive
     /tmp/cc3kNpfC.s:872    .text.HAL_NVIC_GetActive:0000000000000018 $d
     /tmp/cc3kNpfC.s:877    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 $t
     /tmp/cc3kNpfC.s:884    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 HAL_SYSTICK_CLKSourceConfig
     /tmp/cc3kNpfC.s:911    .text.HAL_SYSTICK_CLKSourceConfig:000000000000001c $d
     /tmp/cc3kNpfC.s:916    .text.HAL_SYSTICK_Callback:0000000000000000 $t
     /tmp/cc3kNpfC.s:923    .text.HAL_SYSTICK_Callback:0000000000000000 HAL_SYSTICK_Callback
     /tmp/cc3kNpfC.s:935    .text.HAL_SYSTICK_IRQHandler:0000000000000000 $t
     /tmp/cc3kNpfC.s:942    .text.HAL_SYSTICK_IRQHandler:0000000000000000 HAL_SYSTICK_IRQHandler
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
ARM GAS  /tmp/cc3kNpfC.s 			page 76


