ARM GAS  /tmp/ccXEJVgw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH_Program_DoubleWord,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	FLASH_Program_DoubleWord:
  25              	.LFB131:
  26              		.file 1 "HALLIB/Src/stm32f4xx_hal_flash.c"
   1:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
   2:HALLIB/Src/stm32f4xx_hal_flash.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @file    stm32f4xx_hal_flash.c
   4:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:HALLIB/Src/stm32f4xx_hal_flash.c ****   *          This file provides firmware functions to manage the following 
   7:HALLIB/Src/stm32f4xx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:HALLIB/Src/stm32f4xx_hal_flash.c ****   *           + Program operations functions
   9:HALLIB/Src/stm32f4xx_hal_flash.c ****   *           + Memory Control functions 
  10:HALLIB/Src/stm32f4xx_hal_flash.c ****   *           + Peripheral Errors functions
  11:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         
  12:HALLIB/Src/stm32f4xx_hal_flash.c ****   @verbatim
  13:HALLIB/Src/stm32f4xx_hal_flash.c ****   ==============================================================================
  14:HALLIB/Src/stm32f4xx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:HALLIB/Src/stm32f4xx_hal_flash.c ****   ==============================================================================
  16:HALLIB/Src/stm32f4xx_hal_flash.c ****            
  17:HALLIB/Src/stm32f4xx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses 
  18:HALLIB/Src/stm32f4xx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations 
  19:HALLIB/Src/stm32f4xx_hal_flash.c ****        and the read and write protection mechanisms.
  20:HALLIB/Src/stm32f4xx_hal_flash.c ****       
  21:HALLIB/Src/stm32f4xx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  22:HALLIB/Src/stm32f4xx_hal_flash.c ****        prefetch and cache lines. 
  23:HALLIB/Src/stm32f4xx_hal_flash.c **** 
  24:HALLIB/Src/stm32f4xx_hal_flash.c ****   [..] The FLASH main features are:
  25:HALLIB/Src/stm32f4xx_hal_flash.c ****       (+) Flash memory read operations
  26:HALLIB/Src/stm32f4xx_hal_flash.c ****       (+) Flash memory program/erase operations
  27:HALLIB/Src/stm32f4xx_hal_flash.c ****       (+) Read / write protections
  28:HALLIB/Src/stm32f4xx_hal_flash.c ****       (+) Prefetch on I-Code
  29:HALLIB/Src/stm32f4xx_hal_flash.c ****       (+) 64 cache lines of 128 bits on I-Code
  30:HALLIB/Src/stm32f4xx_hal_flash.c ****       (+) 8 cache lines of 128 bits on D-Code
  31:HALLIB/Src/stm32f4xx_hal_flash.c ****       
  32:HALLIB/Src/stm32f4xx_hal_flash.c ****       
ARM GAS  /tmp/ccXEJVgw.s 			page 2


  33:HALLIB/Src/stm32f4xx_hal_flash.c ****                      ##### How to use this driver #####
  34:HALLIB/Src/stm32f4xx_hal_flash.c ****   ==============================================================================
  35:HALLIB/Src/stm32f4xx_hal_flash.c ****     [..]                             
  36:HALLIB/Src/stm32f4xx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH 
  37:HALLIB/Src/stm32f4xx_hal_flash.c ****       memory of all STM32F4xx devices.
  38:HALLIB/Src/stm32f4xx_hal_flash.c ****     
  39:HALLIB/Src/stm32f4xx_hal_flash.c ****       (#) FLASH Memory IO Programming functions: 
  40:HALLIB/Src/stm32f4xx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and 
  41:HALLIB/Src/stm32f4xx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  42:HALLIB/Src/stm32f4xx_hal_flash.c ****            (++) Program functions: byte, half word, word and double word
  43:HALLIB/Src/stm32f4xx_hal_flash.c ****            (++) There Two modes of programming :
  44:HALLIB/Src/stm32f4xx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  45:HALLIB/Src/stm32f4xx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  46:HALLIB/Src/stm32f4xx_hal_flash.c ****     
  47:HALLIB/Src/stm32f4xx_hal_flash.c ****       (#) Interrupts and flags management functions : 
  48:HALLIB/Src/stm32f4xx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  49:HALLIB/Src/stm32f4xx_hal_flash.c ****            (++) Wait for last FLASH operation according to its status
  50:HALLIB/Src/stm32f4xx_hal_flash.c ****            (++) Get error flag status by calling HAL_SetErrorCode()          
  51:HALLIB/Src/stm32f4xx_hal_flash.c **** 
  52:HALLIB/Src/stm32f4xx_hal_flash.c ****     [..] 
  53:HALLIB/Src/stm32f4xx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  54:HALLIB/Src/stm32f4xx_hal_flash.c ****       to handle the following operations:
  55:HALLIB/Src/stm32f4xx_hal_flash.c ****        (+) Set the latency
  56:HALLIB/Src/stm32f4xx_hal_flash.c ****        (+) Enable/Disable the prefetch buffer
  57:HALLIB/Src/stm32f4xx_hal_flash.c ****        (+) Enable/Disable the Instruction cache and the Data cache
  58:HALLIB/Src/stm32f4xx_hal_flash.c ****        (+) Reset the Instruction cache and the Data cache
  59:HALLIB/Src/stm32f4xx_hal_flash.c ****        (+) Enable/Disable the FLASH interrupts
  60:HALLIB/Src/stm32f4xx_hal_flash.c ****        (+) Monitor the FLASH flags status
  61:HALLIB/Src/stm32f4xx_hal_flash.c ****           
  62:HALLIB/Src/stm32f4xx_hal_flash.c ****   @endverbatim
  63:HALLIB/Src/stm32f4xx_hal_flash.c ****   ******************************************************************************
  64:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @attention
  65:HALLIB/Src/stm32f4xx_hal_flash.c ****   *
  66:HALLIB/Src/stm32f4xx_hal_flash.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  67:HALLIB/Src/stm32f4xx_hal_flash.c ****   * All rights reserved.</center></h2>
  68:HALLIB/Src/stm32f4xx_hal_flash.c ****   *
  69:HALLIB/Src/stm32f4xx_hal_flash.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  70:HALLIB/Src/stm32f4xx_hal_flash.c ****   * the "License"; You may not use this file except in compliance with the
  71:HALLIB/Src/stm32f4xx_hal_flash.c ****   * License. You may obtain a copy of the License at:
  72:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                        opensource.org/licenses/BSD-3-Clause
  73:HALLIB/Src/stm32f4xx_hal_flash.c ****   *
  74:HALLIB/Src/stm32f4xx_hal_flash.c ****   ******************************************************************************
  75:HALLIB/Src/stm32f4xx_hal_flash.c ****   */ 
  76:HALLIB/Src/stm32f4xx_hal_flash.c **** 
  77:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  78:HALLIB/Src/stm32f4xx_hal_flash.c **** #include "stm32f4xx_hal.h"
  79:HALLIB/Src/stm32f4xx_hal_flash.c **** 
  80:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @addtogroup STM32F4xx_HAL_Driver
  81:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
  82:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
  83:HALLIB/Src/stm32f4xx_hal_flash.c **** 
  84:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH FLASH
  85:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief FLASH HAL module driver
  86:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
  87:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
  88:HALLIB/Src/stm32f4xx_hal_flash.c **** 
  89:HALLIB/Src/stm32f4xx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
ARM GAS  /tmp/ccXEJVgw.s 			page 3


  90:HALLIB/Src/stm32f4xx_hal_flash.c **** 
  91:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
  92:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Private define ------------------------------------------------------------*/
  93:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @addtogroup FLASH_Private_Constants
  94:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
  95:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
  96:HALLIB/Src/stm32f4xx_hal_flash.c **** #define FLASH_TIMEOUT_VALUE       50000U /* 50 s */
  97:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
  98:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @}
  99:HALLIB/Src/stm32f4xx_hal_flash.c ****   */         
 100:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Private macro -------------------------------------------------------------*/
 101:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 102:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @addtogroup FLASH_Private_Variables
 103:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
 104:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 105:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Variable used for Erase sectors under interruption */
 106:HALLIB/Src/stm32f4xx_hal_flash.c **** FLASH_ProcessTypeDef pFlash;
 107:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 108:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @}
 109:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 110:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 111:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 112:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 113:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
 114:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 115:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Program operations */
 116:HALLIB/Src/stm32f4xx_hal_flash.c **** static void   FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data);
 117:HALLIB/Src/stm32f4xx_hal_flash.c **** static void   FLASH_Program_Word(uint32_t Address, uint32_t Data);
 118:HALLIB/Src/stm32f4xx_hal_flash.c **** static void   FLASH_Program_HalfWord(uint32_t Address, uint16_t Data);
 119:HALLIB/Src/stm32f4xx_hal_flash.c **** static void   FLASH_Program_Byte(uint32_t Address, uint8_t Data);
 120:HALLIB/Src/stm32f4xx_hal_flash.c **** static void   FLASH_SetErrorCode(void);
 121:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 122:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout);
 123:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 124:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @}
 125:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 126:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 127:HALLIB/Src/stm32f4xx_hal_flash.c **** /* Exported functions --------------------------------------------------------*/
 128:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 129:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
 130:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 131:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 132:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions 
 133:HALLIB/Src/stm32f4xx_hal_flash.c ****  *  @brief   Programming operation functions 
 134:HALLIB/Src/stm32f4xx_hal_flash.c ****  *
 135:HALLIB/Src/stm32f4xx_hal_flash.c **** @verbatim   
 136:HALLIB/Src/stm32f4xx_hal_flash.c ****  ===============================================================================
 137:HALLIB/Src/stm32f4xx_hal_flash.c ****                   ##### Programming operation functions #####
 138:HALLIB/Src/stm32f4xx_hal_flash.c ****  ===============================================================================  
 139:HALLIB/Src/stm32f4xx_hal_flash.c ****     [..]
 140:HALLIB/Src/stm32f4xx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH 
 141:HALLIB/Src/stm32f4xx_hal_flash.c ****     program operations.
 142:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 143:HALLIB/Src/stm32f4xx_hal_flash.c **** @endverbatim
 144:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
 145:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 146:HALLIB/Src/stm32f4xx_hal_flash.c **** 
ARM GAS  /tmp/ccXEJVgw.s 			page 4


 147:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 148:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Program byte, halfword, word or double word at a specified address
 149:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 150:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_Type_Program
 151:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Address  specifies the address to be programmed.
 152:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed
 153:HALLIB/Src/stm32f4xx_hal_flash.c ****   * 
 154:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 155:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 156:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 157:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 158:HALLIB/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 159:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 160:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Process Locked */
 161:HALLIB/Src/stm32f4xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 162:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 163:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 164:HALLIB/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 165:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 166:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Wait for last operation to be completed */
 167:HALLIB/Src/stm32f4xx_hal_flash.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 168:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 169:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(status == HAL_OK)
 170:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 171:HALLIB/Src/stm32f4xx_hal_flash.c ****     if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 172:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 173:HALLIB/Src/stm32f4xx_hal_flash.c ****       /*Program byte (8-bit) at a specified address.*/
 174:HALLIB/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_Byte(Address, (uint8_t) Data);
 175:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 176:HALLIB/Src/stm32f4xx_hal_flash.c ****     else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 177:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 178:HALLIB/Src/stm32f4xx_hal_flash.c ****       /*Program halfword (16-bit) at a specified address.*/
 179:HALLIB/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_HalfWord(Address, (uint16_t) Data);
 180:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 181:HALLIB/Src/stm32f4xx_hal_flash.c ****     else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 182:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 183:HALLIB/Src/stm32f4xx_hal_flash.c ****       /*Program word (32-bit) at a specified address.*/
 184:HALLIB/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_Word(Address, (uint32_t) Data);
 185:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 186:HALLIB/Src/stm32f4xx_hal_flash.c ****     else
 187:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 188:HALLIB/Src/stm32f4xx_hal_flash.c ****       /*Program double word (64-bit) at a specified address.*/
 189:HALLIB/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 190:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 191:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 192:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Wait for last operation to be completed */
 193:HALLIB/Src/stm32f4xx_hal_flash.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 194:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 195:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* If the program operation is completed, disable the PG Bit */
 196:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);  
 197:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 198:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 199:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Process Unlocked */
 200:HALLIB/Src/stm32f4xx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 201:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 202:HALLIB/Src/stm32f4xx_hal_flash.c ****   return status;
 203:HALLIB/Src/stm32f4xx_hal_flash.c **** }
ARM GAS  /tmp/ccXEJVgw.s 			page 5


 204:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 205:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 206:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief   Program byte, halfword, word or double word at a specified address  with interrupt ena
 207:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 208:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_Type_Program
 209:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Address  specifies the address to be programmed.
 210:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed
 211:HALLIB/Src/stm32f4xx_hal_flash.c ****   * 
 212:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 213:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 214:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 215:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 216:HALLIB/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 217:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 218:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Process Locked */
 219:HALLIB/Src/stm32f4xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 220:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 221:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 222:HALLIB/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 223:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 224:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Enable End of FLASH Operation interrupt */
 225:HALLIB/Src/stm32f4xx_hal_flash.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 226:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 227:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Enable Error source interrupt */
 228:HALLIB/Src/stm32f4xx_hal_flash.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 229:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 230:HALLIB/Src/stm32f4xx_hal_flash.c ****   pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 231:HALLIB/Src/stm32f4xx_hal_flash.c ****   pFlash.Address = Address;
 232:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 233:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 234:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 235:HALLIB/Src/stm32f4xx_hal_flash.c ****     /*Program byte (8-bit) at a specified address.*/
 236:HALLIB/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_Byte(Address, (uint8_t) Data);
 237:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 238:HALLIB/Src/stm32f4xx_hal_flash.c ****   else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 239:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 240:HALLIB/Src/stm32f4xx_hal_flash.c ****     /*Program halfword (16-bit) at a specified address.*/
 241:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH_Program_HalfWord(Address, (uint16_t) Data);
 242:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 243:HALLIB/Src/stm32f4xx_hal_flash.c ****   else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 244:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 245:HALLIB/Src/stm32f4xx_hal_flash.c ****     /*Program word (32-bit) at a specified address.*/
 246:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH_Program_Word(Address, (uint32_t) Data);
 247:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 248:HALLIB/Src/stm32f4xx_hal_flash.c ****   else
 249:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 250:HALLIB/Src/stm32f4xx_hal_flash.c ****     /*Program double word (64-bit) at a specified address.*/
 251:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH_Program_DoubleWord(Address, Data);
 252:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 253:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 254:HALLIB/Src/stm32f4xx_hal_flash.c ****   return status;
 255:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 256:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 257:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 258:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief This function handles FLASH interrupt request.
 259:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval None
 260:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
ARM GAS  /tmp/ccXEJVgw.s 			page 6


 261:HALLIB/Src/stm32f4xx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 262:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 263:HALLIB/Src/stm32f4xx_hal_flash.c ****   uint32_t addresstmp = 0U;
 264:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 265:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check FLASH operation error flags */
 266:HALLIB/Src/stm32f4xx_hal_flash.c **** #if defined(FLASH_SR_RDERR) 
 267:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 268:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 269:HALLIB/Src/stm32f4xx_hal_flash.c **** #else
 270:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 271:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
 272:HALLIB/Src/stm32f4xx_hal_flash.c **** #endif /* FLASH_SR_RDERR */
 273:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 274:HALLIB/Src/stm32f4xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 275:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 276:HALLIB/Src/stm32f4xx_hal_flash.c ****       /*return the faulty sector*/
 277:HALLIB/Src/stm32f4xx_hal_flash.c ****       addresstmp = pFlash.Sector;
 278:HALLIB/Src/stm32f4xx_hal_flash.c ****       pFlash.Sector = 0xFFFFFFFFU;
 279:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 280:HALLIB/Src/stm32f4xx_hal_flash.c ****     else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 281:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 282:HALLIB/Src/stm32f4xx_hal_flash.c ****       /*return the faulty bank*/
 283:HALLIB/Src/stm32f4xx_hal_flash.c ****       addresstmp = pFlash.Bank;
 284:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 285:HALLIB/Src/stm32f4xx_hal_flash.c ****     else
 286:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 287:HALLIB/Src/stm32f4xx_hal_flash.c ****       /*return the faulty address*/
 288:HALLIB/Src/stm32f4xx_hal_flash.c ****       addresstmp = pFlash.Address;
 289:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 290:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 291:HALLIB/Src/stm32f4xx_hal_flash.c ****     /*Save the Error code*/
 292:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH_SetErrorCode();
 293:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 294:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* FLASH error interrupt user callback */
 295:HALLIB/Src/stm32f4xx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(addresstmp);
 296:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 297:HALLIB/Src/stm32f4xx_hal_flash.c ****     /*Stop the procedure ongoing*/
 298:HALLIB/Src/stm32f4xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 299:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 300:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 301:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 302:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 303:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 304:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 305:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 306:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 307:HALLIB/Src/stm32f4xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 308:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 309:HALLIB/Src/stm32f4xx_hal_flash.c ****       /*Nb of sector to erased can be decreased*/
 310:HALLIB/Src/stm32f4xx_hal_flash.c ****       pFlash.NbSectorsToErase--;
 311:HALLIB/Src/stm32f4xx_hal_flash.c ****       
 312:HALLIB/Src/stm32f4xx_hal_flash.c ****       /* Check if there are still sectors to erase*/
 313:HALLIB/Src/stm32f4xx_hal_flash.c ****       if(pFlash.NbSectorsToErase != 0U)
 314:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 315:HALLIB/Src/stm32f4xx_hal_flash.c ****         addresstmp = pFlash.Sector;
 316:HALLIB/Src/stm32f4xx_hal_flash.c ****         /*Indicate user which sector has been erased*/
 317:HALLIB/Src/stm32f4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(addresstmp);
ARM GAS  /tmp/ccXEJVgw.s 			page 7


 318:HALLIB/Src/stm32f4xx_hal_flash.c ****         
 319:HALLIB/Src/stm32f4xx_hal_flash.c ****         /*Increment sector number*/
 320:HALLIB/Src/stm32f4xx_hal_flash.c ****         pFlash.Sector++;
 321:HALLIB/Src/stm32f4xx_hal_flash.c ****         addresstmp = pFlash.Sector;
 322:HALLIB/Src/stm32f4xx_hal_flash.c ****         FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 323:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 324:HALLIB/Src/stm32f4xx_hal_flash.c ****       else
 325:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 326:HALLIB/Src/stm32f4xx_hal_flash.c ****         /*No more sectors to Erase, user callback can be called.*/
 327:HALLIB/Src/stm32f4xx_hal_flash.c ****         /*Reset Sector and stop Erase sectors procedure*/
 328:HALLIB/Src/stm32f4xx_hal_flash.c ****         pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 329:HALLIB/Src/stm32f4xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 330:HALLIB/Src/stm32f4xx_hal_flash.c ****         
 331:HALLIB/Src/stm32f4xx_hal_flash.c ****         /* Flush the caches to be sure of the data consistency */
 332:HALLIB/Src/stm32f4xx_hal_flash.c ****         FLASH_FlushCaches() ;
 333:HALLIB/Src/stm32f4xx_hal_flash.c ****                 
 334:HALLIB/Src/stm32f4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 335:HALLIB/Src/stm32f4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(addresstmp);
 336:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 337:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 338:HALLIB/Src/stm32f4xx_hal_flash.c ****     else 
 339:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 340:HALLIB/Src/stm32f4xx_hal_flash.c ****       if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 341:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 342:HALLIB/Src/stm32f4xx_hal_flash.c ****         /* MassErase ended. Return the selected bank */
 343:HALLIB/Src/stm32f4xx_hal_flash.c ****         /* Flush the caches to be sure of the data consistency */
 344:HALLIB/Src/stm32f4xx_hal_flash.c ****         FLASH_FlushCaches() ;
 345:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 346:HALLIB/Src/stm32f4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 347:HALLIB/Src/stm32f4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 348:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 349:HALLIB/Src/stm32f4xx_hal_flash.c ****       else
 350:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 351:HALLIB/Src/stm32f4xx_hal_flash.c ****         /*Program ended. Return the selected address*/
 352:HALLIB/Src/stm32f4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 353:HALLIB/Src/stm32f4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 354:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 355:HALLIB/Src/stm32f4xx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 356:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 357:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 358:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 359:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 360:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 361:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Operation is completed, disable the PG, SER, SNB and MER Bits */
 362:HALLIB/Src/stm32f4xx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 363:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 364:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Disable End of FLASH Operation interrupt */
 365:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 366:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 367:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Disable Error source interrupt */
 368:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 369:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 370:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Process Unlocked */
 371:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 372:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 373:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 374:HALLIB/Src/stm32f4xx_hal_flash.c **** 
ARM GAS  /tmp/ccXEJVgw.s 			page 8


 375:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 376:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback
 377:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 378:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                  Mass Erase: Bank number which has been requested to erase
 379:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                  Sectors Erase: Sector which has been erased 
 380:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
 381:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                  Program: Address which was selected for data program
 382:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval None
 383:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 384:HALLIB/Src/stm32f4xx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 385:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 386:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 387:HALLIB/Src/stm32f4xx_hal_flash.c ****   UNUSED(ReturnValue);
 388:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 389:HALLIB/Src/stm32f4xx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 390:HALLIB/Src/stm32f4xx_hal_flash.c ****    */ 
 391:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 392:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 393:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 394:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback
 395:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 396:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                 Mass Erase: Bank number which has been requested to erase
 397:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                 Sectors Erase: Sector number which returned an error
 398:HALLIB/Src/stm32f4xx_hal_flash.c ****   *                 Program: Address which was selected for data program
 399:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval None
 400:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 401:HALLIB/Src/stm32f4xx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 402:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 403:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 404:HALLIB/Src/stm32f4xx_hal_flash.c ****   UNUSED(ReturnValue);
 405:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 406:HALLIB/Src/stm32f4xx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 407:HALLIB/Src/stm32f4xx_hal_flash.c ****    */ 
 408:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 409:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 410:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 411:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @}
 412:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 413:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 414:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions 
 415:HALLIB/Src/stm32f4xx_hal_flash.c ****  *  @brief   management functions 
 416:HALLIB/Src/stm32f4xx_hal_flash.c ****  *
 417:HALLIB/Src/stm32f4xx_hal_flash.c **** @verbatim   
 418:HALLIB/Src/stm32f4xx_hal_flash.c ****  ===============================================================================
 419:HALLIB/Src/stm32f4xx_hal_flash.c ****                       ##### Peripheral Control functions #####
 420:HALLIB/Src/stm32f4xx_hal_flash.c ****  ===============================================================================  
 421:HALLIB/Src/stm32f4xx_hal_flash.c ****     [..]
 422:HALLIB/Src/stm32f4xx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH 
 423:HALLIB/Src/stm32f4xx_hal_flash.c ****     memory operations.
 424:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 425:HALLIB/Src/stm32f4xx_hal_flash.c **** @endverbatim
 426:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
 427:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 428:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 429:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 430:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Unlock the FLASH control register access
 431:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
ARM GAS  /tmp/ccXEJVgw.s 			page 9


 432:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 433:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 434:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 435:HALLIB/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 436:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 437:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 438:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 439:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 440:HALLIB/Src/stm32f4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 441:HALLIB/Src/stm32f4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 442:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 443:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Verify Flash is unlocked */
 444:HALLIB/Src/stm32f4xx_hal_flash.c ****     if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 445:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 446:HALLIB/Src/stm32f4xx_hal_flash.c ****       status = HAL_ERROR;
 447:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 448:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 449:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 450:HALLIB/Src/stm32f4xx_hal_flash.c ****   return status;
 451:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 452:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 453:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 454:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Locks the FLASH control register access
 455:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 456:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 457:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 458:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 459:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 460:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 461:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 462:HALLIB/Src/stm32f4xx_hal_flash.c ****   return HAL_OK;  
 463:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 464:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 465:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 466:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Unlock the FLASH Option Control Registers access.
 467:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 468:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 469:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 470:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 471:HALLIB/Src/stm32f4xx_hal_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 472:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 473:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 474:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 475:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 476:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 477:HALLIB/Src/stm32f4xx_hal_flash.c ****   else
 478:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 479:HALLIB/Src/stm32f4xx_hal_flash.c ****     return HAL_ERROR;
 480:HALLIB/Src/stm32f4xx_hal_flash.c ****   }  
 481:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 482:HALLIB/Src/stm32f4xx_hal_flash.c ****   return HAL_OK;  
 483:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 484:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 485:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 486:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Lock the FLASH Option Control Registers access.
 487:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status 
 488:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
ARM GAS  /tmp/ccXEJVgw.s 			page 10


 489:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 490:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 491:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 492:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 493:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 494:HALLIB/Src/stm32f4xx_hal_flash.c ****   return HAL_OK;  
 495:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 496:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 497:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 498:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Launch the option byte loading.
 499:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 500:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 501:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 502:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 503:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
 504:HALLIB/Src/stm32f4xx_hal_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 505:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 506:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Wait for last operation to be completed */
 507:HALLIB/Src/stm32f4xx_hal_flash.c ****   return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 508:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 509:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 510:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 511:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @}
 512:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 513:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 514:HALLIB/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions 
 515:HALLIB/Src/stm32f4xx_hal_flash.c ****  *  @brief   Peripheral Errors functions 
 516:HALLIB/Src/stm32f4xx_hal_flash.c ****  *
 517:HALLIB/Src/stm32f4xx_hal_flash.c **** @verbatim   
 518:HALLIB/Src/stm32f4xx_hal_flash.c ****  ===============================================================================
 519:HALLIB/Src/stm32f4xx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 520:HALLIB/Src/stm32f4xx_hal_flash.c ****  ===============================================================================  
 521:HALLIB/Src/stm32f4xx_hal_flash.c ****     [..]
 522:HALLIB/Src/stm32f4xx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 523:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 524:HALLIB/Src/stm32f4xx_hal_flash.c **** @endverbatim
 525:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @{
 526:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 527:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 528:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 529:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 530:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval FLASH_ErrorCode: The returned value can be a combination of:
 531:HALLIB/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_RD: FLASH Read Protection error flag (PCROP)
 532:HALLIB/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGS: FLASH Programming Sequence error flag 
 533:HALLIB/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGP: FLASH Programming Parallelism error flag  
 534:HALLIB/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
 535:HALLIB/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
 536:HALLIB/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
 537:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 538:HALLIB/Src/stm32f4xx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 539:HALLIB/Src/stm32f4xx_hal_flash.c **** { 
 540:HALLIB/Src/stm32f4xx_hal_flash.c ****    return pFlash.ErrorCode;
 541:HALLIB/Src/stm32f4xx_hal_flash.c **** }  
 542:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 543:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 544:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @}
 545:HALLIB/Src/stm32f4xx_hal_flash.c ****   */    
ARM GAS  /tmp/ccXEJVgw.s 			page 11


 546:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 547:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 548:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 549:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Timeout maximum flash operationtimeout
 550:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 551:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 552:HALLIB/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 553:HALLIB/Src/stm32f4xx_hal_flash.c **** { 
 554:HALLIB/Src/stm32f4xx_hal_flash.c ****   uint32_t tickstart = 0U;
 555:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 556:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Clear Error Code */
 557:HALLIB/Src/stm32f4xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 558:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 559:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 560:HALLIB/Src/stm32f4xx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 561:HALLIB/Src/stm32f4xx_hal_flash.c ****      flag will be set */
 562:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Get tick */
 563:HALLIB/Src/stm32f4xx_hal_flash.c ****   tickstart = HAL_GetTick();
 564:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 565:HALLIB/Src/stm32f4xx_hal_flash.c ****   while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 566:HALLIB/Src/stm32f4xx_hal_flash.c ****   { 
 567:HALLIB/Src/stm32f4xx_hal_flash.c ****     if(Timeout != HAL_MAX_DELAY)
 568:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 569:HALLIB/Src/stm32f4xx_hal_flash.c ****       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 570:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 571:HALLIB/Src/stm32f4xx_hal_flash.c ****         return HAL_TIMEOUT;
 572:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 573:HALLIB/Src/stm32f4xx_hal_flash.c ****     } 
 574:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 575:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 576:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 577:HALLIB/Src/stm32f4xx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 578:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 579:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 580:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 581:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 582:HALLIB/Src/stm32f4xx_hal_flash.c **** #if defined(FLASH_SR_RDERR)  
 583:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 584:HALLIB/Src/stm32f4xx_hal_flash.c ****                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 585:HALLIB/Src/stm32f4xx_hal_flash.c **** #else
 586:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 587:HALLIB/Src/stm32f4xx_hal_flash.c ****                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
 588:HALLIB/Src/stm32f4xx_hal_flash.c **** #endif /* FLASH_SR_RDERR */
 589:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 590:HALLIB/Src/stm32f4xx_hal_flash.c ****     /*Save the error code*/
 591:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH_SetErrorCode();
 592:HALLIB/Src/stm32f4xx_hal_flash.c ****     return HAL_ERROR;
 593:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 594:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 595:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* If there is no error flag set */
 596:HALLIB/Src/stm32f4xx_hal_flash.c ****   return HAL_OK;
 597:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 598:HALLIB/Src/stm32f4xx_hal_flash.c **** }  
 599:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 600:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 601:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Program a double word (64-bit) at a specified address.
 602:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
ARM GAS  /tmp/ccXEJVgw.s 			page 12


 603:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         2.7V to 3.6V and Vpp in the range 7V to 9V.
 604:HALLIB/Src/stm32f4xx_hal_flash.c ****   *
 605:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 606:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 607:HALLIB/Src/stm32f4xx_hal_flash.c ****   *  
 608:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 609:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 610:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval None
 611:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 612:HALLIB/Src/stm32f4xx_hal_flash.c **** static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
 613:HALLIB/Src/stm32f4xx_hal_flash.c **** {
  27              		.loc 1 613 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 10B4     		push	{r4}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 4, -4
 614:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 615:HALLIB/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 616:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 617:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 618:HALLIB/Src/stm32f4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
  37              		.loc 1 618 0
  38 0002 0A49     		ldr	r1, .L3
  39 0004 0C69     		ldr	r4, [r1, #16]
  40 0006 24F44074 		bic	r4, r4, #768
  41 000a 0C61     		str	r4, [r1, #16]
 619:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
  42              		.loc 1 619 0
  43 000c 0C69     		ldr	r4, [r1, #16]
  44 000e 44F44074 		orr	r4, r4, #768
  45 0012 0C61     		str	r4, [r1, #16]
 620:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
  46              		.loc 1 620 0
  47 0014 0C69     		ldr	r4, [r1, #16]
  48 0016 44F00104 		orr	r4, r4, #1
  49 001a 0C61     		str	r4, [r1, #16]
 621:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 622:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Program first word */
 623:HALLIB/Src/stm32f4xx_hal_flash.c ****   *(__IO uint32_t*)Address = (uint32_t)Data;
  50              		.loc 1 623 0
  51 001c 0260     		str	r2, [r0]
  52              	.LBB4:
  53              	.LBB5:
  54              		.file 2 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:CORE/cmsis_gcc.h ****  * @version  V5.0.4
   5:CORE/cmsis_gcc.h ****  * @date     09. April 2018
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /*
   8:CORE/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
ARM GAS  /tmp/ccXEJVgw.s 			page 13


   9:CORE/cmsis_gcc.h ****  *
  10:CORE/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:CORE/cmsis_gcc.h ****  *
  12:CORE/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:CORE/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:CORE/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:CORE/cmsis_gcc.h ****  *
  16:CORE/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:CORE/cmsis_gcc.h ****  *
  18:CORE/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:CORE/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:CORE/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:CORE/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:CORE/cmsis_gcc.h ****  * limitations under the License.
  23:CORE/cmsis_gcc.h ****  */
  24:CORE/cmsis_gcc.h **** 
  25:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:CORE/cmsis_gcc.h **** 
  28:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:CORE/cmsis_gcc.h **** #ifndef __has_builtin
  36:CORE/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:CORE/cmsis_gcc.h **** #endif
  38:CORE/cmsis_gcc.h **** 
  39:CORE/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:CORE/cmsis_gcc.h **** #ifndef   __ASM
  41:CORE/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:CORE/cmsis_gcc.h **** #endif
  43:CORE/cmsis_gcc.h **** #ifndef   __INLINE
  44:CORE/cmsis_gcc.h ****   #define __INLINE                               inline
  45:CORE/cmsis_gcc.h **** #endif
  46:CORE/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:CORE/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:CORE/cmsis_gcc.h **** #endif
  49:CORE/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:CORE/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:CORE/cmsis_gcc.h **** #endif                                           
  52:CORE/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:CORE/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:CORE/cmsis_gcc.h **** #endif
  55:CORE/cmsis_gcc.h **** #ifndef   __USED
  56:CORE/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:CORE/cmsis_gcc.h **** #endif
  58:CORE/cmsis_gcc.h **** #ifndef   __WEAK
  59:CORE/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:CORE/cmsis_gcc.h **** #endif
  61:CORE/cmsis_gcc.h **** #ifndef   __PACKED
  62:CORE/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:CORE/cmsis_gcc.h **** #endif
  64:CORE/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:CORE/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
ARM GAS  /tmp/ccXEJVgw.s 			page 14


  66:CORE/cmsis_gcc.h **** #endif
  67:CORE/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:CORE/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:CORE/cmsis_gcc.h **** #endif
  70:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:CORE/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:CORE/cmsis_gcc.h **** #endif
  78:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:CORE/cmsis_gcc.h **** #endif
  86:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:CORE/cmsis_gcc.h **** #endif
  94:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:CORE/cmsis_gcc.h **** #endif
 102:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:CORE/cmsis_gcc.h **** #endif
 110:CORE/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:CORE/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:CORE/cmsis_gcc.h **** #endif
 113:CORE/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:CORE/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:CORE/cmsis_gcc.h **** #endif
 116:CORE/cmsis_gcc.h **** 
 117:CORE/cmsis_gcc.h **** 
 118:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:CORE/cmsis_gcc.h ****   @{
 122:CORE/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccXEJVgw.s 			page 15


 123:CORE/cmsis_gcc.h **** 
 124:CORE/cmsis_gcc.h **** /**
 125:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:CORE/cmsis_gcc.h ****  */
 129:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:CORE/cmsis_gcc.h **** {
 131:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:CORE/cmsis_gcc.h **** }
 133:CORE/cmsis_gcc.h **** 
 134:CORE/cmsis_gcc.h **** 
 135:CORE/cmsis_gcc.h **** /**
 136:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:CORE/cmsis_gcc.h ****  */
 140:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:CORE/cmsis_gcc.h **** {
 142:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:CORE/cmsis_gcc.h **** }
 144:CORE/cmsis_gcc.h **** 
 145:CORE/cmsis_gcc.h **** 
 146:CORE/cmsis_gcc.h **** /**
 147:CORE/cmsis_gcc.h ****   \brief   Get Control Register
 148:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:CORE/cmsis_gcc.h ****   \return               Control Register value
 150:CORE/cmsis_gcc.h ****  */
 151:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:CORE/cmsis_gcc.h **** {
 153:CORE/cmsis_gcc.h ****   uint32_t result;
 154:CORE/cmsis_gcc.h **** 
 155:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:CORE/cmsis_gcc.h ****   return(result);
 157:CORE/cmsis_gcc.h **** }
 158:CORE/cmsis_gcc.h **** 
 159:CORE/cmsis_gcc.h **** 
 160:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:CORE/cmsis_gcc.h **** /**
 162:CORE/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:CORE/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:CORE/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:CORE/cmsis_gcc.h ****  */
 166:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:CORE/cmsis_gcc.h **** {
 168:CORE/cmsis_gcc.h ****   uint32_t result;
 169:CORE/cmsis_gcc.h **** 
 170:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:CORE/cmsis_gcc.h ****   return(result);
 172:CORE/cmsis_gcc.h **** }
 173:CORE/cmsis_gcc.h **** #endif
 174:CORE/cmsis_gcc.h **** 
 175:CORE/cmsis_gcc.h **** 
 176:CORE/cmsis_gcc.h **** /**
 177:CORE/cmsis_gcc.h ****   \brief   Set Control Register
 178:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
ARM GAS  /tmp/ccXEJVgw.s 			page 16


 180:CORE/cmsis_gcc.h ****  */
 181:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:CORE/cmsis_gcc.h **** {
 183:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:CORE/cmsis_gcc.h **** }
 185:CORE/cmsis_gcc.h **** 
 186:CORE/cmsis_gcc.h **** 
 187:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:CORE/cmsis_gcc.h **** /**
 189:CORE/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:CORE/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:CORE/cmsis_gcc.h ****  */
 193:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:CORE/cmsis_gcc.h **** {
 195:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:CORE/cmsis_gcc.h **** }
 197:CORE/cmsis_gcc.h **** #endif
 198:CORE/cmsis_gcc.h **** 
 199:CORE/cmsis_gcc.h **** 
 200:CORE/cmsis_gcc.h **** /**
 201:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 204:CORE/cmsis_gcc.h ****  */
 205:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:CORE/cmsis_gcc.h **** {
 207:CORE/cmsis_gcc.h ****   uint32_t result;
 208:CORE/cmsis_gcc.h **** 
 209:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:CORE/cmsis_gcc.h ****   return(result);
 211:CORE/cmsis_gcc.h **** }
 212:CORE/cmsis_gcc.h **** 
 213:CORE/cmsis_gcc.h **** 
 214:CORE/cmsis_gcc.h **** /**
 215:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 216:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:CORE/cmsis_gcc.h ****   \return               APSR Register value
 218:CORE/cmsis_gcc.h ****  */
 219:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:CORE/cmsis_gcc.h **** {
 221:CORE/cmsis_gcc.h ****   uint32_t result;
 222:CORE/cmsis_gcc.h **** 
 223:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:CORE/cmsis_gcc.h ****   return(result);
 225:CORE/cmsis_gcc.h **** }
 226:CORE/cmsis_gcc.h **** 
 227:CORE/cmsis_gcc.h **** 
 228:CORE/cmsis_gcc.h **** /**
 229:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:CORE/cmsis_gcc.h ****   \return               xPSR Register value
 232:CORE/cmsis_gcc.h ****  */
 233:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:CORE/cmsis_gcc.h **** {
 235:CORE/cmsis_gcc.h ****   uint32_t result;
 236:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXEJVgw.s 			page 17


 237:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:CORE/cmsis_gcc.h ****   return(result);
 239:CORE/cmsis_gcc.h **** }
 240:CORE/cmsis_gcc.h **** 
 241:CORE/cmsis_gcc.h **** 
 242:CORE/cmsis_gcc.h **** /**
 243:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:CORE/cmsis_gcc.h ****   \return               PSP Register value
 246:CORE/cmsis_gcc.h ****  */
 247:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:CORE/cmsis_gcc.h **** {
 249:CORE/cmsis_gcc.h ****   uint32_t result;
 250:CORE/cmsis_gcc.h **** 
 251:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:CORE/cmsis_gcc.h ****   return(result);
 253:CORE/cmsis_gcc.h **** }
 254:CORE/cmsis_gcc.h **** 
 255:CORE/cmsis_gcc.h **** 
 256:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:CORE/cmsis_gcc.h **** /**
 258:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:CORE/cmsis_gcc.h ****   \return               PSP Register value
 261:CORE/cmsis_gcc.h ****  */
 262:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:CORE/cmsis_gcc.h **** {
 264:CORE/cmsis_gcc.h ****   uint32_t result;
 265:CORE/cmsis_gcc.h **** 
 266:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:CORE/cmsis_gcc.h ****   return(result);
 268:CORE/cmsis_gcc.h **** }
 269:CORE/cmsis_gcc.h **** #endif
 270:CORE/cmsis_gcc.h **** 
 271:CORE/cmsis_gcc.h **** 
 272:CORE/cmsis_gcc.h **** /**
 273:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:CORE/cmsis_gcc.h ****  */
 277:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:CORE/cmsis_gcc.h **** {
 279:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:CORE/cmsis_gcc.h **** }
 281:CORE/cmsis_gcc.h **** 
 282:CORE/cmsis_gcc.h **** 
 283:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:CORE/cmsis_gcc.h **** /**
 285:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:CORE/cmsis_gcc.h ****  */
 289:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:CORE/cmsis_gcc.h **** {
 291:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:CORE/cmsis_gcc.h **** }
 293:CORE/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccXEJVgw.s 			page 18


 294:CORE/cmsis_gcc.h **** 
 295:CORE/cmsis_gcc.h **** 
 296:CORE/cmsis_gcc.h **** /**
 297:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:CORE/cmsis_gcc.h ****   \return               MSP Register value
 300:CORE/cmsis_gcc.h ****  */
 301:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:CORE/cmsis_gcc.h **** {
 303:CORE/cmsis_gcc.h ****   uint32_t result;
 304:CORE/cmsis_gcc.h **** 
 305:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:CORE/cmsis_gcc.h ****   return(result);
 307:CORE/cmsis_gcc.h **** }
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** 
 310:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:CORE/cmsis_gcc.h **** /**
 312:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:CORE/cmsis_gcc.h ****   \return               MSP Register value
 315:CORE/cmsis_gcc.h ****  */
 316:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:CORE/cmsis_gcc.h **** {
 318:CORE/cmsis_gcc.h ****   uint32_t result;
 319:CORE/cmsis_gcc.h **** 
 320:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:CORE/cmsis_gcc.h ****   return(result);
 322:CORE/cmsis_gcc.h **** }
 323:CORE/cmsis_gcc.h **** #endif
 324:CORE/cmsis_gcc.h **** 
 325:CORE/cmsis_gcc.h **** 
 326:CORE/cmsis_gcc.h **** /**
 327:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:CORE/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:CORE/cmsis_gcc.h ****  */
 331:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:CORE/cmsis_gcc.h **** {
 333:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:CORE/cmsis_gcc.h **** }
 335:CORE/cmsis_gcc.h **** 
 336:CORE/cmsis_gcc.h **** 
 337:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:CORE/cmsis_gcc.h **** /**
 339:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:CORE/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:CORE/cmsis_gcc.h ****  */
 343:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:CORE/cmsis_gcc.h **** {
 345:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:CORE/cmsis_gcc.h **** }
 347:CORE/cmsis_gcc.h **** #endif
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** 
 350:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/ccXEJVgw.s 			page 19


 351:CORE/cmsis_gcc.h **** /**
 352:CORE/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:CORE/cmsis_gcc.h ****   \return               SP Register value
 355:CORE/cmsis_gcc.h ****  */
 356:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:CORE/cmsis_gcc.h **** {
 358:CORE/cmsis_gcc.h ****   uint32_t result;
 359:CORE/cmsis_gcc.h **** 
 360:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:CORE/cmsis_gcc.h ****   return(result);
 362:CORE/cmsis_gcc.h **** }
 363:CORE/cmsis_gcc.h **** 
 364:CORE/cmsis_gcc.h **** 
 365:CORE/cmsis_gcc.h **** /**
 366:CORE/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:CORE/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:CORE/cmsis_gcc.h ****  */
 370:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:CORE/cmsis_gcc.h **** {
 372:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:CORE/cmsis_gcc.h **** }
 374:CORE/cmsis_gcc.h **** #endif
 375:CORE/cmsis_gcc.h **** 
 376:CORE/cmsis_gcc.h **** 
 377:CORE/cmsis_gcc.h **** /**
 378:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 381:CORE/cmsis_gcc.h ****  */
 382:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:CORE/cmsis_gcc.h **** {
 384:CORE/cmsis_gcc.h ****   uint32_t result;
 385:CORE/cmsis_gcc.h **** 
 386:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:CORE/cmsis_gcc.h ****   return(result);
 388:CORE/cmsis_gcc.h **** }
 389:CORE/cmsis_gcc.h **** 
 390:CORE/cmsis_gcc.h **** 
 391:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:CORE/cmsis_gcc.h **** /**
 393:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:CORE/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 396:CORE/cmsis_gcc.h ****  */
 397:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:CORE/cmsis_gcc.h **** {
 399:CORE/cmsis_gcc.h ****   uint32_t result;
 400:CORE/cmsis_gcc.h **** 
 401:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:CORE/cmsis_gcc.h ****   return(result);
 403:CORE/cmsis_gcc.h **** }
 404:CORE/cmsis_gcc.h **** #endif
 405:CORE/cmsis_gcc.h **** 
 406:CORE/cmsis_gcc.h **** 
 407:CORE/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccXEJVgw.s 			page 20


 408:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:CORE/cmsis_gcc.h ****  */
 412:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:CORE/cmsis_gcc.h **** {
 414:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:CORE/cmsis_gcc.h **** }
 416:CORE/cmsis_gcc.h **** 
 417:CORE/cmsis_gcc.h **** 
 418:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:CORE/cmsis_gcc.h **** /**
 420:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:CORE/cmsis_gcc.h ****  */
 424:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:CORE/cmsis_gcc.h **** {
 426:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:CORE/cmsis_gcc.h **** }
 428:CORE/cmsis_gcc.h **** #endif
 429:CORE/cmsis_gcc.h **** 
 430:CORE/cmsis_gcc.h **** 
 431:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:CORE/cmsis_gcc.h **** /**
 435:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 436:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:CORE/cmsis_gcc.h ****  */
 439:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:CORE/cmsis_gcc.h **** {
 441:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:CORE/cmsis_gcc.h **** }
 443:CORE/cmsis_gcc.h **** 
 444:CORE/cmsis_gcc.h **** 
 445:CORE/cmsis_gcc.h **** /**
 446:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 447:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:CORE/cmsis_gcc.h ****  */
 450:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:CORE/cmsis_gcc.h **** {
 452:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:CORE/cmsis_gcc.h **** }
 454:CORE/cmsis_gcc.h **** 
 455:CORE/cmsis_gcc.h **** 
 456:CORE/cmsis_gcc.h **** /**
 457:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 458:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 460:CORE/cmsis_gcc.h ****  */
 461:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:CORE/cmsis_gcc.h **** {
 463:CORE/cmsis_gcc.h ****   uint32_t result;
 464:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXEJVgw.s 			page 21


 465:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:CORE/cmsis_gcc.h ****   return(result);
 467:CORE/cmsis_gcc.h **** }
 468:CORE/cmsis_gcc.h **** 
 469:CORE/cmsis_gcc.h **** 
 470:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:CORE/cmsis_gcc.h **** /**
 472:CORE/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 475:CORE/cmsis_gcc.h ****  */
 476:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:CORE/cmsis_gcc.h **** {
 478:CORE/cmsis_gcc.h ****   uint32_t result;
 479:CORE/cmsis_gcc.h **** 
 480:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:CORE/cmsis_gcc.h ****   return(result);
 482:CORE/cmsis_gcc.h **** }
 483:CORE/cmsis_gcc.h **** #endif
 484:CORE/cmsis_gcc.h **** 
 485:CORE/cmsis_gcc.h **** 
 486:CORE/cmsis_gcc.h **** /**
 487:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 488:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:CORE/cmsis_gcc.h ****  */
 491:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:CORE/cmsis_gcc.h **** {
 493:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:CORE/cmsis_gcc.h **** }
 495:CORE/cmsis_gcc.h **** 
 496:CORE/cmsis_gcc.h **** 
 497:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:CORE/cmsis_gcc.h **** /**
 499:CORE/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:CORE/cmsis_gcc.h ****  */
 503:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:CORE/cmsis_gcc.h **** {
 505:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:CORE/cmsis_gcc.h **** }
 507:CORE/cmsis_gcc.h **** #endif
 508:CORE/cmsis_gcc.h **** 
 509:CORE/cmsis_gcc.h **** 
 510:CORE/cmsis_gcc.h **** /**
 511:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:CORE/cmsis_gcc.h ****  */
 516:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:CORE/cmsis_gcc.h **** {
 518:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:CORE/cmsis_gcc.h **** }
 520:CORE/cmsis_gcc.h **** 
 521:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXEJVgw.s 			page 22


 522:CORE/cmsis_gcc.h **** /**
 523:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 526:CORE/cmsis_gcc.h ****  */
 527:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:CORE/cmsis_gcc.h **** {
 529:CORE/cmsis_gcc.h ****   uint32_t result;
 530:CORE/cmsis_gcc.h **** 
 531:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:CORE/cmsis_gcc.h ****   return(result);
 533:CORE/cmsis_gcc.h **** }
 534:CORE/cmsis_gcc.h **** 
 535:CORE/cmsis_gcc.h **** 
 536:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:CORE/cmsis_gcc.h **** /**
 538:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 541:CORE/cmsis_gcc.h ****  */
 542:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:CORE/cmsis_gcc.h **** {
 544:CORE/cmsis_gcc.h ****   uint32_t result;
 545:CORE/cmsis_gcc.h **** 
 546:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:CORE/cmsis_gcc.h ****   return(result);
 548:CORE/cmsis_gcc.h **** }
 549:CORE/cmsis_gcc.h **** #endif
 550:CORE/cmsis_gcc.h **** 
 551:CORE/cmsis_gcc.h **** 
 552:CORE/cmsis_gcc.h **** /**
 553:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:CORE/cmsis_gcc.h ****  */
 557:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:CORE/cmsis_gcc.h **** {
 559:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:CORE/cmsis_gcc.h **** }
 561:CORE/cmsis_gcc.h **** 
 562:CORE/cmsis_gcc.h **** 
 563:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:CORE/cmsis_gcc.h **** /**
 565:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:CORE/cmsis_gcc.h ****  */
 569:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:CORE/cmsis_gcc.h **** {
 571:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:CORE/cmsis_gcc.h **** }
 573:CORE/cmsis_gcc.h **** #endif
 574:CORE/cmsis_gcc.h **** 
 575:CORE/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXEJVgw.s 			page 23


 579:CORE/cmsis_gcc.h **** 
 580:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:CORE/cmsis_gcc.h **** 
 583:CORE/cmsis_gcc.h **** /**
 584:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:CORE/cmsis_gcc.h ****   mode.
 588:CORE/cmsis_gcc.h ****   
 589:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:CORE/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:CORE/cmsis_gcc.h ****  */
 592:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:CORE/cmsis_gcc.h **** {
 594:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:CORE/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:CORE/cmsis_gcc.h ****   return 0U;
 598:CORE/cmsis_gcc.h **** #else
 599:CORE/cmsis_gcc.h ****   uint32_t result;
 600:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:CORE/cmsis_gcc.h ****   return result;
 602:CORE/cmsis_gcc.h **** #endif
 603:CORE/cmsis_gcc.h **** }
 604:CORE/cmsis_gcc.h **** 
 605:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:CORE/cmsis_gcc.h **** /**
 607:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:CORE/cmsis_gcc.h **** 
 611:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:CORE/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:CORE/cmsis_gcc.h ****  */
 614:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:CORE/cmsis_gcc.h **** {
 616:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:CORE/cmsis_gcc.h ****   return 0U;
 619:CORE/cmsis_gcc.h **** #else
 620:CORE/cmsis_gcc.h ****   uint32_t result;
 621:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:CORE/cmsis_gcc.h ****   return result;
 623:CORE/cmsis_gcc.h **** #endif
 624:CORE/cmsis_gcc.h **** }
 625:CORE/cmsis_gcc.h **** #endif
 626:CORE/cmsis_gcc.h **** 
 627:CORE/cmsis_gcc.h **** 
 628:CORE/cmsis_gcc.h **** /**
 629:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:CORE/cmsis_gcc.h ****   mode.
 633:CORE/cmsis_gcc.h ****   
 634:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:CORE/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
ARM GAS  /tmp/ccXEJVgw.s 			page 24


 636:CORE/cmsis_gcc.h ****  */
 637:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:CORE/cmsis_gcc.h **** {
 639:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:CORE/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:CORE/cmsis_gcc.h **** #else
 644:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:CORE/cmsis_gcc.h **** #endif
 646:CORE/cmsis_gcc.h **** }
 647:CORE/cmsis_gcc.h **** 
 648:CORE/cmsis_gcc.h **** 
 649:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:CORE/cmsis_gcc.h **** /**
 651:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:CORE/cmsis_gcc.h **** 
 655:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:CORE/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:CORE/cmsis_gcc.h ****  */
 658:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:CORE/cmsis_gcc.h **** {
 660:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:CORE/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:CORE/cmsis_gcc.h **** #else
 664:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:CORE/cmsis_gcc.h **** #endif
 666:CORE/cmsis_gcc.h **** }
 667:CORE/cmsis_gcc.h **** #endif
 668:CORE/cmsis_gcc.h **** 
 669:CORE/cmsis_gcc.h **** 
 670:CORE/cmsis_gcc.h **** /**
 671:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:CORE/cmsis_gcc.h ****   mode.
 675:CORE/cmsis_gcc.h **** 
 676:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:CORE/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:CORE/cmsis_gcc.h ****  */
 679:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:CORE/cmsis_gcc.h **** {
 681:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:CORE/cmsis_gcc.h ****   return 0U;
 685:CORE/cmsis_gcc.h **** #else
 686:CORE/cmsis_gcc.h ****   uint32_t result;
 687:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:CORE/cmsis_gcc.h ****   return result;
 689:CORE/cmsis_gcc.h **** #endif
 690:CORE/cmsis_gcc.h **** }
 691:CORE/cmsis_gcc.h **** 
 692:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXEJVgw.s 			page 25


 693:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:CORE/cmsis_gcc.h **** /**
 695:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:CORE/cmsis_gcc.h **** 
 699:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:CORE/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:CORE/cmsis_gcc.h ****  */
 702:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:CORE/cmsis_gcc.h **** {
 704:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:CORE/cmsis_gcc.h ****   return 0U;
 707:CORE/cmsis_gcc.h **** #else
 708:CORE/cmsis_gcc.h ****   uint32_t result;
 709:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:CORE/cmsis_gcc.h ****   return result;
 711:CORE/cmsis_gcc.h **** #endif
 712:CORE/cmsis_gcc.h **** }
 713:CORE/cmsis_gcc.h **** #endif
 714:CORE/cmsis_gcc.h **** 
 715:CORE/cmsis_gcc.h **** 
 716:CORE/cmsis_gcc.h **** /**
 717:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:CORE/cmsis_gcc.h ****   mode.
 721:CORE/cmsis_gcc.h **** 
 722:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:CORE/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:CORE/cmsis_gcc.h ****  */
 725:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:CORE/cmsis_gcc.h **** {
 727:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:CORE/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:CORE/cmsis_gcc.h **** #else
 732:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:CORE/cmsis_gcc.h **** #endif
 734:CORE/cmsis_gcc.h **** }
 735:CORE/cmsis_gcc.h **** 
 736:CORE/cmsis_gcc.h **** 
 737:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:CORE/cmsis_gcc.h **** /**
 739:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:CORE/cmsis_gcc.h **** 
 743:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:CORE/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:CORE/cmsis_gcc.h ****  */
 746:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:CORE/cmsis_gcc.h **** {
 748:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
ARM GAS  /tmp/ccXEJVgw.s 			page 26


 750:CORE/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:CORE/cmsis_gcc.h **** #else
 752:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:CORE/cmsis_gcc.h **** #endif
 754:CORE/cmsis_gcc.h **** }
 755:CORE/cmsis_gcc.h **** #endif
 756:CORE/cmsis_gcc.h **** 
 757:CORE/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:CORE/cmsis_gcc.h **** 
 760:CORE/cmsis_gcc.h **** 
 761:CORE/cmsis_gcc.h **** /**
 762:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 763:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:CORE/cmsis_gcc.h ****  */
 766:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:CORE/cmsis_gcc.h **** {
 768:CORE/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:CORE/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:CORE/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:CORE/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:CORE/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:CORE/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:CORE/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:CORE/cmsis_gcc.h **** #else
 776:CORE/cmsis_gcc.h ****   uint32_t result;
 777:CORE/cmsis_gcc.h **** 
 778:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:CORE/cmsis_gcc.h ****   return(result);
 780:CORE/cmsis_gcc.h **** #endif
 781:CORE/cmsis_gcc.h **** #else
 782:CORE/cmsis_gcc.h ****   return(0U);
 783:CORE/cmsis_gcc.h **** #endif
 784:CORE/cmsis_gcc.h **** }
 785:CORE/cmsis_gcc.h **** 
 786:CORE/cmsis_gcc.h **** 
 787:CORE/cmsis_gcc.h **** /**
 788:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 789:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:CORE/cmsis_gcc.h ****  */
 792:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:CORE/cmsis_gcc.h **** {
 794:CORE/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:CORE/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:CORE/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:CORE/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:CORE/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:CORE/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:CORE/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:CORE/cmsis_gcc.h **** #else
 802:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:CORE/cmsis_gcc.h **** #endif
 804:CORE/cmsis_gcc.h **** #else
 805:CORE/cmsis_gcc.h ****   (void)fpscr;
 806:CORE/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccXEJVgw.s 			page 27


 807:CORE/cmsis_gcc.h **** }
 808:CORE/cmsis_gcc.h **** 
 809:CORE/cmsis_gcc.h **** 
 810:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:CORE/cmsis_gcc.h **** 
 812:CORE/cmsis_gcc.h **** 
 813:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 816:CORE/cmsis_gcc.h ****   @{
 817:CORE/cmsis_gcc.h **** */
 818:CORE/cmsis_gcc.h **** 
 819:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:CORE/cmsis_gcc.h **** #else
 827:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:CORE/cmsis_gcc.h **** #endif
 831:CORE/cmsis_gcc.h **** 
 832:CORE/cmsis_gcc.h **** /**
 833:CORE/cmsis_gcc.h ****   \brief   No Operation
 834:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:CORE/cmsis_gcc.h ****  */
 836:CORE/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:CORE/cmsis_gcc.h **** 
 838:CORE/cmsis_gcc.h **** /**
 839:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:CORE/cmsis_gcc.h ****  */
 842:CORE/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:CORE/cmsis_gcc.h **** 
 844:CORE/cmsis_gcc.h **** 
 845:CORE/cmsis_gcc.h **** /**
 846:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 847:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:CORE/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:CORE/cmsis_gcc.h ****  */
 850:CORE/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:CORE/cmsis_gcc.h **** 
 852:CORE/cmsis_gcc.h **** 
 853:CORE/cmsis_gcc.h **** /**
 854:CORE/cmsis_gcc.h ****   \brief   Send Event
 855:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:CORE/cmsis_gcc.h ****  */
 857:CORE/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:CORE/cmsis_gcc.h **** 
 859:CORE/cmsis_gcc.h **** 
 860:CORE/cmsis_gcc.h **** /**
 861:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  /tmp/ccXEJVgw.s 			page 28


 864:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 865:CORE/cmsis_gcc.h ****  */
 866:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:CORE/cmsis_gcc.h **** {
 868:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
  55              		.loc 2 868 0
  56              		.syntax unified
  57              	@ 868 "CORE/cmsis_gcc.h" 1
  58 001e BFF36F8F 		isb 0xF
  59              	@ 0 "" 2
  60              		.thumb
  61              		.syntax unified
  62              	.LBE5:
  63              	.LBE4:
 624:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 625:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Barrier to ensure programming is performed in 2 steps, in right order
 626:HALLIB/Src/stm32f4xx_hal_flash.c ****     (independently of compiler optimization behavior) */
 627:HALLIB/Src/stm32f4xx_hal_flash.c ****   __ISB();
 628:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 629:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Program second word */
 630:HALLIB/Src/stm32f4xx_hal_flash.c ****   *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
  64              		.loc 1 630 0
  65 0022 4360     		str	r3, [r0, #4]
 631:HALLIB/Src/stm32f4xx_hal_flash.c **** }
  66              		.loc 1 631 0
  67 0024 5DF8044B 		ldr	r4, [sp], #4
  68              	.LCFI1:
  69              		.cfi_restore 4
  70              		.cfi_def_cfa_offset 0
  71 0028 7047     		bx	lr
  72              	.L4:
  73 002a 00BF     		.align	2
  74              	.L3:
  75 002c 003C0240 		.word	1073888256
  76              		.cfi_endproc
  77              	.LFE131:
  79              		.section	.text.FLASH_Program_Word,"ax",%progbits
  80              		.align	1
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv4-sp-d16
  86              	FLASH_Program_Word:
  87              	.LFB132:
 632:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 633:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 634:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 635:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Program word (32-bit) at a specified address.
 636:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 637:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         2.7V to 3.6V.
 638:HALLIB/Src/stm32f4xx_hal_flash.c ****   *
 639:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 640:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 641:HALLIB/Src/stm32f4xx_hal_flash.c ****   *  
 642:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 643:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 644:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval None
ARM GAS  /tmp/ccXEJVgw.s 			page 29


 645:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 646:HALLIB/Src/stm32f4xx_hal_flash.c **** static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
 647:HALLIB/Src/stm32f4xx_hal_flash.c **** {
  88              		.loc 1 647 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.LVL1:
 648:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 649:HALLIB/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 650:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 651:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 652:HALLIB/Src/stm32f4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
  94              		.loc 1 652 0
  95 0000 074B     		ldr	r3, .L6
  96 0002 1A69     		ldr	r2, [r3, #16]
  97 0004 22F44072 		bic	r2, r2, #768
  98 0008 1A61     		str	r2, [r3, #16]
 653:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_WORD;
  99              		.loc 1 653 0
 100 000a 1A69     		ldr	r2, [r3, #16]
 101 000c 42F40072 		orr	r2, r2, #512
 102 0010 1A61     		str	r2, [r3, #16]
 654:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 103              		.loc 1 654 0
 104 0012 1A69     		ldr	r2, [r3, #16]
 105 0014 42F00102 		orr	r2, r2, #1
 106 0018 1A61     		str	r2, [r3, #16]
 655:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 656:HALLIB/Src/stm32f4xx_hal_flash.c ****   *(__IO uint32_t*)Address = Data;
 107              		.loc 1 656 0
 108 001a 0160     		str	r1, [r0]
 109 001c 7047     		bx	lr
 110              	.L7:
 111 001e 00BF     		.align	2
 112              	.L6:
 113 0020 003C0240 		.word	1073888256
 114              		.cfi_endproc
 115              	.LFE132:
 117              		.section	.text.FLASH_Program_HalfWord,"ax",%progbits
 118              		.align	1
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	FLASH_Program_HalfWord:
 125              	.LFB133:
 657:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 658:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 659:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 660:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Program a half-word (16-bit) at a specified address.
 661:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 662:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         2.1V to 3.6V.
 663:HALLIB/Src/stm32f4xx_hal_flash.c ****   *
 664:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 665:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         the erase operation is performed before the program one.
ARM GAS  /tmp/ccXEJVgw.s 			page 30


 666:HALLIB/Src/stm32f4xx_hal_flash.c ****   *  
 667:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 668:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 669:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval None
 670:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 671:HALLIB/Src/stm32f4xx_hal_flash.c **** static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
 672:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 126              		.loc 1 672 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131              	.LVL2:
 673:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 674:HALLIB/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 675:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 676:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 677:HALLIB/Src/stm32f4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 132              		.loc 1 677 0
 133 0000 074B     		ldr	r3, .L9
 134 0002 1A69     		ldr	r2, [r3, #16]
 135 0004 22F44072 		bic	r2, r2, #768
 136 0008 1A61     		str	r2, [r3, #16]
 678:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 137              		.loc 1 678 0
 138 000a 1A69     		ldr	r2, [r3, #16]
 139 000c 42F48072 		orr	r2, r2, #256
 140 0010 1A61     		str	r2, [r3, #16]
 679:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 141              		.loc 1 679 0
 142 0012 1A69     		ldr	r2, [r3, #16]
 143 0014 42F00102 		orr	r2, r2, #1
 144 0018 1A61     		str	r2, [r3, #16]
 680:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 681:HALLIB/Src/stm32f4xx_hal_flash.c ****   *(__IO uint16_t*)Address = Data;
 145              		.loc 1 681 0
 146 001a 0180     		strh	r1, [r0]	@ movhi
 147 001c 7047     		bx	lr
 148              	.L10:
 149 001e 00BF     		.align	2
 150              	.L9:
 151 0020 003C0240 		.word	1073888256
 152              		.cfi_endproc
 153              	.LFE133:
 155              		.section	.text.FLASH_Program_Byte,"ax",%progbits
 156              		.align	1
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 160              		.fpu fpv4-sp-d16
 162              	FLASH_Program_Byte:
 163              	.LFB134:
 682:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 683:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 684:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 685:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Program byte (8-bit) at a specified address.
 686:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
ARM GAS  /tmp/ccXEJVgw.s 			page 31


 687:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         1.8V to 3.6V.
 688:HALLIB/Src/stm32f4xx_hal_flash.c ****   *
 689:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 690:HALLIB/Src/stm32f4xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 691:HALLIB/Src/stm32f4xx_hal_flash.c ****   *  
 692:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 693:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 694:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval None
 695:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 696:HALLIB/Src/stm32f4xx_hal_flash.c **** static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
 697:HALLIB/Src/stm32f4xx_hal_flash.c **** {
 164              		.loc 1 697 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169              	.LVL3:
 698:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 699:HALLIB/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 700:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 701:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 702:HALLIB/Src/stm32f4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 170              		.loc 1 702 0
 171 0000 064B     		ldr	r3, .L12
 172 0002 1A69     		ldr	r2, [r3, #16]
 173 0004 22F44072 		bic	r2, r2, #768
 174 0008 1A61     		str	r2, [r3, #16]
 703:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_BYTE;
 175              		.loc 1 703 0
 176 000a 1A69     		ldr	r2, [r3, #16]
 177 000c 1A61     		str	r2, [r3, #16]
 704:HALLIB/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 178              		.loc 1 704 0
 179 000e 1A69     		ldr	r2, [r3, #16]
 180 0010 42F00102 		orr	r2, r2, #1
 181 0014 1A61     		str	r2, [r3, #16]
 705:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 706:HALLIB/Src/stm32f4xx_hal_flash.c ****   *(__IO uint8_t*)Address = Data;
 182              		.loc 1 706 0
 183 0016 0170     		strb	r1, [r0]
 184 0018 7047     		bx	lr
 185              	.L13:
 186 001a 00BF     		.align	2
 187              	.L12:
 188 001c 003C0240 		.word	1073888256
 189              		.cfi_endproc
 190              	.LFE134:
 192              		.section	.text.FLASH_SetErrorCode,"ax",%progbits
 193              		.align	1
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	FLASH_SetErrorCode:
 200              	.LFB135:
 707:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 708:HALLIB/Src/stm32f4xx_hal_flash.c **** 
ARM GAS  /tmp/ccXEJVgw.s 			page 32


 709:HALLIB/Src/stm32f4xx_hal_flash.c **** /**
 710:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @brief  Set the specific FLASH error flag.
 711:HALLIB/Src/stm32f4xx_hal_flash.c ****   * @retval None
 712:HALLIB/Src/stm32f4xx_hal_flash.c ****   */
 713:HALLIB/Src/stm32f4xx_hal_flash.c **** static void FLASH_SetErrorCode(void)
 714:HALLIB/Src/stm32f4xx_hal_flash.c **** { 
 201              		.loc 1 714 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 715:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 206              		.loc 1 715 0
 207 0000 274B     		ldr	r3, .L21
 208 0002 DB68     		ldr	r3, [r3, #12]
 209 0004 13F0100F 		tst	r3, #16
 210 0008 07D0     		beq	.L15
 716:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 717:HALLIB/Src/stm32f4xx_hal_flash.c ****    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 211              		.loc 1 717 0
 212 000a 264A     		ldr	r2, .L21+4
 213 000c D369     		ldr	r3, [r2, #28]
 214 000e 43F01003 		orr	r3, r3, #16
 215 0012 D361     		str	r3, [r2, #28]
 718:HALLIB/Src/stm32f4xx_hal_flash.c ****    
 719:HALLIB/Src/stm32f4xx_hal_flash.c ****    /* Clear FLASH write protection error pending bit */
 720:HALLIB/Src/stm32f4xx_hal_flash.c ****    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 216              		.loc 1 720 0
 217 0014 1022     		movs	r2, #16
 218 0016 224B     		ldr	r3, .L21
 219 0018 DA60     		str	r2, [r3, #12]
 220              	.L15:
 721:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 722:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 723:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 221              		.loc 1 723 0
 222 001a 214B     		ldr	r3, .L21
 223 001c DB68     		ldr	r3, [r3, #12]
 224 001e 13F0200F 		tst	r3, #32
 225 0022 07D0     		beq	.L16
 724:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 725:HALLIB/Src/stm32f4xx_hal_flash.c ****    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 226              		.loc 1 725 0
 227 0024 1F4A     		ldr	r2, .L21+4
 228 0026 D369     		ldr	r3, [r2, #28]
 229 0028 43F00803 		orr	r3, r3, #8
 230 002c D361     		str	r3, [r2, #28]
 726:HALLIB/Src/stm32f4xx_hal_flash.c ****    
 727:HALLIB/Src/stm32f4xx_hal_flash.c ****    /* Clear FLASH Programming alignment error pending bit */
 728:HALLIB/Src/stm32f4xx_hal_flash.c ****    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 231              		.loc 1 728 0
 232 002e 2022     		movs	r2, #32
 233 0030 1B4B     		ldr	r3, .L21
 234 0032 DA60     		str	r2, [r3, #12]
 235              	.L16:
 729:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 730:HALLIB/Src/stm32f4xx_hal_flash.c ****   
ARM GAS  /tmp/ccXEJVgw.s 			page 33


 731:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 236              		.loc 1 731 0
 237 0034 1A4B     		ldr	r3, .L21
 238 0036 DB68     		ldr	r3, [r3, #12]
 239 0038 13F0400F 		tst	r3, #64
 240 003c 07D0     		beq	.L17
 732:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 733:HALLIB/Src/stm32f4xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 241              		.loc 1 733 0
 242 003e 194A     		ldr	r2, .L21+4
 243 0040 D369     		ldr	r3, [r2, #28]
 244 0042 43F00403 		orr	r3, r3, #4
 245 0046 D361     		str	r3, [r2, #28]
 734:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 735:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH Programming parallelism error pending bit */
 736:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 246              		.loc 1 736 0
 247 0048 4022     		movs	r2, #64
 248 004a 154B     		ldr	r3, .L21
 249 004c DA60     		str	r2, [r3, #12]
 250              	.L17:
 737:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 738:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 739:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 251              		.loc 1 739 0
 252 004e 144B     		ldr	r3, .L21
 253 0050 DB68     		ldr	r3, [r3, #12]
 254 0052 13F0800F 		tst	r3, #128
 255 0056 07D0     		beq	.L18
 740:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 741:HALLIB/Src/stm32f4xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 256              		.loc 1 741 0
 257 0058 124A     		ldr	r2, .L21+4
 258 005a D369     		ldr	r3, [r2, #28]
 259 005c 43F00203 		orr	r3, r3, #2
 260 0060 D361     		str	r3, [r2, #28]
 742:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 743:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH Programming sequence error pending bit */
 744:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 261              		.loc 1 744 0
 262 0062 8022     		movs	r2, #128
 263 0064 0E4B     		ldr	r3, .L21
 264 0066 DA60     		str	r2, [r3, #12]
 265              	.L18:
 745:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 746:HALLIB/Src/stm32f4xx_hal_flash.c **** #if defined(FLASH_SR_RDERR) 
 747:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 266              		.loc 1 747 0
 267 0068 0D4B     		ldr	r3, .L21
 268 006a DB68     		ldr	r3, [r3, #12]
 269 006c 13F4807F 		tst	r3, #256
 270 0070 08D0     		beq	.L19
 748:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 749:HALLIB/Src/stm32f4xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 271              		.loc 1 749 0
 272 0072 0C4A     		ldr	r2, .L21+4
 273 0074 D369     		ldr	r3, [r2, #28]
ARM GAS  /tmp/ccXEJVgw.s 			page 34


 274 0076 43F00103 		orr	r3, r3, #1
 275 007a D361     		str	r3, [r2, #28]
 750:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 751:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH Proprietary readout protection error pending bit */
 752:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 276              		.loc 1 752 0
 277 007c 4FF48072 		mov	r2, #256
 278 0080 074B     		ldr	r3, .L21
 279 0082 DA60     		str	r2, [r3, #12]
 280              	.L19:
 753:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 754:HALLIB/Src/stm32f4xx_hal_flash.c **** #endif /* FLASH_SR_RDERR */  
 755:HALLIB/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 281              		.loc 1 755 0
 282 0084 064B     		ldr	r3, .L21
 283 0086 DB68     		ldr	r3, [r3, #12]
 284 0088 13F0020F 		tst	r3, #2
 285 008c 07D0     		beq	.L14
 756:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 757:HALLIB/Src/stm32f4xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 286              		.loc 1 757 0
 287 008e 054A     		ldr	r2, .L21+4
 288 0090 D369     		ldr	r3, [r2, #28]
 289 0092 43F02003 		orr	r3, r3, #32
 290 0096 D361     		str	r3, [r2, #28]
 758:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 759:HALLIB/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH Operation error pending bit */
 760:HALLIB/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 291              		.loc 1 760 0
 292 0098 0222     		movs	r2, #2
 293 009a 014B     		ldr	r3, .L21
 294 009c DA60     		str	r2, [r3, #12]
 295              	.L14:
 296 009e 7047     		bx	lr
 297              	.L22:
 298              		.align	2
 299              	.L21:
 300 00a0 003C0240 		.word	1073888256
 301 00a4 00000000 		.word	pFlash
 302              		.cfi_endproc
 303              	.LFE135:
 305              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 306              		.align	1
 307              		.global	HAL_FLASH_Program_IT
 308              		.syntax unified
 309              		.thumb
 310              		.thumb_func
 311              		.fpu fpv4-sp-d16
 313              	HAL_FLASH_Program_IT:
 314              	.LFB120:
 215:HALLIB/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 315              		.loc 1 215 0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319              	.LVL4:
 320 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccXEJVgw.s 			page 35


 321              	.LCFI2:
 322              		.cfi_def_cfa_offset 16
 323              		.cfi_offset 4, -16
 324              		.cfi_offset 5, -12
 325              		.cfi_offset 6, -8
 326              		.cfi_offset 14, -4
 327              	.LVL5:
 219:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 328              		.loc 1 219 0
 329 0002 194C     		ldr	r4, .L33
 330 0004 247E     		ldrb	r4, [r4, #24]	@ zero_extendqisi2
 331 0006 012C     		cmp	r4, #1
 332 0008 2CD0     		beq	.L28
 333 000a 0D46     		mov	r5, r1
 334 000c 0446     		mov	r4, r0
 219:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 335              		.loc 1 219 0 is_stmt 0 discriminator 2
 336 000e 1649     		ldr	r1, .L33
 337              	.LVL6:
 338 0010 0120     		movs	r0, #1
 339              	.LVL7:
 340 0012 0876     		strb	r0, [r1, #24]
 225:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 341              		.loc 1 225 0 is_stmt 1 discriminator 2
 342 0014 1548     		ldr	r0, .L33+4
 343 0016 0669     		ldr	r6, [r0, #16]
 344 0018 46F08076 		orr	r6, r6, #16777216
 345 001c 0661     		str	r6, [r0, #16]
 228:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 346              		.loc 1 228 0 discriminator 2
 347 001e 0669     		ldr	r6, [r0, #16]
 348 0020 46F00076 		orr	r6, r6, #33554432
 349 0024 0661     		str	r6, [r0, #16]
 230:HALLIB/Src/stm32f4xx_hal_flash.c ****   pFlash.Address = Address;
 350              		.loc 1 230 0 discriminator 2
 351 0026 0320     		movs	r0, #3
 352 0028 0870     		strb	r0, [r1]
 231:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 353              		.loc 1 231 0 discriminator 2
 354 002a 4D61     		str	r5, [r1, #20]
 233:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 355              		.loc 1 233 0 discriminator 2
 356 002c 44B1     		cbz	r4, .L30
 238:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 357              		.loc 1 238 0
 358 002e 012C     		cmp	r4, #1
 359 0030 0CD0     		beq	.L31
 243:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 360              		.loc 1 243 0
 361 0032 022C     		cmp	r4, #2
 362 0034 10D0     		beq	.L32
 251:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 363              		.loc 1 251 0
 364 0036 2846     		mov	r0, r5
 365 0038 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 366              	.LVL8:
 254:HALLIB/Src/stm32f4xx_hal_flash.c **** }
ARM GAS  /tmp/ccXEJVgw.s 			page 36


 367              		.loc 1 254 0
 368 003c 0020     		movs	r0, #0
 369 003e 70BD     		pop	{r4, r5, r6, pc}
 370              	.LVL9:
 371              	.L30:
 236:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 372              		.loc 1 236 0
 373 0040 D1B2     		uxtb	r1, r2
 374 0042 2846     		mov	r0, r5
 375 0044 FFF7FEFF 		bl	FLASH_Program_Byte
 376              	.LVL10:
 254:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 377              		.loc 1 254 0
 378 0048 0020     		movs	r0, #0
 379 004a 70BD     		pop	{r4, r5, r6, pc}
 380              	.LVL11:
 381              	.L31:
 241:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 382              		.loc 1 241 0
 383 004c 91B2     		uxth	r1, r2
 384 004e 2846     		mov	r0, r5
 385 0050 FFF7FEFF 		bl	FLASH_Program_HalfWord
 386              	.LVL12:
 254:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 387              		.loc 1 254 0
 388 0054 0020     		movs	r0, #0
 389 0056 70BD     		pop	{r4, r5, r6, pc}
 390              	.LVL13:
 391              	.L32:
 246:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 392              		.loc 1 246 0
 393 0058 1146     		mov	r1, r2
 394 005a 2846     		mov	r0, r5
 395 005c FFF7FEFF 		bl	FLASH_Program_Word
 396              	.LVL14:
 254:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 397              		.loc 1 254 0
 398 0060 0020     		movs	r0, #0
 399 0062 70BD     		pop	{r4, r5, r6, pc}
 400              	.LVL15:
 401              	.L28:
 219:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 402              		.loc 1 219 0
 403 0064 0220     		movs	r0, #2
 404              	.LVL16:
 255:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 405              		.loc 1 255 0
 406 0066 70BD     		pop	{r4, r5, r6, pc}
 407              	.L34:
 408              		.align	2
 409              	.L33:
 410 0068 00000000 		.word	pFlash
 411 006c 003C0240 		.word	1073888256
 412              		.cfi_endproc
 413              	.LFE120:
 415              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 416              		.align	1
ARM GAS  /tmp/ccXEJVgw.s 			page 37


 417              		.weak	HAL_FLASH_EndOfOperationCallback
 418              		.syntax unified
 419              		.thumb
 420              		.thumb_func
 421              		.fpu fpv4-sp-d16
 423              	HAL_FLASH_EndOfOperationCallback:
 424              	.LFB122:
 385:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 425              		.loc 1 385 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 430              	.LVL17:
 431 0000 7047     		bx	lr
 432              		.cfi_endproc
 433              	.LFE122:
 435              		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 436              		.align	1
 437              		.weak	HAL_FLASH_OperationErrorCallback
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	HAL_FLASH_OperationErrorCallback:
 444              	.LFB123:
 402:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 445              		.loc 1 402 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450              	.LVL18:
 451 0000 7047     		bx	lr
 452              		.cfi_endproc
 453              	.LFE123:
 455              		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 456              		.align	1
 457              		.global	HAL_FLASH_IRQHandler
 458              		.syntax unified
 459              		.thumb
 460              		.thumb_func
 461              		.fpu fpv4-sp-d16
 463              	HAL_FLASH_IRQHandler:
 464              	.LFB121:
 262:HALLIB/Src/stm32f4xx_hal_flash.c ****   uint32_t addresstmp = 0U;
 465              		.loc 1 262 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 262:HALLIB/Src/stm32f4xx_hal_flash.c ****   uint32_t addresstmp = 0U;
 469              		.loc 1 262 0
 470 0000 10B5     		push	{r4, lr}
 471              	.LCFI3:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
ARM GAS  /tmp/ccXEJVgw.s 			page 38


 475              	.LVL19:
 267:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 476              		.loc 1 267 0
 477 0002 3B4B     		ldr	r3, .L53
 478 0004 DB68     		ldr	r3, [r3, #12]
 479 0006 13F4F97F 		tst	r3, #498
 480 000a 13D0     		beq	.L38
 274:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 481              		.loc 1 274 0
 482 000c 394B     		ldr	r3, .L53+4
 483 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 484 0010 DBB2     		uxtb	r3, r3
 485 0012 012B     		cmp	r3, #1
 486 0014 3DD0     		beq	.L49
 280:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 487              		.loc 1 280 0
 488 0016 374B     		ldr	r3, .L53+4
 489 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 490 001a DBB2     		uxtb	r3, r3
 491 001c 022B     		cmp	r3, #2
 492 001e 3ED0     		beq	.L50
 288:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 493              		.loc 1 288 0
 494 0020 344B     		ldr	r3, .L53+4
 495 0022 5C69     		ldr	r4, [r3, #20]
 496              	.LVL20:
 497              	.L40:
 292:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 498              		.loc 1 292 0
 499 0024 FFF7FEFF 		bl	FLASH_SetErrorCode
 500              	.LVL21:
 295:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 501              		.loc 1 295 0
 502 0028 2046     		mov	r0, r4
 503 002a FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 504              	.LVL22:
 298:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 505              		.loc 1 298 0
 506 002e 0022     		movs	r2, #0
 507 0030 304B     		ldr	r3, .L53+4
 508 0032 1A70     		strb	r2, [r3]
 509              	.LVL23:
 510              	.L38:
 302:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 511              		.loc 1 302 0
 512 0034 2E4B     		ldr	r3, .L53
 513 0036 DB68     		ldr	r3, [r3, #12]
 514 0038 13F0010F 		tst	r3, #1
 515 003c 13D0     		beq	.L42
 305:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 516              		.loc 1 305 0
 517 003e 0122     		movs	r2, #1
 518 0040 2B4B     		ldr	r3, .L53
 519 0042 DA60     		str	r2, [r3, #12]
 307:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 520              		.loc 1 307 0
 521 0044 2B4B     		ldr	r3, .L53+4
ARM GAS  /tmp/ccXEJVgw.s 			page 39


 522 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 523 0048 DBB2     		uxtb	r3, r3
 524 004a 9342     		cmp	r3, r2
 525 004c 2AD0     		beq	.L51
 340:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 526              		.loc 1 340 0
 527 004e 294B     		ldr	r3, .L53+4
 528 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 529 0052 DBB2     		uxtb	r3, r3
 530 0054 022B     		cmp	r3, #2
 531 0056 43D0     		beq	.L52
 353:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 532              		.loc 1 353 0
 533 0058 264B     		ldr	r3, .L53+4
 534 005a 5869     		ldr	r0, [r3, #20]
 535 005c FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 536              	.LVL24:
 537              	.L46:
 355:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 538              		.loc 1 355 0
 539 0060 0022     		movs	r2, #0
 540 0062 244B     		ldr	r3, .L53+4
 541 0064 1A70     		strb	r2, [r3]
 542              	.L42:
 359:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 543              		.loc 1 359 0
 544 0066 234B     		ldr	r3, .L53+4
 545 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 546 006a 8BB9     		cbnz	r3, .L37
 362:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 547              		.loc 1 362 0
 548 006c 204B     		ldr	r3, .L53
 549 006e 1A69     		ldr	r2, [r3, #16]
 550 0070 22F40042 		bic	r2, r2, #32768
 551 0074 22F0FF02 		bic	r2, r2, #255
 552 0078 1A61     		str	r2, [r3, #16]
 365:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 553              		.loc 1 365 0
 554 007a 1A69     		ldr	r2, [r3, #16]
 555 007c 22F08072 		bic	r2, r2, #16777216
 556 0080 1A61     		str	r2, [r3, #16]
 368:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 557              		.loc 1 368 0
 558 0082 1A69     		ldr	r2, [r3, #16]
 559 0084 22F00072 		bic	r2, r2, #33554432
 560 0088 1A61     		str	r2, [r3, #16]
 371:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 561              		.loc 1 371 0
 562 008a 0022     		movs	r2, #0
 563 008c 194B     		ldr	r3, .L53+4
 564 008e 1A76     		strb	r2, [r3, #24]
 565              	.L37:
 566 0090 10BD     		pop	{r4, pc}
 567              	.LVL25:
 568              	.L49:
 277:HALLIB/Src/stm32f4xx_hal_flash.c ****       pFlash.Sector = 0xFFFFFFFFU;
 569              		.loc 1 277 0
ARM GAS  /tmp/ccXEJVgw.s 			page 40


 570 0092 184B     		ldr	r3, .L53+4
 571 0094 DC68     		ldr	r4, [r3, #12]
 572              	.LVL26:
 278:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 573              		.loc 1 278 0
 574 0096 4FF0FF32 		mov	r2, #-1
 575 009a DA60     		str	r2, [r3, #12]
 576 009c C2E7     		b	.L40
 577              	.LVL27:
 578              	.L50:
 283:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 579              		.loc 1 283 0
 580 009e 154B     		ldr	r3, .L53+4
 581 00a0 1C69     		ldr	r4, [r3, #16]
 582              	.LVL28:
 583 00a2 BFE7     		b	.L40
 584              	.LVL29:
 585              	.L51:
 310:HALLIB/Src/stm32f4xx_hal_flash.c ****       
 586              		.loc 1 310 0
 587 00a4 134B     		ldr	r3, .L53+4
 588 00a6 5A68     		ldr	r2, [r3, #4]
 589 00a8 013A     		subs	r2, r2, #1
 590 00aa 5A60     		str	r2, [r3, #4]
 313:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 591              		.loc 1 313 0
 592 00ac 5B68     		ldr	r3, [r3, #4]
 593 00ae 5BB1     		cbz	r3, .L44
 315:HALLIB/Src/stm32f4xx_hal_flash.c ****         /*Indicate user which sector has been erased*/
 594              		.loc 1 315 0
 595 00b0 104C     		ldr	r4, .L53+4
 596 00b2 E068     		ldr	r0, [r4, #12]
 597              	.LVL30:
 317:HALLIB/Src/stm32f4xx_hal_flash.c ****         
 598              		.loc 1 317 0
 599 00b4 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 600              	.LVL31:
 320:HALLIB/Src/stm32f4xx_hal_flash.c ****         addresstmp = pFlash.Sector;
 601              		.loc 1 320 0
 602 00b8 E368     		ldr	r3, [r4, #12]
 603 00ba 0133     		adds	r3, r3, #1
 604 00bc E360     		str	r3, [r4, #12]
 321:HALLIB/Src/stm32f4xx_hal_flash.c ****         FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 605              		.loc 1 321 0
 606 00be E068     		ldr	r0, [r4, #12]
 607              	.LVL32:
 322:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 608              		.loc 1 322 0
 609 00c0 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 610 00c2 FFF7FEFF 		bl	FLASH_Erase_Sector
 611              	.LVL33:
 612 00c6 CEE7     		b	.L42
 613              	.L44:
 614              	.LVL34:
 328:HALLIB/Src/stm32f4xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 615              		.loc 1 328 0
 616 00c8 0A4B     		ldr	r3, .L53+4
ARM GAS  /tmp/ccXEJVgw.s 			page 41


 617 00ca 4FF0FF34 		mov	r4, #-1
 618 00ce DC60     		str	r4, [r3, #12]
 329:HALLIB/Src/stm32f4xx_hal_flash.c ****         
 619              		.loc 1 329 0
 620 00d0 0022     		movs	r2, #0
 621 00d2 1A70     		strb	r2, [r3]
 332:HALLIB/Src/stm32f4xx_hal_flash.c ****                 
 622              		.loc 1 332 0
 623 00d4 FFF7FEFF 		bl	FLASH_FlushCaches
 624              	.LVL35:
 335:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 625              		.loc 1 335 0
 626 00d8 2046     		mov	r0, r4
 627 00da FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 628              	.LVL36:
 629 00de C2E7     		b	.L42
 630              	.LVL37:
 631              	.L52:
 344:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 632              		.loc 1 344 0
 633 00e0 FFF7FEFF 		bl	FLASH_FlushCaches
 634              	.LVL38:
 347:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 635              		.loc 1 347 0
 636 00e4 034B     		ldr	r3, .L53+4
 637 00e6 1869     		ldr	r0, [r3, #16]
 638 00e8 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 639              	.LVL39:
 640 00ec B8E7     		b	.L46
 641              	.L54:
 642 00ee 00BF     		.align	2
 643              	.L53:
 644 00f0 003C0240 		.word	1073888256
 645 00f4 00000000 		.word	pFlash
 646              		.cfi_endproc
 647              	.LFE121:
 649              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
 650              		.align	1
 651              		.global	HAL_FLASH_Unlock
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu fpv4-sp-d16
 657              	HAL_FLASH_Unlock:
 658              	.LFB124:
 434:HALLIB/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 659              		.loc 1 434 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664              	.LVL40:
 437:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 665              		.loc 1 437 0
 666 0000 094B     		ldr	r3, .L60
 667 0002 1B69     		ldr	r3, [r3, #16]
 668 0004 002B     		cmp	r3, #0
ARM GAS  /tmp/ccXEJVgw.s 			page 42


 669 0006 01DB     		blt	.L59
 435:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 670              		.loc 1 435 0
 671 0008 0020     		movs	r0, #0
 672 000a 7047     		bx	lr
 673              	.L59:
 440:HALLIB/Src/stm32f4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 674              		.loc 1 440 0
 675 000c 064B     		ldr	r3, .L60
 676 000e 074A     		ldr	r2, .L60+4
 677 0010 5A60     		str	r2, [r3, #4]
 441:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 678              		.loc 1 441 0
 679 0012 02F18832 		add	r2, r2, #-2004318072
 680 0016 5A60     		str	r2, [r3, #4]
 444:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 681              		.loc 1 444 0
 682 0018 1B69     		ldr	r3, [r3, #16]
 683 001a 002B     		cmp	r3, #0
 684 001c 01DB     		blt	.L58
 435:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 685              		.loc 1 435 0
 686 001e 0020     		movs	r0, #0
 687 0020 7047     		bx	lr
 688              	.L58:
 446:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 689              		.loc 1 446 0
 690 0022 0120     		movs	r0, #1
 691              	.LVL41:
 451:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 692              		.loc 1 451 0
 693 0024 7047     		bx	lr
 694              	.L61:
 695 0026 00BF     		.align	2
 696              	.L60:
 697 0028 003C0240 		.word	1073888256
 698 002c 23016745 		.word	1164378403
 699              		.cfi_endproc
 700              	.LFE124:
 702              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 703              		.align	1
 704              		.global	HAL_FLASH_Lock
 705              		.syntax unified
 706              		.thumb
 707              		.thumb_func
 708              		.fpu fpv4-sp-d16
 710              	HAL_FLASH_Lock:
 711              	.LFB125:
 458:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 712              		.loc 1 458 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716              		@ link register save eliminated.
 460:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 717              		.loc 1 460 0
 718 0000 034A     		ldr	r2, .L63
ARM GAS  /tmp/ccXEJVgw.s 			page 43


 719 0002 1369     		ldr	r3, [r2, #16]
 720 0004 43F00043 		orr	r3, r3, #-2147483648
 721 0008 1361     		str	r3, [r2, #16]
 463:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 722              		.loc 1 463 0
 723 000a 0020     		movs	r0, #0
 724 000c 7047     		bx	lr
 725              	.L64:
 726 000e 00BF     		.align	2
 727              	.L63:
 728 0010 003C0240 		.word	1073888256
 729              		.cfi_endproc
 730              	.LFE125:
 732              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 733              		.align	1
 734              		.global	HAL_FLASH_OB_Unlock
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv4-sp-d16
 740              	HAL_FLASH_OB_Unlock:
 741              	.LFB126:
 470:HALLIB/Src/stm32f4xx_hal_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 742              		.loc 1 470 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              		@ link register save eliminated.
 471:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 747              		.loc 1 471 0
 748 0000 074B     		ldr	r3, .L68
 749 0002 5B69     		ldr	r3, [r3, #20]
 750 0004 13F0010F 		tst	r3, #1
 751 0008 07D0     		beq	.L67
 474:HALLIB/Src/stm32f4xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 752              		.loc 1 474 0
 753 000a 054B     		ldr	r3, .L68
 754 000c 054A     		ldr	r2, .L68+4
 755 000e 9A60     		str	r2, [r3, #8]
 475:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 756              		.loc 1 475 0
 757 0010 02F14432 		add	r2, r2, #1145324612
 758 0014 9A60     		str	r2, [r3, #8]
 482:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 759              		.loc 1 482 0
 760 0016 0020     		movs	r0, #0
 761 0018 7047     		bx	lr
 762              	.L67:
 479:HALLIB/Src/stm32f4xx_hal_flash.c ****   }  
 763              		.loc 1 479 0
 764 001a 0120     		movs	r0, #1
 483:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 765              		.loc 1 483 0
 766 001c 7047     		bx	lr
 767              	.L69:
 768 001e 00BF     		.align	2
 769              	.L68:
ARM GAS  /tmp/ccXEJVgw.s 			page 44


 770 0020 003C0240 		.word	1073888256
 771 0024 3B2A1908 		.word	135866939
 772              		.cfi_endproc
 773              	.LFE126:
 775              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 776              		.align	1
 777              		.global	HAL_FLASH_OB_Lock
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	HAL_FLASH_OB_Lock:
 784              	.LFB127:
 490:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 785              		.loc 1 490 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		@ link register save eliminated.
 492:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 790              		.loc 1 492 0
 791 0000 034A     		ldr	r2, .L71
 792 0002 5369     		ldr	r3, [r2, #20]
 793 0004 43F00103 		orr	r3, r3, #1
 794 0008 5361     		str	r3, [r2, #20]
 495:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 795              		.loc 1 495 0
 796 000a 0020     		movs	r0, #0
 797 000c 7047     		bx	lr
 798              	.L72:
 799 000e 00BF     		.align	2
 800              	.L71:
 801 0010 003C0240 		.word	1073888256
 802              		.cfi_endproc
 803              	.LFE127:
 805              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
 806              		.align	1
 807              		.global	HAL_FLASH_GetError
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 811              		.fpu fpv4-sp-d16
 813              	HAL_FLASH_GetError:
 814              	.LFB129:
 539:HALLIB/Src/stm32f4xx_hal_flash.c ****    return pFlash.ErrorCode;
 815              		.loc 1 539 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 540:HALLIB/Src/stm32f4xx_hal_flash.c **** }  
 820              		.loc 1 540 0
 821 0000 014B     		ldr	r3, .L74
 822 0002 D869     		ldr	r0, [r3, #28]
 541:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 823              		.loc 1 541 0
 824 0004 7047     		bx	lr
ARM GAS  /tmp/ccXEJVgw.s 			page 45


 825              	.L75:
 826 0006 00BF     		.align	2
 827              	.L74:
 828 0008 00000000 		.word	pFlash
 829              		.cfi_endproc
 830              	.LFE129:
 832              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 833              		.align	1
 834              		.global	FLASH_WaitForLastOperation
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 838              		.fpu fpv4-sp-d16
 840              	FLASH_WaitForLastOperation:
 841              	.LFB130:
 553:HALLIB/Src/stm32f4xx_hal_flash.c ****   uint32_t tickstart = 0U;
 842              		.loc 1 553 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 0
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 846              	.LVL42:
 847 0000 38B5     		push	{r3, r4, r5, lr}
 848              	.LCFI4:
 849              		.cfi_def_cfa_offset 16
 850              		.cfi_offset 3, -16
 851              		.cfi_offset 4, -12
 852              		.cfi_offset 5, -8
 853              		.cfi_offset 14, -4
 854 0002 0446     		mov	r4, r0
 855              	.LVL43:
 557:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 856              		.loc 1 557 0
 857 0004 0022     		movs	r2, #0
 858 0006 154B     		ldr	r3, .L88
 859 0008 DA61     		str	r2, [r3, #28]
 563:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 860              		.loc 1 563 0
 861 000a FFF7FEFF 		bl	HAL_GetTick
 862              	.LVL44:
 863 000e 0546     		mov	r5, r0
 864              	.LVL45:
 865              	.L78:
 565:HALLIB/Src/stm32f4xx_hal_flash.c ****   { 
 866              		.loc 1 565 0
 867 0010 134B     		ldr	r3, .L88+4
 868 0012 DB68     		ldr	r3, [r3, #12]
 869 0014 13F4803F 		tst	r3, #65536
 870 0018 0AD0     		beq	.L86
 567:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 871              		.loc 1 567 0
 872 001a B4F1FF3F 		cmp	r4, #-1
 873 001e F7D0     		beq	.L78
 569:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 874              		.loc 1 569 0
 875 0020 CCB1     		cbz	r4, .L82
 569:HALLIB/Src/stm32f4xx_hal_flash.c ****       {
 876              		.loc 1 569 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccXEJVgw.s 			page 46


 877 0022 FFF7FEFF 		bl	HAL_GetTick
 878              	.LVL46:
 879 0026 401B     		subs	r0, r0, r5
 880 0028 8442     		cmp	r4, r0
 881 002a F1D2     		bcs	.L78
 571:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 882              		.loc 1 571 0 is_stmt 1
 883 002c 0320     		movs	r0, #3
 884 002e 38BD     		pop	{r3, r4, r5, pc}
 885              	.LVL47:
 886              	.L86:
 577:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 887              		.loc 1 577 0
 888 0030 0B4B     		ldr	r3, .L88+4
 889 0032 DB68     		ldr	r3, [r3, #12]
 890 0034 13F0010F 		tst	r3, #1
 891 0038 02D0     		beq	.L81
 580:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 892              		.loc 1 580 0
 893 003a 0122     		movs	r2, #1
 894 003c 084B     		ldr	r3, .L88+4
 895 003e DA60     		str	r2, [r3, #12]
 896              	.L81:
 583:HALLIB/Src/stm32f4xx_hal_flash.c ****                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 897              		.loc 1 583 0
 898 0040 074B     		ldr	r3, .L88+4
 899 0042 DB68     		ldr	r3, [r3, #12]
 900 0044 13F4F97F 		tst	r3, #498
 901 0048 01D1     		bne	.L87
 596:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 902              		.loc 1 596 0
 903 004a 0020     		movs	r0, #0
 598:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 904              		.loc 1 598 0
 905 004c 38BD     		pop	{r3, r4, r5, pc}
 906              	.LVL48:
 907              	.L87:
 591:HALLIB/Src/stm32f4xx_hal_flash.c ****     return HAL_ERROR;
 908              		.loc 1 591 0
 909 004e FFF7FEFF 		bl	FLASH_SetErrorCode
 910              	.LVL49:
 592:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 911              		.loc 1 592 0
 912 0052 0120     		movs	r0, #1
 913 0054 38BD     		pop	{r3, r4, r5, pc}
 914              	.LVL50:
 915              	.L82:
 571:HALLIB/Src/stm32f4xx_hal_flash.c ****       }
 916              		.loc 1 571 0
 917 0056 0320     		movs	r0, #3
 918 0058 38BD     		pop	{r3, r4, r5, pc}
 919              	.LVL51:
 920              	.L89:
 921 005a 00BF     		.align	2
 922              	.L88:
 923 005c 00000000 		.word	pFlash
 924 0060 003C0240 		.word	1073888256
ARM GAS  /tmp/ccXEJVgw.s 			page 47


 925              		.cfi_endproc
 926              	.LFE130:
 928              		.section	.text.HAL_FLASH_Program,"ax",%progbits
 929              		.align	1
 930              		.global	HAL_FLASH_Program
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 934              		.fpu fpv4-sp-d16
 936              	HAL_FLASH_Program:
 937              	.LFB119:
 157:HALLIB/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 938              		.loc 1 157 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942              	.LVL52:
 943 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 944              	.LCFI5:
 945              		.cfi_def_cfa_offset 24
 946              		.cfi_offset 4, -24
 947              		.cfi_offset 5, -20
 948              		.cfi_offset 6, -16
 949              		.cfi_offset 7, -12
 950              		.cfi_offset 8, -8
 951              		.cfi_offset 14, -4
 952              	.LVL53:
 161:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 953              		.loc 1 161 0
 954 0004 1D4C     		ldr	r4, .L103
 955 0006 247E     		ldrb	r4, [r4, #24]	@ zero_extendqisi2
 956 0008 012C     		cmp	r4, #1
 957 000a 03D1     		bne	.L99
 958 000c 0224     		movs	r4, #2
 959              	.LVL54:
 960              	.L91:
 203:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 961              		.loc 1 203 0
 962 000e 2046     		mov	r0, r4
 963 0010 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 964              	.LVL55:
 965              	.L99:
 966 0014 9846     		mov	r8, r3
 967 0016 1746     		mov	r7, r2
 968 0018 0E46     		mov	r6, r1
 969 001a 0546     		mov	r5, r0
 161:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 970              		.loc 1 161 0 discriminator 2
 971 001c 0122     		movs	r2, #1
 972              	.LVL56:
 973 001e 174B     		ldr	r3, .L103
 974 0020 1A76     		strb	r2, [r3, #24]
 167:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 975              		.loc 1 167 0 discriminator 2
 976 0022 4CF25030 		movw	r0, #50000
 977              	.LVL57:
 978 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
ARM GAS  /tmp/ccXEJVgw.s 			page 48


 979              	.LVL58:
 169:HALLIB/Src/stm32f4xx_hal_flash.c ****   {
 980              		.loc 1 169 0 discriminator 2
 981 002a 0446     		mov	r4, r0
 982 002c 98B9     		cbnz	r0, .L92
 171:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 983              		.loc 1 171 0
 984 002e B5B1     		cbz	r5, .L100
 176:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 985              		.loc 1 176 0
 986 0030 012D     		cmp	r5, #1
 987 0032 19D0     		beq	.L101
 181:HALLIB/Src/stm32f4xx_hal_flash.c ****     {
 988              		.loc 1 181 0
 989 0034 022D     		cmp	r5, #2
 990 0036 1CD0     		beq	.L102
 189:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 991              		.loc 1 189 0
 992 0038 3A46     		mov	r2, r7
 993 003a 4346     		mov	r3, r8
 994 003c 3046     		mov	r0, r6
 995              	.LVL59:
 996 003e FFF7FEFF 		bl	FLASH_Program_DoubleWord
 997              	.LVL60:
 998              	.L94:
 193:HALLIB/Src/stm32f4xx_hal_flash.c ****     
 999              		.loc 1 193 0
 1000 0042 4CF25030 		movw	r0, #50000
 1001 0046 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1002              	.LVL61:
 1003 004a 0446     		mov	r4, r0
 1004              	.LVL62:
 196:HALLIB/Src/stm32f4xx_hal_flash.c ****   }
 1005              		.loc 1 196 0
 1006 004c 0C4A     		ldr	r2, .L103+4
 1007 004e 1369     		ldr	r3, [r2, #16]
 1008 0050 23F00103 		bic	r3, r3, #1
 1009 0054 1361     		str	r3, [r2, #16]
 1010              	.LVL63:
 1011              	.L92:
 200:HALLIB/Src/stm32f4xx_hal_flash.c ****   
 1012              		.loc 1 200 0
 1013 0056 0022     		movs	r2, #0
 1014 0058 084B     		ldr	r3, .L103
 1015 005a 1A76     		strb	r2, [r3, #24]
 202:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 1016              		.loc 1 202 0
 1017 005c D7E7     		b	.L91
 1018              	.LVL64:
 1019              	.L100:
 174:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 1020              		.loc 1 174 0
 1021 005e F9B2     		uxtb	r1, r7
 1022 0060 3046     		mov	r0, r6
 1023              	.LVL65:
 1024 0062 FFF7FEFF 		bl	FLASH_Program_Byte
 1025              	.LVL66:
ARM GAS  /tmp/ccXEJVgw.s 			page 49


 1026 0066 ECE7     		b	.L94
 1027              	.LVL67:
 1028              	.L101:
 179:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 1029              		.loc 1 179 0
 1030 0068 B9B2     		uxth	r1, r7
 1031 006a 3046     		mov	r0, r6
 1032              	.LVL68:
 1033 006c FFF7FEFF 		bl	FLASH_Program_HalfWord
 1034              	.LVL69:
 1035 0070 E7E7     		b	.L94
 1036              	.LVL70:
 1037              	.L102:
 184:HALLIB/Src/stm32f4xx_hal_flash.c ****     }
 1038              		.loc 1 184 0
 1039 0072 3946     		mov	r1, r7
 1040 0074 3046     		mov	r0, r6
 1041              	.LVL71:
 1042 0076 FFF7FEFF 		bl	FLASH_Program_Word
 1043              	.LVL72:
 1044 007a E2E7     		b	.L94
 1045              	.L104:
 1046              		.align	2
 1047              	.L103:
 1048 007c 00000000 		.word	pFlash
 1049 0080 003C0240 		.word	1073888256
 1050              		.cfi_endproc
 1051              	.LFE119:
 1053              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
 1054              		.align	1
 1055              		.global	HAL_FLASH_OB_Launch
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1059              		.fpu fpv4-sp-d16
 1061              	HAL_FLASH_OB_Launch:
 1062              	.LFB128:
 502:HALLIB/Src/stm32f4xx_hal_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
 1063              		.loc 1 502 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 1067 0000 08B5     		push	{r3, lr}
 1068              	.LCFI6:
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 3, -8
 1071              		.cfi_offset 14, -4
 504:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 1072              		.loc 1 504 0
 1073 0002 054A     		ldr	r2, .L107
 1074 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1075 0006 43F00203 		orr	r3, r3, #2
 1076 000a 1370     		strb	r3, [r2]
 507:HALLIB/Src/stm32f4xx_hal_flash.c **** }
 1077              		.loc 1 507 0
 1078 000c 4CF25030 		movw	r0, #50000
 1079 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
ARM GAS  /tmp/ccXEJVgw.s 			page 50


 1080              	.LVL73:
 508:HALLIB/Src/stm32f4xx_hal_flash.c **** 
 1081              		.loc 1 508 0
 1082 0014 08BD     		pop	{r3, pc}
 1083              	.L108:
 1084 0016 00BF     		.align	2
 1085              	.L107:
 1086 0018 143C0240 		.word	1073888276
 1087              		.cfi_endproc
 1088              	.LFE128:
 1090              		.comm	pFlash,32,4
 1091              		.text
 1092              	.Letext0:
 1093              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 1094              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 1095              		.file 5 "CORE/core_cm4.h"
 1096              		.file 6 "USER/system_stm32f4xx.h"
 1097              		.file 7 "USER/stm32f429xx.h"
 1098              		.file 8 "USER/stm32f4xx.h"
 1099              		.file 9 "HALLIB/Inc/stm32f4xx_hal_def.h"
 1100              		.file 10 "HALLIB/Inc/stm32f4xx_hal_flash.h"
 1101              		.file 11 "HALLIB/Inc/stm32f4xx_hal.h"
 1102              		.file 12 "HALLIB/Inc/stm32f4xx_hal_flash_ex.h"
ARM GAS  /tmp/ccXEJVgw.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_flash.c
     /tmp/ccXEJVgw.s:18     .text.FLASH_Program_DoubleWord:0000000000000000 $t
     /tmp/ccXEJVgw.s:24     .text.FLASH_Program_DoubleWord:0000000000000000 FLASH_Program_DoubleWord
     /tmp/ccXEJVgw.s:75     .text.FLASH_Program_DoubleWord:000000000000002c $d
     /tmp/ccXEJVgw.s:80     .text.FLASH_Program_Word:0000000000000000 $t
     /tmp/ccXEJVgw.s:86     .text.FLASH_Program_Word:0000000000000000 FLASH_Program_Word
     /tmp/ccXEJVgw.s:113    .text.FLASH_Program_Word:0000000000000020 $d
     /tmp/ccXEJVgw.s:118    .text.FLASH_Program_HalfWord:0000000000000000 $t
     /tmp/ccXEJVgw.s:124    .text.FLASH_Program_HalfWord:0000000000000000 FLASH_Program_HalfWord
     /tmp/ccXEJVgw.s:151    .text.FLASH_Program_HalfWord:0000000000000020 $d
     /tmp/ccXEJVgw.s:156    .text.FLASH_Program_Byte:0000000000000000 $t
     /tmp/ccXEJVgw.s:162    .text.FLASH_Program_Byte:0000000000000000 FLASH_Program_Byte
     /tmp/ccXEJVgw.s:188    .text.FLASH_Program_Byte:000000000000001c $d
     /tmp/ccXEJVgw.s:193    .text.FLASH_SetErrorCode:0000000000000000 $t
     /tmp/ccXEJVgw.s:199    .text.FLASH_SetErrorCode:0000000000000000 FLASH_SetErrorCode
     /tmp/ccXEJVgw.s:300    .text.FLASH_SetErrorCode:00000000000000a0 $d
                            *COM*:0000000000000020 pFlash
     /tmp/ccXEJVgw.s:306    .text.HAL_FLASH_Program_IT:0000000000000000 $t
     /tmp/ccXEJVgw.s:313    .text.HAL_FLASH_Program_IT:0000000000000000 HAL_FLASH_Program_IT
     /tmp/ccXEJVgw.s:410    .text.HAL_FLASH_Program_IT:0000000000000068 $d
     /tmp/ccXEJVgw.s:416    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 $t
     /tmp/ccXEJVgw.s:423    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 HAL_FLASH_EndOfOperationCallback
     /tmp/ccXEJVgw.s:436    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 $t
     /tmp/ccXEJVgw.s:443    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 HAL_FLASH_OperationErrorCallback
     /tmp/ccXEJVgw.s:456    .text.HAL_FLASH_IRQHandler:0000000000000000 $t
     /tmp/ccXEJVgw.s:463    .text.HAL_FLASH_IRQHandler:0000000000000000 HAL_FLASH_IRQHandler
     /tmp/ccXEJVgw.s:644    .text.HAL_FLASH_IRQHandler:00000000000000f0 $d
     /tmp/ccXEJVgw.s:650    .text.HAL_FLASH_Unlock:0000000000000000 $t
     /tmp/ccXEJVgw.s:657    .text.HAL_FLASH_Unlock:0000000000000000 HAL_FLASH_Unlock
     /tmp/ccXEJVgw.s:697    .text.HAL_FLASH_Unlock:0000000000000028 $d
     /tmp/ccXEJVgw.s:703    .text.HAL_FLASH_Lock:0000000000000000 $t
     /tmp/ccXEJVgw.s:710    .text.HAL_FLASH_Lock:0000000000000000 HAL_FLASH_Lock
     /tmp/ccXEJVgw.s:728    .text.HAL_FLASH_Lock:0000000000000010 $d
     /tmp/ccXEJVgw.s:733    .text.HAL_FLASH_OB_Unlock:0000000000000000 $t
     /tmp/ccXEJVgw.s:740    .text.HAL_FLASH_OB_Unlock:0000000000000000 HAL_FLASH_OB_Unlock
     /tmp/ccXEJVgw.s:770    .text.HAL_FLASH_OB_Unlock:0000000000000020 $d
     /tmp/ccXEJVgw.s:776    .text.HAL_FLASH_OB_Lock:0000000000000000 $t
     /tmp/ccXEJVgw.s:783    .text.HAL_FLASH_OB_Lock:0000000000000000 HAL_FLASH_OB_Lock
     /tmp/ccXEJVgw.s:801    .text.HAL_FLASH_OB_Lock:0000000000000010 $d
     /tmp/ccXEJVgw.s:806    .text.HAL_FLASH_GetError:0000000000000000 $t
     /tmp/ccXEJVgw.s:813    .text.HAL_FLASH_GetError:0000000000000000 HAL_FLASH_GetError
     /tmp/ccXEJVgw.s:828    .text.HAL_FLASH_GetError:0000000000000008 $d
     /tmp/ccXEJVgw.s:833    .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/ccXEJVgw.s:840    .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/ccXEJVgw.s:923    .text.FLASH_WaitForLastOperation:000000000000005c $d
     /tmp/ccXEJVgw.s:929    .text.HAL_FLASH_Program:0000000000000000 $t
     /tmp/ccXEJVgw.s:936    .text.HAL_FLASH_Program:0000000000000000 HAL_FLASH_Program
     /tmp/ccXEJVgw.s:1048   .text.HAL_FLASH_Program:000000000000007c $d
     /tmp/ccXEJVgw.s:1054   .text.HAL_FLASH_OB_Launch:0000000000000000 $t
     /tmp/ccXEJVgw.s:1061   .text.HAL_FLASH_OB_Launch:0000000000000000 HAL_FLASH_OB_Launch
     /tmp/ccXEJVgw.s:1086   .text.HAL_FLASH_OB_Launch:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
FLASH_Erase_Sector
FLASH_FlushCaches
ARM GAS  /tmp/ccXEJVgw.s 			page 52


HAL_GetTick
