ARM GAS  /tmp/ccQldCSB.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.weak	HAL_RCC_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_RCC_DeInit:
  26              	.LFB119:
  27              		.file 1 "HALLIB/Src/stm32f4xx_hal_rcc.c"
   1:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
   2:HALLIB/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @file    stm32f4xx_hal_rcc.c
   4:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
  11:HALLIB/Src/stm32f4xx_hal_rcc.c ****   @verbatim
  12:HALLIB/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  13:HALLIB/Src/stm32f4xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:HALLIB/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  15:HALLIB/Src/stm32f4xx_hal_rcc.c ****     [..]
  16:HALLIB/Src/stm32f4xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  17:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache
  18:HALLIB/Src/stm32f4xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  19:HALLIB/Src/stm32f4xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  20:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  21:HALLIB/Src/stm32f4xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  22:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  23:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  24:HALLIB/Src/stm32f4xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  25:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  26:HALLIB/Src/stm32f4xx_hal_rcc.c ****     [..]
  27:HALLIB/Src/stm32f4xx_hal_rcc.c ****       Once the device started from reset, the user application has to:
  28:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  29:HALLIB/Src/stm32f4xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  30:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings
  31:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
ARM GAS  /tmp/ccQldCSB.s 			page 2


  32:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  33:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  34:HALLIB/Src/stm32f4xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  35:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  36:HALLIB/Src/stm32f4xx_hal_rcc.c ****                       ##### RCC Limitations #####
  37:HALLIB/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  38:HALLIB/Src/stm32f4xx_hal_rcc.c ****     [..]
  39:HALLIB/Src/stm32f4xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral
  40:HALLIB/Src/stm32f4xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write
  41:HALLIB/Src/stm32f4xx_hal_rcc.c ****       from/to registers.
  42:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  43:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) If peripheral is mapped on AHB: the delay is 2 AHB clock cycle
  44:HALLIB/Src/stm32f4xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  45:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) If peripheral is mapped on APB: the delay is 2 APB clock cycle
  46:HALLIB/Src/stm32f4xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  47:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  48:HALLIB/Src/stm32f4xx_hal_rcc.c ****     [..]
  49:HALLIB/Src/stm32f4xx_hal_rcc.c ****       Implemented Workaround:
  50:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (+) For AHB & APB peripherals, a dummy read to the peripheral register has been
  51:HALLIB/Src/stm32f4xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  52:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  53:HALLIB/Src/stm32f4xx_hal_rcc.c ****   @endverbatim
  54:HALLIB/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  55:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @attention
  56:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
  57:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  58:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * All rights reserved.</center></h2>
  59:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
  60:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  61:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * the "License"; You may not use this file except in compliance with the
  62:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * License. You may obtain a copy of the License at:
  63:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *                        opensource.org/licenses/BSD-3-Clause
  64:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
  65:HALLIB/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  66:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
  67:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  68:HALLIB/Src/stm32f4xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  69:HALLIB/Src/stm32f4xx_hal_rcc.c **** #include "stm32f4xx_hal.h"
  70:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  71:HALLIB/Src/stm32f4xx_hal_rcc.c **** /** @addtogroup STM32F4xx_HAL_Driver
  72:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @{
  73:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
  74:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  75:HALLIB/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC RCC
  76:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief RCC HAL module driver
  77:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @{
  78:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
  79:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  80:HALLIB/Src/stm32f4xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  81:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  82:HALLIB/Src/stm32f4xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  83:HALLIB/Src/stm32f4xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  84:HALLIB/Src/stm32f4xx_hal_rcc.c **** /** @addtogroup RCC_Private_Constants
  85:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @{
  86:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
  87:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  88:HALLIB/Src/stm32f4xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /tmp/ccQldCSB.s 			page 3


  89:HALLIB/Src/stm32f4xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __HAL_RCC_GPIOA_CLK_ENABLE()
  90:HALLIB/Src/stm32f4xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
  91:HALLIB/Src/stm32f4xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
  92:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
  93:HALLIB/Src/stm32f4xx_hal_rcc.c **** #define __MCO2_CLK_ENABLE()   __HAL_RCC_GPIOC_CLK_ENABLE()
  94:HALLIB/Src/stm32f4xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
  95:HALLIB/Src/stm32f4xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
  96:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
  97:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @}
  98:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
  99:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 100:HALLIB/Src/stm32f4xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 101:HALLIB/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 102:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @{
 103:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 104:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 105:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @}
 106:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 107:HALLIB/Src/stm32f4xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 108:HALLIB/Src/stm32f4xx_hal_rcc.c **** /* Private functions ---------------------------------------------------------*/
 109:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 110:HALLIB/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 111:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *  @{
 112:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 113:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 114:HALLIB/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
 115:HALLIB/Src/stm32f4xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions
 116:HALLIB/Src/stm32f4xx_hal_rcc.c ****  *
 117:HALLIB/Src/stm32f4xx_hal_rcc.c **** @verbatim
 118:HALLIB/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 119:HALLIB/Src/stm32f4xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 120:HALLIB/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 121:HALLIB/Src/stm32f4xx_hal_rcc.c ****     [..]
 122:HALLIB/Src/stm32f4xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 123:HALLIB/Src/stm32f4xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1
 124:HALLIB/Src/stm32f4xx_hal_rcc.c ****        and APB2).
 125:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 126:HALLIB/Src/stm32f4xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 127:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 128:HALLIB/Src/stm32f4xx_hal_rcc.c ****              the PLL as System clock source.
 129:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 130:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 131:HALLIB/Src/stm32f4xx_hal_rcc.c ****              clock source.
 132:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 133:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 134:HALLIB/Src/stm32f4xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 135:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 136:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 137:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 138:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 139:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 140:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 141:HALLIB/Src/stm32f4xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 142:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 143:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 144:HALLIB/Src/stm32f4xx_hal_rcc.c ****              and if a HSE clock failure occurs(HSE used directly or through PLL as System
 145:HALLIB/Src/stm32f4xx_hal_rcc.c ****              clock source), the System clocks automatically switched to HSI and an interrupt
ARM GAS  /tmp/ccQldCSB.s 			page 4


 146:HALLIB/Src/stm32f4xx_hal_rcc.c ****              is generated if enabled. The interrupt is linked to the Cortex-M4 NMI
 147:HALLIB/Src/stm32f4xx_hal_rcc.c ****              (Non-Maskable Interrupt) exception vector.
 148:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 149:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 150:HALLIB/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PA8 pin.
 151:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 152:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 153:HALLIB/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PC9 pin.
 154:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 155:HALLIB/Src/stm32f4xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration
 156:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 157:HALLIB/Src/stm32f4xx_hal_rcc.c ****              HSE and PLL.
 158:HALLIB/Src/stm32f4xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable
 159:HALLIB/Src/stm32f4xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped
 160:HALLIB/Src/stm32f4xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 161:HALLIB/Src/stm32f4xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock
 162:HALLIB/Src/stm32f4xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use
 163:HALLIB/Src/stm32f4xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 164:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 165:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F405xx/07xx and STM32F415xx/17xx devices, the maximum
 166:HALLIB/Src/stm32f4xx_hal_rcc.c ****              frequency of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz.
 167:HALLIB/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 168:HALLIB/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 169:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 170:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F42xxx, STM32F43xxx, STM32F446xx, STM32F469xx and STM32F479xx devices,
 171:HALLIB/Src/stm32f4xx_hal_rcc.c ****              the maximum frequency of the SYSCLK and HCLK is 180 MHz, PCLK2 90 MHz and PCLK1 45 MHz
 172:HALLIB/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 173:HALLIB/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 174:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 175:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F401xx, the maximum frequency of the SYSCLK and HCLK is 84 MHz,
 176:HALLIB/Src/stm32f4xx_hal_rcc.c ****              PCLK2 84 MHz and PCLK1 42 MHz.
 177:HALLIB/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 178:HALLIB/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 179:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 180:HALLIB/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F41xxx, the maximum frequency of the SYSCLK and HCLK is 100 MHz,
 181:HALLIB/Src/stm32f4xx_hal_rcc.c ****              PCLK2 100 MHz and PCLK1 50 MHz.
 182:HALLIB/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 183:HALLIB/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 184:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 185:HALLIB/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 186:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @{
 187:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 188:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 189:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 190:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 191:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 192:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 193:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            - HSE and PLL OFF
 194:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 195:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 196:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            - All interrupts disabled
 197:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 198:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            - Peripheral clocks
 199:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 200:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval HAL status
 201:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 202:HALLIB/Src/stm32f4xx_hal_rcc.c **** __weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
ARM GAS  /tmp/ccQldCSB.s 			page 5


 203:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
  28              		.loc 1 203 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 204:HALLIB/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 205:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
  33              		.loc 1 205 0
  34 0000 0020     		movs	r0, #0
  35 0002 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE119:
  39              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
  40              		.align	1
  41              		.weak	HAL_RCC_OscConfig
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	HAL_RCC_OscConfig:
  48              	.LFB120:
 206:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 207:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 208:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 209:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 210:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 211:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 212:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 213:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 214:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         supported by this API. User should request a transition to LSE Off
 215:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 216:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 217:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         supported by this API. User should request a transition to HSE Off
 218:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 219:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval HAL status
 220:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 221:HALLIB/Src/stm32f4xx_hal_rcc.c **** __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 222:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
  49              		.loc 1 222 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 8
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              	.LVL0:
 223:HALLIB/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart, pll_config;
 224:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 225:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check Null pointer */
 226:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(RCC_OscInitStruct == NULL)
  54              		.loc 1 226 0
  55 0000 0028     		cmp	r0, #0
  56 0002 00F0E481 		beq	.L52
 222:HALLIB/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart, pll_config;
  57              		.loc 1 222 0
  58 0006 70B5     		push	{r4, r5, r6, lr}
  59              	.LCFI0:
  60              		.cfi_def_cfa_offset 16
  61              		.cfi_offset 4, -16
ARM GAS  /tmp/ccQldCSB.s 			page 6


  62              		.cfi_offset 5, -12
  63              		.cfi_offset 6, -8
  64              		.cfi_offset 14, -4
  65 0008 82B0     		sub	sp, sp, #8
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 24
  68 000a 0446     		mov	r4, r0
 227:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 228:HALLIB/Src/stm32f4xx_hal_rcc.c ****     return HAL_ERROR;
 229:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 230:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 231:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 232:HALLIB/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 233:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/
 234:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  69              		.loc 1 234 0
  70 000c 0368     		ldr	r3, [r0]
  71 000e 13F0010F 		tst	r3, #1
  72 0012 3BD0     		beq	.L4
 235:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 236:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 237:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 238:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 239:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
  73              		.loc 1 239 0
  74 0014 A74B     		ldr	r3, .L97
  75 0016 9B68     		ldr	r3, [r3, #8]
  76 0018 03F00C03 		and	r3, r3, #12
  77 001c 042B     		cmp	r3, #4
  78 001e 2CD0     		beq	.L5
 240:HALLIB/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
  79              		.loc 1 240 0 discriminator 1
  80 0020 A44B     		ldr	r3, .L97
  81 0022 9B68     		ldr	r3, [r3, #8]
  82 0024 03F00C03 		and	r3, r3, #12
 239:HALLIB/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
  83              		.loc 1 239 0 discriminator 1
  84 0028 082B     		cmp	r3, #8
  85 002a 21D0     		beq	.L79
  86              	.L6:
 241:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 242:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 243:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 244:HALLIB/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 245:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 246:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 247:HALLIB/Src/stm32f4xx_hal_rcc.c ****     else
 248:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 249:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 250:HALLIB/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
  87              		.loc 1 250 0
  88 002c 6368     		ldr	r3, [r4, #4]
  89 002e B3F5803F 		cmp	r3, #65536
  90 0032 4FD0     		beq	.L80
  91              		.loc 1 250 0 is_stmt 0 discriminator 2
  92 0034 B3F5A02F 		cmp	r3, #327680
  93 0038 52D0     		beq	.L81
ARM GAS  /tmp/ccQldCSB.s 			page 7


  94              		.loc 1 250 0 discriminator 4
  95 003a 9E4B     		ldr	r3, .L97
  96 003c 1A68     		ldr	r2, [r3]
  97 003e 22F48032 		bic	r2, r2, #65536
  98 0042 1A60     		str	r2, [r3]
  99 0044 1A68     		ldr	r2, [r3]
 100 0046 22F48022 		bic	r2, r2, #262144
 101 004a 1A60     		str	r2, [r3]
 102              	.L8:
 251:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 252:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSE State */
 253:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 103              		.loc 1 253 0 is_stmt 1
 104 004c 6368     		ldr	r3, [r4, #4]
 105 004e 002B     		cmp	r3, #0
 106 0050 50D0     		beq	.L10
 254:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 255:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick */
 256:HALLIB/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 107              		.loc 1 256 0
 108 0052 FFF7FEFF 		bl	HAL_GetTick
 109              	.LVL1:
 110 0056 0546     		mov	r5, r0
 111              	.LVL2:
 112              	.L11:
 257:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 258:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is ready */
 259:HALLIB/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 113              		.loc 1 259 0
 114 0058 964B     		ldr	r3, .L97
 115 005a 1B68     		ldr	r3, [r3]
 116 005c 13F4003F 		tst	r3, #131072
 117 0060 14D1     		bne	.L4
 260:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 261:HALLIB/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 118              		.loc 1 261 0
 119 0062 FFF7FEFF 		bl	HAL_GetTick
 120              	.LVL3:
 121 0066 401B     		subs	r0, r0, r5
 122 0068 6428     		cmp	r0, #100
 123 006a F5D9     		bls	.L11
 262:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 263:HALLIB/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 124              		.loc 1 263 0
 125 006c 0320     		movs	r0, #3
 126 006e B3E1     		b	.L3
 127              	.LVL4:
 128              	.L79:
 240:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 129              		.loc 1 240 0
 130 0070 904B     		ldr	r3, .L97
 131 0072 5B68     		ldr	r3, [r3, #4]
 132 0074 13F4800F 		tst	r3, #4194304
 133 0078 D8D0     		beq	.L6
 134              	.L5:
 242:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 135              		.loc 1 242 0
ARM GAS  /tmp/ccQldCSB.s 			page 8


 136 007a 8E4B     		ldr	r3, .L97
 137 007c 1B68     		ldr	r3, [r3]
 138 007e 13F4003F 		tst	r3, #131072
 139 0082 03D0     		beq	.L4
 242:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 140              		.loc 1 242 0 is_stmt 0 discriminator 1
 141 0084 6368     		ldr	r3, [r4, #4]
 142 0086 002B     		cmp	r3, #0
 143 0088 00F0A381 		beq	.L82
 144              	.LVL5:
 145              	.L4:
 264:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 265:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 266:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 267:HALLIB/Src/stm32f4xx_hal_rcc.c ****       else
 268:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 269:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick */
 270:HALLIB/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 271:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 272:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 273:HALLIB/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 274:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 275:HALLIB/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 276:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 277:HALLIB/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 278:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 279:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 280:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 281:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 282:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 283:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 284:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 146              		.loc 1 284 0 is_stmt 1
 147 008c 2368     		ldr	r3, [r4]
 148 008e 13F0020F 		tst	r3, #2
 149 0092 55D0     		beq	.L15
 285:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 286:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 287:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 288:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 289:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 290:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 291:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 150              		.loc 1 291 0
 151 0094 874B     		ldr	r3, .L97
 152 0096 9B68     		ldr	r3, [r3, #8]
 153 0098 13F00C0F 		tst	r3, #12
 154 009c 3ED0     		beq	.L16
 292:HALLIB/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 155              		.loc 1 292 0 discriminator 1
 156 009e 854B     		ldr	r3, .L97
 157 00a0 9B68     		ldr	r3, [r3, #8]
 158 00a2 03F00C03 		and	r3, r3, #12
 291:HALLIB/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 159              		.loc 1 291 0 discriminator 1
 160 00a6 082B     		cmp	r3, #8
 161 00a8 33D0     		beq	.L83
ARM GAS  /tmp/ccQldCSB.s 			page 9


 162              	.L17:
 293:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 294:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 295:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 296:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 297:HALLIB/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 298:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 299:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 300:HALLIB/Src/stm32f4xx_hal_rcc.c ****       else
 301:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 302:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 303:HALLIB/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 304:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 305:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 306:HALLIB/Src/stm32f4xx_hal_rcc.c ****     else
 307:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 308:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSI State */
 309:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 163              		.loc 1 309 0
 164 00aa E368     		ldr	r3, [r4, #12]
 165 00ac 002B     		cmp	r3, #0
 166 00ae 68D0     		beq	.L19
 310:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 311:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 312:HALLIB/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 167              		.loc 1 312 0
 168 00b0 0122     		movs	r2, #1
 169 00b2 814B     		ldr	r3, .L97+4
 170 00b4 1A60     		str	r2, [r3]
 313:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 314:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 315:HALLIB/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 171              		.loc 1 315 0
 172 00b6 FFF7FEFF 		bl	HAL_GetTick
 173              	.LVL6:
 174 00ba 0546     		mov	r5, r0
 175              	.LVL7:
 176              	.L20:
 316:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 317:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */
 318:HALLIB/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 177              		.loc 1 318 0
 178 00bc 7D4B     		ldr	r3, .L97
 179 00be 1B68     		ldr	r3, [r3]
 180 00c0 13F0020F 		tst	r3, #2
 181 00c4 54D1     		bne	.L84
 319:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 320:HALLIB/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 182              		.loc 1 320 0
 183 00c6 FFF7FEFF 		bl	HAL_GetTick
 184              	.LVL8:
 185 00ca 401B     		subs	r0, r0, r5
 186 00cc 0228     		cmp	r0, #2
 187 00ce F5D9     		bls	.L20
 321:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 322:HALLIB/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 188              		.loc 1 322 0
ARM GAS  /tmp/ccQldCSB.s 			page 10


 189 00d0 0320     		movs	r0, #3
 190 00d2 81E1     		b	.L3
 191              	.LVL9:
 192              	.L80:
 250:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 193              		.loc 1 250 0 discriminator 1
 194 00d4 774A     		ldr	r2, .L97
 195 00d6 1368     		ldr	r3, [r2]
 196 00d8 43F48033 		orr	r3, r3, #65536
 197 00dc 1360     		str	r3, [r2]
 198 00de B5E7     		b	.L8
 199              	.L81:
 250:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 200              		.loc 1 250 0 is_stmt 0 discriminator 3
 201 00e0 744B     		ldr	r3, .L97
 202 00e2 1A68     		ldr	r2, [r3]
 203 00e4 42F48022 		orr	r2, r2, #262144
 204 00e8 1A60     		str	r2, [r3]
 205 00ea 1A68     		ldr	r2, [r3]
 206 00ec 42F48032 		orr	r2, r2, #65536
 207 00f0 1A60     		str	r2, [r3]
 208 00f2 ABE7     		b	.L8
 209              	.L10:
 270:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 210              		.loc 1 270 0 is_stmt 1
 211 00f4 FFF7FEFF 		bl	HAL_GetTick
 212              	.LVL10:
 213 00f8 0546     		mov	r5, r0
 214              	.LVL11:
 215              	.L13:
 273:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 216              		.loc 1 273 0
 217 00fa 6E4B     		ldr	r3, .L97
 218 00fc 1B68     		ldr	r3, [r3]
 219 00fe 13F4003F 		tst	r3, #131072
 220 0102 C3D0     		beq	.L4
 275:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 221              		.loc 1 275 0
 222 0104 FFF7FEFF 		bl	HAL_GetTick
 223              	.LVL12:
 224 0108 401B     		subs	r0, r0, r5
 225 010a 6428     		cmp	r0, #100
 226 010c F5D9     		bls	.L13
 277:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 227              		.loc 1 277 0
 228 010e 0320     		movs	r0, #3
 229 0110 62E1     		b	.L3
 230              	.LVL13:
 231              	.L83:
 292:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 232              		.loc 1 292 0
 233 0112 684B     		ldr	r3, .L97
 234 0114 5B68     		ldr	r3, [r3, #4]
 235 0116 13F4800F 		tst	r3, #4194304
 236 011a C6D1     		bne	.L17
 237              	.L16:
 295:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccQldCSB.s 			page 11


 238              		.loc 1 295 0
 239 011c 654B     		ldr	r3, .L97
 240 011e 1B68     		ldr	r3, [r3]
 241 0120 13F0020F 		tst	r3, #2
 242 0124 04D0     		beq	.L18
 295:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 243              		.loc 1 295 0 is_stmt 0 discriminator 1
 244 0126 E368     		ldr	r3, [r4, #12]
 245 0128 012B     		cmp	r3, #1
 246 012a 01D0     		beq	.L18
 297:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 247              		.loc 1 297 0 is_stmt 1
 248 012c 0120     		movs	r0, #1
 249 012e 53E1     		b	.L3
 250              	.L18:
 303:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 251              		.loc 1 303 0
 252 0130 604A     		ldr	r2, .L97
 253 0132 1368     		ldr	r3, [r2]
 254 0134 23F0F803 		bic	r3, r3, #248
 255 0138 2169     		ldr	r1, [r4, #16]
 256 013a 43EAC103 		orr	r3, r3, r1, lsl #3
 257 013e 1360     		str	r3, [r2]
 258              	.L15:
 323:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 324:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 325:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 326:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
 327:HALLIB/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 328:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 329:HALLIB/Src/stm32f4xx_hal_rcc.c ****       else
 330:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 331:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 332:HALLIB/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 333:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 334:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 335:HALLIB/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 336:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 337:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */
 338:HALLIB/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 339:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 340:HALLIB/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 341:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 342:HALLIB/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 343:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 344:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 345:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 346:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 347:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 348:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 349:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 259              		.loc 1 349 0
 260 0140 2368     		ldr	r3, [r4]
 261 0142 13F0080F 		tst	r3, #8
 262 0146 40D0     		beq	.L24
 350:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 351:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
ARM GAS  /tmp/ccQldCSB.s 			page 12


 352:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 353:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 354:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSI State */
 355:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 263              		.loc 1 355 0
 264 0148 6369     		ldr	r3, [r4, #20]
 265 014a 63B3     		cbz	r3, .L25
 356:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 357:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 358:HALLIB/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 266              		.loc 1 358 0
 267 014c 0122     		movs	r2, #1
 268 014e 5B4B     		ldr	r3, .L97+8
 269 0150 1A60     		str	r2, [r3]
 359:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 360:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 361:HALLIB/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 270              		.loc 1 361 0
 271 0152 FFF7FEFF 		bl	HAL_GetTick
 272              	.LVL14:
 273 0156 0546     		mov	r5, r0
 274              	.LVL15:
 275              	.L26:
 362:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 363:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */
 364:HALLIB/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 276              		.loc 1 364 0
 277 0158 564B     		ldr	r3, .L97
 278 015a 5B6F     		ldr	r3, [r3, #116]
 279 015c 13F0020F 		tst	r3, #2
 280 0160 33D1     		bne	.L24
 365:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 366:HALLIB/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 281              		.loc 1 366 0
 282 0162 FFF7FEFF 		bl	HAL_GetTick
 283              	.LVL16:
 284 0166 401B     		subs	r0, r0, r5
 285 0168 0228     		cmp	r0, #2
 286 016a F5D9     		bls	.L26
 367:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 368:HALLIB/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 287              		.loc 1 368 0
 288 016c 0320     		movs	r0, #3
 289 016e 33E1     		b	.L3
 290              	.L84:
 327:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 291              		.loc 1 327 0
 292 0170 504A     		ldr	r2, .L97
 293 0172 1368     		ldr	r3, [r2]
 294 0174 23F0F803 		bic	r3, r3, #248
 295 0178 2169     		ldr	r1, [r4, #16]
 296 017a 43EAC103 		orr	r3, r3, r1, lsl #3
 297 017e 1360     		str	r3, [r2]
 298 0180 DEE7     		b	.L15
 299              	.LVL17:
 300              	.L19:
 332:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
ARM GAS  /tmp/ccQldCSB.s 			page 13


 301              		.loc 1 332 0
 302 0182 0022     		movs	r2, #0
 303 0184 4C4B     		ldr	r3, .L97+4
 304 0186 1A60     		str	r2, [r3]
 335:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 305              		.loc 1 335 0
 306 0188 FFF7FEFF 		bl	HAL_GetTick
 307              	.LVL18:
 308 018c 0546     		mov	r5, r0
 309              	.LVL19:
 310              	.L22:
 338:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 311              		.loc 1 338 0
 312 018e 494B     		ldr	r3, .L97
 313 0190 1B68     		ldr	r3, [r3]
 314 0192 13F0020F 		tst	r3, #2
 315 0196 D3D0     		beq	.L15
 340:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 316              		.loc 1 340 0
 317 0198 FFF7FEFF 		bl	HAL_GetTick
 318              	.LVL20:
 319 019c 401B     		subs	r0, r0, r5
 320 019e 0228     		cmp	r0, #2
 321 01a0 F5D9     		bls	.L22
 342:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 322              		.loc 1 342 0
 323 01a2 0320     		movs	r0, #3
 324 01a4 18E1     		b	.L3
 325              	.LVL21:
 326              	.L25:
 369:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 370:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 371:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 372:HALLIB/Src/stm32f4xx_hal_rcc.c ****     else
 373:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 374:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 375:HALLIB/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 327              		.loc 1 375 0
 328 01a6 0022     		movs	r2, #0
 329 01a8 444B     		ldr	r3, .L97+8
 330 01aa 1A60     		str	r2, [r3]
 376:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 377:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick */
 378:HALLIB/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 331              		.loc 1 378 0
 332 01ac FFF7FEFF 		bl	HAL_GetTick
 333              	.LVL22:
 334 01b0 0546     		mov	r5, r0
 335              	.LVL23:
 336              	.L28:
 379:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 380:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */
 381:HALLIB/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 337              		.loc 1 381 0
 338 01b2 404B     		ldr	r3, .L97
 339 01b4 5B6F     		ldr	r3, [r3, #116]
 340 01b6 13F0020F 		tst	r3, #2
ARM GAS  /tmp/ccQldCSB.s 			page 14


 341 01ba 06D0     		beq	.L24
 382:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 383:HALLIB/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 342              		.loc 1 383 0
 343 01bc FFF7FEFF 		bl	HAL_GetTick
 344              	.LVL24:
 345 01c0 401B     		subs	r0, r0, r5
 346 01c2 0228     		cmp	r0, #2
 347 01c4 F5D9     		bls	.L28
 384:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 385:HALLIB/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 348              		.loc 1 385 0
 349 01c6 0320     		movs	r0, #3
 350 01c8 06E1     		b	.L3
 351              	.LVL25:
 352              	.L24:
 386:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 387:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 388:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 389:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 390:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/
 391:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 353              		.loc 1 391 0
 354 01ca 2368     		ldr	r3, [r4]
 355 01cc 13F0040F 		tst	r3, #4
 356 01d0 79D0     		beq	.L30
 357              	.LVL26:
 358              	.LBB2:
 392:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 393:HALLIB/Src/stm32f4xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 394:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 395:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 396:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 397:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 398:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 399:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 400:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 359              		.loc 1 400 0
 360 01d2 384B     		ldr	r3, .L97
 361 01d4 1B6C     		ldr	r3, [r3, #64]
 362 01d6 13F0805F 		tst	r3, #268435456
 363 01da 33D1     		bne	.L61
 364              	.LBB3:
 401:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 402:HALLIB/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 365              		.loc 1 402 0
 366 01dc 0023     		movs	r3, #0
 367 01de 0193     		str	r3, [sp, #4]
 368 01e0 344B     		ldr	r3, .L97
 369 01e2 1A6C     		ldr	r2, [r3, #64]
 370 01e4 42F08052 		orr	r2, r2, #268435456
 371 01e8 1A64     		str	r2, [r3, #64]
 372 01ea 1B6C     		ldr	r3, [r3, #64]
 373 01ec 03F08053 		and	r3, r3, #268435456
 374 01f0 0193     		str	r3, [sp, #4]
 375 01f2 019B     		ldr	r3, [sp, #4]
 376              	.LVL27:
ARM GAS  /tmp/ccQldCSB.s 			page 15


 377              	.LBE3:
 403:HALLIB/Src/stm32f4xx_hal_rcc.c ****       pwrclkchanged = SET;
 378              		.loc 1 403 0
 379 01f4 0125     		movs	r5, #1
 380              	.LVL28:
 381              	.L31:
 404:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 405:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 406:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 382              		.loc 1 406 0
 383 01f6 324B     		ldr	r3, .L97+12
 384 01f8 1B68     		ldr	r3, [r3]
 385 01fa 13F4807F 		tst	r3, #256
 386 01fe 23D0     		beq	.L85
 387              	.L32:
 407:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 408:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 409:HALLIB/Src/stm32f4xx_hal_rcc.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 410:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 411:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 412:HALLIB/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 413:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 414:HALLIB/Src/stm32f4xx_hal_rcc.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 415:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 416:HALLIB/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 417:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 418:HALLIB/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 419:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 420:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 421:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 422:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 423:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 424:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 388              		.loc 1 424 0
 389 0200 A368     		ldr	r3, [r4, #8]
 390 0202 012B     		cmp	r3, #1
 391 0204 34D0     		beq	.L86
 392              		.loc 1 424 0 is_stmt 0 discriminator 2
 393 0206 052B     		cmp	r3, #5
 394 0208 38D0     		beq	.L87
 395              		.loc 1 424 0 discriminator 4
 396 020a 2A4B     		ldr	r3, .L97
 397 020c 1A6F     		ldr	r2, [r3, #112]
 398 020e 22F00102 		bic	r2, r2, #1
 399 0212 1A67     		str	r2, [r3, #112]
 400 0214 1A6F     		ldr	r2, [r3, #112]
 401 0216 22F00402 		bic	r2, r2, #4
 402 021a 1A67     		str	r2, [r3, #112]
 403              	.L36:
 425:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSE State */
 426:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 404              		.loc 1 426 0 is_stmt 1
 405 021c A368     		ldr	r3, [r4, #8]
 406 021e 002B     		cmp	r3, #0
 407 0220 36D0     		beq	.L38
 427:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 428:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
ARM GAS  /tmp/ccQldCSB.s 			page 16


 429:HALLIB/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 408              		.loc 1 429 0
 409 0222 FFF7FEFF 		bl	HAL_GetTick
 410              	.LVL29:
 411 0226 0646     		mov	r6, r0
 412              	.LVL30:
 413              	.L39:
 430:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 431:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */
 432:HALLIB/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 414              		.loc 1 432 0
 415 0228 224B     		ldr	r3, .L97
 416 022a 1B6F     		ldr	r3, [r3, #112]
 417 022c 13F0020F 		tst	r3, #2
 418 0230 48D1     		bne	.L41
 433:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 434:HALLIB/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 419              		.loc 1 434 0
 420 0232 FFF7FEFF 		bl	HAL_GetTick
 421              	.LVL31:
 422 0236 801B     		subs	r0, r0, r6
 423 0238 41F28833 		movw	r3, #5000
 424 023c 9842     		cmp	r0, r3
 425 023e F3D9     		bls	.L39
 435:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 436:HALLIB/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 426              		.loc 1 436 0
 427 0240 0320     		movs	r0, #3
 428 0242 C9E0     		b	.L3
 429              	.LVL32:
 430              	.L61:
 393:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 431              		.loc 1 393 0
 432 0244 0025     		movs	r5, #0
 433 0246 D6E7     		b	.L31
 434              	.LVL33:
 435              	.L85:
 409:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 436              		.loc 1 409 0
 437 0248 1D4A     		ldr	r2, .L97+12
 438 024a 1368     		ldr	r3, [r2]
 439 024c 43F48073 		orr	r3, r3, #256
 440 0250 1360     		str	r3, [r2]
 412:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 441              		.loc 1 412 0
 442 0252 FFF7FEFF 		bl	HAL_GetTick
 443              	.LVL34:
 444 0256 0646     		mov	r6, r0
 445              	.LVL35:
 446              	.L33:
 414:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 447              		.loc 1 414 0
 448 0258 194B     		ldr	r3, .L97+12
 449 025a 1B68     		ldr	r3, [r3]
 450 025c 13F4807F 		tst	r3, #256
 451 0260 CED1     		bne	.L32
 416:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
ARM GAS  /tmp/ccQldCSB.s 			page 17


 452              		.loc 1 416 0
 453 0262 FFF7FEFF 		bl	HAL_GetTick
 454              	.LVL36:
 455 0266 801B     		subs	r0, r0, r6
 456 0268 0228     		cmp	r0, #2
 457 026a F5D9     		bls	.L33
 418:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 458              		.loc 1 418 0
 459 026c 0320     		movs	r0, #3
 460 026e B3E0     		b	.L3
 461              	.LVL37:
 462              	.L86:
 424:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSE State */
 463              		.loc 1 424 0 discriminator 1
 464 0270 104A     		ldr	r2, .L97
 465 0272 136F     		ldr	r3, [r2, #112]
 466 0274 43F00103 		orr	r3, r3, #1
 467 0278 1367     		str	r3, [r2, #112]
 468 027a CFE7     		b	.L36
 469              	.L87:
 424:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSE State */
 470              		.loc 1 424 0 is_stmt 0 discriminator 3
 471 027c 0D4B     		ldr	r3, .L97
 472 027e 1A6F     		ldr	r2, [r3, #112]
 473 0280 42F00402 		orr	r2, r2, #4
 474 0284 1A67     		str	r2, [r3, #112]
 475 0286 1A6F     		ldr	r2, [r3, #112]
 476 0288 42F00102 		orr	r2, r2, #1
 477 028c 1A67     		str	r2, [r3, #112]
 478 028e C5E7     		b	.L36
 479              	.L38:
 437:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 438:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 439:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 440:HALLIB/Src/stm32f4xx_hal_rcc.c ****     else
 441:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 442:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick */
 443:HALLIB/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 480              		.loc 1 443 0 is_stmt 1
 481 0290 FFF7FEFF 		bl	HAL_GetTick
 482              	.LVL38:
 483 0294 0646     		mov	r6, r0
 484              	.LVL39:
 485              	.L42:
 444:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 445:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */
 446:HALLIB/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 486              		.loc 1 446 0
 487 0296 074B     		ldr	r3, .L97
 488 0298 1B6F     		ldr	r3, [r3, #112]
 489 029a 13F0020F 		tst	r3, #2
 490 029e 11D0     		beq	.L41
 447:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 448:HALLIB/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 491              		.loc 1 448 0
 492 02a0 FFF7FEFF 		bl	HAL_GetTick
 493              	.LVL40:
ARM GAS  /tmp/ccQldCSB.s 			page 18


 494 02a4 801B     		subs	r0, r0, r6
 495 02a6 41F28833 		movw	r3, #5000
 496 02aa 9842     		cmp	r0, r3
 497 02ac F3D9     		bls	.L42
 449:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 450:HALLIB/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 498              		.loc 1 450 0
 499 02ae 0320     		movs	r0, #3
 500 02b0 92E0     		b	.L3
 501              	.L98:
 502 02b2 00BF     		.align	2
 503              	.L97:
 504 02b4 00380240 		.word	1073887232
 505 02b8 00004742 		.word	1111949312
 506 02bc 800E4742 		.word	1111953024
 507 02c0 00700040 		.word	1073770496
 508              	.L41:
 451:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 452:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 453:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 454:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 455:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Restore clock configuration if changed */
 456:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(pwrclkchanged == SET)
 509              		.loc 1 456 0
 510 02c4 EDB9     		cbnz	r5, .L88
 511              	.LVL41:
 512              	.L30:
 513              	.LBE2:
 457:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 458:HALLIB/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 459:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 460:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 461:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 462:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 463:HALLIB/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 464:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 514              		.loc 1 464 0
 515 02c6 A369     		ldr	r3, [r4, #24]
 516 02c8 002B     		cmp	r3, #0
 517 02ca 00F08480 		beq	.L65
 465:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 466:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 467:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 518              		.loc 1 467 0
 519 02ce 454A     		ldr	r2, .L99
 520 02d0 9268     		ldr	r2, [r2, #8]
 521 02d2 02F00C02 		and	r2, r2, #12
 522 02d6 082A     		cmp	r2, #8
 523 02d8 51D0     		beq	.L44
 468:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 469:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 524              		.loc 1 469 0
 525 02da 022B     		cmp	r3, #2
 526 02dc 17D0     		beq	.L89
 470:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 471:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Check the parameters */
 472:HALLIB/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
ARM GAS  /tmp/ccQldCSB.s 			page 19


 473:HALLIB/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 474:HALLIB/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 475:HALLIB/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 476:HALLIB/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 477:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 478:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 479:HALLIB/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 480:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 481:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick */
 482:HALLIB/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 483:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 484:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */
 485:HALLIB/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 486:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 487:HALLIB/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 488:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 489:HALLIB/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 490:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 491:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 492:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 493:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 494:HALLIB/Src/stm32f4xx_hal_rcc.c ****         WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                  
 495:HALLIB/Src/stm32f4xx_hal_rcc.c ****                                  RCC_OscInitStruct->PLL.PLLM                                       
 496:HALLIB/Src/stm32f4xx_hal_rcc.c ****                                  (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             
 497:HALLIB/Src/stm32f4xx_hal_rcc.c ****                                  (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Po
 498:HALLIB/Src/stm32f4xx_hal_rcc.c ****                                  (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
 499:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Enable the main PLL. */
 500:HALLIB/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 501:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 502:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick */
 503:HALLIB/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 504:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 505:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */
 506:HALLIB/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 507:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 508:HALLIB/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 509:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 510:HALLIB/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 511:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 512:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 513:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 514:HALLIB/Src/stm32f4xx_hal_rcc.c ****       else
 515:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 516:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 517:HALLIB/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 527              		.loc 1 517 0
 528 02de 0022     		movs	r2, #0
 529 02e0 414B     		ldr	r3, .L99+4
 530 02e2 1A60     		str	r2, [r3]
 518:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 519:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick */
 520:HALLIB/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 531              		.loc 1 520 0
 532 02e4 FFF7FEFF 		bl	HAL_GetTick
 533              	.LVL42:
 534 02e8 0446     		mov	r4, r0
 535              	.LVL43:
ARM GAS  /tmp/ccQldCSB.s 			page 20


 536              	.L50:
 521:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 522:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */
 523:HALLIB/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 537              		.loc 1 523 0
 538 02ea 3E4B     		ldr	r3, .L99
 539 02ec 1B68     		ldr	r3, [r3]
 540 02ee 13F0007F 		tst	r3, #33554432
 541 02f2 42D0     		beq	.L90
 524:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 525:HALLIB/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 542              		.loc 1 525 0
 543 02f4 FFF7FEFF 		bl	HAL_GetTick
 544              	.LVL44:
 545 02f8 001B     		subs	r0, r0, r4
 546 02fa 0228     		cmp	r0, #2
 547 02fc F5D9     		bls	.L50
 526:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 527:HALLIB/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 548              		.loc 1 527 0
 549 02fe 0320     		movs	r0, #3
 550 0300 6AE0     		b	.L3
 551              	.LVL45:
 552              	.L88:
 553              	.LBB4:
 458:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 554              		.loc 1 458 0
 555 0302 384A     		ldr	r2, .L99
 556 0304 136C     		ldr	r3, [r2, #64]
 557 0306 23F08053 		bic	r3, r3, #268435456
 558 030a 1364     		str	r3, [r2, #64]
 559 030c DBE7     		b	.L30
 560              	.LVL46:
 561              	.L89:
 562              	.LBE4:
 479:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 563              		.loc 1 479 0
 564 030e 0022     		movs	r2, #0
 565 0310 354B     		ldr	r3, .L99+4
 566 0312 1A60     		str	r2, [r3]
 482:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 567              		.loc 1 482 0
 568 0314 FFF7FEFF 		bl	HAL_GetTick
 569              	.LVL47:
 570 0318 0546     		mov	r5, r0
 571              	.LVL48:
 572              	.L46:
 485:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 573              		.loc 1 485 0
 574 031a 324B     		ldr	r3, .L99
 575 031c 1B68     		ldr	r3, [r3]
 576 031e 13F0007F 		tst	r3, #33554432
 577 0322 06D0     		beq	.L91
 487:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 578              		.loc 1 487 0
 579 0324 FFF7FEFF 		bl	HAL_GetTick
 580              	.LVL49:
ARM GAS  /tmp/ccQldCSB.s 			page 21


 581 0328 401B     		subs	r0, r0, r5
 582 032a 0228     		cmp	r0, #2
 583 032c F5D9     		bls	.L46
 489:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 584              		.loc 1 489 0
 585 032e 0320     		movs	r0, #3
 586 0330 52E0     		b	.L3
 587              	.L91:
 494:HALLIB/Src/stm32f4xx_hal_rcc.c ****                                  RCC_OscInitStruct->PLL.PLLM                                       
 588              		.loc 1 494 0
 589 0332 E369     		ldr	r3, [r4, #28]
 590 0334 226A     		ldr	r2, [r4, #32]
 591 0336 1343     		orrs	r3, r3, r2
 592 0338 626A     		ldr	r2, [r4, #36]
 593 033a 43EA8213 		orr	r3, r3, r2, lsl #6
 594 033e A26A     		ldr	r2, [r4, #40]
 595 0340 5208     		lsrs	r2, r2, #1
 596 0342 013A     		subs	r2, r2, #1
 597 0344 43EA0243 		orr	r3, r3, r2, lsl #16
 598 0348 E26A     		ldr	r2, [r4, #44]
 599 034a 43EA0263 		orr	r3, r3, r2, lsl #24
 600 034e 254A     		ldr	r2, .L99
 601 0350 5360     		str	r3, [r2, #4]
 500:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 602              		.loc 1 500 0
 603 0352 0122     		movs	r2, #1
 604 0354 244B     		ldr	r3, .L99+4
 605 0356 1A60     		str	r2, [r3]
 503:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 606              		.loc 1 503 0
 607 0358 FFF7FEFF 		bl	HAL_GetTick
 608              	.LVL50:
 609 035c 0446     		mov	r4, r0
 610              	.LVL51:
 611              	.L48:
 506:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 612              		.loc 1 506 0
 613 035e 214B     		ldr	r3, .L99
 614 0360 1B68     		ldr	r3, [r3]
 615 0362 13F0007F 		tst	r3, #33554432
 616 0366 06D1     		bne	.L92
 508:HALLIB/Src/stm32f4xx_hal_rcc.c ****           {
 617              		.loc 1 508 0
 618 0368 FFF7FEFF 		bl	HAL_GetTick
 619              	.LVL52:
 620 036c 001B     		subs	r0, r0, r4
 621 036e 0228     		cmp	r0, #2
 622 0370 F5D9     		bls	.L48
 510:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 623              		.loc 1 510 0
 624 0372 0320     		movs	r0, #3
 625 0374 30E0     		b	.L3
 626              	.L92:
 528:HALLIB/Src/stm32f4xx_hal_rcc.c ****           }
 529:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 530:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 531:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
ARM GAS  /tmp/ccQldCSB.s 			page 22


 532:HALLIB/Src/stm32f4xx_hal_rcc.c ****     else
 533:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 534:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Check if there is a request to disable the PLL used as System clock source */
 535:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 536:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 537:HALLIB/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 538:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 539:HALLIB/Src/stm32f4xx_hal_rcc.c ****       else
 540:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 541:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* Do not return HAL_ERROR if request repeats the current configuration */
 542:HALLIB/Src/stm32f4xx_hal_rcc.c ****         pll_config = RCC->CFGR;
 543:HALLIB/Src/stm32f4xx_hal_rcc.c ****         if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 544:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 545:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 546:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 547:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 548:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 549:HALLIB/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 550:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 551:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 552:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 553:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 554:HALLIB/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 627              		.loc 1 554 0
 628 0376 0020     		movs	r0, #0
 629 0378 2EE0     		b	.L3
 630              	.L90:
 631 037a 0020     		movs	r0, #0
 632 037c 2CE0     		b	.L3
 633              	.LVL53:
 634              	.L44:
 535:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 635              		.loc 1 535 0
 636 037e 012B     		cmp	r3, #1
 637 0380 2CD0     		beq	.L69
 542:HALLIB/Src/stm32f4xx_hal_rcc.c ****         if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 638              		.loc 1 542 0
 639 0382 184B     		ldr	r3, .L99
 640 0384 9B68     		ldr	r3, [r3, #8]
 641              	.LVL54:
 543:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 642              		.loc 1 543 0
 643 0386 03F48001 		and	r1, r3, #4194304
 644 038a E269     		ldr	r2, [r4, #28]
 645 038c 9142     		cmp	r1, r2
 646 038e 01D0     		beq	.L93
 549:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 647              		.loc 1 549 0
 648 0390 0120     		movs	r0, #1
 649 0392 21E0     		b	.L3
 650              	.L93:
 544:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 651              		.loc 1 544 0 discriminator 1
 652 0394 03F03F02 		and	r2, r3, #63
 653 0398 216A     		ldr	r1, [r4, #32]
 543:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 654              		.loc 1 543 0 discriminator 1
ARM GAS  /tmp/ccQldCSB.s 			page 23


 655 039a 8A42     		cmp	r2, r1
 656 039c 01D0     		beq	.L94
 549:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 657              		.loc 1 549 0
 658 039e 0120     		movs	r0, #1
 659 03a0 1AE0     		b	.L3
 660              	.L94:
 545:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 661              		.loc 1 545 0
 662 03a2 616A     		ldr	r1, [r4, #36]
 544:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 663              		.loc 1 544 0
 664 03a4 47F6C072 		movw	r2, #32704
 665 03a8 1A40     		ands	r2, r2, r3
 666 03aa 8A42     		cmp	r2, r1
 667 03ac 01D0     		beq	.L95
 549:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 668              		.loc 1 549 0
 669 03ae 0120     		movs	r0, #1
 670 03b0 12E0     		b	.L3
 671              	.L95:
 546:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 672              		.loc 1 546 0
 673 03b2 03F44032 		and	r2, r3, #196608
 674 03b6 A16A     		ldr	r1, [r4, #40]
 545:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 675              		.loc 1 545 0
 676 03b8 8A42     		cmp	r2, r1
 677 03ba 01D0     		beq	.L96
 549:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 678              		.loc 1 549 0
 679 03bc 0120     		movs	r0, #1
 680 03be 0BE0     		b	.L3
 681              	.L96:
 547:HALLIB/Src/stm32f4xx_hal_rcc.c ****         {
 682              		.loc 1 547 0
 683 03c0 03F07063 		and	r3, r3, #251658240
 684              	.LVL55:
 685 03c4 E26A     		ldr	r2, [r4, #44]
 546:HALLIB/Src/stm32f4xx_hal_rcc.c ****            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 686              		.loc 1 546 0
 687 03c6 9342     		cmp	r3, r2
 688 03c8 0AD0     		beq	.L74
 549:HALLIB/Src/stm32f4xx_hal_rcc.c ****         }
 689              		.loc 1 549 0
 690 03ca 0120     		movs	r0, #1
 691 03cc 04E0     		b	.L3
 692              	.LVL56:
 693              	.L52:
 694              	.LCFI2:
 695              		.cfi_def_cfa_offset 0
 696              		.cfi_restore 4
 697              		.cfi_restore 5
 698              		.cfi_restore 6
 699              		.cfi_restore 14
 228:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 700              		.loc 1 228 0
ARM GAS  /tmp/ccQldCSB.s 			page 24


 701 03ce 0120     		movs	r0, #1
 702              	.LVL57:
 703 03d0 7047     		bx	lr
 704              	.LVL58:
 705              	.L82:
 706              	.LCFI3:
 707              		.cfi_def_cfa_offset 24
 708              		.cfi_offset 4, -16
 709              		.cfi_offset 5, -12
 710              		.cfi_offset 6, -8
 711              		.cfi_offset 14, -4
 244:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 712              		.loc 1 244 0
 713 03d2 0120     		movs	r0, #1
 714              	.LVL59:
 715 03d4 00E0     		b	.L3
 716              	.L65:
 717              		.loc 1 554 0
 718 03d6 0020     		movs	r0, #0
 719              	.LVL60:
 720              	.L3:
 555:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 721              		.loc 1 555 0
 722 03d8 02B0     		add	sp, sp, #8
 723              	.LCFI4:
 724              		.cfi_remember_state
 725              		.cfi_def_cfa_offset 16
 726              		@ sp needed
 727 03da 70BD     		pop	{r4, r5, r6, pc}
 728              	.LVL61:
 729              	.L69:
 730              	.LCFI5:
 731              		.cfi_restore_state
 537:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 732              		.loc 1 537 0
 733 03dc 0120     		movs	r0, #1
 734 03de FBE7     		b	.L3
 735              	.L74:
 554:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 736              		.loc 1 554 0
 737 03e0 0020     		movs	r0, #0
 738 03e2 F9E7     		b	.L3
 739              	.L100:
 740              		.align	2
 741              	.L99:
 742 03e4 00380240 		.word	1073887232
 743 03e8 60004742 		.word	1111949408
 744              		.cfi_endproc
 745              	.LFE120:
 747              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 748              		.align	1
 749              		.global	HAL_RCC_MCOConfig
 750              		.syntax unified
 751              		.thumb
 752              		.thumb_func
 753              		.fpu fpv4-sp-d16
 755              	HAL_RCC_MCOConfig:
ARM GAS  /tmp/ccQldCSB.s 			page 25


 756              	.LFB122:
 556:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 557:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 558:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified
 559:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 560:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 561:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 562:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  FLatency FLASH Latency, this parameter depend on device selected
 563:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 564:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 565:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 566:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 567:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 568:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 569:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 570:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 571:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 572:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 573:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked).
 574:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 575:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         occur when the clock source will be ready.
 576:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 577:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 578:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 579:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 580:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 581:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 582:HALLIB/Src/stm32f4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 583:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 584:HALLIB/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart;
 585:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 586:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check Null pointer */
 587:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(RCC_ClkInitStruct == NULL)
 588:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 589:HALLIB/Src/stm32f4xx_hal_rcc.c ****     return HAL_ERROR;
 590:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 591:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 592:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 593:HALLIB/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 594:HALLIB/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 595:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 596:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 597:HALLIB/Src/stm32f4xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock
 598:HALLIB/Src/stm32f4xx_hal_rcc.c ****     (HCLK) and the supply voltage of the device. */
 599:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 600:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 601:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(FLatency > __HAL_FLASH_GET_LATENCY())
 602:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 603:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 604:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 605:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 606:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 607:HALLIB/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 608:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(__HAL_FLASH_GET_LATENCY() != FLatency)
 609:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 610:HALLIB/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 611:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
ARM GAS  /tmp/ccQldCSB.s 			page 26


 612:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 613:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 614:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 615:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 616:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 617:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Set the highest APBx dividers in order to ensure that we do not go through
 618:HALLIB/Src/stm32f4xx_hal_rcc.c ****        a non-spec phase whatever we decrease or increase HCLK. */
 619:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 620:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 621:HALLIB/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 622:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 623:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 624:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 625:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 626:HALLIB/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 627:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 628:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 629:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 630:HALLIB/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 631:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 632:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 633:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/
 634:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 635:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 636:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 637:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 638:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 639:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 640:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 641:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSE ready flag */
 642:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 643:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 644:HALLIB/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 645:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 646:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 647:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 648:HALLIB/Src/stm32f4xx_hal_rcc.c ****     else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 649:HALLIB/Src/stm32f4xx_hal_rcc.c ****             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 650:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 651:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Check the PLL ready flag */
 652:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 653:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 654:HALLIB/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 655:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 656:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 657:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 658:HALLIB/Src/stm32f4xx_hal_rcc.c ****     else
 659:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 660:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSI ready flag */
 661:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 662:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 663:HALLIB/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 664:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 665:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 666:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 667:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 668:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
ARM GAS  /tmp/ccQldCSB.s 			page 27


 669:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Get Start Tick */
 670:HALLIB/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 671:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 672:HALLIB/Src/stm32f4xx_hal_rcc.c ****     while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 673:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 674:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 675:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 676:HALLIB/Src/stm32f4xx_hal_rcc.c ****         return HAL_TIMEOUT;
 677:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 678:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 679:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 680:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 681:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 682:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(FLatency < __HAL_FLASH_GET_LATENCY())
 683:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 684:HALLIB/Src/stm32f4xx_hal_rcc.c ****      /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 685:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 686:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 687:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 688:HALLIB/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 689:HALLIB/Src/stm32f4xx_hal_rcc.c ****     if(__HAL_FLASH_GET_LATENCY() != FLatency)
 690:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 691:HALLIB/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 692:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 693:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 694:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 695:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/
 696:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 697:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 698:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 699:HALLIB/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 700:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 701:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 702:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 703:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 704:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 705:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 706:HALLIB/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 707:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 708:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 709:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 710:HALLIB/Src/stm32f4xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CF
 711:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 712:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings */
 713:HALLIB/Src/stm32f4xx_hal_rcc.c ****   HAL_InitTick (uwTickPrio);
 714:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 715:HALLIB/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 716:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 717:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 718:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 719:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @}
 720:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 721:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 722:HALLIB/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 723:HALLIB/Src/stm32f4xx_hal_rcc.c ****  *  @brief   RCC clocks control functions
 724:HALLIB/Src/stm32f4xx_hal_rcc.c ****  *
 725:HALLIB/Src/stm32f4xx_hal_rcc.c **** @verbatim
ARM GAS  /tmp/ccQldCSB.s 			page 28


 726:HALLIB/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 727:HALLIB/Src/stm32f4xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 728:HALLIB/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 729:HALLIB/Src/stm32f4xx_hal_rcc.c ****     [..]
 730:HALLIB/Src/stm32f4xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
 731:HALLIB/Src/stm32f4xx_hal_rcc.c ****     frequencies.
 732:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 733:HALLIB/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 734:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @{
 735:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 736:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 737:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 738:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 739:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 740:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 741:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 742:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 743:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 744:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 745:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 746:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 747:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 748:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 749:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 750:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 751:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 752:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 753:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 754:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 755:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCOx prescaler.
 756:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 757:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 758:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 759:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 760:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 761:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
 762:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
 763:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 764:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 765:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 766:HALLIB/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 767:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 757              		.loc 1 767 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 32
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761              	.LVL62:
 762 0000 70B5     		push	{r4, r5, r6, lr}
 763              	.LCFI6:
 764              		.cfi_def_cfa_offset 16
 765              		.cfi_offset 4, -16
 766              		.cfi_offset 5, -12
 767              		.cfi_offset 6, -8
 768              		.cfi_offset 14, -4
 769 0002 88B0     		sub	sp, sp, #32
 770              	.LCFI7:
 771              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/ccQldCSB.s 			page 29


 772 0004 0C46     		mov	r4, r1
 773 0006 1646     		mov	r6, r2
 768:HALLIB/Src/stm32f4xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 769:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 770:HALLIB/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 771:HALLIB/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 772:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* RCC_MCO1 */
 773:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 774              		.loc 1 773 0
 775 0008 08B3     		cbz	r0, .L105
 776              	.LBB5:
 774:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 775:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 776:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 777:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 778:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __MCO1_CLK_ENABLE();
 779:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 780:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Configure the MCO1 pin in alternate function mode */
 781:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 782:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 783:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 784:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 785:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 786:HALLIB/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 787:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 788:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 789:HALLIB/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 790:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 791:HALLIB/Src/stm32f4xx_hal_rcc.c ****    /* This RCC MCO1 enable feature is available only on STM32F410xx devices */
 792:HALLIB/Src/stm32f4xx_hal_rcc.c **** #if defined(RCC_CFGR_MCO1EN)
 793:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_MCO1_ENABLE();
 794:HALLIB/Src/stm32f4xx_hal_rcc.c **** #endif /* RCC_CFGR_MCO1EN */
 795:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 796:HALLIB/Src/stm32f4xx_hal_rcc.c **** #if defined(RCC_CFGR_MCO2)
 797:HALLIB/Src/stm32f4xx_hal_rcc.c ****   else
 798:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 799:HALLIB/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 800:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 801:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 802:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __MCO2_CLK_ENABLE();
 777              		.loc 1 802 0
 778 000a 0023     		movs	r3, #0
 779 000c 0293     		str	r3, [sp, #8]
 780 000e 204D     		ldr	r5, .L106
 781 0010 2A6B     		ldr	r2, [r5, #48]
 782              	.LVL63:
 783 0012 42F00402 		orr	r2, r2, #4
 784 0016 2A63     		str	r2, [r5, #48]
 785 0018 2A6B     		ldr	r2, [r5, #48]
 786 001a 02F00402 		and	r2, r2, #4
 787 001e 0292     		str	r2, [sp, #8]
 788 0020 029A     		ldr	r2, [sp, #8]
 789              	.LBE5:
 803:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 804:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Configure the MCO2 pin in alternate function mode */
 805:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 790              		.loc 1 805 0
ARM GAS  /tmp/ccQldCSB.s 			page 30


 791 0022 4FF40072 		mov	r2, #512
 792 0026 0392     		str	r2, [sp, #12]
 806:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 793              		.loc 1 806 0
 794 0028 0222     		movs	r2, #2
 795 002a 0492     		str	r2, [sp, #16]
 807:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 796              		.loc 1 807 0
 797 002c 0322     		movs	r2, #3
 798 002e 0692     		str	r2, [sp, #24]
 808:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 799              		.loc 1 808 0
 800 0030 0593     		str	r3, [sp, #20]
 809:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801              		.loc 1 809 0
 802 0032 0793     		str	r3, [sp, #28]
 810:HALLIB/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 803              		.loc 1 810 0
 804 0034 03A9     		add	r1, sp, #12
 805              	.LVL64:
 806 0036 1748     		ldr	r0, .L106+4
 807              	.LVL65:
 808 0038 FFF7FEFF 		bl	HAL_GPIO_Init
 809              	.LVL66:
 811:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 812:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 813:HALLIB/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)))
 810              		.loc 1 813 0
 811 003c AB68     		ldr	r3, [r5, #8]
 812 003e 23F07843 		bic	r3, r3, #-134217728
 813 0042 44EAC604 		orr	r4, r4, r6, lsl #3
 814              	.LVL67:
 815 0046 1C43     		orrs	r4, r4, r3
 816 0048 AC60     		str	r4, [r5, #8]
 817              	.L101:
 814:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 815:HALLIB/Src/stm32f4xx_hal_rcc.c ****    /* This RCC MCO2 enable feature is available only on STM32F410Rx devices */
 816:HALLIB/Src/stm32f4xx_hal_rcc.c **** #if defined(RCC_CFGR_MCO2EN)
 817:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_MCO2_ENABLE();
 818:HALLIB/Src/stm32f4xx_hal_rcc.c **** #endif /* RCC_CFGR_MCO2EN */
 819:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 820:HALLIB/Src/stm32f4xx_hal_rcc.c **** #endif /* RCC_CFGR_MCO2 */
 821:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 818              		.loc 1 821 0
 819 004a 08B0     		add	sp, sp, #32
 820              	.LCFI8:
 821              		.cfi_remember_state
 822              		.cfi_def_cfa_offset 16
 823              		@ sp needed
 824 004c 70BD     		pop	{r4, r5, r6, pc}
 825              	.LVL68:
 826              	.L105:
 827              	.LCFI9:
 828              		.cfi_restore_state
 829              	.LBB6:
 778:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 830              		.loc 1 778 0
ARM GAS  /tmp/ccQldCSB.s 			page 31


 831 004e 0023     		movs	r3, #0
 832 0050 0193     		str	r3, [sp, #4]
 833 0052 0F4D     		ldr	r5, .L106
 834 0054 2A6B     		ldr	r2, [r5, #48]
 835              	.LVL69:
 836 0056 42F00102 		orr	r2, r2, #1
 837 005a 2A63     		str	r2, [r5, #48]
 838 005c 2A6B     		ldr	r2, [r5, #48]
 839 005e 02F00102 		and	r2, r2, #1
 840 0062 0192     		str	r2, [sp, #4]
 841 0064 019A     		ldr	r2, [sp, #4]
 842              	.LBE6:
 781:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 843              		.loc 1 781 0
 844 0066 4FF48072 		mov	r2, #256
 845 006a 0392     		str	r2, [sp, #12]
 782:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 846              		.loc 1 782 0
 847 006c 0222     		movs	r2, #2
 848 006e 0492     		str	r2, [sp, #16]
 783:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 849              		.loc 1 783 0
 850 0070 0322     		movs	r2, #3
 851 0072 0692     		str	r2, [sp, #24]
 784:HALLIB/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 852              		.loc 1 784 0
 853 0074 0593     		str	r3, [sp, #20]
 785:HALLIB/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 854              		.loc 1 785 0
 855 0076 0793     		str	r3, [sp, #28]
 786:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 856              		.loc 1 786 0
 857 0078 03A9     		add	r1, sp, #12
 858              	.LVL70:
 859 007a 0748     		ldr	r0, .L106+8
 860              	.LVL71:
 861 007c FFF7FEFF 		bl	HAL_GPIO_Init
 862              	.LVL72:
 789:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 863              		.loc 1 789 0
 864 0080 AB68     		ldr	r3, [r5, #8]
 865 0082 23F0EC63 		bic	r3, r3, #123731968
 866 0086 3443     		orrs	r4, r4, r6
 867              	.LVL73:
 868 0088 1C43     		orrs	r4, r4, r3
 869 008a AC60     		str	r4, [r5, #8]
 870 008c DDE7     		b	.L101
 871              	.L107:
 872 008e 00BF     		.align	2
 873              	.L106:
 874 0090 00380240 		.word	1073887232
 875 0094 00080240 		.word	1073874944
 876 0098 00000240 		.word	1073872896
 877              		.cfi_endproc
 878              	.LFE122:
 880              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 881              		.align	1
ARM GAS  /tmp/ccQldCSB.s 			page 32


 882              		.global	HAL_RCC_EnableCSS
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu fpv4-sp-d16
 888              	HAL_RCC_EnableCSS:
 889              	.LFB123:
 822:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 823:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 824:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 825:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 826:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 827:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 828:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to
 829:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
 830:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 831:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 832:HALLIB/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 833:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 890              		.loc 1 833 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 834:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 895              		.loc 1 834 0
 896 0000 0122     		movs	r2, #1
 897 0002 014B     		ldr	r3, .L109
 898 0004 1A60     		str	r2, [r3]
 899 0006 7047     		bx	lr
 900              	.L110:
 901              		.align	2
 902              	.L109:
 903 0008 4C004742 		.word	1111949388
 904              		.cfi_endproc
 905              	.LFE123:
 907              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 908              		.align	1
 909              		.global	HAL_RCC_DisableCSS
 910              		.syntax unified
 911              		.thumb
 912              		.thumb_func
 913              		.fpu fpv4-sp-d16
 915              	HAL_RCC_DisableCSS:
 916              	.LFB124:
 835:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 836:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 837:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 838:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 839:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 840:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 841:HALLIB/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 842:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 917              		.loc 1 842 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQldCSB.s 			page 33


 921              		@ link register save eliminated.
 843:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 922              		.loc 1 843 0
 923 0000 0022     		movs	r2, #0
 924 0002 014B     		ldr	r3, .L112
 925 0004 1A60     		str	r2, [r3]
 926 0006 7047     		bx	lr
 927              	.L113:
 928              		.align	2
 929              	.L112:
 930 0008 4C004742 		.word	1111949388
 931              		.cfi_endproc
 932              	.LFE124:
 934              		.global	__aeabi_uldivmod
 935              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 936              		.align	1
 937              		.weak	HAL_RCC_GetSysClockFreq
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu fpv4-sp-d16
 943              	HAL_RCC_GetSysClockFreq:
 944              	.LFB125:
 844:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 845:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 846:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 847:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 848:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 849:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real
 850:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined
 851:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         constant and the selected clock source:
 852:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 853:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 854:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**)
 855:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.
 856:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 857:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 858:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *               in voltage and temperature.
 859:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 860:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 861:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 862:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *                have wrong result.
 863:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 864:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 865:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         value for HSE crystal.
 866:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 867:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the
 868:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 869:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 870:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 871:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 872:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 873:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 874:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval SYSCLK frequency
 875:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 876:HALLIB/Src/stm32f4xx_hal_rcc.c **** __weak uint32_t HAL_RCC_GetSysClockFreq(void)
 877:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
ARM GAS  /tmp/ccQldCSB.s 			page 34


 945              		.loc 1 877 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 950              	.LCFI10:
 951              		.cfi_def_cfa_offset 24
 952              		.cfi_offset 3, -24
 953              		.cfi_offset 4, -20
 954              		.cfi_offset 5, -16
 955              		.cfi_offset 6, -12
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958              	.LVL74:
 878:HALLIB/Src/stm32f4xx_hal_rcc.c ****   uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 879:HALLIB/Src/stm32f4xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 880:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 881:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 882:HALLIB/Src/stm32f4xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 959              		.loc 1 882 0
 960 0002 254B     		ldr	r3, .L122
 961 0004 9B68     		ldr	r3, [r3, #8]
 962 0006 03F00C03 		and	r3, r3, #12
 963 000a 042B     		cmp	r3, #4
 964 000c 41D0     		beq	.L120
 965 000e 082B     		cmp	r3, #8
 966 0010 01D0     		beq	.L117
 883:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 884:HALLIB/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
 885:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 886:HALLIB/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 967              		.loc 1 886 0
 968 0012 2248     		ldr	r0, .L122+4
 969 0014 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 970              	.L117:
 887:HALLIB/Src/stm32f4xx_hal_rcc.c ****        break;
 888:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 889:HALLIB/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
 890:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 891:HALLIB/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 892:HALLIB/Src/stm32f4xx_hal_rcc.c ****       break;
 893:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 894:HALLIB/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
 895:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 896:HALLIB/Src/stm32f4xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 897:HALLIB/Src/stm32f4xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
 898:HALLIB/Src/stm32f4xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 971              		.loc 1 898 0
 972 0016 204B     		ldr	r3, .L122
 973 0018 5A68     		ldr	r2, [r3, #4]
 974 001a 02F03F02 		and	r2, r2, #63
 975              	.LVL75:
 899:HALLIB/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 976              		.loc 1 899 0
 977 001e 5B68     		ldr	r3, [r3, #4]
 978 0020 13F4800F 		tst	r3, #4194304
 979 0024 12D0     		beq	.L118
ARM GAS  /tmp/ccQldCSB.s 			page 35


 900:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 901:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* HSE used as PLL clock source */
 902:HALLIB/Src/stm32f4xx_hal_rcc.c ****         pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
 980              		.loc 1 902 0
 981 0026 1C4B     		ldr	r3, .L122
 982 0028 5968     		ldr	r1, [r3, #4]
 983 002a C1F38811 		ubfx	r1, r1, #6, #9
 984 002e 0023     		movs	r3, #0
 985 0030 1B48     		ldr	r0, .L122+8
 986 0032 A1FB0001 		umull	r0, r1, r1, r0
 987 0036 FFF7FEFF 		bl	__aeabi_uldivmod
 988              	.LVL76:
 989              	.L119:
 903:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 904:HALLIB/Src/stm32f4xx_hal_rcc.c ****       else
 905:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 906:HALLIB/Src/stm32f4xx_hal_rcc.c ****         /* HSI used as PLL clock source */
 907:HALLIB/Src/stm32f4xx_hal_rcc.c ****         pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
 908:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 909:HALLIB/Src/stm32f4xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 990              		.loc 1 909 0
 991 003a 174B     		ldr	r3, .L122
 992 003c 5B68     		ldr	r3, [r3, #4]
 993 003e C3F30143 		ubfx	r3, r3, #16, #2
 994 0042 0133     		adds	r3, r3, #1
 995 0044 5B00     		lsls	r3, r3, #1
 996              	.LVL77:
 910:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 911:HALLIB/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 997              		.loc 1 911 0
 998 0046 B0FBF3F0 		udiv	r0, r0, r3
 999              	.LVL78:
 912:HALLIB/Src/stm32f4xx_hal_rcc.c ****       break;
 1000              		.loc 1 912 0
 1001 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1002              	.LVL79:
 1003              	.L118:
 907:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 1004              		.loc 1 907 0
 1005 004c 124B     		ldr	r3, .L122
 1006 004e 5B68     		ldr	r3, [r3, #4]
 1007 0050 C3F38813 		ubfx	r3, r3, #6, #9
 1008 0054 1E46     		mov	r6, r3
 1009 0056 0027     		movs	r7, #0
 1010 0058 5C01     		lsls	r4, r3, #5
 1011 005a 0025     		movs	r5, #0
 1012 005c E41A     		subs	r4, r4, r3
 1013 005e 65EB0705 		sbc	r5, r5, r7
 1014 0062 A901     		lsls	r1, r5, #6
 1015 0064 41EA9461 		orr	r1, r1, r4, lsr #26
 1016 0068 A001     		lsls	r0, r4, #6
 1017 006a 001B     		subs	r0, r0, r4
 1018 006c 61EB0501 		sbc	r1, r1, r5
 1019 0070 CB00     		lsls	r3, r1, #3
 1020 0072 43EA5073 		orr	r3, r3, r0, lsr #29
 1021 0076 C400     		lsls	r4, r0, #3
 1022 0078 A019     		adds	r0, r4, r6
ARM GAS  /tmp/ccQldCSB.s 			page 36


 1023 007a 43EB0701 		adc	r1, r3, r7
 1024 007e 8B02     		lsls	r3, r1, #10
 1025 0080 43EA9053 		orr	r3, r3, r0, lsr #22
 1026 0084 8402     		lsls	r4, r0, #10
 1027 0086 2046     		mov	r0, r4
 1028 0088 1946     		mov	r1, r3
 1029 008a 0023     		movs	r3, #0
 1030 008c FFF7FEFF 		bl	__aeabi_uldivmod
 1031              	.LVL80:
 1032 0090 D3E7     		b	.L119
 1033              	.LVL81:
 1034              	.L120:
 891:HALLIB/Src/stm32f4xx_hal_rcc.c ****       break;
 1035              		.loc 1 891 0
 1036 0092 0348     		ldr	r0, .L122+8
 1037              	.LVL82:
 913:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 914:HALLIB/Src/stm32f4xx_hal_rcc.c ****     default:
 915:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 916:HALLIB/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 917:HALLIB/Src/stm32f4xx_hal_rcc.c ****       break;
 918:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 919:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 920:HALLIB/Src/stm32f4xx_hal_rcc.c ****   return sysclockfreq;
 921:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 1038              		.loc 1 921 0
 1039 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1040              	.L123:
 1041 0096 00BF     		.align	2
 1042              	.L122:
 1043 0098 00380240 		.word	1073887232
 1044 009c 0024F400 		.word	16000000
 1045 00a0 40787D01 		.word	25000000
 1046              		.cfi_endproc
 1047              	.LFE125:
 1049              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1050              		.align	1
 1051              		.global	HAL_RCC_ClockConfig
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1055              		.fpu fpv4-sp-d16
 1057              	HAL_RCC_ClockConfig:
 1058              	.LFB121:
 583:HALLIB/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart;
 1059              		.loc 1 583 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              	.LVL83:
 587:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1064              		.loc 1 587 0
 1065 0000 0028     		cmp	r0, #0
 1066 0002 00F09E80 		beq	.L139
 583:HALLIB/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart;
 1067              		.loc 1 583 0
 1068 0006 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccQldCSB.s 			page 37


 1069              	.LCFI11:
 1070              		.cfi_def_cfa_offset 16
 1071              		.cfi_offset 4, -16
 1072              		.cfi_offset 5, -12
 1073              		.cfi_offset 6, -8
 1074              		.cfi_offset 14, -4
 1075 0008 0446     		mov	r4, r0
 601:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1076              		.loc 1 601 0
 1077 000a 504B     		ldr	r3, .L152
 1078 000c 1B68     		ldr	r3, [r3]
 1079 000e 03F00F03 		and	r3, r3, #15
 1080 0012 8B42     		cmp	r3, r1
 1081 0014 09D2     		bcs	.L126
 604:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1082              		.loc 1 604 0
 1083 0016 CBB2     		uxtb	r3, r1
 1084 0018 4C4A     		ldr	r2, .L152
 1085 001a 1370     		strb	r3, [r2]
 608:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 1086              		.loc 1 608 0
 1087 001c 1368     		ldr	r3, [r2]
 1088 001e 03F00F03 		and	r3, r3, #15
 1089 0022 9942     		cmp	r1, r3
 1090 0024 01D0     		beq	.L126
 610:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 1091              		.loc 1 610 0
 1092 0026 0120     		movs	r0, #1
 1093              	.LVL84:
 1094 0028 70BD     		pop	{r4, r5, r6, pc}
 1095              	.LVL85:
 1096              	.L126:
 615:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1097              		.loc 1 615 0
 1098 002a 2368     		ldr	r3, [r4]
 1099 002c 13F0020F 		tst	r3, #2
 1100 0030 17D0     		beq	.L127
 619:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 1101              		.loc 1 619 0
 1102 0032 13F0040F 		tst	r3, #4
 1103 0036 04D0     		beq	.L128
 621:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 1104              		.loc 1 621 0
 1105 0038 454A     		ldr	r2, .L152+4
 1106 003a 9368     		ldr	r3, [r2, #8]
 1107 003c 43F4E053 		orr	r3, r3, #7168
 1108 0040 9360     		str	r3, [r2, #8]
 1109              	.L128:
 624:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 1110              		.loc 1 624 0
 1111 0042 2368     		ldr	r3, [r4]
 1112 0044 13F0080F 		tst	r3, #8
 1113 0048 04D0     		beq	.L129
 626:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 1114              		.loc 1 626 0
 1115 004a 414A     		ldr	r2, .L152+4
 1116 004c 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/ccQldCSB.s 			page 38


 1117 004e 43F46043 		orr	r3, r3, #57344
 1118 0052 9360     		str	r3, [r2, #8]
 1119              	.L129:
 630:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1120              		.loc 1 630 0
 1121 0054 3E4A     		ldr	r2, .L152+4
 1122 0056 9368     		ldr	r3, [r2, #8]
 1123 0058 23F0F003 		bic	r3, r3, #240
 1124 005c A068     		ldr	r0, [r4, #8]
 1125              	.LVL86:
 1126 005e 0343     		orrs	r3, r3, r0
 1127 0060 9360     		str	r3, [r2, #8]
 1128              	.L127:
 1129 0062 0D46     		mov	r5, r1
 634:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1130              		.loc 1 634 0
 1131 0064 2368     		ldr	r3, [r4]
 1132 0066 13F0010F 		tst	r3, #1
 1133 006a 32D0     		beq	.L130
 639:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 1134              		.loc 1 639 0
 1135 006c 6368     		ldr	r3, [r4, #4]
 1136 006e 012B     		cmp	r3, #1
 1137 0070 21D0     		beq	.L150
 648:HALLIB/Src/stm32f4xx_hal_rcc.c ****             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 1138              		.loc 1 648 0
 1139 0072 9A1E     		subs	r2, r3, #2
 1140 0074 012A     		cmp	r2, #1
 1141 0076 25D9     		bls	.L151
 661:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 1142              		.loc 1 661 0
 1143 0078 354A     		ldr	r2, .L152+4
 1144 007a 1268     		ldr	r2, [r2]
 1145 007c 12F0020F 		tst	r2, #2
 1146 0080 61D0     		beq	.L143
 1147              	.L132:
 667:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1148              		.loc 1 667 0
 1149 0082 3349     		ldr	r1, .L152+4
 1150              	.LVL87:
 1151 0084 8A68     		ldr	r2, [r1, #8]
 1152 0086 22F00302 		bic	r2, r2, #3
 1153 008a 1343     		orrs	r3, r3, r2
 1154 008c 8B60     		str	r3, [r1, #8]
 670:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1155              		.loc 1 670 0
 1156 008e FFF7FEFF 		bl	HAL_GetTick
 1157              	.LVL88:
 1158 0092 0646     		mov	r6, r0
 1159              	.LVL89:
 1160              	.L134:
 672:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 1161              		.loc 1 672 0
 1162 0094 2E4B     		ldr	r3, .L152+4
 1163 0096 9B68     		ldr	r3, [r3, #8]
 1164 0098 03F00C03 		and	r3, r3, #12
 1165 009c 6268     		ldr	r2, [r4, #4]
ARM GAS  /tmp/ccQldCSB.s 			page 39


 1166 009e B3EB820F 		cmp	r3, r2, lsl #2
 1167 00a2 16D0     		beq	.L130
 674:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 1168              		.loc 1 674 0
 1169 00a4 FFF7FEFF 		bl	HAL_GetTick
 1170              	.LVL90:
 1171 00a8 801B     		subs	r0, r0, r6
 1172 00aa 41F28833 		movw	r3, #5000
 1173 00ae 9842     		cmp	r0, r3
 1174 00b0 F0D9     		bls	.L134
 676:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 1175              		.loc 1 676 0
 1176 00b2 0320     		movs	r0, #3
 1177 00b4 70BD     		pop	{r4, r5, r6, pc}
 1178              	.LVL91:
 1179              	.L150:
 642:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 1180              		.loc 1 642 0
 1181 00b6 264A     		ldr	r2, .L152+4
 1182 00b8 1268     		ldr	r2, [r2]
 1183 00ba 12F4003F 		tst	r2, #131072
 1184 00be E0D1     		bne	.L132
 644:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 1185              		.loc 1 644 0
 1186 00c0 0120     		movs	r0, #1
 1187 00c2 70BD     		pop	{r4, r5, r6, pc}
 1188              	.LVL92:
 1189              	.L151:
 652:HALLIB/Src/stm32f4xx_hal_rcc.c ****       {
 1190              		.loc 1 652 0
 1191 00c4 224A     		ldr	r2, .L152+4
 1192 00c6 1268     		ldr	r2, [r2]
 1193 00c8 12F0007F 		tst	r2, #33554432
 1194 00cc D9D1     		bne	.L132
 654:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 1195              		.loc 1 654 0
 1196 00ce 0120     		movs	r0, #1
 1197 00d0 70BD     		pop	{r4, r5, r6, pc}
 1198              	.LVL93:
 1199              	.L130:
 682:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1200              		.loc 1 682 0
 1201 00d2 1E4B     		ldr	r3, .L152
 1202 00d4 1B68     		ldr	r3, [r3]
 1203 00d6 03F00F03 		and	r3, r3, #15
 1204 00da 9D42     		cmp	r5, r3
 1205 00dc 09D2     		bcs	.L136
 685:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1206              		.loc 1 685 0
 1207 00de EAB2     		uxtb	r2, r5
 1208 00e0 1A4B     		ldr	r3, .L152
 1209 00e2 1A70     		strb	r2, [r3]
 689:HALLIB/Src/stm32f4xx_hal_rcc.c ****     {
 1210              		.loc 1 689 0
 1211 00e4 1B68     		ldr	r3, [r3]
 1212 00e6 03F00F03 		and	r3, r3, #15
 1213 00ea 9D42     		cmp	r5, r3
ARM GAS  /tmp/ccQldCSB.s 			page 40


 1214 00ec 01D0     		beq	.L136
 691:HALLIB/Src/stm32f4xx_hal_rcc.c ****     }
 1215              		.loc 1 691 0
 1216 00ee 0120     		movs	r0, #1
 716:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1217              		.loc 1 716 0
 1218 00f0 70BD     		pop	{r4, r5, r6, pc}
 1219              	.LVL94:
 1220              	.L136:
 696:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1221              		.loc 1 696 0
 1222 00f2 2368     		ldr	r3, [r4]
 1223 00f4 13F0040F 		tst	r3, #4
 1224 00f8 06D0     		beq	.L137
 699:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1225              		.loc 1 699 0
 1226 00fa 154A     		ldr	r2, .L152+4
 1227 00fc 9368     		ldr	r3, [r2, #8]
 1228 00fe 23F4E053 		bic	r3, r3, #7168
 1229 0102 E168     		ldr	r1, [r4, #12]
 1230 0104 0B43     		orrs	r3, r3, r1
 1231 0106 9360     		str	r3, [r2, #8]
 1232              	.L137:
 703:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1233              		.loc 1 703 0
 1234 0108 2368     		ldr	r3, [r4]
 1235 010a 13F0080F 		tst	r3, #8
 1236 010e 07D0     		beq	.L138
 706:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1237              		.loc 1 706 0
 1238 0110 0F4A     		ldr	r2, .L152+4
 1239 0112 9368     		ldr	r3, [r2, #8]
 1240 0114 23F46043 		bic	r3, r3, #57344
 1241 0118 2169     		ldr	r1, [r4, #16]
 1242 011a 43EAC103 		orr	r3, r3, r1, lsl #3
 1243 011e 9360     		str	r3, [r2, #8]
 1244              	.L138:
 710:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1245              		.loc 1 710 0
 1246 0120 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1247              	.LVL95:
 1248 0124 0A4B     		ldr	r3, .L152+4
 1249 0126 9B68     		ldr	r3, [r3, #8]
 1250 0128 C3F30313 		ubfx	r3, r3, #4, #4
 1251 012c 094A     		ldr	r2, .L152+8
 1252 012e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1253 0130 D840     		lsrs	r0, r0, r3
 1254 0132 094B     		ldr	r3, .L152+12
 1255 0134 1860     		str	r0, [r3]
 713:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1256              		.loc 1 713 0
 1257 0136 094B     		ldr	r3, .L152+16
 1258 0138 1868     		ldr	r0, [r3]
 1259 013a FFF7FEFF 		bl	HAL_InitTick
 1260              	.LVL96:
 715:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 1261              		.loc 1 715 0
ARM GAS  /tmp/ccQldCSB.s 			page 41


 1262 013e 0020     		movs	r0, #0
 1263 0140 70BD     		pop	{r4, r5, r6, pc}
 1264              	.LVL97:
 1265              	.L139:
 1266              	.LCFI12:
 1267              		.cfi_def_cfa_offset 0
 1268              		.cfi_restore 4
 1269              		.cfi_restore 5
 1270              		.cfi_restore 6
 1271              		.cfi_restore 14
 589:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1272              		.loc 1 589 0
 1273 0142 0120     		movs	r0, #1
 1274              	.LVL98:
 1275 0144 7047     		bx	lr
 1276              	.LVL99:
 1277              	.L143:
 1278              	.LCFI13:
 1279              		.cfi_def_cfa_offset 16
 1280              		.cfi_offset 4, -16
 1281              		.cfi_offset 5, -12
 1282              		.cfi_offset 6, -8
 1283              		.cfi_offset 14, -4
 663:HALLIB/Src/stm32f4xx_hal_rcc.c ****       }
 1284              		.loc 1 663 0
 1285 0146 0120     		movs	r0, #1
 1286 0148 70BD     		pop	{r4, r5, r6, pc}
 1287              	.LVL100:
 1288              	.L153:
 1289 014a 00BF     		.align	2
 1290              	.L152:
 1291 014c 003C0240 		.word	1073888256
 1292 0150 00380240 		.word	1073887232
 1293 0154 00000000 		.word	AHBPrescTable
 1294 0158 00000000 		.word	SystemCoreClock
 1295 015c 00000000 		.word	uwTickPrio
 1296              		.cfi_endproc
 1297              	.LFE121:
 1299              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1300              		.align	1
 1301              		.global	HAL_RCC_GetHCLKFreq
 1302              		.syntax unified
 1303              		.thumb
 1304              		.thumb_func
 1305              		.fpu fpv4-sp-d16
 1307              	HAL_RCC_GetHCLKFreq:
 1308              	.LFB126:
 922:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 923:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 924:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency
 925:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
 926:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
 927:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *
 928:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 929:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         and updated within this function
 930:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval HCLK frequency
 931:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccQldCSB.s 			page 42


 932:HALLIB/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
 933:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 1309              		.loc 1 933 0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 0
 1312              		@ frame_needed = 0, uses_anonymous_args = 0
 1313              		@ link register save eliminated.
 934:HALLIB/Src/stm32f4xx_hal_rcc.c ****   return SystemCoreClock;
 935:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 1314              		.loc 1 935 0
 1315 0000 014B     		ldr	r3, .L155
 1316 0002 1868     		ldr	r0, [r3]
 1317 0004 7047     		bx	lr
 1318              	.L156:
 1319 0006 00BF     		.align	2
 1320              	.L155:
 1321 0008 00000000 		.word	SystemCoreClock
 1322              		.cfi_endproc
 1323              	.LFE126:
 1325              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1326              		.align	1
 1327              		.global	HAL_RCC_GetPCLK1Freq
 1328              		.syntax unified
 1329              		.thumb
 1330              		.thumb_func
 1331              		.fpu fpv4-sp-d16
 1333              	HAL_RCC_GetPCLK1Freq:
 1334              	.LFB127:
 936:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 937:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 938:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency
 939:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
 940:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
 941:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK1 frequency
 942:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 943:HALLIB/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
 944:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 1335              		.loc 1 944 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339 0000 08B5     		push	{r3, lr}
 1340              	.LCFI14:
 1341              		.cfi_def_cfa_offset 8
 1342              		.cfi_offset 3, -8
 1343              		.cfi_offset 14, -4
 945:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 946:HALLIB/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]
 1344              		.loc 1 946 0
 1345 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1346              	.LVL101:
 1347 0006 044B     		ldr	r3, .L159
 1348 0008 9B68     		ldr	r3, [r3, #8]
 1349 000a C3F38223 		ubfx	r3, r3, #10, #3
 1350 000e 034A     		ldr	r2, .L159+4
 1351 0010 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 947:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
ARM GAS  /tmp/ccQldCSB.s 			page 43


 1352              		.loc 1 947 0
 1353 0012 D840     		lsrs	r0, r0, r3
 1354 0014 08BD     		pop	{r3, pc}
 1355              	.L160:
 1356 0016 00BF     		.align	2
 1357              	.L159:
 1358 0018 00380240 		.word	1073887232
 1359 001c 00000000 		.word	APBPrescTable
 1360              		.cfi_endproc
 1361              	.LFE127:
 1363              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1364              		.align	1
 1365              		.global	HAL_RCC_GetPCLK2Freq
 1366              		.syntax unified
 1367              		.thumb
 1368              		.thumb_func
 1369              		.fpu fpv4-sp-d16
 1371              	HAL_RCC_GetPCLK2Freq:
 1372              	.LFB128:
 948:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 949:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 950:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency
 951:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 952:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 953:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK2 frequency
 954:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 955:HALLIB/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 956:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 1373              		.loc 1 956 0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 0
 1376              		@ frame_needed = 0, uses_anonymous_args = 0
 1377 0000 08B5     		push	{r3, lr}
 1378              	.LCFI15:
 1379              		.cfi_def_cfa_offset 8
 1380              		.cfi_offset 3, -8
 1381              		.cfi_offset 14, -4
 957:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 958:HALLIB/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos])
 1382              		.loc 1 958 0
 1383 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1384              	.LVL102:
 1385 0006 044B     		ldr	r3, .L163
 1386 0008 9B68     		ldr	r3, [r3, #8]
 1387 000a C3F34233 		ubfx	r3, r3, #13, #3
 1388 000e 034A     		ldr	r2, .L163+4
 1389 0010 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 959:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
 1390              		.loc 1 959 0
 1391 0012 D840     		lsrs	r0, r0, r3
 1392 0014 08BD     		pop	{r3, pc}
 1393              	.L164:
 1394 0016 00BF     		.align	2
 1395              	.L163:
 1396 0018 00380240 		.word	1073887232
 1397 001c 00000000 		.word	APBPrescTable
 1398              		.cfi_endproc
ARM GAS  /tmp/ccQldCSB.s 			page 44


 1399              	.LFE128:
 1401              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1402              		.align	1
 1403              		.weak	HAL_RCC_GetOscConfig
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1407              		.fpu fpv4-sp-d16
 1409              	HAL_RCC_GetOscConfig:
 1410              	.LFB129:
 960:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 961:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
 962:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
 963:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
 964:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 965:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
 966:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 967:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
 968:HALLIB/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 969:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 1411              		.loc 1 969 0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415              		@ link register save eliminated.
 1416              	.LVL103:
 970:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
 971:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 1417              		.loc 1 971 0
 1418 0000 0F23     		movs	r3, #15
 1419 0002 0360     		str	r3, [r0]
 972:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 973:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
 974:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1420              		.loc 1 974 0
 1421 0004 304B     		ldr	r3, .L179
 1422 0006 1B68     		ldr	r3, [r3]
 1423 0008 13F4802F 		tst	r3, #262144
 1424 000c 3CD0     		beq	.L166
 975:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 976:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1425              		.loc 1 976 0
 1426 000e 4FF4A023 		mov	r3, #327680
 1427 0012 4360     		str	r3, [r0, #4]
 1428              	.L167:
 977:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 978:HALLIB/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 979:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 980:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 981:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 982:HALLIB/Src/stm32f4xx_hal_rcc.c ****   else
 983:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 984:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 985:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 986:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 987:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
 988:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
ARM GAS  /tmp/ccQldCSB.s 			page 45


 1429              		.loc 1 988 0
 1430 0014 2C4B     		ldr	r3, .L179
 1431 0016 1B68     		ldr	r3, [r3]
 1432 0018 13F0010F 		tst	r3, #1
 1433 001c 40D0     		beq	.L169
 989:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 990:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1434              		.loc 1 990 0
 1435 001e 0123     		movs	r3, #1
 1436 0020 C360     		str	r3, [r0, #12]
 1437              	.L170:
 991:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 992:HALLIB/Src/stm32f4xx_hal_rcc.c ****   else
 993:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 994:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 995:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 996:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 997:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_P
 1438              		.loc 1 997 0
 1439 0022 294A     		ldr	r2, .L179
 1440 0024 1368     		ldr	r3, [r2]
 1441 0026 C3F3C403 		ubfx	r3, r3, #3, #5
 1442 002a 0361     		str	r3, [r0, #16]
 998:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 999:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1000:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1443              		.loc 1 1000 0
 1444 002c 136F     		ldr	r3, [r2, #112]
 1445 002e 13F0040F 		tst	r3, #4
 1446 0032 38D0     		beq	.L171
1001:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
1002:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1447              		.loc 1 1002 0
 1448 0034 0523     		movs	r3, #5
 1449 0036 8360     		str	r3, [r0, #8]
 1450              	.L172:
1003:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
1004:HALLIB/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
1005:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
1006:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
1007:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
1008:HALLIB/Src/stm32f4xx_hal_rcc.c ****   else
1009:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
1010:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
1011:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
1012:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1013:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1014:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 1451              		.loc 1 1014 0
 1452 0038 234B     		ldr	r3, .L179
 1453 003a 5B6F     		ldr	r3, [r3, #116]
 1454 003c 13F0010F 		tst	r3, #1
 1455 0040 3CD0     		beq	.L174
1015:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
1016:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1456              		.loc 1 1016 0
 1457 0042 0123     		movs	r3, #1
ARM GAS  /tmp/ccQldCSB.s 			page 46


 1458 0044 4361     		str	r3, [r0, #20]
 1459              	.L175:
1017:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
1018:HALLIB/Src/stm32f4xx_hal_rcc.c ****   else
1019:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
1020:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
1021:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
1022:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1023:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1024:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 1460              		.loc 1 1024 0
 1461 0046 204B     		ldr	r3, .L179
 1462 0048 1B68     		ldr	r3, [r3]
 1463 004a 13F0807F 		tst	r3, #16777216
 1464 004e 38D1     		bne	.L178
1025:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
1026:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
1027:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
1028:HALLIB/Src/stm32f4xx_hal_rcc.c ****   else
1029:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
1030:HALLIB/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1465              		.loc 1 1030 0
 1466 0050 0123     		movs	r3, #1
 1467 0052 8361     		str	r3, [r0, #24]
 1468              	.L177:
1031:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
1032:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 1469              		.loc 1 1032 0
 1470 0054 1C4A     		ldr	r2, .L179
 1471 0056 5368     		ldr	r3, [r2, #4]
 1472 0058 03F48003 		and	r3, r3, #4194304
 1473 005c C361     		str	r3, [r0, #28]
1033:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 1474              		.loc 1 1033 0
 1475 005e 5368     		ldr	r3, [r2, #4]
 1476 0060 03F03F03 		and	r3, r3, #63
 1477 0064 0362     		str	r3, [r0, #32]
1034:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Po
 1478              		.loc 1 1034 0
 1479 0066 5368     		ldr	r3, [r2, #4]
 1480 0068 C3F38813 		ubfx	r3, r3, #6, #9
 1481 006c 4362     		str	r3, [r0, #36]
1035:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 1482              		.loc 1 1035 0
 1483 006e 5368     		ldr	r3, [r2, #4]
 1484 0070 03F44033 		and	r3, r3, #196608
 1485 0074 03F58033 		add	r3, r3, #65536
 1486 0078 5B00     		lsls	r3, r3, #1
 1487 007a 1B0C     		lsrs	r3, r3, #16
 1488 007c 8362     		str	r3, [r0, #40]
1036:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Po
 1489              		.loc 1 1036 0
 1490 007e 5368     		ldr	r3, [r2, #4]
 1491 0080 C3F30363 		ubfx	r3, r3, #24, #4
 1492 0084 C362     		str	r3, [r0, #44]
 1493 0086 7047     		bx	lr
 1494              	.L166:
ARM GAS  /tmp/ccQldCSB.s 			page 47


 978:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1495              		.loc 1 978 0
 1496 0088 0F4B     		ldr	r3, .L179
 1497 008a 1B68     		ldr	r3, [r3]
 1498 008c 13F4803F 		tst	r3, #65536
 1499 0090 03D0     		beq	.L168
 980:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1500              		.loc 1 980 0
 1501 0092 4FF48033 		mov	r3, #65536
 1502 0096 4360     		str	r3, [r0, #4]
 1503 0098 BCE7     		b	.L167
 1504              	.L168:
 984:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1505              		.loc 1 984 0
 1506 009a 0023     		movs	r3, #0
 1507 009c 4360     		str	r3, [r0, #4]
 1508 009e B9E7     		b	.L167
 1509              	.L169:
 994:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1510              		.loc 1 994 0
 1511 00a0 0023     		movs	r3, #0
 1512 00a2 C360     		str	r3, [r0, #12]
 1513 00a4 BDE7     		b	.L170
 1514              	.L171:
1004:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1515              		.loc 1 1004 0
 1516 00a6 084B     		ldr	r3, .L179
 1517 00a8 1B6F     		ldr	r3, [r3, #112]
 1518 00aa 13F0010F 		tst	r3, #1
 1519 00ae 02D0     		beq	.L173
1006:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1520              		.loc 1 1006 0
 1521 00b0 0123     		movs	r3, #1
 1522 00b2 8360     		str	r3, [r0, #8]
 1523 00b4 C0E7     		b	.L172
 1524              	.L173:
1010:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1525              		.loc 1 1010 0
 1526 00b6 0023     		movs	r3, #0
 1527 00b8 8360     		str	r3, [r0, #8]
 1528 00ba BDE7     		b	.L172
 1529              	.L174:
1020:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1530              		.loc 1 1020 0
 1531 00bc 0023     		movs	r3, #0
 1532 00be 4361     		str	r3, [r0, #20]
 1533 00c0 C1E7     		b	.L175
 1534              	.L178:
1026:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1535              		.loc 1 1026 0
 1536 00c2 0223     		movs	r3, #2
 1537 00c4 8361     		str	r3, [r0, #24]
 1538 00c6 C5E7     		b	.L177
 1539              	.L180:
 1540              		.align	2
 1541              	.L179:
 1542 00c8 00380240 		.word	1073887232
ARM GAS  /tmp/ccQldCSB.s 			page 48


 1543              		.cfi_endproc
 1544              	.LFE129:
 1546              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 1547              		.align	1
 1548              		.global	HAL_RCC_GetClockConfig
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv4-sp-d16
 1554              	HAL_RCC_GetClockConfig:
 1555              	.LFB130:
1037:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
1038:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1039:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
1040:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal
1041:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
1042:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that
1043:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
1044:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1045:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1046:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
1047:HALLIB/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1048:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 1556              		.loc 1 1048 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              		@ link register save eliminated.
 1561              	.LVL104:
1049:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1050:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 1562              		.loc 1 1050 0
 1563 0000 0F23     		movs	r3, #15
 1564 0002 0360     		str	r3, [r0]
1051:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1052:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/
1053:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 1565              		.loc 1 1053 0
 1566 0004 0B4B     		ldr	r3, .L182
 1567 0006 9A68     		ldr	r2, [r3, #8]
 1568 0008 02F00302 		and	r2, r2, #3
 1569 000c 4260     		str	r2, [r0, #4]
1054:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1055:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/
1056:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 1570              		.loc 1 1056 0
 1571 000e 9A68     		ldr	r2, [r3, #8]
 1572 0010 02F0F002 		and	r2, r2, #240
 1573 0014 8260     		str	r2, [r0, #8]
1057:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1058:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/
1059:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 1574              		.loc 1 1059 0
 1575 0016 9A68     		ldr	r2, [r3, #8]
 1576 0018 02F4E052 		and	r2, r2, #7168
 1577 001c C260     		str	r2, [r0, #12]
1060:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
ARM GAS  /tmp/ccQldCSB.s 			page 49


1061:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/
1062:HALLIB/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 1578              		.loc 1 1062 0
 1579 001e 9B68     		ldr	r3, [r3, #8]
 1580 0020 DB08     		lsrs	r3, r3, #3
 1581 0022 03F4E053 		and	r3, r3, #7168
 1582 0026 0361     		str	r3, [r0, #16]
1063:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1064:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/
1065:HALLIB/Src/stm32f4xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 1583              		.loc 1 1065 0
 1584 0028 034B     		ldr	r3, .L182+4
 1585 002a 1B68     		ldr	r3, [r3]
 1586 002c 03F00F03 		and	r3, r3, #15
 1587 0030 0B60     		str	r3, [r1]
 1588 0032 7047     		bx	lr
 1589              	.L183:
 1590              		.align	2
 1591              	.L182:
 1592 0034 00380240 		.word	1073887232
 1593 0038 003C0240 		.word	1073888256
 1594              		.cfi_endproc
 1595              	.LFE130:
 1597              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 1598              		.align	1
 1599              		.weak	HAL_RCC_CSSCallback
 1600              		.syntax unified
 1601              		.thumb
 1602              		.thumb_func
 1603              		.fpu fpv4-sp-d16
 1605              	HAL_RCC_CSSCallback:
 1606              	.LFB132:
1066:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
1067:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1068:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
1069:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1070:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1071:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1072:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
1073:HALLIB/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1074:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
1075:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1076:HALLIB/Src/stm32f4xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
1077:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
1078:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1079:HALLIB/Src/stm32f4xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
1080:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1081:HALLIB/Src/stm32f4xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1082:HALLIB/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
1083:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
1084:HALLIB/Src/stm32f4xx_hal_rcc.c **** }
1085:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
1086:HALLIB/Src/stm32f4xx_hal_rcc.c **** /**
1087:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1088:HALLIB/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1089:HALLIB/Src/stm32f4xx_hal_rcc.c ****   */
1090:HALLIB/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
ARM GAS  /tmp/ccQldCSB.s 			page 50


1091:HALLIB/Src/stm32f4xx_hal_rcc.c **** {
 1607              		.loc 1 1091 0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 1611              		@ link register save eliminated.
 1612 0000 7047     		bx	lr
 1613              		.cfi_endproc
 1614              	.LFE132:
 1616              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 1617              		.align	1
 1618              		.global	HAL_RCC_NMI_IRQHandler
 1619              		.syntax unified
 1620              		.thumb
 1621              		.thumb_func
 1622              		.fpu fpv4-sp-d16
 1624              	HAL_RCC_NMI_IRQHandler:
 1625              	.LFB131:
1074:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 1626              		.loc 1 1074 0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 0
 1629              		@ frame_needed = 0, uses_anonymous_args = 0
1074:HALLIB/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 1630              		.loc 1 1074 0
 1631 0000 08B5     		push	{r3, lr}
 1632              	.LCFI16:
 1633              		.cfi_def_cfa_offset 8
 1634              		.cfi_offset 3, -8
 1635              		.cfi_offset 14, -4
1076:HALLIB/Src/stm32f4xx_hal_rcc.c ****   {
 1636              		.loc 1 1076 0
 1637 0002 064B     		ldr	r3, .L189
 1638 0004 DB68     		ldr	r3, [r3, #12]
 1639 0006 13F0800F 		tst	r3, #128
 1640 000a 00D1     		bne	.L188
 1641              	.L185:
 1642 000c 08BD     		pop	{r3, pc}
 1643              	.L188:
1079:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1644              		.loc 1 1079 0
 1645 000e FFF7FEFF 		bl	HAL_RCC_CSSCallback
 1646              	.LVL105:
1082:HALLIB/Src/stm32f4xx_hal_rcc.c ****   }
 1647              		.loc 1 1082 0
 1648 0012 8022     		movs	r2, #128
 1649 0014 024B     		ldr	r3, .L189+4
 1650 0016 1A70     		strb	r2, [r3]
1084:HALLIB/Src/stm32f4xx_hal_rcc.c **** 
 1651              		.loc 1 1084 0
 1652 0018 F8E7     		b	.L185
 1653              	.L190:
 1654 001a 00BF     		.align	2
 1655              	.L189:
 1656 001c 00380240 		.word	1073887232
 1657 0020 0E380240 		.word	1073887246
 1658              		.cfi_endproc
ARM GAS  /tmp/ccQldCSB.s 			page 51


 1659              	.LFE131:
 1661              		.text
 1662              	.Letext0:
 1663              		.file 2 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 1664              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 1665              		.file 4 "CORE/core_cm4.h"
 1666              		.file 5 "USER/system_stm32f4xx.h"
 1667              		.file 6 "USER/stm32f429xx.h"
 1668              		.file 7 "USER/stm32f4xx.h"
 1669              		.file 8 "HALLIB/Inc/stm32f4xx_hal_def.h"
 1670              		.file 9 "HALLIB/Inc/stm32f4xx_hal_rcc_ex.h"
 1671              		.file 10 "HALLIB/Inc/stm32f4xx_hal_rcc.h"
 1672              		.file 11 "HALLIB/Inc/stm32f4xx_hal_gpio.h"
 1673              		.file 12 "HALLIB/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccQldCSB.s 			page 52


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_rcc.c
     /tmp/ccQldCSB.s:18     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccQldCSB.s:25     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccQldCSB.s:40     .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccQldCSB.s:47     .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccQldCSB.s:504    .text.HAL_RCC_OscConfig:00000000000002b4 $d
     /tmp/ccQldCSB.s:510    .text.HAL_RCC_OscConfig:00000000000002c4 $t
     /tmp/ccQldCSB.s:742    .text.HAL_RCC_OscConfig:00000000000003e4 $d
     /tmp/ccQldCSB.s:748    .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccQldCSB.s:755    .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccQldCSB.s:874    .text.HAL_RCC_MCOConfig:0000000000000090 $d
     /tmp/ccQldCSB.s:881    .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccQldCSB.s:888    .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccQldCSB.s:903    .text.HAL_RCC_EnableCSS:0000000000000008 $d
     /tmp/ccQldCSB.s:908    .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccQldCSB.s:915    .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccQldCSB.s:930    .text.HAL_RCC_DisableCSS:0000000000000008 $d
     /tmp/ccQldCSB.s:936    .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccQldCSB.s:943    .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccQldCSB.s:1043   .text.HAL_RCC_GetSysClockFreq:0000000000000098 $d
     /tmp/ccQldCSB.s:1050   .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccQldCSB.s:1057   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccQldCSB.s:1291   .text.HAL_RCC_ClockConfig:000000000000014c $d
     /tmp/ccQldCSB.s:1300   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccQldCSB.s:1307   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccQldCSB.s:1321   .text.HAL_RCC_GetHCLKFreq:0000000000000008 $d
     /tmp/ccQldCSB.s:1326   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccQldCSB.s:1333   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccQldCSB.s:1358   .text.HAL_RCC_GetPCLK1Freq:0000000000000018 $d
     /tmp/ccQldCSB.s:1364   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccQldCSB.s:1371   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccQldCSB.s:1396   .text.HAL_RCC_GetPCLK2Freq:0000000000000018 $d
     /tmp/ccQldCSB.s:1402   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccQldCSB.s:1409   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccQldCSB.s:1542   .text.HAL_RCC_GetOscConfig:00000000000000c8 $d
     /tmp/ccQldCSB.s:1547   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccQldCSB.s:1554   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccQldCSB.s:1592   .text.HAL_RCC_GetClockConfig:0000000000000034 $d
     /tmp/ccQldCSB.s:1598   .text.HAL_RCC_CSSCallback:0000000000000000 $t
     /tmp/ccQldCSB.s:1605   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccQldCSB.s:1617   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccQldCSB.s:1624   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccQldCSB.s:1656   .text.HAL_RCC_NMI_IRQHandler:000000000000001c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_GPIO_Init
__aeabi_uldivmod
HAL_InitTick
AHBPrescTable
SystemCoreClock
uwTickPrio
APBPrescTable
