ARM GAS  /tmp/ccx4TjBS.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_rcc_ex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RCCEx_PeriphCLKConfig,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_RCCEx_PeriphCLKConfig
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_RCCEx_PeriphCLKConfig:
  26              	.LFB119:
  27              		.file 1 "HALLIB/Src/stm32f4xx_hal_rcc_ex.c"
   1:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
   2:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @file    stm32f4xx_hal_rcc_ex.c
   4:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief   Extension RCC HAL module driver.
   6:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *          functionalities RCC extension peripheral:
   8:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *           + Extended Peripheral Control functions
   9:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
  10:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   ******************************************************************************
  11:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @attention
  12:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
  13:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  14:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * All rights reserved.</center></h2>
  15:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
  16:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  17:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * the "License"; You may not use this file except in compliance with the
  18:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * License. You may obtain a copy of the License at:
  19:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  20:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
  21:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   ******************************************************************************
  22:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
  23:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
  24:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /* Includes ------------------------------------------------------------------*/
  25:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #include "stm32f4xx_hal.h"
  26:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
  27:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /** @addtogroup STM32F4xx_HAL_Driver
  28:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
  29:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
  30:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
  31:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /** @defgroup RCCEx RCCEx
ARM GAS  /tmp/ccx4TjBS.s 			page 2


  32:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief RCCEx HAL module driver
  33:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
  34:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
  35:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
  36:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #ifdef HAL_RCC_MODULE_ENABLED
  37:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
  38:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  39:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /* Private define ------------------------------------------------------------*/
  40:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /** @addtogroup RCCEx_Private_Constants
  41:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
  42:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
  43:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
  44:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @}
  45:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
  46:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /* Private macro -------------------------------------------------------------*/
  47:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /* Private variables ---------------------------------------------------------*/
  48:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  49:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /* Private functions ---------------------------------------------------------*/
  50:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
  51:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *  @{
  52:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
  53:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
  54:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions_Group1 Extended Peripheral Control functions
  55:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  *  @brief  Extended Peripheral Control functions
  56:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  *
  57:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** @verbatim
  58:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  ===============================================================================
  59:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                 ##### Extended Peripheral Control functions  #####
  60:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  ===============================================================================
  61:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     [..]
  62:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
  63:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     frequencies.
  64:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     [..]
  65:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
  66:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         select the RTC clock source; in this case the Backup domain will be reset in
  67:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         order to modify the RTC Clock source, as consequence RTC registers (including
  68:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         the backup registers) and RCC_BDCR register are set to their reset values.
  69:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
  70:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** @endverbatim
  71:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
  72:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
  73:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
  74:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F446xx)
  75:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
  76:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
  77:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
  78:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  79:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
  80:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         clocks(I2S, SAI, LTDC RTC and TIM).
  81:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
  82:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  83:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in
  84:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including
  85:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the backup registers) and RCC_BDCR register are set to their reset values.
  86:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
  87:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
  88:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
ARM GAS  /tmp/ccx4TjBS.s 			page 3


  89:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
  90:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
  91:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
  92:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
  93:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sp = 0U;
  94:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sq = 0U;
  95:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sr = 0U;
  96:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaip = 0U;
  97:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaiq = 0U;
  98:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sused = 0U;
  99:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaiused = 0U;
 100:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 101:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the peripheral clock selection parameters */
 102:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 103:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 104:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------ I2S APB1 configuration --------------------------*/
 105:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 106:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 107:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 108:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));
 109:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 110:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
 111:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 112:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
 113:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 114:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 115:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 116:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 117:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 118:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 119:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 120:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- I2S APB2 configuration ----------------------*/
 121:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 122:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 123:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 124:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));
 125:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 126:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
 127:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 128:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
 129:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 130:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 131:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 132:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 133:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 134:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 135:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 136:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------- SAI1 configuration ---------------------------*/
 137:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 138:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 139:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 140:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 141:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 142:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure SAI1 Clock source */
 143:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 144:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
 145:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
ARM GAS  /tmp/ccx4TjBS.s 			page 4


 146:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 147:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 148:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 149:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
 150:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 151:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 152:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiused = 1U;
 153:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 154:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 155:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 156:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 157:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------------- SAI2 configuration ----------------------------*/
 158:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 159:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 160:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 161:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 162:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 163:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure SAI2 Clock source */
 164:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 165:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 166:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
 167:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 168:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 169:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 170:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 171:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
 172:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 173:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 174:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiused = 1U;
 175:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 176:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 177:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 178:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 179:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------- RTC configuration --------------------------*/
 180:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 181:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 182:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
 183:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 184:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 185:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
 186:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 187:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 188:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
 189:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
 190:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 191:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 192:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 193:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 194:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
 195:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 196:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 197:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 198:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 199:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 200:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 201:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
 202:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
ARM GAS  /tmp/ccx4TjBS.s 			page 5


 203:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSE
 204:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 205:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
 206:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 207:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 208:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
 209:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 210:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 211:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
 212:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 213:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
 214:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 215:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 216:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
 217:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
 218:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 219:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
 220:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 221:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 222:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 223:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 224:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
 225:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 226:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 227:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 228:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 229:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 230:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 231:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 232:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 233:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
 234:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 235:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 236:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure Timer Prescaler */
 237:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 238:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 239:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 240:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 241:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- FMPI2C1 Configuration -----------------------*/
 242:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 243:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 244:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 245:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));
 246:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 247:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the FMPI2C1 clock source */
 248:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 249:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 250:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 251:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 252:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------ CEC Configuration -------------------------*/
 253:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 254:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 255:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 256:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 257:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 258:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the CEC clock source */
 259:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
ARM GAS  /tmp/ccx4TjBS.s 			page 6


 260:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 261:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 262:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 263:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------- CLK48 Configuration ------------------------*/
 264:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 265:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 266:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 267:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
 268:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 269:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the CLK48 clock source */
 270:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 271:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 272:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for CLK48 */
 273:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 274:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 275:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiused = 1U;
 276:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 277:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 278:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 279:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 280:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------- SDIO Configuration -------------------------*/
 281:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 282:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 283:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 284:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
 285:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 286:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SDIO clock source */
 287:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 288:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 289:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 290:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 291:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------ SPDIFRX Configuration ---------------------*/
 292:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 293:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 294:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 295:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));
 296:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 297:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SPDIFRX clock source */
 298:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 299:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
 300:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 301:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 302:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 303:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 304:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 305:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 306:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 307:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- PLLI2S Configuration ------------------------*/
 308:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
 309:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      I2S on APB2 or SPDIFRX */
 310:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 311:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 312:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
 313:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
 314:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 315:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 316:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
ARM GAS  /tmp/ccx4TjBS.s 			page 7


 317:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 318:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 319:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 320:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 321:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 322:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 323:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 324:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 325:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 326:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for common PLLI2S Parameters */
 327:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 328:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 329:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 330:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
 331:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1
 332:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2
 333:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 334:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
 335:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 336:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 337:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S conf
 338:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) 
 339:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 340:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 341:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
 342:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
 343:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2s
 344:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 345:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 346:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
 347:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (Pe
 348:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (Pe
 349:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 350:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLLI2S Parameters */
 351:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 352:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLLI2S/DIVQ parameters */
 353:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 354:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 355:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI conf
 356:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) 
 357:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 358:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 359:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
 360:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 361:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
 362:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2s
 363:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 364:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 365:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 366:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 367:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 368:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
 369:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) &
 370:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 371:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
 372:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 373:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration)
ARM GAS  /tmp/ccx4TjBS.s 			page 8


 374:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) 
 375:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 376:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 377:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
 378:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
 379:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , Periph
 380:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 381:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 382:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      /*----------------- In Case of PLLI2S is just selected  -----------------*/
 383:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 384:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 385:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for Parameters */
 386:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 387:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 388:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 389:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 390:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 391:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
 392:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , Periph
 393:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 394:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 395:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
 396:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
 397:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 398:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 399:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
 400:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 401:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 402:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 403:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 404:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 405:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 406:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 407:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 408:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 409:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 410:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 411:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------- PLLSAI Configuration -----------------------*/
 412:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO
 413:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(pllsaiused == 1U)
 414:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 415:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable PLLSAI Clock */
 416:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_DISABLE();
 417:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 418:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 419:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
 420:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 421:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 422:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 423:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 424:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 425:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 426:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 427:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 428:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 429:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the PLLSAI division factors */
 430:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
ARM GAS  /tmp/ccx4TjBS.s 			page 9


 431:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 432:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 433:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
 434:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (Pe
 435:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (Pe
 436:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 437:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for PLLSAIQ Parameter */
 438:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 439:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for PLLSAI/DIVQ Parameter */
 440:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 441:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 442:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuratio
 443:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) 
 444:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
 445:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 446:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
 447:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsai
 448:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 449:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
 450:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 451:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 452:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 453:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
 454:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of PLLI2S is selected as source clock for CLK48 */
 455:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (P
 456:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 457:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
 458:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 459:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration)
 460:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 461:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLSAI division factors */
 462:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
 463:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
 464:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , Periph
 465:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 466:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 467:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable PLLSAI Clock */
 468:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_ENABLE();
 469:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 470:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 471:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
 472:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 473:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 474:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 475:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 476:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 477:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 478:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 479:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 480:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 481:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
 482:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 483:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 484:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
 485:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
 486:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         RCC configuration registers.
 487:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
ARM GAS  /tmp/ccx4TjBS.s 			page 10


 488:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         will be configured.
 489:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
 490:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
 491:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 492:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 493:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
 494:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 495:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
 496:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
 497:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
 498:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
 499:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  |\
 500:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     |\
 501:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SPDIFRX;
 502:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 503:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration --------------------------------------*/
 504:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI
 505:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
 506:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PL
 507:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
 508:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
 509:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI Clock configuration --------------------------------------*/
 510:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLS
 511:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLS
 512:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PL
 513:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLS
 514:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
 515:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLL
 516:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLL
 517:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 518:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SAI1 clock configuration ----------------------------------------*/
 519:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 520:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 521:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SAI2 clock configuration ----------------------------------------*/
 522:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 523:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 524:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S APB1 clock configuration ------------------------------------*/
 525:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 526:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 527:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S APB2 clock configuration ------------------------------------*/
 528:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 529:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 530:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------*/
 531:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 532:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 533:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 534:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the CEC clock configuration -----------------------------------------*/
 535:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 536:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 537:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the FMPI2C1 clock configuration -------------------------------------*/
 538:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 539:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 540:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the CLK48 clock configuration ----------------------------------------*/
 541:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 542:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 543:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SDIO clock configuration ----------------------------------------*/
 544:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
ARM GAS  /tmp/ccx4TjBS.s 			page 11


 545:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 546:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SPDIFRX clock configuration -------------------------------------*/
 547:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
 548:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 549:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the TIM Prescaler configuration -------------------------------------*/
 550:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 551:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 552:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 553:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 554:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   else
 555:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 556:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 557:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 558:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 559:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 560:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
 561:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
 562:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
 563:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
 564:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
 565:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
 566:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
 567:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
 568:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
 569:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
 570:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
 571:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
 572:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 573:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
 574:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the SAI clock frequency (value in Hz) */
 575:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
 576:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
 577:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
 578:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the SAI clock source */
 579:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t saiclocksource = 0U;
 580:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
 581:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
 582:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
 583:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
 584:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 585:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_SAI1:
 586:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_SAI2:
 587:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 588:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       saiclocksource = RCC->DCKCFGR;
 589:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 590:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (saiclocksource)
 591:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 592:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case 0U: /* PLLSAI is the clock source for SAI*/
 593:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 594:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLSAI division factor */
 595:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLSAI_VCO Input  = PLL_SOURCE/PLLSAIM */
 596:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 597:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 598:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSI (Internal Clock) */
 599:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 600:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 601:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
ARM GAS  /tmp/ccx4TjBS.s 			page 12


 602:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 603:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSE (External Clock) */
 604:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 605:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 606:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 607:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
 608:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 609:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 610:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 611:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
 612:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 613:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = frequency/(tmpreg1);
 614:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 615:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 616:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_DCKCFGR_SAI1SRC_0: /* PLLI2S is the clock source for SAI*/
 617:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_DCKCFGR_SAI2SRC_0: /* PLLI2S is the clock source for SAI*/
 618:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 619:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
 620:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
 621:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 622:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 623:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSI (Internal Clock) */
 624:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 625:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 626:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 627:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 628:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSE (External Clock) */
 629:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 630:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 631:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 632:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 633:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
 634:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 635:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 636:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 637:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 638:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 639:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = frequency/(tmpreg1);
 640:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 641:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 642:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_DCKCFGR_SAI1SRC_1: /* PLLR is the clock source for SAI*/
 643:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_DCKCFGR_SAI2SRC_1: /* PLLR is the clock source for SAI*/
 644:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 645:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
 646:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
 647:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 648:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 649:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSI (Internal Clock) */
 650:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 651:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 652:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 653:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 654:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSE (External Clock) */
 655:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 656:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 657:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 658:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
ARM GAS  /tmp/ccx4TjBS.s 			page 13


 659:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK_x = PLL_VCO Output/PLLR */
 660:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 661:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 662:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 663:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 664:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_DCKCFGR_SAI1SRC: /* External clock is the clock source for SAI*/
 665:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 666:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
 667:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 668:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 669:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_DCKCFGR_SAI2SRC: /* PLLSRC(HSE or HSI) is the clock source for SAI*/
 670:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 671:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 672:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 673:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSI (Internal Clock) */
 674:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = (uint32_t)(HSI_VALUE);
 675:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 676:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 677:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 678:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSE (External Clock) */
 679:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = (uint32_t)(HSE_VALUE);
 680:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 681:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 682:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 683:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default :
 684:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 685:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 686:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 687:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 688:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
 689:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 690:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S_APB1:
 691:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 692:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
 693:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 694:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
 695:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 696:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cloc
 697:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB1CLKSOURCE_EXT:
 698:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 699:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
 700:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
 701:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 702:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 703:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clo
 704:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB1CLKSOURCE_PLLI2S:
 705:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 706:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
 707:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
 708:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 709:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 710:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 711:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
 712:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 713:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 714:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 715:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
ARM GAS  /tmp/ccx4TjBS.s 			page 14


 716:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
 717:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 718:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 719:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 720:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
 721:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
 722:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & 
 723:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 724:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 725:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
 726:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB1CLKSOURCE_PLLR:
 727:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 728:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
 729:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
 730:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 731:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 732:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 733:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 734:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 735:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 736:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 737:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 738:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 739:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 740:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 741:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
 742:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
 743:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
 744:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLC
 745:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 746:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 747:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
 748:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB1CLKSOURCE_PLLSRC:
 749:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 750:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 751:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 752:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
 753:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 754:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 755:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 756:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
 757:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 758:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 759:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 760:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
 761:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default:
 762:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 763:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
 764:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 765:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 766:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 767:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
 768:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 769:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S_APB2:
 770:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 771:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
 772:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
ARM GAS  /tmp/ccx4TjBS.s 			page 15


 773:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
 774:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 775:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
 776:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB2CLKSOURCE_EXT:
 777:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 778:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
 779:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
 780:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 781:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 782:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
 783:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB2CLKSOURCE_PLLI2S:
 784:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 785:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
 786:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
 787:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 788:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 789:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 790:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
 791:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 792:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 793:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 794:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 795:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
 796:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 797:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 798:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 799:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
 800:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
 801:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & 
 802:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 803:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 804:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
 805:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB2CLKSOURCE_PLLR:
 806:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 807:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
 808:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
 809:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 810:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 811:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 812:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 813:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 814:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 815:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 816:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 817:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 818:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 819:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 820:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
 821:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
 822:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
 823:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLC
 824:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 825:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 826:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
 827:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB2CLKSOURCE_PLLSRC:
 828:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 829:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
ARM GAS  /tmp/ccx4TjBS.s 			page 16


 830:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 831:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
 832:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 833:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
 834:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 835:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
 836:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 837:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 838:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 839:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
 840:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default:
 841:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 842:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
 843:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 844:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
 845:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 846:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
 847:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 848:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 849:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
 850:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 851:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
 852:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 853:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F469xx) || defined(STM32F479xx)
 854:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
 855:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
 856:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
 857:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
 858:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
 859:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         clocks(I2S, SAI, LTDC, RTC and TIM).
 860:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
 861:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
 862:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in
 863:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including
 864:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the backup registers) and RCC_BDCR register are set to their reset values.
 865:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
 866:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
 867:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
 868:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 869:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 870:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
 871:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
 872:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaip = 0U;
 873:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaiq = 0U;
 874:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsair = 0U;
 875:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 876:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
 877:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 878:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 879:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------- CLK48 Configuration --------------------------*/
 880:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 881:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 882:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 883:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
 884:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 885:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the CLK48 clock source */
 886:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
ARM GAS  /tmp/ccx4TjBS.s 			page 17


 887:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 888:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 889:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 890:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------ SDIO Configuration ------------------------*/
 891:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 892:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 893:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 894:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
 895:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 896:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SDIO clock source */
 897:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 898:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 899:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 900:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 901:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
 902:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------- Common configuration SAI/I2S -------------------------*/
 903:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
 904:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      factor is common parameters for both peripherals */
 905:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 906:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2
 907:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 908:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 909:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for Parameters */
 910:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 911:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 912:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
 913:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
 914:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 915:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 916:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
 917:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 918:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 919:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 920:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 921:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 922:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 923:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 924:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 925:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 926:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------- I2S configuration -------------------------------*/
 927:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
 928:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       only for I2S configuration */
 929:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 930:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 931:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
 932:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 933:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 934:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
 935:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
 936:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 937:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 938:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 939:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- SAI configuration -------------------------*/
 940:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
 941:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        be added only for SAI configuration */
 942:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLL
 943:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
ARM GAS  /tmp/ccx4TjBS.s 			page 18


 944:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check the PLLI2S division factors */
 945:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 946:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 947:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 948:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration)
 949:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 950:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 951:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
 952:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 953:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
 954:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ 
 955:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 956:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 957:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 958:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 959:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  -----------------*/
 960:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 961:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 962:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for Parameters */
 963:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 964:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 965:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 966:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S multiplication and division factors */
 967:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, 
 968:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 969:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 970:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
 971:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
 972:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 973:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 974:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
 975:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 976:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 977:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 978:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 979:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 980:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 981:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 982:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 983:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 984:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 985:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 986:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
 987:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- Common configuration SAI/LTDC --------------------*/
 988:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
 989:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      factor is common parameters for these peripherals */
 990:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSA
 991:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)          
 992:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)       
 993:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 994:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 995:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the PLLSAI division factors */
 996:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 997:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 998:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable PLLSAI Clock */
 999:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_DISABLE();
1000:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
ARM GAS  /tmp/ccx4TjBS.s 			page 19


1001:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1002:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
1003:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
1004:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1005:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
1006:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1007:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
1008:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1009:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1010:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1011:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1012:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- SAI configuration -------------------------*/
1013:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
1014:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        be added only for SAI configuration */
1015:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLL
1016:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1017:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
1018:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
1019:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1020:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuratio
1021:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) 
1022:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration)
1023:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
1024:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
1025:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1026:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
1027:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ
1028:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
1029:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
1030:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1031:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1032:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- LTDC configuration ------------------------*/
1033:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
1034:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1035:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
1036:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
1037:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1038:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuratio
1039:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) 
1040:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration)
1041:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
1042:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
1043:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1044:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
1045:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSA
1046:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
1047:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
1048:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1049:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1050:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- CLK48 configuration ------------------------*/
1051:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the PLLSAI when it is used as clock source for CLK48 */
1052:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
1053:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
1054:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1055:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
1056:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1057:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration)
ARM GAS  /tmp/ccx4TjBS.s 			page 20


1058:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
1059:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration)
1060:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
1061:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
1062:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1063:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
1064:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq
1065:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1066:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1067:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable PLLSAI Clock */
1068:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_ENABLE();
1069:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1070:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1071:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
1072:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
1073:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1074:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
1075:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1076:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
1077:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1078:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1079:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1080:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1081:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1082:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1083:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1084:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- RTC configuration ---------------------------*/
1085:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
1086:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1087:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
1088:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
1089:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1090:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
1091:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
1092:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1093:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
1094:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
1095:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1096:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1097:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1098:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1099:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
1100:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1101:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
1102:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1103:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1104:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1105:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1106:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
1107:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
1108:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSE
1109:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1110:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
1111:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
1112:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
1113:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
1114:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
ARM GAS  /tmp/ccx4TjBS.s 			page 21


1115:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
1116:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
1117:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1118:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
1119:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
1120:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1121:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
1122:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
1123:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1124:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
1125:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1126:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1127:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
1128:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1129:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
1130:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1131:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1132:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1133:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1134:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1135:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1136:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1137:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1138:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
1139:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
1140:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1141:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
1142:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1143:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
1144:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
1145:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1146:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
1147:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Configures the RCC_PeriphCLKInitTypeDef according to the internal
1148:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * RCC configuration registers.
1149:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
1150:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         will be configured.
1151:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
1152:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
1153:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1154:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
1155:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
1156:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1157:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
1158:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S        | RCC_PERIPHCLK_SAI_PLLSAI |\
1159:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAI_PLLI2S | RCC_PERIPHCLK_LTDC       |\
1160:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM        | RCC_PERIPHCLK_RTC        |\
1161:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CLK48       | RCC_PERIPHCLK_SDIO;
1162:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1163:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration --------------------------------------*/
1164:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
1165:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
1166:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
1167:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI Clock configuration --------------------------------------*/
1168:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLS
1169:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLS
1170:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLS
1171:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
ARM GAS  /tmp/ccx4TjBS.s 			page 22


1172:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLL
1173:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLL
1174:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivR = (uint32_t)(RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVR);
1175:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------*/
1176:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
1177:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
1178:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1179:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get the CLK48 clock configuration -------------------------------------*/
1180:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
1181:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1182:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SDIO clock configuration ----------------------------------------*/
1183:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
1184:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1185:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
1186:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1187:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
1188:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1189:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   else
1190:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1191:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
1192:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1193:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
1194:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1195:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
1196:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
1197:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
1198:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
1199:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
1200:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
1201:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
1202:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
1203:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
1204:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
1205:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
1206:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
1207:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
1208:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
1209:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
1210:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
1211:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
1212:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
1213:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1214:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S:
1215:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1216:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
1217:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_SOURCE();
1218:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
1219:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1220:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cloc
1221:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SCLKSOURCE_EXT:
1222:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1223:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
1224:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
1225:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1226:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1227:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clo
1228:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SCLKSOURCE_PLLI2S:
ARM GAS  /tmp/ccx4TjBS.s 			page 23


1229:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1230:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
1231:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
1232:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1233:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1234:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1235:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1236:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1237:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
1238:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1239:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1240:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1241:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1242:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1243:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1244:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
1245:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
1246:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & 
1247:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1248:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1249:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
1250:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default:
1251:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1252:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
1253:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1254:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1255:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1256:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
1257:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1258:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1259:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
1260:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
1261:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F469xx || STM32F479xx */
1262:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1263:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) ||
1264:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
1265:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
1266:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
1267:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
1268:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
1269:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         clocks(I2S, LTDC RTC and TIM).
1270:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
1271:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
1272:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in
1273:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including
1274:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the backup registers) and RCC_BDCR register are set to their reset values.
1275:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
1276:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
1277:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
1278:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1279:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
1280:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
1281:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
1282:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1283:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sq = 0U;
1284:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1285:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sused = 0U;
ARM GAS  /tmp/ccx4TjBS.s 			page 24


1286:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1287:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the peripheral clock selection parameters */
1288:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
1289:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1290:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------------- I2S APB1 configuration ---------------*/
1291:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
1292:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1293:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1294:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));
1295:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1296:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
1297:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
1298:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
1299:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
1300:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1301:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1302:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1303:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1304:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1305:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1306:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------------- I2S APB2 configuration ---------------*/
1307:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
1308:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1309:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1310:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));
1311:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1312:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
1313:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
1314:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
1315:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
1316:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1317:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1318:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1319:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1320:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1321:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1322:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1323:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI1 Block A configuration -----------------------*/
1324:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
1325:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1326:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1327:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));
1328:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1329:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure SAI1 Clock source */
1330:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
1331:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
1332:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
1333:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1334:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1335:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1336:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
1337:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
1338:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1339:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLL/DIVR parameters */
1340:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));
1341:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1342:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
ARM GAS  /tmp/ccx4TjBS.s 			page 25


1343:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
1344:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1345:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1346:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1347:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1348:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------- SAI1 Block B configuration ------------------------*/
1349:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
1350:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1351:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1352:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));
1353:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1354:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure SAI1 Clock source */
1355:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
1356:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
1357:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
1358:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1359:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1360:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1361:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
1362:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
1363:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1364:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLL/DIVR parameters */
1365:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));
1366:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1367:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
1368:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
1369:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1370:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1371:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1372:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1373:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1374:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------ RTC configuration -------------------*/
1375:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
1376:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1377:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
1378:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
1379:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1380:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
1381:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
1382:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1383:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
1384:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
1385:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1386:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1387:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1388:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1389:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
1390:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1391:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
1392:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1393:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1394:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1395:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1396:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
1397:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
1398:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSE
1399:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
ARM GAS  /tmp/ccx4TjBS.s 			page 26


1400:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
1401:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
1402:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
1403:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
1404:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
1405:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
1406:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
1407:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1408:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
1409:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
1410:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1411:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
1412:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
1413:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1414:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
1415:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1416:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1417:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
1418:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1419:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
1420:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1421:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1422:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1423:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1424:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1425:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1426:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1427:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1428:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------ TIM configuration -------------------*/
1429:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
1430:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1431:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure Timer Prescaler */
1432:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
1433:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1434:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1435:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1436:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------- FMPI2C1 Configuration --------------*/
1437:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
1438:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1439:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1440:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));
1441:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1442:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the FMPI2C1 clock source */
1443:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
1444:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1445:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1446:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1447:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------- CLK48 Configuration ----------------*/
1448:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
1449:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1450:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1451:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
1452:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1453:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SDIO clock source */
1454:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
1455:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1456:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for CLK48 */
ARM GAS  /tmp/ccx4TjBS.s 			page 27


1457:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
1458:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1459:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1460:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1461:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1462:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1463:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1464:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------- SDIO Configuration -----------------*/
1465:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
1466:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1467:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1468:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
1469:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1470:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SDIO clock source */
1471:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
1472:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1473:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1474:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1475:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------------------------- PLLI2S Configuration --------------*/
1476:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
1477:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      I2S on APB2*/
1478:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
1479:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1480:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
1481:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
1482:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1483:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1484:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
1485:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
1486:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1487:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
1488:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1489:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
1490:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1491:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1492:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1493:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1494:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for common PLLI2S Parameters */
1495:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
1496:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
1497:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
1498:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*-------------------- Set the PLL I2S clock -----------------------------*/
1499:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
1500:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1501:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
1502:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1
1503:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2
1504:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (
1505:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (Pe
1506:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1507:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
1508:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
1509:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
1510:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1511:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
1512:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
1513:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
ARM GAS  /tmp/ccx4TjBS.s 			page 28


1514:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , Periph
1515:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1516:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1517:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1518:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
1519:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (Pe
1520:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (Pe
1521:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1522:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLLI2S Parameters */
1523:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
1524:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLLI2S/DIVR parameters */
1525:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));
1526:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1527:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuratio
1528:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
1529:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
1530:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
1531:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1532:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
1533:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq
1534:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1535:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
1536:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
1537:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1538:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1539:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1540:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  ------------------*/
1541:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
1542:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1543:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for Parameters */
1544:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
1545:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
1546:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1547:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
1548:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
1549:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
1550:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , Periph
1551:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1552:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1553:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
1554:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
1555:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1556:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1557:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
1558:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
1559:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1560:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
1561:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1562:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
1563:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1564:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1565:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1566:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1567:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1568:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1569:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------- DFSDM1 clock source configuration -------------------*/
1570:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
ARM GAS  /tmp/ccx4TjBS.s 			page 29


1571:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1572:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1573:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
1574:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1575:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 interface clock source */
1576:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
1577:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1578:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1579:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1580:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------- DFSDM1 Audio clock source configuration -------------*/
1581:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_A
1582:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1583:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1584:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
1585:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1586:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 Audio interface clock source */
1587:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
1588:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1589:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1590:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1591:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1592:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------- DFSDM2 clock source configuration -------------------*/
1593:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
1594:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1595:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1596:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));
1597:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1598:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 interface clock source */
1599:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
1600:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1601:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1602:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1603:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------- DFSDM2 Audio clock source configuration -------------*/
1604:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_A
1605:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1606:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1607:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));
1608:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1609:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 Audio interface clock source */
1610:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
1611:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1612:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1613:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1614:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- LPTIM1 Configuration ------------------------*/
1615:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
1616:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1617:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1618:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
1619:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1620:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the LPTIM1 clock source */
1621:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1622:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1623:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1624:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1625:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1626:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
1627:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
ARM GAS  /tmp/ccx4TjBS.s 			page 30


1628:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1629:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
1630:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
1631:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         RCC configuration registers.
1632:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
1633:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         will be configured.
1634:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
1635:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
1636:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1637:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
1638:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
1639:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1640:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
1641:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1642:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1     | RCC_PERIPHCLK_I2S_APB2 |\
1643:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM          | RCC_PERIPHCLK_RTC      |\
1644:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_FMPI2C1      | RCC_PERIPHCLK_CLK48    |\
1645:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SDIO         | RCC_PERIPHCLK_DFSDM1   |\
1646:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_DFSDM1_AUDIO | RCC_PERIPHCLK_DFSDM2   |\
1647:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_DFSDM2_AUDIO | RCC_PERIPHCLK_LPTIM1   |\
1648:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAIA         | RCC_PERIPHCLK_SAIB;
1649:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx */
1650:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
1651:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
1652:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_FMPI2C1  | RCC_PERIPHCLK_CLK48    |\
1653:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SDIO     | RCC_PERIPHCLK_DFSDM1   |\
1654:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_DFSDM1_AUDIO;
1655:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1656:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1657:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1658:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1659:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration --------------------------------------*/
1660:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI
1661:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
1662:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
1663:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
1664:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1665:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLL/PLLI2S division factors -------------------------------------*/
1666:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVR) >> RCC_DCKCFGR_PLL
1667:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLDIVR) >> RCC_DCKCFGR_PLLDIVR_P
1668:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1669:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1670:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S APB1 clock configuration ------------------------------------*/
1671:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
1672:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1673:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S APB2 clock configuration ------------------------------------*/
1674:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
1675:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1676:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------*/
1677:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
1678:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
1679:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1680:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the FMPI2C1 clock configuration -------------------------------------*/
1681:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
1682:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1683:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the CLK48 clock configuration ---------------------------------------*/
1684:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
ARM GAS  /tmp/ccx4TjBS.s 			page 31


1685:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1686:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SDIO clock configuration ----------------------------------------*/
1687:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
1688:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1689:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the DFSDM1 clock configuration --------------------------------------*/
1690:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
1691:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1692:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the DFSDM1 Audio clock configuration --------------------------------*/
1693:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
1694:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1695:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1696:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the DFSDM2 clock configuration --------------------------------------*/
1697:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm2ClockSelection = __HAL_RCC_GET_DFSDM2_SOURCE();
1698:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1699:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the DFSDM2 Audio clock configuration --------------------------------*/
1700:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm2AudioClockSelection = __HAL_RCC_GET_DFSDM2AUDIO_SOURCE();
1701:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1702:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the LPTIM1 clock configuration --------------------------------------*/
1703:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
1704:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1705:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SAI1 Block Aclock configuration ---------------------------------*/
1706:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SaiAClockSelection = __HAL_RCC_GET_SAI_BLOCKA_SOURCE();
1707:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1708:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SAI1 Block B clock configuration --------------------------------*/
1709:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SaiBClockSelection = __HAL_RCC_GET_SAI_BLOCKB_SOURCE();
1710:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1711:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1712:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the TIM Prescaler configuration -------------------------------------*/
1713:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
1714:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1715:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
1716:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1717:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   else
1718:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1719:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
1720:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1721:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
1722:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1723:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
1724:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(I2S..)
1725:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
1726:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
1727:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
1728:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
1729:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
1730:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
1731:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
1732:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
1733:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
1734:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
1735:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
1736:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
1737:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
1738:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
1739:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
1740:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
1741:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
ARM GAS  /tmp/ccx4TjBS.s 			page 32


1742:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1743:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S_APB1:
1744:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1745:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
1746:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
1747:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
1748:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1749:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cloc
1750:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB1CLKSOURCE_EXT:
1751:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1752:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
1753:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
1754:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1755:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1756:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clo
1757:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB1CLKSOURCE_PLLI2S:
1758:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1759:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
1760:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1761:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1762:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFG
1763:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1764:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
1765:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1766:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Configure the PLLI2S division factor */
1767:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
1768:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1769:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             {
1770:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****               /* Get the I2S source clock value */
1771:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM
1772:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             }
1773:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             else
1774:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             {
1775:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****               /* Get the I2S source clock value */
1776:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM
1777:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             }
1778:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1779:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1780:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
1781:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
1782:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & 
1783:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1784:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1785:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
1786:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB1CLKSOURCE_PLLR:
1787:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1788:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
1789:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
1790:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1791:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1792:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1793:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1794:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1795:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
1796:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1797:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1798:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
ARM GAS  /tmp/ccx4TjBS.s 			page 33


1799:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1800:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1801:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
1802:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
1803:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
1804:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLC
1805:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1806:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1807:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
1808:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB1CLKSOURCE_PLLSRC:
1809:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1810:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1811:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1812:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
1813:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1814:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
1815:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1816:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
1817:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1818:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1819:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1820:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
1821:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default:
1822:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1823:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
1824:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1825:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1826:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1827:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
1828:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1829:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S_APB2:
1830:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1831:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
1832:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
1833:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
1834:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1835:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
1836:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB2CLKSOURCE_EXT:
1837:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1838:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
1839:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
1840:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1841:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1842:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
1843:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB2CLKSOURCE_PLLI2S:
1844:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1845:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
1846:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1847:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1848:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFG
1849:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1850:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
1851:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1852:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Configure the PLLI2S division factor */
1853:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
1854:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1855:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             {
ARM GAS  /tmp/ccx4TjBS.s 			page 34


1856:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****               /* Get the I2S source clock value */
1857:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM
1858:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             }
1859:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             else
1860:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             {
1861:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****               /* Get the I2S source clock value */
1862:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM
1863:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             }
1864:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1865:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1866:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
1867:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
1868:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & 
1869:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1870:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1871:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
1872:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB2CLKSOURCE_PLLR:
1873:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1874:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
1875:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
1876:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1877:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1878:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1879:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1880:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1881:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
1882:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1883:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1884:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1885:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1886:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1887:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
1888:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
1889:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
1890:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLC
1891:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1892:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1893:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
1894:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPB2CLKSOURCE_PLLSRC:
1895:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1896:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1897:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1898:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
1899:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1900:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
1901:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1902:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
1903:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1904:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1905:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1906:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Clock not enabled for I2S*/
1907:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default:
1908:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1909:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
1910:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1911:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1912:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
ARM GAS  /tmp/ccx4TjBS.s 			page 35


1913:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
1914:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1915:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1916:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
1917:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
1918:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */
1919:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1920:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
1921:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
1922:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters i
1923:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         RCC_PeriphCLKInitTypeDef.
1924:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
1925:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals clocks(I2S and RTC 
1926:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
1927:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   A caution to be taken when HAL_RCCEx_PeriphCLKConfig() is used to select RTC clock sele
1928:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the Reset of Backup domain will be applied in order to modify the RTC Clock source as c
1929:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
1930:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
1931:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
1932:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
1933:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1934:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
1935:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
1936:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
1937:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1938:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
1939:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
1940:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1941:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- RTC configuration ---------------------------*/
1942:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
1943:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1944:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
1945:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
1946:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1947:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
1948:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
1949:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1950:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
1951:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
1952:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1953:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1954:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1955:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1956:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
1957:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1958:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
1959:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1960:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1961:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1962:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1963:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
1964:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
1965:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSE
1966:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
1967:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
1968:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
1969:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
ARM GAS  /tmp/ccx4TjBS.s 			page 36


1970:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
1971:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
1972:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
1973:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
1974:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1975:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
1976:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
1977:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
1978:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
1979:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
1980:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1981:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
1982:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1983:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
1984:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
1985:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
1986:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
1987:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
1988:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
1989:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
1990:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
1991:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1992:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
1993:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1994:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
1995:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
1996:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
1997:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
1998:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
1999:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2000:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2001:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2002:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- FMPI2C1 Configuration -----------------------*/
2003:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
2004:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2005:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
2006:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));
2007:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2008:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the FMPI2C1 clock source */
2009:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
2010:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2011:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2012:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2013:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- LPTIM1 Configuration ------------------------*/
2014:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2015:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2016:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
2017:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
2018:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2019:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the LPTIM1 clock source */
2020:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2021:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2022:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2023:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- I2S Configuration ---------------------------*/
2024:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
2025:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2026:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
ARM GAS  /tmp/ccx4TjBS.s 			page 37


2027:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));
2028:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2029:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the I2S clock source */
2030:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
2031:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2032:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2033:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
2034:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
2035:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2036:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2037:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
2038:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * RCC configuration registers.
2039:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2040:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * will be configured.
2041:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
2042:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2043:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2044:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
2045:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
2046:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2047:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
2048:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1 | RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCL
2049:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2050:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
2051:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
2052:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2053:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
2054:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2055:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
2056:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2057:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   else
2058:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2059:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2060:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2061:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the FMPI2C1 clock configuration -------------------------------------*/
2062:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
2063:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2064:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S clock configuration -----------------------------------------*/
2065:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2SClockSelection = __HAL_RCC_GET_I2S_SOURCE();
2066:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2067:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2068:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
2069:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2070:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
2071:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
2072:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
2073:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
2074:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
2075:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
2076:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2077:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
2078:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
2079:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
2080:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
2081:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
2082:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
2083:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
ARM GAS  /tmp/ccx4TjBS.s 			page 38


2084:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
2085:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
2086:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
2087:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2088:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S:
2089:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2090:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
2091:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_SOURCE();
2092:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
2093:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2094:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cloc
2095:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPBCLKSOURCE_EXT:
2096:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2097:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
2098:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
2099:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2100:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2101:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
2102:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPBCLKSOURCE_PLLR:
2103:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2104:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
2105:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
2106:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2107:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2108:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2109:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2110:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2111:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
2112:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2113:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2114:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2115:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2116:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2117:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
2118:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
2119:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
2120:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLC
2121:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2122:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2123:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
2124:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SAPBCLKSOURCE_PLLSRC:
2125:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2126:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2127:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2128:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
2129:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2130:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
2131:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2132:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
2133:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2134:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2135:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2136:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
2137:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default:
2138:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2139:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
2140:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
ARM GAS  /tmp/ccx4TjBS.s 			page 39


2141:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2142:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2143:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2144:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2145:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2146:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
2147:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
2148:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F410Tx || STM32F410Cx || STM32F410Rx */
2149:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2150:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
2151:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2152:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
2153:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
2154:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2155:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
2156:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         clocks(I2S, SAI, LTDC RTC and TIM).
2157:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
2158:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
2159:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in
2160:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including
2161:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the backup registers) and RCC_BDCR register are set to their reset values.
2162:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
2163:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2164:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2165:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2166:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
  28              		.loc 1 2166 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 30B5     		push	{r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 0446     		mov	r4, r0
  43              	.LVL1:
2167:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
2168:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
2169:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2170:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
2171:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
2172:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2173:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
2174:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- Common configuration SAI/I2S ---------------------*/
2175:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
2176:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      factor is common parameters for both peripherals */
2177:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
2178:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2
  44              		.loc 1 2178 0
  45 0006 0368     		ldr	r3, [r0]
2177:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2
ARM GAS  /tmp/ccx4TjBS.s 			page 40


  46              		.loc 1 2177 0
  47 0008 13F0430F 		tst	r3, #67
  48 000c 14D1     		bne	.L34
  49              	.LVL2:
  50              	.L2:
2179:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
2180:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2181:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for Parameters */
2182:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
2183:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2184:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
2185:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
2186:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2187:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2188:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
2189:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2190:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2191:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2192:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2193:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2194:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2195:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2196:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2197:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2198:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- I2S configuration -------------------------*/
2199:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
2200:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       only for I2S configuration */
2201:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
2202:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2203:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
2204:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
2205:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
2206:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
2207:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
2208:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
2209:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2210:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2211:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- SAI configuration -------------------------*/
2212:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
2213:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        be added only for SAI configuration */
2214:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLL
2215:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2216:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check the PLLI2S division factors */
2217:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
2218:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
2219:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2220:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration)
2221:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
2222:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
2223:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
2224:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
2225:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
2226:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ 
2227:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
2228:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
2229:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2230:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/ccx4TjBS.s 			page 41


2231:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  -----------------*/
2232:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
2233:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2234:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for Parameters */
2235:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
2236:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
2237:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2238:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S multiplication and division factors */
2239:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, 
2240:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2241:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2242:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
2243:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
2244:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2245:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2246:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
2247:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2248:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2249:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2250:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2251:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2252:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2253:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2254:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2255:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2256:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2257:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2258:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
2259:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- Common configuration SAI/LTDC --------------------*/
2260:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
2261:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      factor is common parameters for both peripherals */
2262:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSA
  51              		.loc 1 2262 0
  52 000e 2368     		ldr	r3, [r4]
  53 0010 13F00C0F 		tst	r3, #12
  54 0014 69D1     		bne	.L35
  55              	.L11:
2263:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
2264:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2265:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the PLLSAI division factors */
2266:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
2267:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2268:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable PLLSAI Clock */
2269:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_DISABLE();
2270:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2271:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2272:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
2273:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2274:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2275:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
2276:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2277:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2278:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2279:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2280:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2281:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2282:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- SAI configuration -------------------------*/
ARM GAS  /tmp/ccx4TjBS.s 			page 42


2283:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
2284:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        be added only for SAI configuration */
2285:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLL
2286:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2287:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
2288:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
2289:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2290:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration)
2291:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
2292:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
2293:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
2294:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
2295:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg
2296:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
2297:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
2298:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2299:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2300:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- LTDC configuration ------------------------*/
2301:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
2302:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2303:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
2304:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
2305:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2306:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration)
2307:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2308:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
2309:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
2310:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
2311:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAI
2312:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
2313:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
2314:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2315:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable PLLSAI Clock */
2316:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_ENABLE();
2317:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2318:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2319:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
2320:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2321:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2322:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
2323:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2324:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2325:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2326:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2327:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2328:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2329:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2330:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2331:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- RTC configuration ---------------------------*/
2332:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  56              		.loc 1 2332 0
  57 0016 2368     		ldr	r3, [r4]
  58 0018 13F0200F 		tst	r3, #32
  59 001c 40F0BE80 		bne	.L36
  60              	.L18:
2333:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2334:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
ARM GAS  /tmp/ccx4TjBS.s 			page 43


2335:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
2336:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2337:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
2338:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
2339:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2340:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
2341:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
2342:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2343:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2344:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2345:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2346:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
2347:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2348:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
2349:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2350:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2351:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2352:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2353:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
2354:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2355:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSE
2356:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2357:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
2358:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2359:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
2360:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
2361:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
2362:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
2363:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
2364:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2365:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
2366:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
2367:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2368:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
2369:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
2370:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2371:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
2372:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2373:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2374:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2375:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2376:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
2377:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2378:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2379:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2380:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2381:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2382:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2383:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2384:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2385:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
2386:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  61              		.loc 1 2386 0
  62 0020 2368     		ldr	r3, [r4]
  63 0022 13F0100F 		tst	r3, #16
  64 0026 00F02081 		beq	.L32
2387:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
ARM GAS  /tmp/ccx4TjBS.s 			page 44


2388:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  65              		.loc 1 2388 0
  66 002a 94F82C20 		ldrb	r2, [r4, #44]	@ zero_extendqisi2
  67 002e 904B     		ldr	r3, .L42
  68 0030 1A60     		str	r2, [r3]
2389:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2390:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
  69              		.loc 1 2390 0
  70 0032 0020     		movs	r0, #0
  71              	.L4:
2391:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
  72              		.loc 1 2391 0
  73 0034 03B0     		add	sp, sp, #12
  74              	.LCFI2:
  75              		.cfi_remember_state
  76              		.cfi_def_cfa_offset 12
  77              		@ sp needed
  78 0036 30BD     		pop	{r4, r5, pc}
  79              	.LVL3:
  80              	.L34:
  81              	.LCFI3:
  82              		.cfi_restore_state
2185:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
  83              		.loc 1 2185 0
  84 0038 0022     		movs	r2, #0
  85 003a 8E4B     		ldr	r3, .L42+4
  86 003c 1A60     		str	r2, [r3]
2187:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
  87              		.loc 1 2187 0
  88 003e FFF7FEFF 		bl	HAL_GetTick
  89              	.LVL4:
  90 0042 0546     		mov	r5, r0
  91              	.LVL5:
  92              	.L3:
2189:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
  93              		.loc 1 2189 0
  94 0044 8C4B     		ldr	r3, .L42+8
  95 0046 1B68     		ldr	r3, [r3]
  96 0048 13F0006F 		tst	r3, #134217728
  97 004c 06D0     		beq	.L37
2191:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
  98              		.loc 1 2191 0
  99 004e FFF7FEFF 		bl	HAL_GetTick
 100              	.LVL6:
 101 0052 401B     		subs	r0, r0, r5
 102 0054 0228     		cmp	r0, #2
 103 0056 F5D9     		bls	.L3
2194:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 104              		.loc 1 2194 0
 105 0058 0320     		movs	r0, #3
 106 005a EBE7     		b	.L4
 107              	.L37:
2201:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 108              		.loc 1 2201 0
 109 005c 2368     		ldr	r3, [r4]
 110 005e 13F0010F 		tst	r3, #1
 111 0062 07D0     		beq	.L6
ARM GAS  /tmp/ccx4TjBS.s 			page 45


2208:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 112              		.loc 1 2208 0
 113 0064 6268     		ldr	r2, [r4, #4]
 114 0066 A368     		ldr	r3, [r4, #8]
 115 0068 1B07     		lsls	r3, r3, #28
 116 006a 43EA8213 		orr	r3, r3, r2, lsl #6
 117 006e 824A     		ldr	r2, .L42+8
 118 0070 C2F88430 		str	r3, [r2, #132]
 119              	.L6:
2214:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 120              		.loc 1 2214 0
 121 0074 2368     		ldr	r3, [r4]
 122 0076 13F0020F 		tst	r3, #2
 123 007a 15D0     		beq	.L7
2221:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 124              		.loc 1 2221 0
 125 007c 7E4A     		ldr	r2, .L42+8
 126 007e D2F88410 		ldr	r1, [r2, #132]
 127              	.LVL7:
2226:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 128              		.loc 1 2226 0
 129 0082 6068     		ldr	r0, [r4, #4]
 130 0084 E368     		ldr	r3, [r4, #12]
 131 0086 1B06     		lsls	r3, r3, #24
 132 0088 43EA8013 		orr	r3, r3, r0, lsl #6
 133 008c 01F0E041 		and	r1, r1, #1879048192
 134              	.LVL8:
 135 0090 0B43     		orrs	r3, r3, r1
 136 0092 C2F88430 		str	r3, [r2, #132]
2228:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 137              		.loc 1 2228 0
 138 0096 D2F88C30 		ldr	r3, [r2, #140]
 139 009a 23F01F03 		bic	r3, r3, #31
 140 009e E169     		ldr	r1, [r4, #28]
 141 00a0 0139     		subs	r1, r1, #1
 142 00a2 0B43     		orrs	r3, r3, r1
 143 00a4 C2F88C30 		str	r3, [r2, #140]
 144              	.L7:
2232:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 145              		.loc 1 2232 0
 146 00a8 2368     		ldr	r3, [r4]
 147 00aa 13F0400F 		tst	r3, #64
 148 00ae 0AD0     		beq	.L8
2239:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 149              		.loc 1 2239 0
 150 00b0 6268     		ldr	r2, [r4, #4]
 151 00b2 E368     		ldr	r3, [r4, #12]
 152 00b4 1B06     		lsls	r3, r3, #24
 153 00b6 43EA8213 		orr	r3, r3, r2, lsl #6
 154 00ba A268     		ldr	r2, [r4, #8]
 155 00bc 43EA0273 		orr	r3, r3, r2, lsl #28
 156 00c0 6D4A     		ldr	r2, .L42+8
 157 00c2 C2F88430 		str	r3, [r2, #132]
 158              	.L8:
2243:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 159              		.loc 1 2243 0
 160 00c6 0122     		movs	r2, #1
ARM GAS  /tmp/ccx4TjBS.s 			page 46


 161 00c8 6A4B     		ldr	r3, .L42+4
 162 00ca 1A60     		str	r2, [r3]
2245:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
 163              		.loc 1 2245 0
 164 00cc FFF7FEFF 		bl	HAL_GetTick
 165              	.LVL9:
 166 00d0 0546     		mov	r5, r0
 167              	.LVL10:
 168              	.L9:
2247:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 169              		.loc 1 2247 0
 170 00d2 694B     		ldr	r3, .L42+8
 171 00d4 1B68     		ldr	r3, [r3]
 172 00d6 13F0006F 		tst	r3, #134217728
 173 00da 98D1     		bne	.L2
2249:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 174              		.loc 1 2249 0
 175 00dc FFF7FEFF 		bl	HAL_GetTick
 176              	.LVL11:
 177 00e0 401B     		subs	r0, r0, r5
 178 00e2 0228     		cmp	r0, #2
 179 00e4 F5D9     		bls	.L9
2252:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 180              		.loc 1 2252 0
 181 00e6 0320     		movs	r0, #3
 182 00e8 A4E7     		b	.L4
 183              	.LVL12:
 184              	.L35:
2269:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 185              		.loc 1 2269 0
 186 00ea 0022     		movs	r2, #0
 187 00ec 634B     		ldr	r3, .L42+12
 188 00ee 1A60     		str	r2, [r3]
2271:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
 189              		.loc 1 2271 0
 190 00f0 FFF7FEFF 		bl	HAL_GetTick
 191              	.LVL13:
 192 00f4 0546     		mov	r5, r0
 193              	.LVL14:
 194              	.L12:
2273:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 195              		.loc 1 2273 0
 196 00f6 604B     		ldr	r3, .L42+8
 197 00f8 1B68     		ldr	r3, [r3]
 198 00fa 13F0005F 		tst	r3, #536870912
 199 00fe 06D0     		beq	.L38
2275:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 200              		.loc 1 2275 0
 201 0100 FFF7FEFF 		bl	HAL_GetTick
 202              	.LVL15:
 203 0104 401B     		subs	r0, r0, r5
 204 0106 0228     		cmp	r0, #2
 205 0108 F5D9     		bls	.L12
2278:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 206              		.loc 1 2278 0
 207 010a 0320     		movs	r0, #3
 208 010c 92E7     		b	.L4
ARM GAS  /tmp/ccx4TjBS.s 			page 47


 209              	.L38:
2285:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 210              		.loc 1 2285 0
 211 010e 2368     		ldr	r3, [r4]
 212 0110 13F0040F 		tst	r3, #4
 213 0114 16D0     		beq	.L14
2291:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
 214              		.loc 1 2291 0
 215 0116 584A     		ldr	r2, .L42+8
 216 0118 D2F88810 		ldr	r1, [r2, #136]
 217              	.LVL16:
2295:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
 218              		.loc 1 2295 0
 219 011c 2069     		ldr	r0, [r4, #16]
 220 011e 6369     		ldr	r3, [r4, #20]
 221 0120 1B06     		lsls	r3, r3, #24
 222 0122 43EA8013 		orr	r3, r3, r0, lsl #6
 223 0126 01F0E041 		and	r1, r1, #1879048192
 224              	.LVL17:
 225 012a 0B43     		orrs	r3, r3, r1
 226 012c C2F88830 		str	r3, [r2, #136]
2297:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 227              		.loc 1 2297 0
 228 0130 D2F88C30 		ldr	r3, [r2, #140]
 229 0134 23F4F853 		bic	r3, r3, #7936
 230 0138 216A     		ldr	r1, [r4, #32]
 231 013a 0139     		subs	r1, r1, #1
 232 013c 43EA0123 		orr	r3, r3, r1, lsl #8
 233 0140 C2F88C30 		str	r3, [r2, #140]
 234              	.L14:
2301:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 235              		.loc 1 2301 0
 236 0144 2368     		ldr	r3, [r4]
 237 0146 13F0080F 		tst	r3, #8
 238 014a 14D0     		beq	.L15
2307:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
 239              		.loc 1 2307 0
 240 014c 4A4A     		ldr	r2, .L42+8
 241 014e D2F88830 		ldr	r3, [r2, #136]
 242              	.LVL18:
2311:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
 243              		.loc 1 2311 0
 244 0152 2169     		ldr	r1, [r4, #16]
 245 0154 03F07063 		and	r3, r3, #251658240
 246              	.LVL19:
 247 0158 43EA8113 		orr	r3, r3, r1, lsl #6
 248 015c A169     		ldr	r1, [r4, #24]
 249 015e 43EA0173 		orr	r3, r3, r1, lsl #28
 250 0162 C2F88830 		str	r3, [r2, #136]
2313:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 251              		.loc 1 2313 0
 252 0166 D2F88C30 		ldr	r3, [r2, #140]
 253 016a 23F44033 		bic	r3, r3, #196608
 254 016e 616A     		ldr	r1, [r4, #36]
 255 0170 0B43     		orrs	r3, r3, r1
 256 0172 C2F88C30 		str	r3, [r2, #140]
 257              	.L15:
ARM GAS  /tmp/ccx4TjBS.s 			page 48


2316:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 258              		.loc 1 2316 0
 259 0176 0122     		movs	r2, #1
 260 0178 404B     		ldr	r3, .L42+12
 261 017a 1A60     		str	r2, [r3]
2318:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
 262              		.loc 1 2318 0
 263 017c FFF7FEFF 		bl	HAL_GetTick
 264              	.LVL20:
 265 0180 0546     		mov	r5, r0
 266              	.LVL21:
 267              	.L16:
2320:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 268              		.loc 1 2320 0
 269 0182 3D4B     		ldr	r3, .L42+8
 270 0184 1B68     		ldr	r3, [r3]
 271 0186 13F0005F 		tst	r3, #536870912
 272 018a 7FF444AF 		bne	.L11
2322:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 273              		.loc 1 2322 0
 274 018e FFF7FEFF 		bl	HAL_GetTick
 275              	.LVL22:
 276 0192 401B     		subs	r0, r0, r5
 277 0194 0228     		cmp	r0, #2
 278 0196 F4D9     		bls	.L16
2325:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 279              		.loc 1 2325 0
 280 0198 0320     		movs	r0, #3
 281 019a 4BE7     		b	.L4
 282              	.LVL23:
 283              	.L36:
 284              	.LBB2:
2338:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 285              		.loc 1 2338 0
 286 019c 0023     		movs	r3, #0
 287 019e 0193     		str	r3, [sp, #4]
 288 01a0 354B     		ldr	r3, .L42+8
 289 01a2 1A6C     		ldr	r2, [r3, #64]
 290 01a4 42F08052 		orr	r2, r2, #268435456
 291 01a8 1A64     		str	r2, [r3, #64]
 292 01aa 1B6C     		ldr	r3, [r3, #64]
 293 01ac 03F08053 		and	r3, r3, #268435456
 294 01b0 0193     		str	r3, [sp, #4]
 295 01b2 019B     		ldr	r3, [sp, #4]
 296              	.LBE2:
2341:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 297              		.loc 1 2341 0
 298 01b4 324A     		ldr	r2, .L42+16
 299 01b6 1368     		ldr	r3, [r2]
 300 01b8 43F48073 		orr	r3, r3, #256
 301 01bc 1360     		str	r3, [r2]
2344:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 302              		.loc 1 2344 0
 303 01be FFF7FEFF 		bl	HAL_GetTick
 304              	.LVL24:
 305 01c2 0546     		mov	r5, r0
 306              	.LVL25:
ARM GAS  /tmp/ccx4TjBS.s 			page 49


 307              	.L19:
2346:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 308              		.loc 1 2346 0
 309 01c4 2E4B     		ldr	r3, .L42+16
 310 01c6 1B68     		ldr	r3, [r3]
 311 01c8 13F4807F 		tst	r3, #256
 312 01cc 06D1     		bne	.L39
2348:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 313              		.loc 1 2348 0
 314 01ce FFF7FEFF 		bl	HAL_GetTick
 315              	.LVL26:
 316 01d2 401B     		subs	r0, r0, r5
 317 01d4 0228     		cmp	r0, #2
 318 01d6 F5D9     		bls	.L19
2350:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
 319              		.loc 1 2350 0
 320 01d8 0320     		movs	r0, #3
 321 01da 2BE7     		b	.L4
 322              	.L39:
2354:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSE
 323              		.loc 1 2354 0
 324 01dc 264B     		ldr	r3, .L42+8
 325 01de 1B6F     		ldr	r3, [r3, #112]
 326              	.LVL27:
2355:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 327              		.loc 1 2355 0
 328 01e0 13F44073 		ands	r3, r3, #768
 329              	.LVL28:
 330 01e4 12D0     		beq	.L21
2355:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 331              		.loc 1 2355 0 is_stmt 0 discriminator 1
 332 01e6 A26A     		ldr	r2, [r4, #40]
 333 01e8 02F44072 		and	r2, r2, #768
 334 01ec 9342     		cmp	r3, r2
 335 01ee 0DD0     		beq	.L21
2358:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 336              		.loc 1 2358 0 is_stmt 1
 337 01f0 214B     		ldr	r3, .L42+8
 338              	.LVL29:
 339 01f2 1A6F     		ldr	r2, [r3, #112]
 340 01f4 22F44072 		bic	r2, r2, #768
 341              	.LVL30:
2360:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 342              		.loc 1 2360 0
 343 01f8 2249     		ldr	r1, .L42+20
 344 01fa 0120     		movs	r0, #1
 345 01fc 0860     		str	r0, [r1]
2361:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 346              		.loc 1 2361 0
 347 01fe 0020     		movs	r0, #0
 348 0200 0860     		str	r0, [r1]
2363:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 349              		.loc 1 2363 0
 350 0202 1A67     		str	r2, [r3, #112]
2366:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
 351              		.loc 1 2366 0
 352 0204 1B6F     		ldr	r3, [r3, #112]
ARM GAS  /tmp/ccx4TjBS.s 			page 50


 353 0206 13F0010F 		tst	r3, #1
 354 020a 12D1     		bne	.L40
 355              	.LVL31:
 356              	.L21:
2381:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 357              		.loc 1 2381 0
 358 020c A36A     		ldr	r3, [r4, #40]
 359 020e 03F44072 		and	r2, r3, #768
 360 0212 B2F5407F 		cmp	r2, #768
 361 0216 1DD0     		beq	.L41
2381:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 362              		.loc 1 2381 0 is_stmt 0 discriminator 2
 363 0218 174A     		ldr	r2, .L42+8
 364 021a 9368     		ldr	r3, [r2, #8]
 365 021c 23F4F813 		bic	r3, r3, #2031616
 366 0220 9360     		str	r3, [r2, #8]
 367              	.L25:
2381:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 368              		.loc 1 2381 0 discriminator 4
 369 0222 1549     		ldr	r1, .L42+8
 370 0224 0B6F     		ldr	r3, [r1, #112]
 371 0226 A26A     		ldr	r2, [r4, #40]
 372 0228 C2F30B02 		ubfx	r2, r2, #0, #12
 373 022c 1343     		orrs	r3, r3, r2
 374 022e 0B67     		str	r3, [r1, #112]
 375 0230 F6E6     		b	.L18
 376              	.LVL32:
 377              	.L40:
2369:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 378              		.loc 1 2369 0 is_stmt 1
 379 0232 FFF7FEFF 		bl	HAL_GetTick
 380              	.LVL33:
 381 0236 0546     		mov	r5, r0
 382              	.LVL34:
 383              	.L22:
2372:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
 384              		.loc 1 2372 0
 385 0238 0F4B     		ldr	r3, .L42+8
 386 023a 1B6F     		ldr	r3, [r3, #112]
 387 023c 13F0020F 		tst	r3, #2
 388 0240 E4D1     		bne	.L21
2374:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
 389              		.loc 1 2374 0
 390 0242 FFF7FEFF 		bl	HAL_GetTick
 391              	.LVL35:
 392 0246 401B     		subs	r0, r0, r5
 393 0248 41F28833 		movw	r3, #5000
 394 024c 9842     		cmp	r0, r3
 395 024e F3D9     		bls	.L22
2376:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 396              		.loc 1 2376 0
 397 0250 0320     		movs	r0, #3
 398 0252 EFE6     		b	.L4
 399              	.L41:
2381:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 400              		.loc 1 2381 0 discriminator 1
 401 0254 0849     		ldr	r1, .L42+8
ARM GAS  /tmp/ccx4TjBS.s 			page 51


 402 0256 8A68     		ldr	r2, [r1, #8]
 403 0258 22F4F812 		bic	r2, r2, #2031616
 404 025c 23F07043 		bic	r3, r3, #-268435456
 405 0260 23F44073 		bic	r3, r3, #768
 406 0264 1343     		orrs	r3, r3, r2
 407 0266 8B60     		str	r3, [r1, #8]
 408 0268 DBE7     		b	.L25
 409              	.LVL36:
 410              	.L32:
2390:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 411              		.loc 1 2390 0
 412 026a 0020     		movs	r0, #0
 413 026c E2E6     		b	.L4
 414              	.L43:
 415 026e 00BF     		.align	2
 416              	.L42:
 417 0270 E0114742 		.word	1111953888
 418 0274 68004742 		.word	1111949416
 419 0278 00380240 		.word	1073887232
 420 027c 70004742 		.word	1111949424
 421 0280 00700040 		.word	1073770496
 422 0284 400E4742 		.word	1111952960
 423              		.cfi_endproc
 424              	.LFE119:
 426              		.section	.text.HAL_RCCEx_GetPeriphCLKConfig,"ax",%progbits
 427              		.align	1
 428              		.global	HAL_RCCEx_GetPeriphCLKConfig
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu fpv4-sp-d16
 434              	HAL_RCCEx_GetPeriphCLKConfig:
 435              	.LFB120:
2392:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2393:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2394:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Configures the PeriphClkInit according to the internal
2395:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * RCC configuration registers.
2396:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2397:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         will be configured.
2398:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
2399:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2400:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2401:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 436              		.loc 1 2401 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 441              	.LVL37:
2402:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
2403:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2404:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
2405:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_SAI_PLLSAI | RCC_PERIPHCL
 442              		.loc 1 2405 0
 443 0000 3F23     		movs	r3, #63
 444 0002 0360     		str	r3, [r0]
2406:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/ccx4TjBS.s 			page 52


2407:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration -----------------------------------------------*/
2408:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
 445              		.loc 1 2408 0
 446 0004 214B     		ldr	r3, .L48
 447 0006 D3F88420 		ldr	r2, [r3, #132]
 448 000a C2F38812 		ubfx	r2, r2, #6, #9
 449 000e 4260     		str	r2, [r0, #4]
2409:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
 450              		.loc 1 2409 0
 451 0010 D3F88420 		ldr	r2, [r3, #132]
 452 0014 C2F30272 		ubfx	r2, r2, #28, #3
 453 0018 8260     		str	r2, [r0, #8]
2410:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
 454              		.loc 1 2410 0
 455 001a D3F88420 		ldr	r2, [r3, #132]
 456 001e C2F30362 		ubfx	r2, r2, #24, #4
 457 0022 C260     		str	r2, [r0, #12]
2411:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI Clock configuration -----------------------------------------------*/
2412:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLS
 458              		.loc 1 2412 0
 459 0024 D3F88820 		ldr	r2, [r3, #136]
 460 0028 C2F38812 		ubfx	r2, r2, #6, #9
 461 002c 0261     		str	r2, [r0, #16]
2413:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLS
 462              		.loc 1 2413 0
 463 002e D3F88820 		ldr	r2, [r3, #136]
 464 0032 C2F30272 		ubfx	r2, r2, #28, #3
 465 0036 8261     		str	r2, [r0, #24]
2414:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLS
 466              		.loc 1 2414 0
 467 0038 D3F88820 		ldr	r2, [r3, #136]
 468 003c C2F30362 		ubfx	r2, r2, #24, #4
 469 0040 4261     		str	r2, [r0, #20]
2415:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI/PLLI2S division factors -----------------------------------------------*/
2416:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLL
 470              		.loc 1 2416 0
 471 0042 D3F88C20 		ldr	r2, [r3, #140]
 472 0046 02F01F02 		and	r2, r2, #31
 473 004a C261     		str	r2, [r0, #28]
2417:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLL
 474              		.loc 1 2417 0
 475 004c D3F88C20 		ldr	r2, [r3, #140]
 476 0050 C2F30422 		ubfx	r2, r2, #8, #5
 477 0054 0262     		str	r2, [r0, #32]
2418:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivR = (uint32_t)(RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVR);
 478              		.loc 1 2418 0
 479 0056 D3F88C20 		ldr	r2, [r3, #140]
 480 005a 02F44032 		and	r2, r2, #196608
 481 005e 4262     		str	r2, [r0, #36]
2419:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------------*/
2420:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 482              		.loc 1 2420 0
 483 0060 9A68     		ldr	r2, [r3, #8]
 484 0062 02F4F812 		and	r2, r2, #2031616
 485              	.LVL38:
2421:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 486              		.loc 1 2421 0
ARM GAS  /tmp/ccx4TjBS.s 			page 53


 487 0066 196F     		ldr	r1, [r3, #112]
 488 0068 01F44071 		and	r1, r1, #768
 489 006c 0A43     		orrs	r2, r2, r1
 490              	.LVL39:
 491 006e 8262     		str	r2, [r0, #40]
2422:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2423:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 492              		.loc 1 2423 0
 493 0070 D3F88C30 		ldr	r3, [r3, #140]
 494 0074 13F0807F 		tst	r3, #16777216
 495 0078 03D0     		beq	.L47
2424:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2425:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
2426:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2427:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   else
2428:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2429:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 496              		.loc 1 2429 0
 497 007a 0123     		movs	r3, #1
 498 007c 80F82C30 		strb	r3, [r0, #44]
 499 0080 7047     		bx	lr
 500              	.L47:
2425:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 501              		.loc 1 2425 0
 502 0082 0023     		movs	r3, #0
 503 0084 80F82C30 		strb	r3, [r0, #44]
 504 0088 7047     		bx	lr
 505              	.L49:
 506 008a 00BF     		.align	2
 507              	.L48:
 508 008c 00380240 		.word	1073887232
 509              		.cfi_endproc
 510              	.LFE120:
 512              		.section	.text.HAL_RCCEx_GetPeriphCLKFreq,"ax",%progbits
 513              		.align	1
 514              		.global	HAL_RCCEx_GetPeriphCLKFreq
 515              		.syntax unified
 516              		.thumb
 517              		.thumb_func
 518              		.fpu fpv4-sp-d16
 520              	HAL_RCCEx_GetPeriphCLKFreq:
 521              	.LFB121:
2430:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2431:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
2432:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2433:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2434:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
2435:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
2436:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
2437:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
2438:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
2439:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
2440:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2441:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
2442:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 522              		.loc 1 2442 0
 523              		.cfi_startproc
ARM GAS  /tmp/ccx4TjBS.s 			page 54


 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526              		@ link register save eliminated.
 527              	.LVL40:
2443:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
2444:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
2445:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
2446:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
2447:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
2448:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
2449:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
2450:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
 528              		.loc 1 2450 0
 529 0000 0128     		cmp	r0, #1
 530 0002 2AD1     		bne	.L59
2451:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2452:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S:
2453:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2454:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
2455:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_SOURCE();
 531              		.loc 1 2455 0
 532 0004 174B     		ldr	r3, .L61
 533 0006 9B68     		ldr	r3, [r3, #8]
 534              	.LVL41:
2456:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
 535              		.loc 1 2456 0
 536 0008 13F40003 		ands	r3, r3, #8388608
 537              	.LVL42:
 538 000c 03D0     		beq	.L53
 539 000e 012B     		cmp	r3, #1
 540 0010 25D1     		bne	.L60
2457:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2458:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cloc
2459:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SCLKSOURCE_EXT:
2460:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2461:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
2462:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
 541              		.loc 1 2462 0
 542 0012 1548     		ldr	r0, .L61+4
 543              	.LVL43:
 544 0014 7047     		bx	lr
 545              	.LVL44:
 546              	.L53:
2463:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2464:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2465:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clo
2466:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SCLKSOURCE_PLLI2S:
2467:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2468:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
2469:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
2470:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 547              		.loc 1 2470 0
 548 0016 134B     		ldr	r3, .L61
 549              	.LVL45:
 550 0018 5B68     		ldr	r3, [r3, #4]
 551 001a 13F4800F 		tst	r3, #4194304
 552 001e 14D0     		beq	.L55
ARM GAS  /tmp/ccx4TjBS.s 			page 55


2471:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2472:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2473:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 553              		.loc 1 2473 0
 554 0020 104B     		ldr	r3, .L61
 555 0022 5B68     		ldr	r3, [r3, #4]
 556 0024 03F03F03 		and	r3, r3, #63
 557 0028 1048     		ldr	r0, .L61+8
 558              	.LVL46:
 559 002a B0FBF3F3 		udiv	r3, r0, r3
 560              	.LVL47:
 561              	.L56:
2474:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2475:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
2476:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2477:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2478:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2479:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2480:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2481:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
2482:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
 562              		.loc 1 2482 0
 563 002e 0D4A     		ldr	r2, .L61
 564 0030 D2F88400 		ldr	r0, [r2, #132]
 565 0034 C0F38810 		ubfx	r0, r0, #6, #9
 566 0038 00FB03F0 		mul	r0, r0, r3
 567              	.LVL48:
2483:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
2484:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & 
 568              		.loc 1 2484 0
 569 003c D2F88430 		ldr	r3, [r2, #132]
 570              	.LVL49:
 571 0040 C3F30273 		ubfx	r3, r3, #28, #3
 572 0044 B0FBF3F0 		udiv	r0, r0, r3
 573              	.LVL50:
2485:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 574              		.loc 1 2485 0
 575 0048 7047     		bx	lr
 576              	.LVL51:
 577              	.L55:
2478:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
 578              		.loc 1 2478 0
 579 004a 064B     		ldr	r3, .L61
 580 004c 5B68     		ldr	r3, [r3, #4]
 581 004e 03F03F03 		and	r3, r3, #63
 582 0052 0748     		ldr	r0, .L61+12
 583              	.LVL52:
 584 0054 B0FBF3F3 		udiv	r3, r0, r3
 585              	.LVL53:
 586 0058 E9E7     		b	.L56
 587              	.LVL54:
 588              	.L59:
2444:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
 589              		.loc 1 2444 0
 590 005a 0020     		movs	r0, #0
 591              	.LVL55:
 592 005c 7047     		bx	lr
ARM GAS  /tmp/ccx4TjBS.s 			page 56


 593              	.LVL56:
 594              	.L60:
2486:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2487:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
2488:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default:
2489:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2490:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
 595              		.loc 1 2490 0
 596 005e 0020     		movs	r0, #0
 597              	.LVL57:
2491:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2492:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2493:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2494:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2495:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2496:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2497:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
2498:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 598              		.loc 1 2498 0
 599 0060 7047     		bx	lr
 600              	.L62:
 601 0062 00BF     		.align	2
 602              	.L61:
 603 0064 00380240 		.word	1073887232
 604 0068 0080BB00 		.word	12288000
 605 006c 40787D01 		.word	25000000
 606 0070 0024F400 		.word	16000000
 607              		.cfi_endproc
 608              	.LFE121:
 610              		.section	.text.HAL_RCCEx_EnablePLLI2S,"ax",%progbits
 611              		.align	1
 612              		.global	HAL_RCCEx_EnablePLLI2S
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 616              		.fpu fpv4-sp-d16
 618              	HAL_RCCEx_EnablePLLI2S:
 619              	.LFB122:
2499:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */
2500:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2501:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx)|| defined(STM32F417xx) ||\
2502:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
2503:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2504:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters i
2505:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         RCC_PeriphCLKInitTypeDef.
2506:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2507:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals clocks(I2S and RTC 
2508:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
2509:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   A caution to be taken when HAL_RCCEx_PeriphCLKConfig() is used to select RTC clock sele
2510:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         the Reset of Backup domain will be applied in order to modify the RTC Clock source as c
2511:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
2512:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
2513:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2514:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2515:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2516:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
2517:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
ARM GAS  /tmp/ccx4TjBS.s 			page 57


2518:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
2519:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2520:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
2521:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
2522:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2523:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- I2S configuration ---------------------------*/
2524:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
2525:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
2526:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2527:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for Parameters */
2528:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
2529:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
2530:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
2531:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
2532:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
2533:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
2534:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
2535:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2536:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2537:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
2538:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2539:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2540:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2541:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2542:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2543:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2544:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2545:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2546:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2547:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
2548:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the PLLI2S division factors */
2549:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
2550:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
2551:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, Pe
2552:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #else
2553:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the PLLI2S division factors */
2554:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
2555:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
2556:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
2557:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
2558:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2559:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
2560:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
2561:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2562:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2563:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
2564:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2565:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2566:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2567:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2568:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2569:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2570:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2571:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2572:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2573:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2574:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- RTC configuration ---------------------------*/
ARM GAS  /tmp/ccx4TjBS.s 			page 58


2575:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
2576:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2577:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
2578:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
2579:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2580:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
2581:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
2582:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2583:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
2584:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
2585:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2586:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2587:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2588:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2589:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
2590:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2591:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
2592:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2593:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2594:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2595:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2596:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
2597:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2598:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSE
2599:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2600:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
2601:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2602:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
2603:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
2604:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
2605:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
2606:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
2607:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2608:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
2609:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
2610:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2611:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
2612:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
2613:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2614:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
2615:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2616:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2617:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2618:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2619:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
2620:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2621:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2622:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2623:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2624:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2625:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2626:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
2627:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
2628:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
2629:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2630:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2631:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
ARM GAS  /tmp/ccx4TjBS.s 			page 59


2632:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
2633:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
2634:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
2635:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2636:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2637:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
2638:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * RCC configuration registers.
2639:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2640:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * will be configured.
2641:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
2642:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2643:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2644:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
2645:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
2646:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2647:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
2648:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
2649:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2650:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration --------------------------------------*/
2651:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
2652:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
2653:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
2654:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
2655:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
2656:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------*/
2657:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
2658:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
2659:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2660:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
2661:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the TIM Prescaler configuration -------------------------------------*/
2662:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
2663:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2664:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
2665:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2666:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   else
2667:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2668:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2669:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2670:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
2671:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
2672:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2673:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2674:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
2675:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
2676:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
2677:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
2678:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
2679:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
2680:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2681:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
2682:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
2683:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
2684:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
2685:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
2686:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
2687:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
2688:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
ARM GAS  /tmp/ccx4TjBS.s 			page 60


2689:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
2690:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
2691:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2692:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S:
2693:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2694:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
2695:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_SOURCE();
2696:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
2697:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
2698:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cloc
2699:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SCLKSOURCE_EXT:
2700:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2701:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
2702:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
2703:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2704:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2705:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clo
2706:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       case RCC_I2SCLKSOURCE_PLLI2S:
2707:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2708:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
2709:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
2710:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
2711:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2712:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2713:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2714:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
2715:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2716:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
2717:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2718:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2719:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
2720:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2721:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #else
2722:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
2723:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
2724:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2725:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2726:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2727:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2728:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2729:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           else
2730:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           {
2731:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2732:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2733:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           }
2734:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
2735:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
2736:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
2737:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
2738:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & 
2739:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2740:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2741:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
2742:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       default:
2743:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         {
2744:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
2745:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****           break;
ARM GAS  /tmp/ccx4TjBS.s 			page 61


2746:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         }
2747:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
2748:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2749:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2750:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2751:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
2752:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
2753:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F401xC || STM32F401xE  |
2754:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2755:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) || defined(STM32F411xE) ||
2756:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
2757:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2758:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Select LSE mode
2759:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
2760:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469xx/STM32F4
2761:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
2762:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  Mode specifies the LSE mode.
2763:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *          This parameter can be one of the following values:
2764:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
2765:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
2766:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
2767:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2768:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
2769:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
2770:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
2771:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_LSE_MODE(Mode));
2772:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(Mode == RCC_LSE_HIGHDRIVE_MODE)
2773:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2774:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2775:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2776:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   else
2777:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2778:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2779:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2780:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
2781:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2782:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F410xx || STM32F411xE || STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx ||
2783:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2784:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions_Group2 Extended Clock management functions
2785:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  *  @brief  Extended Clock management functions
2786:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  *
2787:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** @verbatim   
2788:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  ===============================================================================
2789:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                 ##### Extended clock management functions  #####
2790:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  ===============================================================================
2791:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     [..]
2792:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     This subsection provides a set of functions allowing to control the 
2793:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     activation or deactivation of PLLI2S, PLLSAI.
2794:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** @endverbatim
2795:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
2796:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2797:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2798:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2S_SUPPORT)
2799:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2800:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Enable PLLI2S.
2801:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
2802:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the PLLI2S
ARM GAS  /tmp/ccx4TjBS.s 			page 62


2803:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2804:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2805:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
2806:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 620              		.loc 1 2806 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              	.LVL58:
 625 0000 38B5     		push	{r3, r4, r5, lr}
 626              	.LCFI4:
 627              		.cfi_def_cfa_offset 16
 628              		.cfi_offset 3, -16
 629              		.cfi_offset 4, -12
 630              		.cfi_offset 5, -8
 631              		.cfi_offset 14, -4
 632 0002 0546     		mov	r5, r0
2807:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
2808:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2809:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check for parameters */
2810:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
2811:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
2812:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2SCFGR_PLLI2SM)
2813:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SInit->PLLI2SM));
2814:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2SCFGR_PLLI2SM */
2815:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2SCFGR_PLLI2SP)
2816:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
2817:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2SCFGR_PLLI2SP */
2818:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2SCFGR_PLLI2SQ)
2819:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
2820:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2SCFGR_PLLI2SQ */
2821:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2822:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable the PLLI2S */
2823:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_DISABLE();
 633              		.loc 1 2823 0
 634 0004 0022     		movs	r2, #0
 635 0006 184B     		ldr	r3, .L74
 636 0008 1A60     		str	r2, [r3]
2824:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2825:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is disabled */
2826:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 637              		.loc 1 2826 0
 638 000a FFF7FEFF 		bl	HAL_GetTick
 639              	.LVL59:
 640 000e 0446     		mov	r4, r0
 641              	.LVL60:
 642              	.L64:
2827:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 643              		.loc 1 2827 0
 644 0010 164B     		ldr	r3, .L74+4
 645 0012 1B68     		ldr	r3, [r3]
 646 0014 13F0006F 		tst	r3, #134217728
 647 0018 06D0     		beq	.L72
2828:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2829:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 648              		.loc 1 2829 0
 649 001a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccx4TjBS.s 			page 63


 650              	.LVL61:
 651 001e 001B     		subs	r0, r0, r4
 652 0020 0228     		cmp	r0, #2
 653 0022 F5D9     		bls	.L64
2830:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2831:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2832:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 654              		.loc 1 2832 0
 655 0024 0320     		movs	r0, #3
 656 0026 38BD     		pop	{r3, r4, r5, pc}
 657              	.LVL62:
 658              	.L72:
2833:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2834:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2835:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2836:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Configure the PLLI2S division factors */
2837:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F446xx)
2838:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
2839:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
2840:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
2841:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2842:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
2843:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                           PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
2844:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) 
2845:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       defined(STM32F413xx) || defined(STM32F423xx)
2846:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
2847:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
2848:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2849:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
2850:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                           PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
2851:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) 
2852:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       defined(STM32F469xx) || defined(STM32F479xx)
2853:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
2854:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
2855:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2856:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_SAICLK_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
 659              		.loc 1 2856 0
 660 0028 2A68     		ldr	r2, [r5]
 661 002a AB68     		ldr	r3, [r5, #8]
 662 002c 1B06     		lsls	r3, r3, #24
 663 002e 43EA8213 		orr	r3, r3, r2, lsl #6
 664 0032 6A68     		ldr	r2, [r5, #4]
 665 0034 43EA0273 		orr	r3, r3, r2, lsl #28
 666 0038 0C4A     		ldr	r2, .L74+4
 667 003a C2F88430 		str	r3, [r2, #132]
2857:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F411xE)
2858:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
2859:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2860:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
2861:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #else
2862:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
2863:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2864:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
2865:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
2866:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2867:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Enable the PLLI2S */
2868:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_ENABLE();
ARM GAS  /tmp/ccx4TjBS.s 			page 64


 668              		.loc 1 2868 0
 669 003e 0122     		movs	r2, #1
 670 0040 094B     		ldr	r3, .L74
 671 0042 1A60     		str	r2, [r3]
2869:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2870:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is ready */
2871:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 672              		.loc 1 2871 0
 673 0044 FFF7FEFF 		bl	HAL_GetTick
 674              	.LVL63:
 675 0048 0446     		mov	r4, r0
 676              	.LVL64:
 677              	.L67:
2872:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 678              		.loc 1 2872 0
 679 004a 084B     		ldr	r3, .L74+4
 680 004c 1B68     		ldr	r3, [r3]
 681 004e 13F0006F 		tst	r3, #134217728
 682 0052 06D1     		bne	.L73
2873:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2874:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 683              		.loc 1 2874 0
 684 0054 FFF7FEFF 		bl	HAL_GetTick
 685              	.LVL65:
 686 0058 001B     		subs	r0, r0, r4
 687 005a 0228     		cmp	r0, #2
 688 005c F5D9     		bls	.L67
2875:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2876:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2877:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 689              		.loc 1 2877 0
 690 005e 0320     		movs	r0, #3
2878:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2879:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2880:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2881:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  return HAL_OK;
2882:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 691              		.loc 1 2882 0
 692 0060 38BD     		pop	{r3, r4, r5, pc}
 693              	.LVL66:
 694              	.L73:
2881:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 695              		.loc 1 2881 0
 696 0062 0020     		movs	r0, #0
 697 0064 38BD     		pop	{r3, r4, r5, pc}
 698              	.LVL67:
 699              	.L75:
 700 0066 00BF     		.align	2
 701              	.L74:
 702 0068 68004742 		.word	1111949416
 703 006c 00380240 		.word	1073887232
 704              		.cfi_endproc
 705              	.LFE122:
 707              		.section	.text.HAL_RCCEx_DisablePLLI2S,"ax",%progbits
 708              		.align	1
 709              		.global	HAL_RCCEx_DisablePLLI2S
 710              		.syntax unified
ARM GAS  /tmp/ccx4TjBS.s 			page 65


 711              		.thumb
 712              		.thumb_func
 713              		.fpu fpv4-sp-d16
 715              	HAL_RCCEx_DisablePLLI2S:
 716              	.LFB123:
2883:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2884:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2885:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Disable PLLI2S.
2886:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2887:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2888:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
2889:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 717              		.loc 1 2889 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721 0000 10B5     		push	{r4, lr}
 722              	.LCFI5:
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 4, -8
 725              		.cfi_offset 14, -4
2890:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
2891:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2892:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable the PLLI2S */
2893:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_DISABLE();
 726              		.loc 1 2893 0
 727 0002 0022     		movs	r2, #0
 728 0004 094B     		ldr	r3, .L83
 729 0006 1A60     		str	r2, [r3]
2894:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2895:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is disabled */
2896:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 730              		.loc 1 2896 0
 731 0008 FFF7FEFF 		bl	HAL_GetTick
 732              	.LVL68:
 733 000c 0446     		mov	r4, r0
 734              	.LVL69:
 735              	.L77:
2897:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 736              		.loc 1 2897 0
 737 000e 084B     		ldr	r3, .L83+4
 738 0010 1B68     		ldr	r3, [r3]
 739 0012 13F0006F 		tst	r3, #134217728
 740 0016 06D0     		beq	.L82
2898:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2899:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 741              		.loc 1 2899 0
 742 0018 FFF7FEFF 		bl	HAL_GetTick
 743              	.LVL70:
 744 001c 001B     		subs	r0, r0, r4
 745 001e 0228     		cmp	r0, #2
 746 0020 F5D9     		bls	.L77
2900:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2901:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2902:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 747              		.loc 1 2902 0
 748 0022 0320     		movs	r0, #3
ARM GAS  /tmp/ccx4TjBS.s 			page 66


2903:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2904:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2905:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2906:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
2907:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 749              		.loc 1 2907 0
 750 0024 10BD     		pop	{r4, pc}
 751              	.LVL71:
 752              	.L82:
2906:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 753              		.loc 1 2906 0
 754 0026 0020     		movs	r0, #0
 755 0028 10BD     		pop	{r4, pc}
 756              	.LVL72:
 757              	.L84:
 758 002a 00BF     		.align	2
 759              	.L83:
 760 002c 68004742 		.word	1111949416
 761 0030 00380240 		.word	1073887232
 762              		.cfi_endproc
 763              	.LFE123:
 765              		.section	.text.HAL_RCCEx_EnablePLLSAI,"ax",%progbits
 766              		.align	1
 767              		.global	HAL_RCCEx_EnablePLLSAI
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 771              		.fpu fpv4-sp-d16
 773              	HAL_RCCEx_EnablePLLSAI:
 774              	.LFB124:
2908:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2909:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2S_SUPPORT */
2910:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2911:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAI_SUPPORT)
2912:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2913:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Enable PLLSAI.
2914:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
2915:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the PLLSAI
2916:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2917:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2918:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
2919:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 775              		.loc 1 2919 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              	.LVL73:
 780 0000 38B5     		push	{r3, r4, r5, lr}
 781              	.LCFI6:
 782              		.cfi_def_cfa_offset 16
 783              		.cfi_offset 3, -16
 784              		.cfi_offset 4, -12
 785              		.cfi_offset 5, -8
 786              		.cfi_offset 14, -4
 787 0002 0546     		mov	r5, r0
2920:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
2921:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/ccx4TjBS.s 			page 67


2922:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check for parameters */
2923:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIInit->PLLSAIN));
2924:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIInit->PLLSAIQ));
2925:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAICFGR_PLLSAIM)
2926:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIInit->PLLSAIM));
2927:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAICFGR_PLLSAIM */
2928:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAICFGR_PLLSAIP)
2929:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIInit->PLLSAIP));
2930:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAICFGR_PLLSAIP */
2931:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAICFGR_PLLSAIR)
2932:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
2933:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAICFGR_PLLSAIR */
2934:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2935:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable the PLLSAI */
2936:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_DISABLE();
 788              		.loc 1 2936 0
 789 0004 0022     		movs	r2, #0
 790 0006 184B     		ldr	r3, .L96
 791 0008 1A60     		str	r2, [r3]
2937:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2938:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is disabled */
2939:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 792              		.loc 1 2939 0
 793 000a FFF7FEFF 		bl	HAL_GetTick
 794              	.LVL74:
 795 000e 0446     		mov	r4, r0
 796              	.LVL75:
 797              	.L86:
2940:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 798              		.loc 1 2940 0
 799 0010 164B     		ldr	r3, .L96+4
 800 0012 1B68     		ldr	r3, [r3]
 801 0014 13F0005F 		tst	r3, #536870912
 802 0018 06D0     		beq	.L94
2941:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2942:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 803              		.loc 1 2942 0
 804 001a FFF7FEFF 		bl	HAL_GetTick
 805              	.LVL76:
 806 001e 001B     		subs	r0, r0, r4
 807 0020 0228     		cmp	r0, #2
 808 0022 F5D9     		bls	.L86
2943:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
2944:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2945:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 809              		.loc 1 2945 0
 810 0024 0320     		movs	r0, #3
 811 0026 38BD     		pop	{r3, r4, r5, pc}
 812              	.LVL77:
 813              	.L94:
2946:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2947:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2948:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2949:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Configure the PLLSAI division factors */
2950:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F446xx)
2951:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLSAIN/PLLSAIM) */
2952:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
ARM GAS  /tmp/ccx4TjBS.s 			page 68


2953:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
2954:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
2955:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIM, PLLSAIInit->PLLSAIN, \
2956:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                           PLLSAIInit->PLLSAIP, PLLSAIInit->PLLSAIQ, 0U);
2957:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F469xx) || defined(STM32F479xx)
2958:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
2959:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
2960:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
2961:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
2962:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
2963:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****                           PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
2964:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #else
2965:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x PLLSAIN */
2966:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
2967:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
2968:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
 814              		.loc 1 2968 0
 815 0028 2A68     		ldr	r2, [r5]
 816 002a 6B68     		ldr	r3, [r5, #4]
 817 002c 1B06     		lsls	r3, r3, #24
 818 002e 43EA8213 		orr	r3, r3, r2, lsl #6
 819 0032 AA68     		ldr	r2, [r5, #8]
 820 0034 43EA0273 		orr	r3, r3, r2, lsl #28
 821 0038 0C4A     		ldr	r2, .L96+4
 822 003a C2F88830 		str	r3, [r2, #136]
2969:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
2970:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2971:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Enable the PLLSAI */
2972:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_ENABLE();
 823              		.loc 1 2972 0
 824 003e 0122     		movs	r2, #1
 825 0040 094B     		ldr	r3, .L96
 826 0042 1A60     		str	r2, [r3]
2973:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2974:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is ready */
2975:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 827              		.loc 1 2975 0
 828 0044 FFF7FEFF 		bl	HAL_GetTick
 829              	.LVL78:
 830 0048 0446     		mov	r4, r0
 831              	.LVL79:
 832              	.L89:
2976:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 833              		.loc 1 2976 0
 834 004a 084B     		ldr	r3, .L96+4
 835 004c 1B68     		ldr	r3, [r3]
 836 004e 13F0005F 		tst	r3, #536870912
 837 0052 06D1     		bne	.L95
2977:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
2978:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 838              		.loc 1 2978 0
 839 0054 FFF7FEFF 		bl	HAL_GetTick
 840              	.LVL80:
 841 0058 001B     		subs	r0, r0, r4
 842 005a 0228     		cmp	r0, #2
 843 005c F5D9     		bls	.L89
2979:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
ARM GAS  /tmp/ccx4TjBS.s 			page 69


2980:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2981:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 844              		.loc 1 2981 0
 845 005e 0320     		movs	r0, #3
2982:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
2983:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
2984:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2985:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****  return HAL_OK;
2986:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 846              		.loc 1 2986 0
 847 0060 38BD     		pop	{r3, r4, r5, pc}
 848              	.LVL81:
 849              	.L95:
2985:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 850              		.loc 1 2985 0
 851 0062 0020     		movs	r0, #0
 852 0064 38BD     		pop	{r3, r4, r5, pc}
 853              	.LVL82:
 854              	.L97:
 855 0066 00BF     		.align	2
 856              	.L96:
 857 0068 70004742 		.word	1111949424
 858 006c 00380240 		.word	1073887232
 859              		.cfi_endproc
 860              	.LFE124:
 862              		.section	.text.HAL_RCCEx_DisablePLLSAI,"ax",%progbits
 863              		.align	1
 864              		.global	HAL_RCCEx_DisablePLLSAI
 865              		.syntax unified
 866              		.thumb
 867              		.thumb_func
 868              		.fpu fpv4-sp-d16
 870              	HAL_RCCEx_DisablePLLSAI:
 871              	.LFB125:
2987:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2988:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
2989:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Disable PLLSAI.
2990:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2991:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
2992:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
2993:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 872              		.loc 1 2993 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876 0000 10B5     		push	{r4, lr}
 877              	.LCFI7:
 878              		.cfi_def_cfa_offset 8
 879              		.cfi_offset 4, -8
 880              		.cfi_offset 14, -4
2994:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
2995:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2996:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable the PLLSAI */
2997:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_DISABLE();
 881              		.loc 1 2997 0
 882 0002 0022     		movs	r2, #0
 883 0004 094B     		ldr	r3, .L105
ARM GAS  /tmp/ccx4TjBS.s 			page 70


 884 0006 1A60     		str	r2, [r3]
2998:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
2999:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is disabled */
3000:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 885              		.loc 1 3000 0
 886 0008 FFF7FEFF 		bl	HAL_GetTick
 887              	.LVL83:
 888 000c 0446     		mov	r4, r0
 889              	.LVL84:
 890              	.L99:
3001:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 891              		.loc 1 3001 0
 892 000e 084B     		ldr	r3, .L105+4
 893 0010 1B68     		ldr	r3, [r3]
 894 0012 13F0005F 		tst	r3, #536870912
 895 0016 06D0     		beq	.L104
3002:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3003:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 896              		.loc 1 3003 0
 897 0018 FFF7FEFF 		bl	HAL_GetTick
 898              	.LVL85:
 899 001c 001B     		subs	r0, r0, r4
 900 001e 0228     		cmp	r0, #2
 901 0020 F5D9     		bls	.L99
3004:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3005:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
3006:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 902              		.loc 1 3006 0
 903 0022 0320     		movs	r0, #3
3007:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3008:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3009:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3010:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
3011:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 904              		.loc 1 3011 0
 905 0024 10BD     		pop	{r4, pc}
 906              	.LVL86:
 907              	.L104:
3010:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 908              		.loc 1 3010 0
 909 0026 0020     		movs	r0, #0
 910 0028 10BD     		pop	{r4, pc}
 911              	.LVL87:
 912              	.L106:
 913 002a 00BF     		.align	2
 914              	.L105:
 915 002c 70004742 		.word	1111949424
 916 0030 00380240 		.word	1073887232
 917              		.cfi_endproc
 918              	.LFE125:
 920              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
 921              		.align	1
 922              		.global	HAL_RCC_DeInit
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 926              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccx4TjBS.s 			page 71


 928              	HAL_RCC_DeInit:
 929              	.LFB126:
3012:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3013:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAI_SUPPORT */
3014:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3015:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
3016:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @}
3017:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
3018:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3019:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F446xx)
3020:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
3021:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Returns the SYSCLK frequency
3022:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
3023:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This function implementation is valid only for STM32F446xx devices.
3024:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This function add the PLL/PLLR System clock source
3025:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
3026:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   The system frequency computed by this function is not the real
3027:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         frequency in the chip. It is calculated based on the predefined
3028:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         constant and the selected clock source:
3029:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
3030:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
3031:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     If SYSCLK source is PLL or PLLR, function returns values based on HSE_VALUE(**)
3032:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.
3033:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
3034:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *               16 MHz) but the real value may vary depending on the variations
3035:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *               in voltage and temperature.
3036:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
3037:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
3038:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *                frequency of the crystal used. Otherwise, this function may
3039:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *                have wrong result.
3040:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
3041:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   The result of this function could be not correct when using fractional
3042:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         value for HSE crystal.
3043:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
3044:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This function can be used by the user application to compute the
3045:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         baudrate for the communication peripherals or configure other parameters.
3046:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
3047:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
3048:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
3049:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
3050:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *
3051:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval SYSCLK frequency
3052:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
3053:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
3054:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
3055:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllm = 0U;
3056:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllvco = 0U;
3057:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllp = 0U;
3058:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllr = 0U;
3059:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t sysclockfreq = 0U;
3060:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3061:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get SYSCLK source -------------------------------------------------------*/
3062:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
3063:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3064:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
3065:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3066:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = HSI_VALUE;
ARM GAS  /tmp/ccx4TjBS.s 			page 72


3067:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****        break;
3068:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3069:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
3070:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3071:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = HSE_VALUE;
3072:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3073:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3074:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
3075:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3076:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
3077:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       SYSCLK = PLL_VCO / PLLP */
3078:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
3079:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
3080:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
3081:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* HSE used as PLL clock source */
3082:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
3083:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
3084:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       else
3085:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
3086:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* HSI used as PLL clock source */
3087:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
3088:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
3089:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
3090:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3091:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = pllvco/pllp;
3092:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3093:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3094:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
3095:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3096:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
3097:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       SYSCLK = PLL_VCO / PLLR */
3098:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
3099:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
3100:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
3101:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* HSE used as PLL clock source */
3102:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
3103:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
3104:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       else
3105:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       {
3106:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         /* HSI used as PLL clock source */
3107:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****         pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
3108:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       }
3109:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
3110:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3111:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = pllvco/pllr;
3112:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3113:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3114:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     default:
3115:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3116:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = HSI_VALUE;
3117:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3118:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3119:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3120:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   return sysclockfreq;
3121:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
3122:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
3123:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/ccx4TjBS.s 			page 73


3124:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
3125:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @}
3126:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
3127:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3128:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
3129:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @}
3130:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
3131:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3132:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** /**
3133:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
3134:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   The default reset state of the clock configuration is given below:
3135:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            - HSI ON and used as system clock source
3136:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            - HSE, PLL, PLLI2S and PLLSAI OFF
3137:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
3138:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            - CSS, MCO1 and MCO2 OFF
3139:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            - All interrupts disabled
3140:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This function doesn't modify the configuration of the
3141:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            - Peripheral clocks
3142:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   *            - LSI, LSE and RTC clocks
3143:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
3144:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   */
3145:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
3146:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** {
 930              		.loc 1 3146 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934 0000 38B5     		push	{r3, r4, r5, lr}
 935              	.LCFI8:
 936              		.cfi_def_cfa_offset 16
 937              		.cfi_offset 3, -16
 938              		.cfi_offset 4, -12
 939              		.cfi_offset 5, -8
 940              		.cfi_offset 14, -4
3147:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
3148:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3149:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3150:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 941              		.loc 1 3150 0
 942 0002 FFF7FEFF 		bl	HAL_GetTick
 943              	.LVL88:
 944 0006 0446     		mov	r4, r0
 945              	.LVL89:
3151:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3152:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set HSION bit to the reset value */
3153:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
 946              		.loc 1 3153 0
 947 0008 574A     		ldr	r2, .L134
 948 000a 1368     		ldr	r3, [r2]
 949 000c 43F00103 		orr	r3, r3, #1
 950 0010 1360     		str	r3, [r2]
 951              	.LVL90:
 952              	.L108:
3154:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3155:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till HSI is ready */
3156:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 953              		.loc 1 3156 0
ARM GAS  /tmp/ccx4TjBS.s 			page 74


 954 0012 554B     		ldr	r3, .L134
 955 0014 1B68     		ldr	r3, [r3]
 956 0016 13F0020F 		tst	r3, #2
 957 001a 07D1     		bne	.L128
3157:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3158:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 958              		.loc 1 3158 0
 959 001c FFF7FEFF 		bl	HAL_GetTick
 960              	.LVL91:
 961 0020 001B     		subs	r0, r0, r4
 962 0022 0228     		cmp	r0, #2
 963 0024 F5D9     		bls	.L108
3159:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3160:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 964              		.loc 1 3160 0
 965 0026 0323     		movs	r3, #3
 966              	.L109:
3161:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3162:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3163:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3164:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set HSITRIM[4:0] bits to the reset value */
3165:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
3166:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3167:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3168:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3169:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3170:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset CFGR register */
3171:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_REG(RCC->CFGR);
3172:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3173:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till clock switch is ready */
3174:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
3175:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3176:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
3177:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3178:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3179:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3180:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3181:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3182:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3183:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3184:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3185:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Clear HSEON, HSEBYP and CSSON bits */
3186:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
3187:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3188:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till HSE is disabled */
3189:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
3190:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3191:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
3192:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3193:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3194:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3195:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3196:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3197:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3198:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3199:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3200:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Clear PLLON bit */
ARM GAS  /tmp/ccx4TjBS.s 			page 75


3201:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
3202:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3203:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLL is disabled */
3204:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
3205:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3206:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
3207:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3208:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3209:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3210:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3211:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3212:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2S_SUPPORT)
3213:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3214:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3215:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3216:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset PLLI2SON bit */
3217:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
3218:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3219:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is disabled */
3220:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
3221:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3222:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
3223:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3224:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3225:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3226:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3227:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2S_SUPPORT */
3228:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3229:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAI_SUPPORT)
3230:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3231:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3232:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3233:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset PLLSAI bit */
3234:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
3235:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3236:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is disabled */
3237:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
3238:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3239:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
3240:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
3241:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3242:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
3243:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3244:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAI_SUPPORT */
3245:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3246:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
3247:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) ||
3248:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
3249:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 
3250:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
3251:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 
3252:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #else
3253:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
3254:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx ||
3255:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3256:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset PLLI2SCFGR register to default value */
3257:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) ||
ARM GAS  /tmp/ccx4TjBS.s 			page 76


3258:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     defined(STM32F423xx) || defined(STM32F446xx)
3259:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 
3260:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) 
3261:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
3262:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) 
3263:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 
3264:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F411xE)
3265:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 
3266:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx ||
3267:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3268:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset PLLSAICFGR register */
3269:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) ||
3270:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 
3271:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F446xx)
3272:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 
3273:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */
3274:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3275:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable all interrupts */
3276:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | R
3277:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3278:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_CIR_PLLI2SRDYIE)
3279:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
3280:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLI2SRDYIE */
3281:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3282:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_CIR_PLLSAIRDYIE)
3283:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
3284:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLSAIRDYIE */
3285:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3286:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Clear all interrupt flags */
3287:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR
3288:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3289:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_CIR_PLLI2SRDYC)
3290:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
3291:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLI2SRDYC */
3292:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3293:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_CIR_PLLSAIRDYC)
3294:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
3295:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLSAIRDYC */
3296:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3297:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Clear LSION bit */
3298:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
3299:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3300:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset all CSR flags */
3301:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CSR, RCC_CSR_RMVF);
3302:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3303:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Update the SystemCoreClock global variable */
3304:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   SystemCoreClock = HSI_VALUE;
3305:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
3306:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   /* Adapt Systick interrupt period */
3307:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   if(HAL_InitTick(uwTickPrio) != HAL_OK)
3308:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3309:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     return HAL_ERROR;
3310:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
3311:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   else
3312:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
3313:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     return HAL_OK;
3314:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
ARM GAS  /tmp/ccx4TjBS.s 			page 77


3315:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** }
 967              		.loc 1 3315 0
 968 0028 1846     		mov	r0, r3
 969 002a 38BD     		pop	{r3, r4, r5, pc}
 970              	.LVL92:
 971              	.L128:
3165:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 972              		.loc 1 3165 0
 973 002c 4E4D     		ldr	r5, .L134
 974 002e 2B68     		ldr	r3, [r5]
 975 0030 43F08003 		orr	r3, r3, #128
 976 0034 2B60     		str	r3, [r5]
3168:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 977              		.loc 1 3168 0
 978 0036 FFF7FEFF 		bl	HAL_GetTick
 979              	.LVL93:
 980 003a 0446     		mov	r4, r0
 981              	.LVL94:
3171:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 982              		.loc 1 3171 0
 983 003c 0023     		movs	r3, #0
 984 003e AB60     		str	r3, [r5, #8]
 985              	.LVL95:
 986              	.L111:
3174:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 987              		.loc 1 3174 0
 988 0040 494B     		ldr	r3, .L134
 989 0042 9B68     		ldr	r3, [r3, #8]
 990 0044 13F00C0F 		tst	r3, #12
 991 0048 08D0     		beq	.L129
3176:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 992              		.loc 1 3176 0
 993 004a FFF7FEFF 		bl	HAL_GetTick
 994              	.LVL96:
 995 004e 001B     		subs	r0, r0, r4
 996 0050 41F28833 		movw	r3, #5000
 997 0054 9842     		cmp	r0, r3
 998 0056 F3D9     		bls	.L111
3178:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 999              		.loc 1 3178 0
 1000 0058 0323     		movs	r3, #3
 1001 005a E5E7     		b	.L109
 1002              	.L129:
3183:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1003              		.loc 1 3183 0
 1004 005c FFF7FEFF 		bl	HAL_GetTick
 1005              	.LVL97:
 1006 0060 0446     		mov	r4, r0
 1007              	.LVL98:
3186:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1008              		.loc 1 3186 0
 1009 0062 414A     		ldr	r2, .L134
 1010 0064 1368     		ldr	r3, [r2]
 1011 0066 23F45023 		bic	r3, r3, #851968
 1012 006a 1360     		str	r3, [r2]
 1013              	.LVL99:
 1014              	.L113:
ARM GAS  /tmp/ccx4TjBS.s 			page 78


3189:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 1015              		.loc 1 3189 0
 1016 006c 3E4B     		ldr	r3, .L134
 1017 006e 1B68     		ldr	r3, [r3]
 1018 0070 13F4003F 		tst	r3, #131072
 1019 0074 06D0     		beq	.L130
3191:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 1020              		.loc 1 3191 0
 1021 0076 FFF7FEFF 		bl	HAL_GetTick
 1022              	.LVL100:
 1023 007a 001B     		subs	r0, r0, r4
 1024 007c 6428     		cmp	r0, #100
 1025 007e F5D9     		bls	.L113
3193:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 1026              		.loc 1 3193 0
 1027 0080 0323     		movs	r3, #3
 1028 0082 D1E7     		b	.L109
 1029              	.L130:
3198:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1030              		.loc 1 3198 0
 1031 0084 FFF7FEFF 		bl	HAL_GetTick
 1032              	.LVL101:
 1033 0088 0446     		mov	r4, r0
 1034              	.LVL102:
3201:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1035              		.loc 1 3201 0
 1036 008a 374A     		ldr	r2, .L134
 1037 008c 1368     		ldr	r3, [r2]
 1038 008e 23F08073 		bic	r3, r3, #16777216
 1039 0092 1360     		str	r3, [r2]
 1040              	.LVL103:
 1041              	.L115:
3204:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 1042              		.loc 1 3204 0
 1043 0094 344B     		ldr	r3, .L134
 1044 0096 1B68     		ldr	r3, [r3]
 1045 0098 13F0007F 		tst	r3, #33554432
 1046 009c 06D0     		beq	.L131
3206:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 1047              		.loc 1 3206 0
 1048 009e FFF7FEFF 		bl	HAL_GetTick
 1049              	.LVL104:
 1050 00a2 001B     		subs	r0, r0, r4
 1051 00a4 0228     		cmp	r0, #2
 1052 00a6 F5D9     		bls	.L115
3208:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 1053              		.loc 1 3208 0
 1054 00a8 0323     		movs	r3, #3
 1055 00aa BDE7     		b	.L109
 1056              	.L131:
3214:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1057              		.loc 1 3214 0
 1058 00ac FFF7FEFF 		bl	HAL_GetTick
 1059              	.LVL105:
 1060 00b0 0446     		mov	r4, r0
 1061              	.LVL106:
3217:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/ccx4TjBS.s 			page 79


 1062              		.loc 1 3217 0
 1063 00b2 2D4A     		ldr	r2, .L134
 1064 00b4 1368     		ldr	r3, [r2]
 1065 00b6 23F08063 		bic	r3, r3, #67108864
 1066 00ba 1360     		str	r3, [r2]
 1067              	.LVL107:
 1068              	.L117:
3220:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 1069              		.loc 1 3220 0
 1070 00bc 2A4B     		ldr	r3, .L134
 1071 00be 1B68     		ldr	r3, [r3]
 1072 00c0 13F0006F 		tst	r3, #134217728
 1073 00c4 06D0     		beq	.L132
3222:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 1074              		.loc 1 3222 0
 1075 00c6 FFF7FEFF 		bl	HAL_GetTick
 1076              	.LVL108:
 1077 00ca 001B     		subs	r0, r0, r4
 1078 00cc 0228     		cmp	r0, #2
 1079 00ce F5D9     		bls	.L117
3224:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 1080              		.loc 1 3224 0
 1081 00d0 0323     		movs	r3, #3
 1082 00d2 A9E7     		b	.L109
 1083              	.L132:
3231:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1084              		.loc 1 3231 0
 1085 00d4 FFF7FEFF 		bl	HAL_GetTick
 1086              	.LVL109:
 1087 00d8 0446     		mov	r4, r0
 1088              	.LVL110:
3234:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1089              		.loc 1 3234 0
 1090 00da 234A     		ldr	r2, .L134
 1091 00dc 1368     		ldr	r3, [r2]
 1092 00de 23F08053 		bic	r3, r3, #268435456
 1093 00e2 1360     		str	r3, [r2]
 1094              	.LVL111:
 1095              	.L119:
3237:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 1096              		.loc 1 3237 0
 1097 00e4 204B     		ldr	r3, .L134
 1098 00e6 1B68     		ldr	r3, [r3]
 1099 00e8 13F0005F 		tst	r3, #536870912
 1100 00ec 06D0     		beq	.L133
3239:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     {
 1101              		.loc 1 3239 0
 1102 00ee FFF7FEFF 		bl	HAL_GetTick
 1103              	.LVL112:
 1104 00f2 001B     		subs	r0, r0, r4
 1105 00f4 0228     		cmp	r0, #2
 1106 00f6 F5D9     		bls	.L119
3241:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****     }
 1107              		.loc 1 3241 0
 1108 00f8 0323     		movs	r3, #3
 1109 00fa 95E7     		b	.L109
 1110              	.L133:
ARM GAS  /tmp/ccx4TjBS.s 			page 80


3253:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx ||
 1111              		.loc 1 3253 0
 1112 00fc 1A4B     		ldr	r3, .L134
 1113 00fe 1B4A     		ldr	r2, .L134+4
 1114 0100 5A60     		str	r2, [r3, #4]
3263:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F411xE)
 1115              		.loc 1 3263 0
 1116 0102 1B4A     		ldr	r2, .L134+8
 1117 0104 C3F88420 		str	r2, [r3, #132]
3270:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F446xx)
 1118              		.loc 1 3270 0
 1119 0108 C3F88820 		str	r2, [r3, #136]
3276:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1120              		.loc 1 3276 0
 1121 010c DA68     		ldr	r2, [r3, #12]
 1122 010e 22F4F852 		bic	r2, r2, #7936
 1123 0112 DA60     		str	r2, [r3, #12]
3279:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLI2SRDYIE */
 1124              		.loc 1 3279 0
 1125 0114 DA68     		ldr	r2, [r3, #12]
 1126 0116 22F40052 		bic	r2, r2, #8192
 1127 011a DA60     		str	r2, [r3, #12]
3283:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLSAIRDYIE */
 1128              		.loc 1 3283 0
 1129 011c DA68     		ldr	r2, [r3, #12]
 1130 011e 22F48042 		bic	r2, r2, #16384
 1131 0122 DA60     		str	r2, [r3, #12]
3287:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1132              		.loc 1 3287 0
 1133 0124 DA68     		ldr	r2, [r3, #12]
 1134 0126 42F41F02 		orr	r2, r2, #10420224
 1135 012a DA60     		str	r2, [r3, #12]
3290:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLI2SRDYC */
 1136              		.loc 1 3290 0
 1137 012c DA68     		ldr	r2, [r3, #12]
 1138 012e 42F40012 		orr	r2, r2, #2097152
 1139 0132 DA60     		str	r2, [r3, #12]
3294:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLSAIRDYC */
 1140              		.loc 1 3294 0
 1141 0134 DA68     		ldr	r2, [r3, #12]
 1142 0136 42F48002 		orr	r2, r2, #4194304
 1143 013a DA60     		str	r2, [r3, #12]
3298:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1144              		.loc 1 3298 0
 1145 013c 5A6F     		ldr	r2, [r3, #116]
 1146 013e 22F00102 		bic	r2, r2, #1
 1147 0142 5A67     		str	r2, [r3, #116]
3301:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1148              		.loc 1 3301 0
 1149 0144 5A6F     		ldr	r2, [r3, #116]
 1150 0146 42F08072 		orr	r2, r2, #16777216
 1151 014a 5A67     		str	r2, [r3, #116]
3304:HALLIB/Src/stm32f4xx_hal_rcc_ex.c **** 
 1152              		.loc 1 3304 0
 1153 014c 094A     		ldr	r2, .L134+12
 1154 014e 0A4B     		ldr	r3, .L134+16
 1155 0150 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccx4TjBS.s 			page 81


3307:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   {
 1156              		.loc 1 3307 0
 1157 0152 0A4B     		ldr	r3, .L134+20
 1158 0154 1868     		ldr	r0, [r3]
 1159 0156 FFF7FEFF 		bl	HAL_InitTick
 1160              	.LVL113:
 1161 015a 0346     		mov	r3, r0
 1162 015c 0028     		cmp	r0, #0
 1163 015e 3FF463AF 		beq	.L109
3309:HALLIB/Src/stm32f4xx_hal_rcc_ex.c ****   }
 1164              		.loc 1 3309 0
 1165 0162 0123     		movs	r3, #1
 1166 0164 60E7     		b	.L109
 1167              	.L135:
 1168 0166 00BF     		.align	2
 1169              	.L134:
 1170 0168 00380240 		.word	1073887232
 1171 016c 10300004 		.word	67121168
 1172 0170 00300024 		.word	603992064
 1173 0174 0024F400 		.word	16000000
 1174 0178 00000000 		.word	SystemCoreClock
 1175 017c 00000000 		.word	uwTickPrio
 1176              		.cfi_endproc
 1177              	.LFE126:
 1179              		.text
 1180              	.Letext0:
 1181              		.file 2 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 1182              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 1183              		.file 4 "CORE/core_cm4.h"
 1184              		.file 5 "USER/system_stm32f4xx.h"
 1185              		.file 6 "USER/stm32f429xx.h"
 1186              		.file 7 "USER/stm32f4xx.h"
 1187              		.file 8 "HALLIB/Inc/stm32f4xx_hal_def.h"
 1188              		.file 9 "HALLIB/Inc/stm32f4xx_hal_rcc_ex.h"
 1189              		.file 10 "HALLIB/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccx4TjBS.s 			page 82


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_rcc_ex.c
     /tmp/ccx4TjBS.s:18     .text.HAL_RCCEx_PeriphCLKConfig:0000000000000000 $t
     /tmp/ccx4TjBS.s:25     .text.HAL_RCCEx_PeriphCLKConfig:0000000000000000 HAL_RCCEx_PeriphCLKConfig
     /tmp/ccx4TjBS.s:417    .text.HAL_RCCEx_PeriphCLKConfig:0000000000000270 $d
     /tmp/ccx4TjBS.s:427    .text.HAL_RCCEx_GetPeriphCLKConfig:0000000000000000 $t
     /tmp/ccx4TjBS.s:434    .text.HAL_RCCEx_GetPeriphCLKConfig:0000000000000000 HAL_RCCEx_GetPeriphCLKConfig
     /tmp/ccx4TjBS.s:508    .text.HAL_RCCEx_GetPeriphCLKConfig:000000000000008c $d
     /tmp/ccx4TjBS.s:513    .text.HAL_RCCEx_GetPeriphCLKFreq:0000000000000000 $t
     /tmp/ccx4TjBS.s:520    .text.HAL_RCCEx_GetPeriphCLKFreq:0000000000000000 HAL_RCCEx_GetPeriphCLKFreq
     /tmp/ccx4TjBS.s:603    .text.HAL_RCCEx_GetPeriphCLKFreq:0000000000000064 $d
     /tmp/ccx4TjBS.s:611    .text.HAL_RCCEx_EnablePLLI2S:0000000000000000 $t
     /tmp/ccx4TjBS.s:618    .text.HAL_RCCEx_EnablePLLI2S:0000000000000000 HAL_RCCEx_EnablePLLI2S
     /tmp/ccx4TjBS.s:702    .text.HAL_RCCEx_EnablePLLI2S:0000000000000068 $d
     /tmp/ccx4TjBS.s:708    .text.HAL_RCCEx_DisablePLLI2S:0000000000000000 $t
     /tmp/ccx4TjBS.s:715    .text.HAL_RCCEx_DisablePLLI2S:0000000000000000 HAL_RCCEx_DisablePLLI2S
     /tmp/ccx4TjBS.s:760    .text.HAL_RCCEx_DisablePLLI2S:000000000000002c $d
     /tmp/ccx4TjBS.s:766    .text.HAL_RCCEx_EnablePLLSAI:0000000000000000 $t
     /tmp/ccx4TjBS.s:773    .text.HAL_RCCEx_EnablePLLSAI:0000000000000000 HAL_RCCEx_EnablePLLSAI
     /tmp/ccx4TjBS.s:857    .text.HAL_RCCEx_EnablePLLSAI:0000000000000068 $d
     /tmp/ccx4TjBS.s:863    .text.HAL_RCCEx_DisablePLLSAI:0000000000000000 $t
     /tmp/ccx4TjBS.s:870    .text.HAL_RCCEx_DisablePLLSAI:0000000000000000 HAL_RCCEx_DisablePLLSAI
     /tmp/ccx4TjBS.s:915    .text.HAL_RCCEx_DisablePLLSAI:000000000000002c $d
     /tmp/ccx4TjBS.s:921    .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccx4TjBS.s:928    .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccx4TjBS.s:1170   .text.HAL_RCC_DeInit:0000000000000168 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
uwTickPrio
