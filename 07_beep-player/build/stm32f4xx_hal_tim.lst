ARM GAS  /tmp/ccVHe0ZY.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.TIM_OC1_SetConfig,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	TIM_OC1_SetConfig:
  25              	.LFB219:
  26              		.file 1 "HALLIB/Src/stm32f4xx_hal_tim.c"
   1:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
   2:HALLIB/Src/stm32f4xx_hal_tim.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @file    stm32f4xx_hal_tim.c
   4:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief   TIM HAL module driver.
   6:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          functionalities of the Timer (TIM) peripheral:
   8:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Time Base Initialization
   9:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Time Base Start
  10:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Time Base Start Interruption
  11:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Time Base Start DMA
  12:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Output Compare/PWM Initialization
  13:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Output Compare/PWM Channel Configuration
  14:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Output Compare/PWM  Start
  15:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Output Compare/PWM  Start Interruption
  16:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Output Compare/PWM Start DMA
  17:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Input Capture Initialization
  18:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Input Capture Channel Configuration
  19:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Input Capture Start
  20:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Input Capture Start Interruption
  21:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Input Capture Start DMA
  22:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM One Pulse Initialization
  23:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM One Pulse Channel Configuration
  24:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM One Pulse Start
  25:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Encoder Interface Initialization
  26:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Encoder Interface Start
  27:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Encoder Interface Start Interruption
  28:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM Encoder Interface Start DMA
  29:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + Commutation Event configuration with Interruption and DMA
  30:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM OCRef clear configuration
  31:HALLIB/Src/stm32f4xx_hal_tim.c ****   *           + TIM External Clock configuration
  32:HALLIB/Src/stm32f4xx_hal_tim.c ****   @verbatim
ARM GAS  /tmp/ccVHe0ZY.s 			page 2


  33:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
  34:HALLIB/Src/stm32f4xx_hal_tim.c ****                       ##### TIMER Generic features #####
  35:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
  36:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..] The Timer features include:
  37:HALLIB/Src/stm32f4xx_hal_tim.c ****        (#) 16-bit up, down, up/down auto-reload counter.
  38:HALLIB/Src/stm32f4xx_hal_tim.c ****        (#) 16-bit programmable prescaler allowing dividing (also on the fly) the
  39:HALLIB/Src/stm32f4xx_hal_tim.c ****            counter clock frequency either by any factor between 1 and 65536.
  40:HALLIB/Src/stm32f4xx_hal_tim.c ****        (#) Up to 4 independent channels for:
  41:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Input Capture
  42:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Output Compare
  43:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) PWM generation (Edge and Center-aligned Mode)
  44:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) One-pulse mode output
  45:HALLIB/Src/stm32f4xx_hal_tim.c ****        (#) Synchronization circuit to control the timer with external signals and to interconnect
  46:HALLIB/Src/stm32f4xx_hal_tim.c ****             several timers together.
  47:HALLIB/Src/stm32f4xx_hal_tim.c ****        (#) Supports incremental encoder for positioning purposes
  48:HALLIB/Src/stm32f4xx_hal_tim.c **** 
  49:HALLIB/Src/stm32f4xx_hal_tim.c ****             ##### How to use this driver #####
  50:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
  51:HALLIB/Src/stm32f4xx_hal_tim.c ****     [..]
  52:HALLIB/Src/stm32f4xx_hal_tim.c ****      (#) Initialize the TIM low level resources by implementing the following functions
  53:HALLIB/Src/stm32f4xx_hal_tim.c ****          depending on the selected feature:
  54:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Time Base : HAL_TIM_Base_MspInit()
  55:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Input Capture : HAL_TIM_IC_MspInit()
  56:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Output Compare : HAL_TIM_OC_MspInit()
  57:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) PWM generation : HAL_TIM_PWM_MspInit()
  58:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) One-pulse mode output : HAL_TIM_OnePulse_MspInit()
  59:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Encoder mode output : HAL_TIM_Encoder_MspInit()
  60:HALLIB/Src/stm32f4xx_hal_tim.c **** 
  61:HALLIB/Src/stm32f4xx_hal_tim.c ****      (#) Initialize the TIM low level resources :
  62:HALLIB/Src/stm32f4xx_hal_tim.c ****         (##) Enable the TIM interface clock using __HAL_RCC_TIMx_CLK_ENABLE();
  63:HALLIB/Src/stm32f4xx_hal_tim.c ****         (##) TIM pins configuration
  64:HALLIB/Src/stm32f4xx_hal_tim.c ****             (+++) Enable the clock for the TIM GPIOs using the following function:
  65:HALLIB/Src/stm32f4xx_hal_tim.c ****              __HAL_RCC_GPIOx_CLK_ENABLE();
  66:HALLIB/Src/stm32f4xx_hal_tim.c ****             (+++) Configure these TIM pins in Alternate function mode using HAL_GPIO_Init();
  67:HALLIB/Src/stm32f4xx_hal_tim.c **** 
  68:HALLIB/Src/stm32f4xx_hal_tim.c ****      (#) The external Clock can be configured, if needed (the default clock is the
  69:HALLIB/Src/stm32f4xx_hal_tim.c ****          internal clock from the APBx), using the following function:
  70:HALLIB/Src/stm32f4xx_hal_tim.c ****          HAL_TIM_ConfigClockSource, the clock configuration should be done before
  71:HALLIB/Src/stm32f4xx_hal_tim.c ****          any start function.
  72:HALLIB/Src/stm32f4xx_hal_tim.c **** 
  73:HALLIB/Src/stm32f4xx_hal_tim.c ****      (#) Configure the TIM in the desired functioning mode using one of the
  74:HALLIB/Src/stm32f4xx_hal_tim.c ****        Initialization function of this driver:
  75:HALLIB/Src/stm32f4xx_hal_tim.c ****        (++) HAL_TIM_Base_Init: to use the Timer to generate a simple time base
  76:HALLIB/Src/stm32f4xx_hal_tim.c ****        (++) HAL_TIM_OC_Init and HAL_TIM_OC_ConfigChannel: to use the Timer to generate an
  77:HALLIB/Src/stm32f4xx_hal_tim.c ****             Output Compare signal.
  78:HALLIB/Src/stm32f4xx_hal_tim.c ****        (++) HAL_TIM_PWM_Init and HAL_TIM_PWM_ConfigChannel: to use the Timer to generate a
  79:HALLIB/Src/stm32f4xx_hal_tim.c ****             PWM signal.
  80:HALLIB/Src/stm32f4xx_hal_tim.c ****        (++) HAL_TIM_IC_Init and HAL_TIM_IC_ConfigChannel: to use the Timer to measure an
  81:HALLIB/Src/stm32f4xx_hal_tim.c ****             external signal.
  82:HALLIB/Src/stm32f4xx_hal_tim.c ****        (++) HAL_TIM_OnePulse_Init and HAL_TIM_OnePulse_ConfigChannel: to use the Timer
  83:HALLIB/Src/stm32f4xx_hal_tim.c ****             in One Pulse Mode.
  84:HALLIB/Src/stm32f4xx_hal_tim.c ****        (++) HAL_TIM_Encoder_Init: to use the Timer Encoder Interface.
  85:HALLIB/Src/stm32f4xx_hal_tim.c **** 
  86:HALLIB/Src/stm32f4xx_hal_tim.c ****      (#) Activate the TIM peripheral using one of the start functions depending from the feature us
  87:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Time Base : HAL_TIM_Base_Start(), HAL_TIM_Base_Start_DMA(), HAL_TIM_Base_Start_IT()
  88:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Input Capture :  HAL_TIM_IC_Start(), HAL_TIM_IC_Start_DMA(), HAL_TIM_IC_Start_IT()
  89:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Output Compare : HAL_TIM_OC_Start(), HAL_TIM_OC_Start_DMA(), HAL_TIM_OC_Start_IT()
ARM GAS  /tmp/ccVHe0ZY.s 			page 3


  90:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) PWM generation : HAL_TIM_PWM_Start(), HAL_TIM_PWM_Start_DMA(), HAL_TIM_PWM_Start_IT
  91:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) One-pulse mode output : HAL_TIM_OnePulse_Start(), HAL_TIM_OnePulse_Start_IT()
  92:HALLIB/Src/stm32f4xx_hal_tim.c ****            (++) Encoder mode output : HAL_TIM_Encoder_Start(), HAL_TIM_Encoder_Start_DMA(), HAL_TIM
  93:HALLIB/Src/stm32f4xx_hal_tim.c **** 
  94:HALLIB/Src/stm32f4xx_hal_tim.c ****      (#) The DMA Burst is managed with the two following functions:
  95:HALLIB/Src/stm32f4xx_hal_tim.c ****          HAL_TIM_DMABurst_WriteStart()
  96:HALLIB/Src/stm32f4xx_hal_tim.c ****          HAL_TIM_DMABurst_ReadStart()
  97:HALLIB/Src/stm32f4xx_hal_tim.c **** 
  98:HALLIB/Src/stm32f4xx_hal_tim.c ****     *** Callback registration ***
  99:HALLIB/Src/stm32f4xx_hal_tim.c ****   =============================================
 100:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 101:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 102:HALLIB/Src/stm32f4xx_hal_tim.c ****   The compilation define  USE_HAL_TIM_REGISTER_CALLBACKS when set to 1
 103:HALLIB/Src/stm32f4xx_hal_tim.c ****   allows the user to configure dynamically the driver callbacks.
 104:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 105:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 106:HALLIB/Src/stm32f4xx_hal_tim.c ****   Use Function @ref HAL_TIM_RegisterCallback() to register a callback.
 107:HALLIB/Src/stm32f4xx_hal_tim.c ****   @ref HAL_TIM_RegisterCallback() takes as parameters the HAL peripheral handle,
 108:HALLIB/Src/stm32f4xx_hal_tim.c ****   the Callback ID and a pointer to the user callback function.
 109:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 110:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 111:HALLIB/Src/stm32f4xx_hal_tim.c ****   Use function @ref HAL_TIM_UnRegisterCallback() to reset a callback to the default
 112:HALLIB/Src/stm32f4xx_hal_tim.c ****   weak function.
 113:HALLIB/Src/stm32f4xx_hal_tim.c ****   @ref HAL_TIM_UnRegisterCallback takes as parameters the HAL peripheral handle,
 114:HALLIB/Src/stm32f4xx_hal_tim.c ****   and the Callback ID.
 115:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 116:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 117:HALLIB/Src/stm32f4xx_hal_tim.c ****   These functions allow to register/unregister following callbacks:
 118:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Base_MspInitCallback              : TIM Base Msp Init Callback.
 119:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Base_MspDeInitCallback            : TIM Base Msp DeInit Callback.
 120:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) IC_MspInitCallback                : TIM IC Msp Init Callback.
 121:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) IC_MspDeInitCallback              : TIM IC Msp DeInit Callback.
 122:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) OC_MspInitCallback                : TIM OC Msp Init Callback.
 123:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) OC_MspDeInitCallback              : TIM OC Msp DeInit Callback.
 124:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) PWM_MspInitCallback               : TIM PWM Msp Init Callback.
 125:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) PWM_MspDeInitCallback             : TIM PWM Msp DeInit Callback.
 126:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) OnePulse_MspInitCallback          : TIM One Pulse Msp Init Callback.
 127:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) OnePulse_MspDeInitCallback        : TIM One Pulse Msp DeInit Callback.
 128:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Encoder_MspInitCallback           : TIM Encoder Msp Init Callback.
 129:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Encoder_MspDeInitCallback         : TIM Encoder Msp DeInit Callback.
 130:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) HallSensor_MspInitCallback        : TIM Hall Sensor Msp Init Callback.
 131:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) HallSensor_MspDeInitCallback      : TIM Hall Sensor Msp DeInit Callback.
 132:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) PeriodElapsedCallback             : TIM Period Elapsed Callback.
 133:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) PeriodElapsedHalfCpltCallback     : TIM Period Elapsed half complete Callback.
 134:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) TriggerCallback                   : TIM Trigger Callback.
 135:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) TriggerHalfCpltCallback           : TIM Trigger half complete Callback.
 136:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) IC_CaptureCallback                : TIM Input Capture Callback.
 137:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) IC_CaptureHalfCpltCallback        : TIM Input Capture half complete Callback.
 138:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) OC_DelayElapsedCallback           : TIM Output Compare Delay Elapsed Callback.
 139:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) PWM_PulseFinishedCallback         : TIM PWM Pulse Finished Callback.
 140:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) PWM_PulseFinishedHalfCpltCallback : TIM PWM Pulse Finished half complete Callback.
 141:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) ErrorCallback                     : TIM Error Callback.
 142:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) CommutationCallback               : TIM Commutation Callback.
 143:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) CommutationHalfCpltCallback       : TIM Commutation half complete Callback.
 144:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) BreakCallback                     : TIM Break Callback.
 145:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 146:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
ARM GAS  /tmp/ccVHe0ZY.s 			page 4


 147:HALLIB/Src/stm32f4xx_hal_tim.c **** By default, after the Init and when the state is HAL_TIM_STATE_RESET
 148:HALLIB/Src/stm32f4xx_hal_tim.c **** all interrupt callbacks are set to the corresponding weak functions:
 149:HALLIB/Src/stm32f4xx_hal_tim.c ****   examples @ref HAL_TIM_TriggerCallback(), @ref HAL_TIM_ErrorCallback().
 150:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 151:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 152:HALLIB/Src/stm32f4xx_hal_tim.c ****   Exception done for MspInit and MspDeInit functions that are reset to the legacy weak
 153:HALLIB/Src/stm32f4xx_hal_tim.c ****   functionalities in the Init / DeInit only when these callbacks are null
 154:HALLIB/Src/stm32f4xx_hal_tim.c ****   (not registered beforehand). If not, MspInit or MspDeInit are not null, the Init / DeInit
 155:HALLIB/Src/stm32f4xx_hal_tim.c ****     keep and use the user MspInit / MspDeInit callbacks(registered beforehand)
 156:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 157:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 158:HALLIB/Src/stm32f4xx_hal_tim.c ****     Callbacks can be registered / unregistered in HAL_TIM_STATE_READY state only.
 159:HALLIB/Src/stm32f4xx_hal_tim.c ****     Exception done MspInit / MspDeInit that can be registered / unregistered
 160:HALLIB/Src/stm32f4xx_hal_tim.c ****     in HAL_TIM_STATE_READY or HAL_TIM_STATE_RESET state,
 161:HALLIB/Src/stm32f4xx_hal_tim.c ****     thus registered(user) MspInit / DeInit callbacks can be used during the Init / DeInit.
 162:HALLIB/Src/stm32f4xx_hal_tim.c ****   In that case first register the MspInit/MspDeInit user callbacks
 163:HALLIB/Src/stm32f4xx_hal_tim.c ****       using @ref HAL_TIM_RegisterCallback() before calling DeInit or Init function.
 164:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 165:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 166:HALLIB/Src/stm32f4xx_hal_tim.c ****       When The compilation define USE_HAL_TIM_REGISTER_CALLBACKS is set to 0 or
 167:HALLIB/Src/stm32f4xx_hal_tim.c ****       not defined, the callback registration feature is not available and all callbacks
 168:HALLIB/Src/stm32f4xx_hal_tim.c ****       are set to the corresponding weak functions.
 169:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 170:HALLIB/Src/stm32f4xx_hal_tim.c ****   @endverbatim
 171:HALLIB/Src/stm32f4xx_hal_tim.c ****   ******************************************************************************
 172:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @attention
 173:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
 174:HALLIB/Src/stm32f4xx_hal_tim.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 175:HALLIB/Src/stm32f4xx_hal_tim.c ****   * All rights reserved.</center></h2>
 176:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
 177:HALLIB/Src/stm32f4xx_hal_tim.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 178:HALLIB/Src/stm32f4xx_hal_tim.c ****   * the "License"; You may not use this file except in compliance with the
 179:HALLIB/Src/stm32f4xx_hal_tim.c ****   * License. You may obtain a copy of the License at:
 180:HALLIB/Src/stm32f4xx_hal_tim.c ****   *                        opensource.org/licenses/BSD-3-Clause
 181:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
 182:HALLIB/Src/stm32f4xx_hal_tim.c ****   ******************************************************************************
 183:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 184:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 185:HALLIB/Src/stm32f4xx_hal_tim.c **** /* Includes ------------------------------------------------------------------*/
 186:HALLIB/Src/stm32f4xx_hal_tim.c **** #include "stm32f4xx_hal.h"
 187:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 188:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @addtogroup STM32F4xx_HAL_Driver
 189:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
 190:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 191:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 192:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM TIM
 193:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief TIM HAL module driver
 194:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
 195:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 196:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 197:HALLIB/Src/stm32f4xx_hal_tim.c **** #ifdef HAL_TIM_MODULE_ENABLED
 198:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 199:HALLIB/Src/stm32f4xx_hal_tim.c **** /* Private typedef -----------------------------------------------------------*/
 200:HALLIB/Src/stm32f4xx_hal_tim.c **** /* Private define ------------------------------------------------------------*/
 201:HALLIB/Src/stm32f4xx_hal_tim.c **** /* Private macro -------------------------------------------------------------*/
 202:HALLIB/Src/stm32f4xx_hal_tim.c **** /* Private variables ---------------------------------------------------------*/
 203:HALLIB/Src/stm32f4xx_hal_tim.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /tmp/ccVHe0ZY.s 			page 5


 204:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @addtogroup TIM_Private_Functions
 205:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
 206:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 207:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
 208:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
 209:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
 210:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFil
 211:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
 212:HALLIB/Src/stm32f4xx_hal_tim.c ****                               uint32_t TIM_ICFilter);
 213:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFil
 214:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
 215:HALLIB/Src/stm32f4xx_hal_tim.c ****                               uint32_t TIM_ICFilter);
 216:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
 217:HALLIB/Src/stm32f4xx_hal_tim.c ****                               uint32_t TIM_ICFilter);
 218:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource);
 219:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma);
 220:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma);
 221:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma);
 222:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma);
 223:HALLIB/Src/stm32f4xx_hal_tim.c **** static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 224:HALLIB/Src/stm32f4xx_hal_tim.c ****                                                   TIM_SlaveConfigTypeDef *sSlaveConfig);
 225:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 226:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
 227:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 228:HALLIB/Src/stm32f4xx_hal_tim.c **** /* Exported functions --------------------------------------------------------*/
 229:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 230:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions TIM Exported Functions
 231:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
 232:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 233:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 234:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group1 TIM Time Base functions
 235:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    Time Base functions
 236:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
 237:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
 238:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
 239:HALLIB/Src/stm32f4xx_hal_tim.c ****               ##### Time Base functions #####
 240:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
 241:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 242:HALLIB/Src/stm32f4xx_hal_tim.c ****     This section provides functions allowing to:
 243:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Initialize and configure the TIM base.
 244:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) De-initialize the TIM base.
 245:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the Time Base.
 246:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the Time Base.
 247:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the Time Base and enable interrupt.
 248:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the Time Base and disable interrupt.
 249:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the Time Base and enable DMA transfer.
 250:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the Time Base and disable DMA transfer.
 251:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 252:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
 253:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
 254:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 255:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 256:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Time base Unit according to the specified
 257:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
 258:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   Switching from Center Aligned counter mode to Edge counter mode (or reverse)
 259:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         requires a timer reset to avoid unexpected direction
 260:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         due to DIR bit readonly in center aligned mode.
ARM GAS  /tmp/ccVHe0ZY.s 			page 6


 261:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 262:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 263:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 264:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 265:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 266:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 267:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 268:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim == NULL)
 269:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 270:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
 271:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 272:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 273:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 274:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 275:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 276:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 277:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 278:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 279:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_RESET)
 280:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 281:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
 282:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
 283:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 284:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 285:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy weak callbacks */
 286:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_ResetCallback(htim);
 287:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 288:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (htim->Base_MspInitCallback == NULL)
 289:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 290:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 291:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 292:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
 293:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Base_MspInitCallback(htim);
 294:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
 295:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
 296:HALLIB/Src/stm32f4xx_hal_tim.c ****     HAL_TIM_Base_MspInit(htim);
 297:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 298:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 299:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 300:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TIM state */
 301:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
 302:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 303:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Time Base configuration */
 304:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init);
 305:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 306:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Initialize the TIM state*/
 307:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
 308:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 309:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 310:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 311:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 312:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 313:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes the TIM Base peripheral
 314:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 315:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 316:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 317:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
ARM GAS  /tmp/ccVHe0ZY.s 			page 7


 318:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 319:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 320:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 321:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 322:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
 323:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 324:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
 325:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 326:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 327:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 328:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->Base_MspDeInitCallback == NULL)
 329:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 330:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Base_MspDeInitCallback = HAL_TIM_Base_MspDeInit;
 331:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 332:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware */
 333:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Base_MspDeInitCallback(htim);
 334:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
 335:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
 336:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_Base_MspDeInit(htim);
 337:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 338:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 339:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change TIM state */
 340:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
 341:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 342:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Release Lock */
 343:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
 344:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 345:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 346:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 347:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 348:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 349:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Base MSP.
 350:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 351:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
 352:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 353:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
 354:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 355:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 356:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
 357:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 358:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 359:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_Base_MspInit could be implemented in the user file
 360:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
 361:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 362:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 363:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 364:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes TIM Base MSP.
 365:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 366:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
 367:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 368:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
 369:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 370:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 371:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
 372:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 373:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 374:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_Base_MspDeInit could be implemented in the user file
ARM GAS  /tmp/ccVHe0ZY.s 			page 8


 375:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
 376:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 377:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 378:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 379:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 380:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Base generation.
 381:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 382:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 383:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 384:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
 385:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 386:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 387:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 388:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 389:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 390:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 391:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TIM state */
 392:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
 393:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 394:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
 395:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 396:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 397:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 398:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
 399:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 400:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 401:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the TIM state*/
 402:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
 403:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 404:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 405:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 406:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 407:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 408:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 409:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Base generation.
 410:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 411:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 412:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 413:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
 414:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 415:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 416:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 417:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 418:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TIM state */
 419:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
 420:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 421:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
 422:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 423:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 424:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the TIM state*/
 425:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
 426:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 427:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 428:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 429:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 430:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 431:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
ARM GAS  /tmp/ccVHe0ZY.s 			page 9


 432:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Base generation in interrupt mode.
 433:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 434:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 435:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 436:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
 437:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 438:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 439:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 440:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 441:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 442:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 443:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the TIM Update interrupt */
 444:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 445:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 446:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
 447:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 448:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 449:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 450:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
 451:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 452:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 453:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 454:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 455:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 456:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 457:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 458:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Base generation in interrupt mode.
 459:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 460:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 461:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 462:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
 463:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 464:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 465:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 466:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Update interrupt */
 467:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 468:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 469:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
 470:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 471:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 472:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 473:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 474:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 475:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 476:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 477:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Base generation in DMA mode.
 478:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 479:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  pData The source Buffer address.
 480:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Length The length of data to be transferred from memory to peripheral.
 481:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 482:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 483:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
 484:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 485:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 486:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 487:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 488:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
ARM GAS  /tmp/ccVHe0ZY.s 			page 10


 489:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 490:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_BUSY)
 491:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 492:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_BUSY;
 493:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 494:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_READY)
 495:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 496:HALLIB/Src/stm32f4xx_hal_tim.c ****     if ((pData == NULL) && (Length > 0U))
 497:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 498:HALLIB/Src/stm32f4xx_hal_tim.c ****       return HAL_ERROR;
 499:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 500:HALLIB/Src/stm32f4xx_hal_tim.c ****     else
 501:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 502:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
 503:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 504:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 505:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
 506:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 507:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
 508:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 509:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 510:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the DMA Period elapsed callbacks */
 511:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 512:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 513:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 514:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the DMA error callback */
 515:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 516:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 517:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the DMA stream */
 518:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->A
 519:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 520:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
 521:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 522:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 523:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the TIM Update DMA request */
 524:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 525:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 526:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
 527:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 528:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 529:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 530:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
 531:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 532:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 533:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 534:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 535:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 536:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 537:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 538:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Base generation in DMA mode.
 539:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
 540:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 541:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 542:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
 543:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 544:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 545:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
ARM GAS  /tmp/ccVHe0ZY.s 			page 11


 546:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 547:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Update DMA request */
 548:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 549:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 550:HALLIB/Src/stm32f4xx_hal_tim.c ****   (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 551:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 552:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
 553:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 554:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 555:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the htim state */
 556:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
 557:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 558:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 559:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 560:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 561:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 562:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 563:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
 564:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 565:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 566:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group2 TIM Output Compare functions
 567:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    TIM Output Compare functions
 568:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
 569:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
 570:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
 571:HALLIB/Src/stm32f4xx_hal_tim.c ****                   ##### TIM Output Compare functions #####
 572:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
 573:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
 574:HALLIB/Src/stm32f4xx_hal_tim.c ****     This section provides functions allowing to:
 575:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Initialize and configure the TIM Output Compare.
 576:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) De-initialize the TIM Output Compare.
 577:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM Output Compare.
 578:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM Output Compare.
 579:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM Output Compare and enable interrupt.
 580:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM Output Compare and disable interrupt.
 581:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM Output Compare and enable DMA transfer.
 582:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM Output Compare and disable DMA transfer.
 583:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 584:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
 585:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
 586:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 587:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 588:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Output Compare according to the specified
 589:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and initializes the associated handle.
 590:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   Switching from Center Aligned counter mode to Edge counter mode (or reverse)
 591:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         requires a timer reset to avoid unexpected direction
 592:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         due to DIR bit readonly in center aligned mode.
 593:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
 594:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 595:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 596:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 597:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
 598:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 599:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 600:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim == NULL)
 601:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 602:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
ARM GAS  /tmp/ccVHe0ZY.s 			page 12


 603:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 604:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 605:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 606:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 607:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 608:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 609:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 610:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 611:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_RESET)
 612:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 613:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
 614:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
 615:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 616:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 617:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy weak callbacks */
 618:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_ResetCallback(htim);
 619:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 620:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (htim->OC_MspInitCallback == NULL)
 621:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 622:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 623:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 624:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
 625:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->OC_MspInitCallback(htim);
 626:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
 627:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
 628:HALLIB/Src/stm32f4xx_hal_tim.c ****     HAL_TIM_OC_MspInit(htim);
 629:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 630:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 631:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 632:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TIM state */
 633:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
 634:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 635:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Init the base time for the Output Compare */
 636:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 637:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 638:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Initialize the TIM state*/
 639:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
 640:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 641:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 642:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 643:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 644:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 645:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes the TIM peripheral
 646:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 647:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 648:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 649:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
 650:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 651:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 652:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
 653:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 654:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
 655:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 656:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
 657:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 658:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 659:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccVHe0ZY.s 			page 13


 660:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->OC_MspDeInitCallback == NULL)
 661:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 662:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->OC_MspDeInitCallback = HAL_TIM_OC_MspDeInit;
 663:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 664:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware */
 665:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->OC_MspDeInitCallback(htim);
 666:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
 667:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
 668:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_OC_MspDeInit(htim);
 669:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 670:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 671:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change TIM state */
 672:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
 673:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 674:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Release Lock */
 675:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
 676:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 677:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 678:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 679:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 680:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 681:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Output Compare MSP.
 682:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 683:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
 684:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 685:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 686:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 687:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 688:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
 689:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 690:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 691:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_OC_MspInit could be implemented in the user file
 692:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
 693:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 694:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 695:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 696:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes TIM Output Compare MSP.
 697:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 698:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
 699:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 700:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
 701:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 702:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 703:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
 704:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 705:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 706:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_OC_MspDeInit could be implemented in the user file
 707:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
 708:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 709:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 710:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 711:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Output Compare signal generation.
 712:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 713:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channel to be enabled
 714:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
 715:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 716:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
ARM GAS  /tmp/ccVHe0ZY.s 			page 14


 717:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 718:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 719:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 720:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 721:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 722:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 723:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 724:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 725:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 726:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 727:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 728:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Output compare channel */
 729:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 730:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 731:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 732:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 733:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Enable the main output */
 734:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
 735:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 736:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 737:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
 738:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 739:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 740:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 741:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
 742:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 743:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 744:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 745:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 746:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 747:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 748:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 749:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Output Compare signal generation.
 750:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 751:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channel to be disabled
 752:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
 753:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 754:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 755:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 756:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 757:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 758:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 759:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 760:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 761:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 762:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 763:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 764:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Output compare channel */
 765:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 766:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 767:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 768:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 769:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the Main Output */
 770:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
 771:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 772:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 773:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
ARM GAS  /tmp/ccVHe0ZY.s 			page 15


 774:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 775:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 776:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 777:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 778:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 779:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 780:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 781:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Output Compare signal generation in interrupt mode.
 782:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 783:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channel to be enabled
 784:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
 785:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 786:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 787:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 788:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 789:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 790:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 791:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
 792:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 793:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 794:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 795:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 796:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 797:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 798:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
 799:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 800:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
 801:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 802:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 interrupt */
 803:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 804:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 805:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 806:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 807:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
 808:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 809:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 interrupt */
 810:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 811:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 812:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 813:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 814:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
 815:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 816:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3 interrupt */
 817:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 818:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 819:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 820:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 821:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
 822:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 823:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 interrupt */
 824:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 825:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 826:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 827:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 828:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
 829:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 830:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
ARM GAS  /tmp/ccVHe0ZY.s 			page 16


 831:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 832:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Output compare channel */
 833:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 834:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 835:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 836:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 837:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Enable the main output */
 838:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
 839:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 840:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 841:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
 842:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 843:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 844:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 845:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
 846:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 847:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 848:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 849:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 850:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 851:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 852:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 853:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Output Compare signal generation in interrupt mode.
 854:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 855:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channel to be disabled
 856:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
 857:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 858:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 859:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 860:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 861:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 862:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 863:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
 864:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 865:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 866:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 867:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 868:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
 869:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 870:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
 871:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 872:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 interrupt */
 873:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 874:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 875:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 876:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 877:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
 878:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 879:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 interrupt */
 880:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 881:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 882:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 883:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 884:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
 885:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 886:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 interrupt */
 887:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
ARM GAS  /tmp/ccVHe0ZY.s 			page 17


 888:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 889:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 890:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 891:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
 892:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 893:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
 894:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 895:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 896:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 897:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 898:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
 899:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 900:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 901:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 902:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Output compare channel */
 903:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 904:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 905:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 906:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 907:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the Main Output */
 908:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
 909:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 910:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 911:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
 912:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
 913:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 914:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
 915:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
 916:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 917:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 918:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 919:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Output Compare signal generation in DMA mode.
 920:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
 921:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channel to be enabled
 922:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
 923:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 924:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 925:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 926:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 927:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  pData The source Buffer address.
 928:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Length The length of data to be transferred from memory to TIM peripheral
 929:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
 930:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
 931:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, 
 932:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 933:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 934:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 935:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 936:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 937:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 938:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_BUSY)
 939:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 940:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_BUSY;
 941:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 942:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_READY)
 943:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 944:HALLIB/Src/stm32f4xx_hal_tim.c ****     if ((pData == NULL) && (Length > 0U))
ARM GAS  /tmp/ccVHe0ZY.s 			page 18


 945:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 946:HALLIB/Src/stm32f4xx_hal_tim.c ****       return HAL_ERROR;
 947:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 948:HALLIB/Src/stm32f4xx_hal_tim.c ****     else
 949:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 950:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
 951:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 952:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 953:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
 954:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 955:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
 956:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 957:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 958:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
 959:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 960:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
 961:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 962:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
 963:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 964:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 965:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 966:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
 967:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 968:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 969:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
 970:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->
 971:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 972:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
 973:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 974:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 975:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 DMA request */
 976:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 977:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 978:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 979:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 980:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
 981:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 982:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
 983:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 984:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 985:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 986:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
 987:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 988:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 989:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
 990:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->
 991:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 992:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
 993:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 994:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 995:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 DMA request */
 996:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 997:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 998:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 999:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1000:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
1001:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
ARM GAS  /tmp/ccVHe0ZY.s 			page 19


1002:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
1003:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
1004:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
1005:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1006:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
1007:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
1008:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1009:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
1010:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->
1011:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
1012:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
1013:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
1014:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3 DMA request */
1015:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
1016:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1017:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1018:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1019:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
1020:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1021:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
1022:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
1023:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
1024:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1025:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
1026:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
1027:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1028:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
1029:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->
1030:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
1031:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
1032:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
1033:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 DMA request */
1034:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
1035:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1036:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1037:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1038:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
1039:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1040:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1041:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1042:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Output compare channel */
1043:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1044:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1045:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
1046:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1047:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Enable the main output */
1048:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
1049:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1050:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1051:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
1052:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1053:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1054:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1055:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
1056:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1057:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1058:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
ARM GAS  /tmp/ccVHe0ZY.s 			page 20


1059:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1060:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1061:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1062:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1063:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Output Compare signal generation in DMA mode.
1064:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
1065:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channel to be disabled
1066:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1067:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1068:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1069:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1070:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1071:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1072:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1073:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
1074:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1075:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1076:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1077:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1078:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
1079:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1080:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
1081:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1082:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 DMA request */
1083:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
1084:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
1085:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1086:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1087:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1088:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
1089:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1090:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 DMA request */
1091:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
1092:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
1093:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1094:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1095:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1096:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
1097:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1098:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 DMA request */
1099:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
1100:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
1101:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1102:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1103:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1104:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
1105:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1106:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
1107:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
1108:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
1109:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1110:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1111:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1112:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
1113:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1114:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1115:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 21


1116:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Output compare channel */
1117:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1118:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1119:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
1120:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1121:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the Main Output */
1122:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
1123:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1124:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1125:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
1126:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1127:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1128:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the htim state */
1129:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
1130:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1131:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1132:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1133:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1134:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1135:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1136:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
1137:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1138:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1139:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group3 TIM PWM functions
1140:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    TIM PWM functions
1141:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
1142:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
1143:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
1144:HALLIB/Src/stm32f4xx_hal_tim.c ****                           ##### TIM PWM functions #####
1145:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
1146:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
1147:HALLIB/Src/stm32f4xx_hal_tim.c ****     This section provides functions allowing to:
1148:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Initialize and configure the TIM PWM.
1149:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) De-initialize the TIM PWM.
1150:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM PWM.
1151:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM PWM.
1152:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM PWM and enable interrupt.
1153:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM PWM and disable interrupt.
1154:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM PWM and enable DMA transfer.
1155:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM PWM and disable DMA transfer.
1156:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1157:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
1158:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
1159:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1160:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1161:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM PWM Time Base according to the specified
1162:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and initializes the associated handle.
1163:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   Switching from Center Aligned counter mode to Edge counter mode (or reverse)
1164:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         requires a timer reset to avoid unexpected direction
1165:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         due to DIR bit readonly in center aligned mode.
1166:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
1167:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1168:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1169:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1170:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
1171:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1172:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
ARM GAS  /tmp/ccVHe0ZY.s 			page 22


1173:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim == NULL)
1174:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1175:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
1176:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1177:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1178:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1179:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
1180:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
1181:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
1182:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
1183:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1184:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_RESET)
1185:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1186:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
1187:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
1188:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1189:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
1190:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy weak callbacks */
1191:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_ResetCallback(htim);
1192:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1193:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (htim->PWM_MspInitCallback == NULL)
1194:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1195:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
1196:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1197:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
1198:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->PWM_MspInitCallback(htim);
1199:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
1200:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
1201:HALLIB/Src/stm32f4xx_hal_tim.c ****     HAL_TIM_PWM_MspInit(htim);
1202:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
1203:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1204:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1205:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TIM state */
1206:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
1207:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1208:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Init the base time for the PWM */
1209:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init);
1210:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1211:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Initialize the TIM state*/
1212:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
1213:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1214:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1215:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1216:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1217:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1218:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes the TIM peripheral
1219:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1220:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1221:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1222:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
1223:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1224:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1225:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
1226:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1227:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
1228:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1229:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
ARM GAS  /tmp/ccVHe0ZY.s 			page 23


1230:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1231:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1232:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
1233:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->PWM_MspDeInitCallback == NULL)
1234:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1235:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->PWM_MspDeInitCallback = HAL_TIM_PWM_MspDeInit;
1236:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1237:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware */
1238:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->PWM_MspDeInitCallback(htim);
1239:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
1240:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
1241:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_PWM_MspDeInit(htim);
1242:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
1243:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1244:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change TIM state */
1245:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
1246:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1247:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Release Lock */
1248:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
1249:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1250:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1251:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1252:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1253:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1254:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM PWM MSP.
1255:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1256:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
1257:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1258:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
1259:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1260:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
1261:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
1262:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1263:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1264:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_PWM_MspInit could be implemented in the user file
1265:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
1266:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1267:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1268:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1269:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes TIM PWM MSP.
1270:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1271:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
1272:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1273:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
1274:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1275:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
1276:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
1277:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1278:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1279:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_PWM_MspDeInit could be implemented in the user file
1280:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
1281:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1282:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1283:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1284:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the PWM signal generation.
1285:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
1286:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
ARM GAS  /tmp/ccVHe0ZY.s 			page 24


1287:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1288:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1289:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1290:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1291:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1292:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1293:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1294:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
1295:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1296:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
1297:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1298:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1299:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1300:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1301:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Capture compare channel */
1302:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1303:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1304:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
1305:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1306:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Enable the main output */
1307:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
1308:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1309:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1310:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
1311:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1312:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1313:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1314:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
1315:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1316:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1317:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1318:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1319:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1320:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1321:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1322:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the PWM signal generation.
1323:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1324:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled
1325:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1326:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1327:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1328:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1329:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1330:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1331:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1332:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
1333:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1334:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1335:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1336:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1337:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Capture compare channel */
1338:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1339:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1340:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
1341:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1342:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the Main Output */
1343:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
ARM GAS  /tmp/ccVHe0ZY.s 			page 25


1344:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1345:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1346:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
1347:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1348:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1349:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the htim state */
1350:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
1351:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1352:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1353:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1354:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1355:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1356:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1357:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the PWM signal generation in interrupt mode.
1358:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1359:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channel to be enabled
1360:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1361:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1362:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1363:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1364:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1365:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1366:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1367:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
1368:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1369:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
1370:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1371:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1372:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1373:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
1374:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1375:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
1376:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1377:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 interrupt */
1378:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
1379:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1380:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1381:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1382:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
1383:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1384:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 interrupt */
1385:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
1386:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1387:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1388:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1389:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
1390:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1391:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3 interrupt */
1392:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
1393:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1394:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1395:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1396:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
1397:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1398:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 interrupt */
1399:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
1400:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
ARM GAS  /tmp/ccVHe0ZY.s 			page 26


1401:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1402:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1403:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
1404:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1405:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1406:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1407:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Capture compare channel */
1408:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1409:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1410:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
1411:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1412:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Enable the main output */
1413:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
1414:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1415:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1416:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
1417:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1418:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1419:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1420:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
1421:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1422:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1423:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1424:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1425:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1426:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1427:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1428:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the PWM signal generation in interrupt mode.
1429:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1430:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled
1431:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1432:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1433:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1434:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1435:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1436:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1437:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1438:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
1439:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1440:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1441:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1442:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1443:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
1444:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1445:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
1446:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1447:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 interrupt */
1448:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
1449:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1450:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1451:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1452:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
1453:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1454:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 interrupt */
1455:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
1456:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1457:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
ARM GAS  /tmp/ccVHe0ZY.s 			page 27


1458:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1459:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
1460:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1461:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 interrupt */
1462:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
1463:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1464:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1465:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1466:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
1467:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1468:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
1469:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
1470:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1471:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1472:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1473:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
1474:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1475:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1476:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1477:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Capture compare channel */
1478:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1479:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1480:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
1481:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1482:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the Main Output */
1483:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
1484:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1485:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1486:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
1487:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1488:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1489:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1490:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1491:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1492:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1493:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1494:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM PWM signal generation in DMA mode.
1495:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1496:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
1497:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1498:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1499:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1500:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1501:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1502:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  pData The source Buffer address.
1503:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Length The length of data to be transferred from memory to TIM peripheral
1504:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1505:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1506:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData,
1507:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1508:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
1509:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1510:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1511:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1512:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1513:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_BUSY)
1514:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
ARM GAS  /tmp/ccVHe0ZY.s 			page 28


1515:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_BUSY;
1516:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1517:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_READY)
1518:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1519:HALLIB/Src/stm32f4xx_hal_tim.c ****     if ((pData == NULL) && (Length > 0U))
1520:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1521:HALLIB/Src/stm32f4xx_hal_tim.c ****       return HAL_ERROR;
1522:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1523:HALLIB/Src/stm32f4xx_hal_tim.c ****     else
1524:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1525:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
1526:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1527:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1528:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
1529:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1530:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
1531:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1532:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1533:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
1534:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1535:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
1536:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1537:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
1538:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
1539:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
1540:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1541:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
1542:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
1543:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1544:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
1545:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->
1546:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
1547:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
1548:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
1549:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1550:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 DMA request */
1551:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
1552:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1553:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1554:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1555:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
1556:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1557:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
1558:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
1559:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
1560:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1561:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
1562:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
1563:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1564:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
1565:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->
1566:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
1567:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
1568:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
1569:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 DMA request */
1570:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
1571:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
ARM GAS  /tmp/ccVHe0ZY.s 			page 29


1572:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1573:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1574:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
1575:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1576:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
1577:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
1578:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
1579:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1580:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
1581:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
1582:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1583:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
1584:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->
1585:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
1586:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
1587:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
1588:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Output Capture/Compare 3 request */
1589:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
1590:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1591:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1592:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1593:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
1594:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1595:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
1596:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
1597:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
1598:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1599:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
1600:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
1601:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1602:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
1603:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->
1604:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
1605:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
1606:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
1607:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 DMA request */
1608:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
1609:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1610:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1611:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1612:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
1613:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1614:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1615:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1616:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Capture compare channel */
1617:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1618:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1619:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
1620:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1621:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Enable the main output */
1622:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
1623:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1624:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1625:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
1626:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1627:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1628:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
ARM GAS  /tmp/ccVHe0ZY.s 			page 30


1629:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
1630:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1631:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1632:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1633:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1634:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1635:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1636:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1637:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM PWM signal generation in DMA mode.
1638:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
1639:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled
1640:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1641:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1642:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1643:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1644:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1645:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1646:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1647:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
1648:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1649:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1650:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1651:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1652:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
1653:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1654:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
1655:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1656:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 DMA request */
1657:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
1658:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
1659:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1660:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1661:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1662:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
1663:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1664:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 DMA request */
1665:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
1666:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
1667:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1668:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1669:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1670:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
1671:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1672:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 DMA request */
1673:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
1674:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
1675:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1676:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1677:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1678:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
1679:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1680:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
1681:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
1682:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
1683:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1684:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1685:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 31


1686:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
1687:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1688:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1689:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1690:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Capture compare channel */
1691:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1692:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1693:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
1694:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1695:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the Main Output */
1696:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
1697:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1698:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1699:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
1700:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1701:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1702:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the htim state */
1703:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
1704:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1705:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1706:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1707:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1708:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1709:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1710:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
1711:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1712:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1713:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group4 TIM Input Capture functions
1714:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    TIM Input Capture functions
1715:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
1716:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
1717:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
1718:HALLIB/Src/stm32f4xx_hal_tim.c ****               ##### TIM Input Capture functions #####
1719:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
1720:HALLIB/Src/stm32f4xx_hal_tim.c ****  [..]
1721:HALLIB/Src/stm32f4xx_hal_tim.c ****    This section provides functions allowing to:
1722:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) Initialize and configure the TIM Input Capture.
1723:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) De-initialize the TIM Input Capture.
1724:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) Start the TIM Input Capture.
1725:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) Stop the TIM Input Capture.
1726:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) Start the TIM Input Capture and enable interrupt.
1727:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) Stop the TIM Input Capture and disable interrupt.
1728:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) Start the TIM Input Capture and enable DMA transfer.
1729:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) Stop the TIM Input Capture and disable DMA transfer.
1730:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1731:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
1732:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
1733:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1734:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1735:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Input Capture Time base according to the specified
1736:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and initializes the associated handle.
1737:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   Switching from Center Aligned counter mode to Edge counter mode (or reverse)
1738:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         requires a timer reset to avoid unexpected direction
1739:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         due to DIR bit readonly in center aligned mode.
1740:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
1741:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
1742:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
ARM GAS  /tmp/ccVHe0ZY.s 			page 32


1743:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1744:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
1745:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1746:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
1747:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim == NULL)
1748:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1749:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
1750:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1751:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1752:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1753:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
1754:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
1755:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
1756:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
1757:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1758:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_RESET)
1759:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1760:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
1761:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
1762:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1763:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
1764:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy weak callbacks */
1765:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_ResetCallback(htim);
1766:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1767:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (htim->IC_MspInitCallback == NULL)
1768:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1769:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
1770:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1771:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
1772:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->IC_MspInitCallback(htim);
1773:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
1774:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
1775:HALLIB/Src/stm32f4xx_hal_tim.c ****     HAL_TIM_IC_MspInit(htim);
1776:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
1777:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1778:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1779:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TIM state */
1780:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
1781:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1782:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Init the base time for the input capture */
1783:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init);
1784:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1785:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Initialize the TIM state*/
1786:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
1787:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1788:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1789:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1790:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1791:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1792:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes the TIM peripheral
1793:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
1794:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1795:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1796:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
1797:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1798:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1799:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
ARM GAS  /tmp/ccVHe0ZY.s 			page 33


1800:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1801:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
1802:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1803:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
1804:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1805:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1806:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
1807:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->IC_MspDeInitCallback == NULL)
1808:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1809:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->IC_MspDeInitCallback = HAL_TIM_IC_MspDeInit;
1810:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1811:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware */
1812:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->IC_MspDeInitCallback(htim);
1813:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
1814:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
1815:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_IC_MspDeInit(htim);
1816:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
1817:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1818:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change TIM state */
1819:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
1820:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1821:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Release Lock */
1822:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
1823:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1824:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1825:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1826:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1827:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1828:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Input Capture MSP.
1829:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
1830:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
1831:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1832:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
1833:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1834:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
1835:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
1836:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1837:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1838:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_IC_MspInit could be implemented in the user file
1839:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
1840:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1841:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1842:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1843:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes TIM Input Capture MSP.
1844:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
1845:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
1846:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1847:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
1848:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1849:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
1850:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
1851:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1852:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1853:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_IC_MspDeInit could be implemented in the user file
1854:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
1855:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1856:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 34


1857:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1858:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Input Capture measurement.
1859:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
1860:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
1861:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1862:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1863:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1864:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1865:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1866:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1867:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1868:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
1869:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1870:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
1871:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1872:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1873:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1874:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1875:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Input Capture channel */
1876:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1877:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1878:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
1879:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1880:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1881:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1882:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
1883:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1884:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1885:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1886:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1887:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1888:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1889:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1890:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Input Capture measurement.
1891:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
1892:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled
1893:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1894:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1895:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1896:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1897:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1898:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1899:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1900:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
1901:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1902:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1903:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1904:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1905:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Input Capture channel */
1906:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
1907:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1908:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
1909:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
1910:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1911:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1912:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1913:HALLIB/Src/stm32f4xx_hal_tim.c **** }
ARM GAS  /tmp/ccVHe0ZY.s 			page 35


1914:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1915:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1916:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Input Capture measurement in interrupt mode.
1917:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
1918:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
1919:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1920:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1921:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1922:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1923:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1924:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1925:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1926:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
1927:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1928:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
1929:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1930:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1931:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1932:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1933:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
1934:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1935:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
1936:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1937:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 interrupt */
1938:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
1939:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1940:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1941:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1942:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
1943:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1944:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2 interrupt */
1945:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
1946:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1947:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1948:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1949:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
1950:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1951:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3 interrupt */
1952:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
1953:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1954:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1955:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1956:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
1957:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
1958:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4 interrupt */
1959:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
1960:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1961:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
1962:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1963:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
1964:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
1965:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1966:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Input Capture channel */
1967:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
1968:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1969:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
1970:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
ARM GAS  /tmp/ccVHe0ZY.s 			page 36


1971:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1972:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1973:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
1974:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
1975:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1976:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
1977:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
1978:HALLIB/Src/stm32f4xx_hal_tim.c **** }
1979:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1980:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
1981:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Input Capture measurement in interrupt mode.
1982:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
1983:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled
1984:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
1985:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
1986:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
1987:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
1988:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
1989:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
1990:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
1991:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
1992:HALLIB/Src/stm32f4xx_hal_tim.c **** {
1993:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
1994:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
1995:HALLIB/Src/stm32f4xx_hal_tim.c **** 
1996:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
1997:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
1998:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
1999:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2000:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 interrupt */
2001:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
2002:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2003:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2004:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2005:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
2006:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2007:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 interrupt */
2008:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
2009:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2010:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2011:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2012:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
2013:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2014:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3 interrupt */
2015:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
2016:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2017:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2018:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2019:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
2020:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2021:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4 interrupt */
2022:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
2023:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2024:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2025:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2026:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
2027:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
ARM GAS  /tmp/ccVHe0ZY.s 			page 37


2028:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2029:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2030:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Input Capture channel */
2031:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
2032:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2033:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
2034:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2035:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2036:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2037:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2038:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2039:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2040:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2041:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Input Capture measurement in DMA mode.
2042:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
2043:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
2044:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2045:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2046:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2047:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
2048:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
2049:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  pData The destination Buffer address.
2050:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Length The length of data to be transferred from TIM peripheral to memory.
2051:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2052:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2053:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, 
2054:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2055:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
2056:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2057:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2058:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
2059:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
2060:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2061:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_BUSY)
2062:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2063:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_BUSY;
2064:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2065:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_READY)
2066:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2067:HALLIB/Src/stm32f4xx_hal_tim.c ****     if ((pData == NULL) && (Length > 0U))
2068:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2069:HALLIB/Src/stm32f4xx_hal_tim.c ****       return HAL_ERROR;
2070:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2071:HALLIB/Src/stm32f4xx_hal_tim.c ****     else
2072:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2073:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
2074:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2075:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2076:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
2077:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2078:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
2079:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2080:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2081:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
2082:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2083:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
2084:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
ARM GAS  /tmp/ccVHe0ZY.s 			page 38


2085:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
2086:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
2087:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
2088:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2089:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
2090:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
2091:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2092:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
2093:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)p
2094:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
2095:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
2096:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
2097:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 1 DMA request */
2098:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
2099:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2100:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2101:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2102:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
2103:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2104:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
2105:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
2106:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
2107:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2108:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
2109:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
2110:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2111:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
2112:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)p
2113:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
2114:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
2115:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
2116:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 2  DMA request */
2117:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
2118:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2119:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2120:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2121:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
2122:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2123:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
2124:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
2125:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
2126:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2127:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
2128:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
2129:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2130:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
2131:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)p
2132:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
2133:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
2134:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
2135:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 3  DMA request */
2136:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
2137:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2138:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2139:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2140:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
2141:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
ARM GAS  /tmp/ccVHe0ZY.s 			page 39


2142:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
2143:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
2144:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
2145:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2146:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
2147:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
2148:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2149:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
2150:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)p
2151:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
2152:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
2153:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
2154:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Capture/Compare 4  DMA request */
2155:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
2156:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2157:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2158:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2159:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
2160:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2161:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2162:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2163:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Input Capture channel */
2164:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
2165:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2166:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger 
2167:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
2168:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
2169:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2170:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_ENABLE(htim);
2171:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2172:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2173:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2174:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2175:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2176:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2177:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2178:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Input Capture measurement in DMA mode.
2179:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Input Capture handle
2180:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled
2181:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2182:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2183:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2184:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
2185:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
2186:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2187:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2188:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
2189:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2190:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2191:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
2192:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
2193:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2194:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
2195:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2196:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
2197:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2198:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 1 DMA request */
ARM GAS  /tmp/ccVHe0ZY.s 			page 40


2199:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
2200:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
2201:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2202:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2203:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2204:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
2205:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2206:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 2 DMA request */
2207:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
2208:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
2209:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2210:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2211:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2212:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
2213:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2214:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 3  DMA request */
2215:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
2216:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
2217:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2218:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2219:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2220:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
2221:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2222:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the TIM Capture/Compare 4  DMA request */
2223:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
2224:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
2225:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2226:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2227:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2228:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
2229:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2230:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2231:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2232:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Input Capture channel */
2233:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
2234:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2235:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
2236:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2237:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2238:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the htim state */
2239:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
2240:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2241:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2242:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2243:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2244:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2245:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
2246:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2247:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2248:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group5 TIM One Pulse functions
2249:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    TIM One Pulse functions
2250:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
2251:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
2252:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
2253:HALLIB/Src/stm32f4xx_hal_tim.c ****                         ##### TIM One Pulse functions #####
2254:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
2255:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
ARM GAS  /tmp/ccVHe0ZY.s 			page 41


2256:HALLIB/Src/stm32f4xx_hal_tim.c ****     This section provides functions allowing to:
2257:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Initialize and configure the TIM One Pulse.
2258:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) De-initialize the TIM One Pulse.
2259:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM One Pulse.
2260:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM One Pulse.
2261:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM One Pulse and enable interrupt.
2262:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM One Pulse and disable interrupt.
2263:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM One Pulse and enable DMA transfer.
2264:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM One Pulse and disable DMA transfer.
2265:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2266:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
2267:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
2268:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2269:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2270:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM One Pulse Time Base according to the specified
2271:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_HandleTypeDef and initializes the associated handle.
2272:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   Switching from Center Aligned counter mode to Edge counter mode (or reverse)
2273:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         requires a timer reset to avoid unexpected direction
2274:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         due to DIR bit readonly in center aligned mode.
2275:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         Ex: call @ref HAL_TIM_OnePulse_DeInit() before HAL_TIM_OnePulse_Init()
2276:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
2277:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OnePulseMode Select the One pulse mode.
2278:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         This parameter can be one of the following values:
2279:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
2280:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
2281:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2282:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2283:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
2284:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2285:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
2286:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim == NULL)
2287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2288:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
2289:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2290:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2291:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2292:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
2293:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
2294:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
2295:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_OPM_MODE(OnePulseMode));
2296:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
2297:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2298:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_RESET)
2299:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2300:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
2301:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
2302:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2303:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
2304:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy weak callbacks */
2305:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_ResetCallback(htim);
2306:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2307:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (htim->OnePulse_MspInitCallback == NULL)
2308:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2309:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
2310:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2311:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
2312:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->OnePulse_MspInitCallback(htim);
ARM GAS  /tmp/ccVHe0ZY.s 			page 42


2313:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
2314:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
2315:HALLIB/Src/stm32f4xx_hal_tim.c ****     HAL_TIM_OnePulse_MspInit(htim);
2316:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
2317:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2318:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2319:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TIM state */
2320:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
2321:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2322:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Configure the Time base in the One Pulse Mode */
2323:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init);
2324:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2325:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the OPM Bit */
2326:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->CR1 &= ~TIM_CR1_OPM;
2327:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2328:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Configure the OPM Mode */
2329:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->CR1 |= OnePulseMode;
2330:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2331:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Initialize the TIM state*/
2332:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
2333:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2334:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2335:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2336:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2337:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2338:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes the TIM One Pulse
2339:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
2340:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2341:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2342:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
2343:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2344:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2345:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
2346:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2347:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
2348:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2349:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
2350:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2351:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2352:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
2353:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->OnePulse_MspDeInitCallback == NULL)
2354:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2355:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->OnePulse_MspDeInitCallback = HAL_TIM_OnePulse_MspDeInit;
2356:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2357:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware */
2358:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->OnePulse_MspDeInitCallback(htim);
2359:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
2360:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
2361:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_OnePulse_MspDeInit(htim);
2362:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
2363:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2364:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change TIM state */
2365:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
2366:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2367:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Release Lock */
2368:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
2369:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 43


2370:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2371:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2372:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2373:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2374:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM One Pulse MSP.
2375:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
2376:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
2377:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2378:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
2379:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2380:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2381:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
2382:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2383:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2384:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_OnePulse_MspInit could be implemented in the user file
2385:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
2386:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2387:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2388:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2389:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes TIM One Pulse MSP.
2390:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
2391:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
2392:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2393:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
2394:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2395:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2396:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
2397:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2398:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2399:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
2400:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
2401:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2402:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2403:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2404:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM One Pulse signal generation.
2405:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
2406:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OutputChannel TIM Channels to be enabled
2407:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2408:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2409:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2410:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2411:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2412:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
2413:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2414:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2415:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(OutputChannel);
2416:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2417:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Capture compare and the Input Capture channels
2418:HALLIB/Src/stm32f4xx_hal_tim.c ****     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2
2419:HALLIB/Src/stm32f4xx_hal_tim.c ****     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
2420:HALLIB/Src/stm32f4xx_hal_tim.c ****     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
2421:HALLIB/Src/stm32f4xx_hal_tim.c ****     in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together
2422:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2423:HALLIB/Src/stm32f4xx_hal_tim.c ****     No need to enable the counter, it's enabled automatically by hardware
2424:HALLIB/Src/stm32f4xx_hal_tim.c ****     (the counter starts in response to a stimulus and generate a pulse */
2425:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2426:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
ARM GAS  /tmp/ccVHe0ZY.s 			page 44


2427:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2428:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2429:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
2430:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2431:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Enable the main output */
2432:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
2433:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2434:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2435:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2436:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2437:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2438:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2439:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2440:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM One Pulse signal generation.
2441:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
2442:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OutputChannel TIM Channels to be disable
2443:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2444:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2445:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2446:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2447:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2448:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
2449:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2450:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2451:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(OutputChannel);
2452:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2453:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Capture compare and the Input Capture channels
2454:HALLIB/Src/stm32f4xx_hal_tim.c ****   (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
2455:HALLIB/Src/stm32f4xx_hal_tim.c ****   if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
2456:HALLIB/Src/stm32f4xx_hal_tim.c ****   if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
2457:HALLIB/Src/stm32f4xx_hal_tim.c ****   in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
2458:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2459:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
2460:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
2461:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2462:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
2463:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2464:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the Main Output */
2465:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
2466:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2467:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2468:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
2469:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2470:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2471:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2472:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2473:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2474:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2475:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2476:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM One Pulse signal generation in interrupt mode.
2477:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
2478:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OutputChannel TIM Channels to be enabled
2479:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2480:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2481:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2482:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2483:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
ARM GAS  /tmp/ccVHe0ZY.s 			page 45


2484:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
2485:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2486:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2487:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(OutputChannel);
2488:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2489:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Capture compare and the Input Capture channels
2490:HALLIB/Src/stm32f4xx_hal_tim.c ****     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2
2491:HALLIB/Src/stm32f4xx_hal_tim.c ****     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
2492:HALLIB/Src/stm32f4xx_hal_tim.c ****     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
2493:HALLIB/Src/stm32f4xx_hal_tim.c ****     in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together
2494:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2495:HALLIB/Src/stm32f4xx_hal_tim.c ****     No need to enable the counter, it's enabled automatically by hardware
2496:HALLIB/Src/stm32f4xx_hal_tim.c ****     (the counter starts in response to a stimulus and generate a pulse */
2497:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2498:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the TIM Capture/Compare 1 interrupt */
2499:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
2500:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2501:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the TIM Capture/Compare 2 interrupt */
2502:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
2503:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2504:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2505:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2506:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2507:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
2508:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2509:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Enable the main output */
2510:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_ENABLE(htim);
2511:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2512:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2513:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2514:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2515:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2516:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2517:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2518:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM One Pulse signal generation in interrupt mode.
2519:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
2520:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OutputChannel TIM Channels to be enabled
2521:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2522:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2523:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2524:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2525:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2526:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
2527:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2528:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2529:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(OutputChannel);
2530:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2531:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Capture/Compare 1 interrupt */
2532:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
2533:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2534:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Capture/Compare 2 interrupt */
2535:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
2536:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2537:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Capture compare and the Input Capture channels
2538:HALLIB/Src/stm32f4xx_hal_tim.c ****   (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
2539:HALLIB/Src/stm32f4xx_hal_tim.c ****   if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
2540:HALLIB/Src/stm32f4xx_hal_tim.c ****   if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
ARM GAS  /tmp/ccVHe0ZY.s 			page 46


2541:HALLIB/Src/stm32f4xx_hal_tim.c ****   in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
2542:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
2543:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
2544:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2545:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
2546:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2547:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the Main Output */
2548:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_MOE_DISABLE(htim);
2549:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2550:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2551:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
2552:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2553:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2554:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2555:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2556:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2557:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2558:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2559:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
2560:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2561:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2562:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group6 TIM Encoder functions
2563:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    TIM Encoder functions
2564:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
2565:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
2566:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
2567:HALLIB/Src/stm32f4xx_hal_tim.c ****                           ##### TIM Encoder functions #####
2568:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
2569:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
2570:HALLIB/Src/stm32f4xx_hal_tim.c ****     This section provides functions allowing to:
2571:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Initialize and configure the TIM Encoder.
2572:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) De-initialize the TIM Encoder.
2573:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM Encoder.
2574:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM Encoder.
2575:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM Encoder and enable interrupt.
2576:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM Encoder and disable interrupt.
2577:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Start the TIM Encoder and enable DMA transfer.
2578:HALLIB/Src/stm32f4xx_hal_tim.c ****     (+) Stop the TIM Encoder and disable DMA transfer.
2579:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2580:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
2581:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
2582:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2583:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2584:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Encoder Interface and initialize the associated handle.
2585:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   Switching from Center Aligned counter mode to Edge counter mode (or reverse)
2586:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         requires a timer reset to avoid unexpected direction
2587:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         due to DIR bit readonly in center aligned mode.
2588:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         Ex: call @ref HAL_TIM_Encoder_DeInit() before HAL_TIM_Encoder_Init()
2589:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   Encoder mode and External clock mode 2 are not compatible and must not be selected toge
2590:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         Ex: A call for @ref HAL_TIM_Encoder_Init will erase the settings of @ref HAL_TIM_Config
2591:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         using TIM_CLOCKSOURCE_ETRMODE2 and vice versa
2592:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2593:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sConfig TIM Encoder Interface configuration structure
2594:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2595:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2596:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
2597:HALLIB/Src/stm32f4xx_hal_tim.c **** {
ARM GAS  /tmp/ccVHe0ZY.s 			page 47


2598:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
2599:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr1;
2600:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
2601:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2602:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
2603:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim == NULL)
2604:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2605:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
2606:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2607:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2608:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2609:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
2610:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
2611:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
2612:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2613:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
2614:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
2615:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
2616:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
2617:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
2618:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
2619:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
2620:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
2621:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
2622:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2623:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_RESET)
2624:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2625:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Allocate lock resource and initialize it */
2626:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Lock = HAL_UNLOCKED;
2627:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2628:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
2629:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset interrupt callbacks to legacy weak callbacks */
2630:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_ResetCallback(htim);
2631:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2632:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (htim->Encoder_MspInitCallback == NULL)
2633:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2634:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
2635:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2636:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC */
2637:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Encoder_MspInitCallback(htim);
2638:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
2639:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
2640:HALLIB/Src/stm32f4xx_hal_tim.c ****     HAL_TIM_Encoder_MspInit(htim);
2641:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
2642:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2643:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2644:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TIM state */
2645:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
2646:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2647:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the SMS and ECE bits */
2648:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
2649:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2650:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Configure the Time base in the Encoder Mode */
2651:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_Base_SetConfig(htim->Instance, &htim->Init);
2652:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2653:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx SMCR register value */
2654:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR;
ARM GAS  /tmp/ccVHe0ZY.s 			page 48


2655:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2656:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCMR1 register value */
2657:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 = htim->Instance->CCMR1;
2658:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2659:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCER register value */
2660:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = htim->Instance->CCER;
2661:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2662:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the encoder Mode */
2663:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr |= sConfig->EncoderMode;
2664:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2665:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
2666:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
2667:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
2668:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2669:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
2670:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
2671:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
2672:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
2673:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
2674:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2675:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TI1 and the TI2 Polarities */
2676:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
2677:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
2678:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
2679:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2680:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx SMCR */
2681:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
2682:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2683:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR1 */
2684:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->CCMR1 = tmpccmr1;
2685:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2686:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCER */
2687:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->CCER = tmpccer;
2688:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2689:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Initialize the TIM state*/
2690:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
2691:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2692:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2693:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2694:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2695:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2696:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2697:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes the TIM Encoder interface
2698:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2699:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2700:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2701:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
2702:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2703:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2704:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
2705:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2706:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
2707:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2708:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the TIM Peripheral Clock */
2709:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2710:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2711:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccVHe0ZY.s 			page 49


2712:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->Encoder_MspDeInitCallback == NULL)
2713:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2714:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Encoder_MspDeInitCallback = HAL_TIM_Encoder_MspDeInit;
2715:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2716:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware */
2717:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Encoder_MspDeInitCallback(htim);
2718:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
2719:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
2720:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_Encoder_MspDeInit(htim);
2721:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
2722:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2723:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change TIM state */
2724:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_RESET;
2725:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2726:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Release Lock */
2727:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
2728:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2729:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2730:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2731:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2732:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2733:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Encoder Interface MSP.
2734:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2735:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
2736:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2737:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
2738:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2739:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2740:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
2741:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2742:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2743:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_Encoder_MspInit could be implemented in the user file
2744:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
2745:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2746:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2747:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2748:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  DeInitializes TIM Encoder Interface MSP.
2749:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2750:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
2751:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2752:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
2753:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2754:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
2755:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
2756:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2757:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2758:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
2759:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
2760:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2761:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2762:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2763:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Encoder Interface.
2764:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2765:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
2766:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2767:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2768:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
ARM GAS  /tmp/ccVHe0ZY.s 			page 50


2769:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2770:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2771:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2772:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
2773:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2774:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2775:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2776:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2777:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the encoder interface channels */
2778:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
2779:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2780:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
2781:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2782:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2783:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2784:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2785:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2786:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
2787:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2788:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2789:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2790:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2791:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2792:HALLIB/Src/stm32f4xx_hal_tim.c ****     default :
2793:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2794:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2795:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2796:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2797:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2798:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2799:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral */
2800:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
2801:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2802:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2803:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2804:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2805:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2806:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2807:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Encoder Interface.
2808:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2809:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled
2810:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2811:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2812:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2813:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2814:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2815:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2816:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
2817:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2818:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2819:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2820:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2821:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Input Capture channels 1 and 2
2822:HALLIB/Src/stm32f4xx_hal_tim.c ****     (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_C
2823:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
2824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2825:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
ARM GAS  /tmp/ccVHe0ZY.s 			page 51


2826:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2827:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
2828:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2829:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2830:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2831:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
2832:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2833:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
2834:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2835:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2836:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2837:HALLIB/Src/stm32f4xx_hal_tim.c ****     default :
2838:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2839:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
2840:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
2841:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2842:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2843:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2844:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2845:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
2846:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2847:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2848:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2849:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2850:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2851:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2852:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2853:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Encoder Interface in interrupt mode.
2854:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2855:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
2856:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2857:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2858:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2859:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2860:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2861:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2862:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
2863:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2864:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2865:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2866:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2867:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the encoder interface channels */
2868:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the capture compare Interrupts 1 and/or 2 */
2869:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
2870:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2871:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
2872:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2873:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2874:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
2875:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2876:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2877:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2878:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
2879:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2880:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2881:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
2882:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
ARM GAS  /tmp/ccVHe0ZY.s 			page 52


2883:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2884:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2885:HALLIB/Src/stm32f4xx_hal_tim.c ****     default :
2886:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2887:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
2888:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
2889:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
2890:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
2891:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
2892:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2893:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2894:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2895:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the Peripheral */
2896:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE(htim);
2897:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2898:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2899:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2900:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2901:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2902:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2903:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Encoder Interface in interrupt mode.
2904:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2905:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be disabled
2906:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2907:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2908:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2909:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2910:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2911:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2912:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
2913:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2914:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2915:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
2916:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2917:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Input Capture channels 1 and 2
2918:HALLIB/Src/stm32f4xx_hal_tim.c ****     (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_C
2919:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (Channel == TIM_CHANNEL_1)
2920:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2921:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
2922:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2923:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the capture compare Interrupts 1 */
2924:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
2925:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2926:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (Channel == TIM_CHANNEL_2)
2927:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2928:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
2929:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2930:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the capture compare Interrupts 2 */
2931:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
2932:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2933:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
2934:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2935:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
2936:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
2937:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2938:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the capture compare Interrupts 1 and 2 */
2939:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
ARM GAS  /tmp/ccVHe0ZY.s 			page 53


2940:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
2941:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2942:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2943:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
2944:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
2945:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2946:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the htim state */
2947:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
2948:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2949:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
2950:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
2951:HALLIB/Src/stm32f4xx_hal_tim.c **** }
2952:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2953:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
2954:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Starts the TIM Encoder Interface in DMA mode.
2955:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
2956:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
2957:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
2958:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
2959:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
2960:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
2961:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  pData1 The destination Buffer address for IC1.
2962:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  pData2 The destination Buffer address for IC2.
2963:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Length The length of data to be transferred from TIM peripheral to memory.
2964:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
2965:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
2966:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pD
2967:HALLIB/Src/stm32f4xx_hal_tim.c ****                                             uint32_t *pData2, uint16_t Length)
2968:HALLIB/Src/stm32f4xx_hal_tim.c **** {
2969:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
2970:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
2971:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2972:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_BUSY)
2973:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2974:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_BUSY;
2975:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2976:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_READY)
2977:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2978:HALLIB/Src/stm32f4xx_hal_tim.c ****     if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
2979:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2980:HALLIB/Src/stm32f4xx_hal_tim.c ****       return HAL_ERROR;
2981:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2982:HALLIB/Src/stm32f4xx_hal_tim.c ****     else
2983:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2984:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
2985:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
2986:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2987:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
2988:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2989:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
2990:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
2991:HALLIB/Src/stm32f4xx_hal_tim.c **** 
2992:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
2993:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
2994:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
2995:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
2996:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
ARM GAS  /tmp/ccVHe0ZY.s 			page 54


2997:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
2998:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
2999:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3000:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3001:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
3002:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3003:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3004:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)p
3005:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3006:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3007:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3008:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Input Capture DMA request */
3009:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
3010:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3011:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the Peripheral */
3012:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE(htim);
3013:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3014:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the Capture compare channel */
3015:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
3016:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3017:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3018:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3019:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
3020:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3021:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
3022:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
3023:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
3024:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3025:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3026:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
3027:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3028:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)p
3029:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3030:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3031:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3032:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Input Capture  DMA request */
3033:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
3034:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3035:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the Peripheral */
3036:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE(htim);
3037:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3038:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the Capture compare channel */
3039:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
3040:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3041:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3042:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3043:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_ALL:
3044:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3045:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
3046:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
3047:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
3048:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3049:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3050:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
3051:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3052:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3053:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)p
ARM GAS  /tmp/ccVHe0ZY.s 			page 55


3054:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3055:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3056:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3057:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3058:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
3059:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
3060:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
3061:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3062:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3063:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
3064:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3065:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3066:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)p
3067:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3068:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3069:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3070:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the Peripheral */
3071:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE(htim);
3072:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3073:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the Capture compare channel */
3074:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
3075:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
3076:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3077:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Input Capture  DMA request */
3078:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
3079:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Input Capture  DMA request */
3080:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
3081:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3082:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3083:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3084:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
3085:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3086:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3087:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
3088:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
3089:HALLIB/Src/stm32f4xx_hal_tim.c **** }
3090:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3091:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3092:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM Encoder Interface in DMA mode.
3093:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
3094:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
3095:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
3096:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3097:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3098:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
3099:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
3100:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3101:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
3102:HALLIB/Src/stm32f4xx_hal_tim.c **** {
3103:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
3104:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
3105:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3106:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Input Capture channels 1 and 2
3107:HALLIB/Src/stm32f4xx_hal_tim.c ****     (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_C
3108:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (Channel == TIM_CHANNEL_1)
3109:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3110:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
ARM GAS  /tmp/ccVHe0ZY.s 			page 56


3111:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3112:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the capture compare DMA Request 1 */
3113:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
3114:HALLIB/Src/stm32f4xx_hal_tim.c ****     (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
3115:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3116:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (Channel == TIM_CHANNEL_2)
3117:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3118:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
3119:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3120:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the capture compare DMA Request 2 */
3121:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
3122:HALLIB/Src/stm32f4xx_hal_tim.c ****     (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
3123:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3124:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
3125:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3126:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
3127:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
3128:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3129:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the capture compare DMA Request 1 and 2 */
3130:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
3131:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
3132:HALLIB/Src/stm32f4xx_hal_tim.c ****     (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
3133:HALLIB/Src/stm32f4xx_hal_tim.c ****     (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
3134:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3135:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3136:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Peripheral */
3137:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE(htim);
3138:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3139:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the htim state */
3140:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3141:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3142:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
3143:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
3144:HALLIB/Src/stm32f4xx_hal_tim.c **** }
3145:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3146:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3147:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
3148:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3149:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group7 TIM IRQ handler management
3150:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    TIM IRQ handler management
3151:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
3152:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
3153:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
3154:HALLIB/Src/stm32f4xx_hal_tim.c ****                         ##### IRQ handler management #####
3155:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
3156:HALLIB/Src/stm32f4xx_hal_tim.c ****   [..]
3157:HALLIB/Src/stm32f4xx_hal_tim.c ****     This section provides Timer IRQ handler function.
3158:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3159:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
3160:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
3161:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3162:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3163:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  This function handles TIM interrupts requests.
3164:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM  handle
3165:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
3166:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3167:HALLIB/Src/stm32f4xx_hal_tim.c **** void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
ARM GAS  /tmp/ccVHe0ZY.s 			page 57


3168:HALLIB/Src/stm32f4xx_hal_tim.c **** {
3169:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Capture compare 1 event */
3170:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
3171:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3172:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
3173:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3174:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3175:HALLIB/Src/stm32f4xx_hal_tim.c ****         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
3176:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
3177:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3178:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Input capture event */
3179:HALLIB/Src/stm32f4xx_hal_tim.c ****         if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
3180:HALLIB/Src/stm32f4xx_hal_tim.c ****         {
3181:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3182:HALLIB/Src/stm32f4xx_hal_tim.c ****           htim->IC_CaptureCallback(htim);
3183:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3184:HALLIB/Src/stm32f4xx_hal_tim.c ****           HAL_TIM_IC_CaptureCallback(htim);
3185:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3186:HALLIB/Src/stm32f4xx_hal_tim.c ****         }
3187:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Output compare event */
3188:HALLIB/Src/stm32f4xx_hal_tim.c ****         else
3189:HALLIB/Src/stm32f4xx_hal_tim.c ****         {
3190:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3191:HALLIB/Src/stm32f4xx_hal_tim.c ****           htim->OC_DelayElapsedCallback(htim);
3192:HALLIB/Src/stm32f4xx_hal_tim.c ****           htim->PWM_PulseFinishedCallback(htim);
3193:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3194:HALLIB/Src/stm32f4xx_hal_tim.c ****           HAL_TIM_OC_DelayElapsedCallback(htim);
3195:HALLIB/Src/stm32f4xx_hal_tim.c ****           HAL_TIM_PWM_PulseFinishedCallback(htim);
3196:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3197:HALLIB/Src/stm32f4xx_hal_tim.c ****         }
3198:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3199:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3200:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3201:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3202:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Capture compare 2 event */
3203:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
3204:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3205:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
3206:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3207:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
3208:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
3209:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Input capture event */
3210:HALLIB/Src/stm32f4xx_hal_tim.c ****       if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
3211:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3212:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3213:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_CaptureCallback(htim);
3214:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3215:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_IC_CaptureCallback(htim);
3216:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3217:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3218:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Output compare event */
3219:HALLIB/Src/stm32f4xx_hal_tim.c ****       else
3220:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3221:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3222:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_DelayElapsedCallback(htim);
3223:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_PulseFinishedCallback(htim);
3224:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
ARM GAS  /tmp/ccVHe0ZY.s 			page 58


3225:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_OC_DelayElapsedCallback(htim);
3226:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
3227:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3228:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3229:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3230:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3231:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3232:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Capture compare 3 event */
3233:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
3234:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3235:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
3236:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3237:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
3238:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
3239:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Input capture event */
3240:HALLIB/Src/stm32f4xx_hal_tim.c ****       if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
3241:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3242:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3243:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_CaptureCallback(htim);
3244:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3245:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_IC_CaptureCallback(htim);
3246:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3247:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3248:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Output compare event */
3249:HALLIB/Src/stm32f4xx_hal_tim.c ****       else
3250:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3251:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3252:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_DelayElapsedCallback(htim);
3253:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_PulseFinishedCallback(htim);
3254:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3255:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_OC_DelayElapsedCallback(htim);
3256:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
3257:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3258:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3259:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3260:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3261:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3262:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Capture compare 4 event */
3263:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
3264:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3265:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
3266:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3267:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
3268:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
3269:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Input capture event */
3270:HALLIB/Src/stm32f4xx_hal_tim.c ****       if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
3271:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3272:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3273:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_CaptureCallback(htim);
3274:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3275:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_IC_CaptureCallback(htim);
3276:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3277:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3278:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Output compare event */
3279:HALLIB/Src/stm32f4xx_hal_tim.c ****       else
3280:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3281:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccVHe0ZY.s 			page 59


3282:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_DelayElapsedCallback(htim);
3283:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_PulseFinishedCallback(htim);
3284:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3285:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_OC_DelayElapsedCallback(htim);
3286:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
3287:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3288:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3289:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3290:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3291:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3292:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* TIM Update event */
3293:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
3294:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3295:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
3296:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3297:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
3298:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3299:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->PeriodElapsedCallback(htim);
3300:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3301:HALLIB/Src/stm32f4xx_hal_tim.c ****       HAL_TIM_PeriodElapsedCallback(htim);
3302:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3303:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3304:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3305:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* TIM Break input event */
3306:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
3307:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3308:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
3309:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3310:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
3311:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3312:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->BreakCallback(htim);
3313:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3314:HALLIB/Src/stm32f4xx_hal_tim.c ****       HAL_TIMEx_BreakCallback(htim);
3315:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3316:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3317:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3318:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* TIM Trigger detection event */
3319:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
3320:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3321:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
3322:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3323:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
3324:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3325:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->TriggerCallback(htim);
3326:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3327:HALLIB/Src/stm32f4xx_hal_tim.c ****       HAL_TIM_TriggerCallback(htim);
3328:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3329:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3330:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3331:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* TIM commutation event */
3332:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
3333:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3334:HALLIB/Src/stm32f4xx_hal_tim.c ****     if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
3335:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3336:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
3337:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
3338:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->CommutationCallback(htim);
ARM GAS  /tmp/ccVHe0ZY.s 			page 60


3339:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
3340:HALLIB/Src/stm32f4xx_hal_tim.c ****       HAL_TIMEx_CommutCallback(htim);
3341:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
3342:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3343:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3344:HALLIB/Src/stm32f4xx_hal_tim.c **** }
3345:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3346:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3347:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
3348:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3349:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3350:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group8 TIM Peripheral Control functions
3351:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    TIM Peripheral Control functions
3352:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
3353:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
3354:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
3355:HALLIB/Src/stm32f4xx_hal_tim.c ****                    ##### Peripheral Control functions #####
3356:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
3357:HALLIB/Src/stm32f4xx_hal_tim.c ****  [..]
3358:HALLIB/Src/stm32f4xx_hal_tim.c ****    This section provides functions allowing to:
3359:HALLIB/Src/stm32f4xx_hal_tim.c ****       (+) Configure The Input Output channels for OC, PWM, IC or One Pulse mode.
3360:HALLIB/Src/stm32f4xx_hal_tim.c ****       (+) Configure External Clock source.
3361:HALLIB/Src/stm32f4xx_hal_tim.c ****       (+) Configure Complementary channels, break features and dead time.
3362:HALLIB/Src/stm32f4xx_hal_tim.c ****       (+) Configure Master and the Slave synchronization.
3363:HALLIB/Src/stm32f4xx_hal_tim.c ****       (+) Configure the DMA Burst Mode.
3364:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3365:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
3366:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
3367:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3368:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3369:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3370:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Output Compare Channels according to the specified
3371:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_OC_InitTypeDef.
3372:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
3373:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sConfig TIM Output Compare configuration structure
3374:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to configure
3375:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
3376:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3377:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3378:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
3379:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
3380:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
3381:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3382:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
3383:HALLIB/Src/stm32f4xx_hal_tim.c ****                                            TIM_OC_InitTypeDef *sConfig,
3384:HALLIB/Src/stm32f4xx_hal_tim.c ****                                            uint32_t Channel)
3385:HALLIB/Src/stm32f4xx_hal_tim.c **** {
3386:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
3387:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CHANNELS(Channel));
3388:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
3389:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
3390:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3391:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Process Locked */
3392:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
3393:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3394:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
3395:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 61


3396:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
3397:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3398:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
3399:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3400:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
3401:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3402:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3403:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the TIM Channel 1 in Output Compare */
3404:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_OC1_SetConfig(htim->Instance, sConfig);
3405:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3406:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3407:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3408:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
3409:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3410:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
3411:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3412:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3413:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the TIM Channel 2 in Output Compare */
3414:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_OC2_SetConfig(htim->Instance, sConfig);
3415:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3416:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3417:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3418:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
3419:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3420:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
3421:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
3422:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3423:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the TIM Channel 3 in Output Compare */
3424:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_OC3_SetConfig(htim->Instance, sConfig);
3425:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3426:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3427:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3428:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
3429:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3430:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
3431:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
3432:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3433:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the TIM Channel 4 in Output Compare */
3434:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_OC4_SetConfig(htim->Instance, sConfig);
3435:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3436:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3437:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3438:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
3439:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3440:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3441:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3442:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3443:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3444:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
3445:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3446:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
3447:HALLIB/Src/stm32f4xx_hal_tim.c **** }
3448:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3449:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3450:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM Input Capture Channels according to the specified
3451:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_IC_InitTypeDef.
3452:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM IC handle
ARM GAS  /tmp/ccVHe0ZY.s 			page 62


3453:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sConfig TIM Input Capture configuration structure
3454:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channel to configure
3455:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
3456:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3457:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3458:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
3459:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
3460:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
3461:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3462:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, ui
3463:HALLIB/Src/stm32f4xx_hal_tim.c **** {
3464:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
3465:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3466:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
3467:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
3468:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
3469:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
3470:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3471:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Process Locked */
3472:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
3473:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3474:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
3475:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3476:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (Channel == TIM_CHANNEL_1)
3477:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3478:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* TI1 Configuration */
3479:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_TI1_SetConfig(htim->Instance,
3480:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICPolarity,
3481:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICSelection,
3482:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICFilter);
3483:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3484:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the IC1PSC Bits */
3485:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
3486:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3487:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the IC1PSC value */
3488:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Instance->CCMR1 |= sConfig->ICPrescaler;
3489:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3490:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (Channel == TIM_CHANNEL_2)
3491:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3492:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* TI2 Configuration */
3493:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3494:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3495:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_TI2_SetConfig(htim->Instance,
3496:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICPolarity,
3497:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICSelection,
3498:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICFilter);
3499:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3500:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the IC2PSC Bits */
3501:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
3502:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3503:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the IC2PSC value */
3504:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
3505:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3506:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (Channel == TIM_CHANNEL_3)
3507:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3508:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* TI3 Configuration */
3509:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
ARM GAS  /tmp/ccVHe0ZY.s 			page 63


3510:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3511:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_TI3_SetConfig(htim->Instance,
3512:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICPolarity,
3513:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICSelection,
3514:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICFilter);
3515:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3516:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the IC3PSC Bits */
3517:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
3518:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3519:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the IC3PSC value */
3520:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Instance->CCMR2 |= sConfig->ICPrescaler;
3521:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3522:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
3523:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3524:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* TI4 Configuration */
3525:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
3526:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3527:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_TI4_SetConfig(htim->Instance,
3528:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICPolarity,
3529:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICSelection,
3530:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICFilter);
3531:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3532:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the IC4PSC Bits */
3533:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
3534:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3535:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the IC4PSC value */
3536:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
3537:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3538:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3539:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3540:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3541:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
3542:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3543:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
3544:HALLIB/Src/stm32f4xx_hal_tim.c **** }
3545:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3546:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3547:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM PWM  channels according to the specified
3548:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_OC_InitTypeDef.
3549:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM PWM handle
3550:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sConfig TIM PWM configuration structure
3551:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be configured
3552:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
3553:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3554:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3555:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
3556:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
3557:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
3558:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3559:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
3560:HALLIB/Src/stm32f4xx_hal_tim.c ****                                             TIM_OC_InitTypeDef *sConfig,
3561:HALLIB/Src/stm32f4xx_hal_tim.c ****                                             uint32_t Channel)
3562:HALLIB/Src/stm32f4xx_hal_tim.c **** {
3563:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
3564:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CHANNELS(Channel));
3565:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
3566:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
ARM GAS  /tmp/ccVHe0ZY.s 			page 64


3567:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
3568:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3569:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Process Locked */
3570:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
3571:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3572:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
3573:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3574:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
3575:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3576:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
3577:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3578:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
3579:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3580:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3581:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the Channel 1 in PWM mode */
3582:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_OC1_SetConfig(htim->Instance, sConfig);
3583:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3584:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the Preload enable bit for channel1 */
3585:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
3586:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3587:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the Output Fast mode */
3588:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
3589:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 |= sConfig->OCFastMode;
3590:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3591:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3592:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3593:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
3594:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3595:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
3596:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3597:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3598:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the Channel 2 in PWM mode */
3599:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_OC2_SetConfig(htim->Instance, sConfig);
3600:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3601:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the Preload enable bit for channel2 */
3602:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
3603:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3604:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the Output Fast mode */
3605:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
3606:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
3607:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3608:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3609:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3610:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
3611:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3612:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
3613:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
3614:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3615:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the Channel 3 in PWM mode */
3616:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_OC3_SetConfig(htim->Instance, sConfig);
3617:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3618:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the Preload enable bit for channel3 */
3619:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
3620:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3621:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the Output Fast mode */
3622:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
3623:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR2 |= sConfig->OCFastMode;
ARM GAS  /tmp/ccVHe0ZY.s 			page 65


3624:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3625:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3626:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3627:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
3628:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3629:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
3630:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
3631:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3632:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the Channel 4 in PWM mode */
3633:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_OC4_SetConfig(htim->Instance, sConfig);
3634:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3635:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the Preload enable bit for channel4 */
3636:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
3637:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3638:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the Output Fast mode */
3639:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
3640:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
3641:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3642:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3643:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3644:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
3645:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3646:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3647:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3648:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3649:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3650:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
3651:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3652:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
3653:HALLIB/Src/stm32f4xx_hal_tim.c **** }
3654:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3655:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3656:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Initializes the TIM One Pulse Channels according to the specified
3657:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         parameters in the TIM_OnePulse_InitTypeDef.
3658:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM One Pulse handle
3659:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sConfig TIM One Pulse configuration structure
3660:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OutputChannel TIM output channel to configure
3661:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
3662:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3663:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3664:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  InputChannel TIM input Channel to configure
3665:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
3666:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
3667:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
3668:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note  To output a waveform with a minimum delay user can enable the fast
3669:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        mode by calling the @ref __HAL_TIM_ENABLE_OCxFAST macro. Then CCx
3670:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        output is forced in response to the edge detection on TIx input,
3671:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        without taking in account the comparison.
3672:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
3673:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3674:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef
3675:HALLIB/Src/stm32f4xx_hal_tim.c ****                                                  uint32_t OutputChannel,  uint32_t InputChannel)
3676:HALLIB/Src/stm32f4xx_hal_tim.c **** {
3677:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_OC_InitTypeDef temp1;
3678:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3679:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
3680:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
ARM GAS  /tmp/ccVHe0ZY.s 			page 66


3681:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_OPM_CHANNELS(InputChannel));
3682:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3683:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (OutputChannel != InputChannel)
3684:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3685:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Process Locked */
3686:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_LOCK(htim);
3687:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3688:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->State = HAL_TIM_STATE_BUSY;
3689:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3690:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Extract the Output compare configuration from sConfig structure */
3691:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCMode = sConfig->OCMode;
3692:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.Pulse = sConfig->Pulse;
3693:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCPolarity = sConfig->OCPolarity;
3694:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCNPolarity = sConfig->OCNPolarity;
3695:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCIdleState = sConfig->OCIdleState;
3696:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCNIdleState = sConfig->OCNIdleState;
3697:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3698:HALLIB/Src/stm32f4xx_hal_tim.c ****     switch (OutputChannel)
3699:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3700:HALLIB/Src/stm32f4xx_hal_tim.c ****       case TIM_CHANNEL_1:
3701:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3702:HALLIB/Src/stm32f4xx_hal_tim.c ****         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3703:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3704:HALLIB/Src/stm32f4xx_hal_tim.c ****         TIM_OC1_SetConfig(htim->Instance, &temp1);
3705:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
3706:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3707:HALLIB/Src/stm32f4xx_hal_tim.c ****       case TIM_CHANNEL_2:
3708:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3709:HALLIB/Src/stm32f4xx_hal_tim.c ****         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3710:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3711:HALLIB/Src/stm32f4xx_hal_tim.c ****         TIM_OC2_SetConfig(htim->Instance, &temp1);
3712:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
3713:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3714:HALLIB/Src/stm32f4xx_hal_tim.c ****       default:
3715:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
3716:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3717:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3718:HALLIB/Src/stm32f4xx_hal_tim.c ****     switch (InputChannel)
3719:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3720:HALLIB/Src/stm32f4xx_hal_tim.c ****       case TIM_CHANNEL_1:
3721:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3722:HALLIB/Src/stm32f4xx_hal_tim.c ****         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
3723:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3724:HALLIB/Src/stm32f4xx_hal_tim.c ****         TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
3725:HALLIB/Src/stm32f4xx_hal_tim.c ****                           sConfig->ICSelection, sConfig->ICFilter);
3726:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3727:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Reset the IC1PSC Bits */
3728:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
3729:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3730:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Select the Trigger source */
3731:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR &= ~TIM_SMCR_TS;
3732:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_TS_TI1FP1;
3733:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3734:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Select the Slave Mode */
3735:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR &= ~TIM_SMCR_SMS;
3736:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
3737:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
ARM GAS  /tmp/ccVHe0ZY.s 			page 67


3738:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3739:HALLIB/Src/stm32f4xx_hal_tim.c ****       case TIM_CHANNEL_2:
3740:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3741:HALLIB/Src/stm32f4xx_hal_tim.c ****         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
3742:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3743:HALLIB/Src/stm32f4xx_hal_tim.c ****         TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
3744:HALLIB/Src/stm32f4xx_hal_tim.c ****                           sConfig->ICSelection, sConfig->ICFilter);
3745:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3746:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Reset the IC2PSC Bits */
3747:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
3748:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3749:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Select the Trigger source */
3750:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR &= ~TIM_SMCR_TS;
3751:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_TS_TI2FP2;
3752:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3753:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Select the Slave Mode */
3754:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR &= ~TIM_SMCR_SMS;
3755:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
3756:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
3757:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3758:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3759:HALLIB/Src/stm32f4xx_hal_tim.c ****       default:
3760:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
3761:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3762:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3763:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->State = HAL_TIM_STATE_READY;
3764:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3765:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_UNLOCK(htim);
3766:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3767:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_OK;
3768:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3769:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
3770:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3771:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
3772:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3773:HALLIB/Src/stm32f4xx_hal_tim.c **** }
3774:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3775:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3776:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configure the DMA Burst to transfer Data from the memory to the TIM peripheral
3777:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
3778:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstBaseAddress TIM Base address from where the DMA  will start the Data write
3779:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         This parameter can be one of the following values:
3780:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CR1
3781:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CR2
3782:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_SMCR
3783:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_DIER
3784:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_SR
3785:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_EGR
3786:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCMR1
3787:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCMR2
3788:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCER
3789:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CNT
3790:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_PSC
3791:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_ARR
3792:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_RCR
3793:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR1
3794:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR2
ARM GAS  /tmp/ccVHe0ZY.s 			page 68


3795:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR3
3796:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR4
3797:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_BDTR
3798:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstRequestSrc TIM DMA Request sources
3799:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         This parameter can be one of the following values:
3800:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_UPDATE: TIM update Interrupt source
3801:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
3802:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
3803:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
3804:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
3805:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
3806:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_TRIGGER: TIM Trigger DMA source
3807:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstBuffer The Buffer address.
3808:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstLength DMA Burst length. This parameter can be one value
3809:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         between: TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
3810:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   This function should be used only when BurstLength is equal to DMA data transfer length
3811:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
3812:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3813:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, u
3814:HALLIB/Src/stm32f4xx_hal_tim.c ****                                               uint32_t *BurstBuffer, uint32_t  BurstLength)
3815:HALLIB/Src/stm32f4xx_hal_tim.c **** {
3816:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
3817:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
3818:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
3819:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
3820:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(BurstLength));
3821:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3822:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_BUSY)
3823:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3824:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_BUSY;
3825:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3826:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_READY)
3827:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3828:HALLIB/Src/stm32f4xx_hal_tim.c ****     if ((BurstBuffer == NULL) && (BurstLength > 0U))
3829:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3830:HALLIB/Src/stm32f4xx_hal_tim.c ****       return HAL_ERROR;
3831:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3832:HALLIB/Src/stm32f4xx_hal_tim.c ****     else
3833:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3834:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
3835:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3836:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3837:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
3838:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3839:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
3840:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3841:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (BurstRequestSrc)
3842:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3843:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_UPDATE:
3844:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3845:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA Period elapsed callbacks */
3846:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
3847:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
3848:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3849:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3850:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
3851:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 69


3852:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3853:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->I
3854:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3855:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3856:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3857:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3858:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3859:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC1:
3860:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3861:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
3862:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
3863:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
3864:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3865:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3866:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
3867:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3868:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3869:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
3870:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
3871:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3872:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3873:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3874:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3875:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3876:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC2:
3877:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3878:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
3879:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
3880:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
3881:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3882:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3883:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
3884:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3885:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3886:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
3887:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
3888:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3889:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3890:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3891:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3892:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3893:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC3:
3894:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3895:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
3896:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
3897:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
3898:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3899:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3900:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
3901:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3902:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3903:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
3904:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
3905:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3906:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3907:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3908:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
ARM GAS  /tmp/ccVHe0ZY.s 			page 70


3909:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3910:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC4:
3911:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3912:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA compare callbacks */
3913:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
3914:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
3915:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3916:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3917:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
3918:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3919:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3920:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
3921:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
3922:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3923:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3924:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3925:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3926:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3927:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_COM:
3928:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3929:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA commutation callbacks */
3930:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
3931:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
3932:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3933:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3934:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
3935:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3936:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3937:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
3938:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
3939:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3940:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3941:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3942:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3943:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3944:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
3945:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3946:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA trigger callbacks */
3947:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
3948:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
3949:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3950:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
3951:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
3952:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3953:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
3954:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
3955:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
3956:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
3957:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
3958:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
3959:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3960:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3961:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
3962:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3963:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
3964:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* configure the DMA Burst Mode */
3965:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->DCR = (BurstBaseAddress | BurstLength);
ARM GAS  /tmp/ccVHe0ZY.s 			page 71


3966:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3967:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the TIM DMA Request */
3968:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
3969:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3970:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
3971:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3972:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
3973:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
3974:HALLIB/Src/stm32f4xx_hal_tim.c **** }
3975:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3976:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
3977:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stops the TIM DMA Burst mode
3978:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
3979:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstRequestSrc TIM DMA Request sources to disable
3980:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
3981:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
3982:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
3983:HALLIB/Src/stm32f4xx_hal_tim.c **** {
3984:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_StatusTypeDef status = HAL_OK;
3985:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
3986:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
3987:HALLIB/Src/stm32f4xx_hal_tim.c **** 
3988:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Abort the DMA transfer (at least disable the DMA stream) */
3989:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (BurstRequestSrc)
3990:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
3991:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_UPDATE:
3992:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3993:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
3994:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
3995:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
3996:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC1:
3997:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
3998:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
3999:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4000:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4001:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC2:
4002:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4003:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
4004:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4005:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4006:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC3:
4007:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4008:HALLIB/Src/stm32f4xx_hal_tim.c ****       status =  HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
4009:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4010:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4011:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC4:
4012:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4013:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
4014:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4015:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4016:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_COM:
4017:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4018:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
4019:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4020:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4021:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
4022:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
ARM GAS  /tmp/ccVHe0ZY.s 			page 72


4023:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
4024:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4025:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4026:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
4027:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4028:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4029:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4030:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (HAL_OK == status)
4031:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4032:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the TIM Update DMA request */
4033:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
4034:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4035:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4036:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
4037:HALLIB/Src/stm32f4xx_hal_tim.c ****   return status;
4038:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4039:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4040:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4041:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configure the DMA Burst to transfer Data from the TIM peripheral to the memory
4042:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4043:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstBaseAddress TIM Base address from where the DMA  will start the Data read
4044:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         This parameter can be one of the following values:
4045:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CR1
4046:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CR2
4047:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_SMCR
4048:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_DIER
4049:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_SR
4050:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_EGR
4051:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCMR1
4052:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCMR2
4053:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCER
4054:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CNT
4055:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_PSC
4056:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_ARR
4057:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_RCR
4058:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR1
4059:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR2
4060:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR3
4061:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_CCR4
4062:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMABASE_BDTR
4063:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstRequestSrc TIM DMA Request sources
4064:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         This parameter can be one of the following values:
4065:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_UPDATE: TIM update Interrupt source
4066:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
4067:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
4068:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
4069:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
4070:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
4071:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_DMA_TRIGGER: TIM Trigger DMA source
4072:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstBuffer The Buffer address.
4073:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstLength DMA Burst length. This parameter can be one value
4074:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         between: TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
4075:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   This function should be used only when BurstLength is equal to DMA data transfer length
4076:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
4077:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4078:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
4079:HALLIB/Src/stm32f4xx_hal_tim.c ****                                              uint32_t BurstRequestSrc, uint32_t  *BurstBuffer, uint
ARM GAS  /tmp/ccVHe0ZY.s 			page 73


4080:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4081:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
4082:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
4083:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
4084:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
4085:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(BurstLength));
4086:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4087:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_BUSY)
4088:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4089:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_BUSY;
4090:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4091:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_READY)
4092:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4093:HALLIB/Src/stm32f4xx_hal_tim.c ****     if ((BurstBuffer == NULL) && (BurstLength > 0U))
4094:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4095:HALLIB/Src/stm32f4xx_hal_tim.c ****       return HAL_ERROR;
4096:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4097:HALLIB/Src/stm32f4xx_hal_tim.c ****     else
4098:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4099:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->State = HAL_TIM_STATE_BUSY;
4100:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4101:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4102:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
4103:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4104:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
4105:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4106:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (BurstRequestSrc)
4107:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4108:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_UPDATE:
4109:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4110:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA Period elapsed callbacks */
4111:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
4112:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
4113:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4114:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
4115:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
4116:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4117:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
4118:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_
4119:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4120:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
4121:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4122:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4123:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4124:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC1:
4125:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4126:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
4127:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
4128:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
4129:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4130:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
4131:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
4132:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4133:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
4134:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)B
4135:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4136:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
ARM GAS  /tmp/ccVHe0ZY.s 			page 74


4137:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4138:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4139:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4140:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC2:
4141:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4142:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture/compare callbacks */
4143:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
4144:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
4145:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4146:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
4147:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
4148:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4149:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
4150:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)B
4151:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4152:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
4153:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4154:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4155:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4156:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC3:
4157:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4158:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
4159:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
4160:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
4161:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4162:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
4163:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
4164:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4165:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
4166:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)B
4167:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4168:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
4169:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4170:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4171:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4172:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC4:
4173:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4174:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA capture callbacks */
4175:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
4176:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
4177:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4178:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
4179:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
4180:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4181:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
4182:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)B
4183:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4184:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
4185:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4186:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4187:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4188:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_COM:
4189:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4190:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA commutation callbacks */
4191:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
4192:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
4193:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 75


4194:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
4195:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
4196:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4197:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
4198:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (ui
4199:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4200:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
4201:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4202:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4203:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4204:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
4205:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4206:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA trigger callbacks */
4207:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
4208:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
4209:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4210:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the DMA error callback */
4211:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
4212:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4213:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
4214:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32
4215:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4216:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
4217:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4218:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4219:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4220:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
4221:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4222:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4223:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4224:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* configure the DMA Burst Mode */
4225:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->DCR = (BurstBaseAddress | BurstLength);
4226:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4227:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable the TIM DMA Request */
4228:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
4229:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4230:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4231:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4232:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
4233:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
4234:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4235:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4236:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4237:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Stop the DMA burst reading
4238:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4239:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  BurstRequestSrc TIM DMA Request sources to disable.
4240:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
4241:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4242:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
4243:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4244:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_StatusTypeDef status = HAL_OK;
4245:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
4246:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
4247:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4248:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Abort the DMA transfer (at least disable the DMA stream) */
4249:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (BurstRequestSrc)
4250:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
ARM GAS  /tmp/ccVHe0ZY.s 			page 76


4251:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_UPDATE:
4252:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4253:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
4254:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4255:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4256:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC1:
4257:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4258:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
4259:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4260:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4261:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC2:
4262:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4263:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
4264:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4265:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4266:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC3:
4267:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4268:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
4269:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4270:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4271:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_CC4:
4272:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4273:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
4274:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4275:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4276:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_COM:
4277:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4278:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
4279:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4280:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4281:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_DMA_TRIGGER:
4282:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4283:HALLIB/Src/stm32f4xx_hal_tim.c ****       status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
4284:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4285:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4286:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
4287:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4288:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4289:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4290:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (HAL_OK == status)
4291:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4292:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Disable the TIM Update DMA request */
4293:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
4294:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4295:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4296:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
4297:HALLIB/Src/stm32f4xx_hal_tim.c ****   return status;
4298:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4299:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4300:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4301:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Generate a software event
4302:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4303:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  EventSource specifies the event source.
4304:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
4305:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_UPDATE: Timer update Event source
4306:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_CC1: Timer Capture Compare 1 Event source
4307:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_CC2: Timer Capture Compare 2 Event source
ARM GAS  /tmp/ccVHe0ZY.s 			page 77


4308:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_CC3: Timer Capture Compare 3 Event source
4309:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_CC4: Timer Capture Compare 4 Event source
4310:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_COM: Timer COM event source
4311:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_TRIGGER: Timer Trigger Event source
4312:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_EVENTSOURCE_BREAK: Timer Break event source
4313:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   Basic timers can only generate an update event.
4314:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   TIM_EVENTSOURCE_COM is relevant only with advanced timer instances.
4315:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note   TIM_EVENTSOURCE_BREAK are relevant only for timer instances
4316:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         supporting a break input.
4317:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
4318:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4319:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4320:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
4321:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4322:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
4323:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_INSTANCE(htim->Instance));
4324:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(EventSource));
4325:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4326:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Process Locked */
4327:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
4328:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4329:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the TIM state */
4330:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4331:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4332:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the event sources */
4333:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->EGR = EventSource;
4334:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4335:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Change the TIM state */
4336:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4337:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4338:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4339:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4340:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Return function status */
4341:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
4342:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4343:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4344:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4345:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configures the OCRef clear feature
4346:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4347:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sClearInputConfig pointer to a TIM_ClearInputConfigTypeDef structure that
4348:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         contains the OCREF clear feature and parameters for the TIM peripheral.
4349:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel specifies the TIM Channel
4350:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
4351:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1
4352:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2
4353:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3
4354:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4
4355:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
4356:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4357:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
4358:HALLIB/Src/stm32f4xx_hal_tim.c ****                                            TIM_ClearInputConfigTypeDef *sClearInputConfig,
4359:HALLIB/Src/stm32f4xx_hal_tim.c ****                                            uint32_t Channel)
4360:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4361:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
4362:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
4363:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
4364:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 78


4365:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Process Locked */
4366:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
4367:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4368:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4369:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4370:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (sClearInputConfig->ClearInputSource)
4371:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4372:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLEARINPUTSOURCE_NONE:
4373:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4374:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Clear the OCREF clear selection bit and the the ETR Bits */
4375:HALLIB/Src/stm32f4xx_hal_tim.c ****       CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP))
4376:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4377:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4378:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4379:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLEARINPUTSOURCE_ETR:
4380:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4381:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
4382:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
4383:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
4384:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
4385:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4386:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
4387:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
4388:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4389:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->State = HAL_TIM_STATE_READY;
4390:HALLIB/Src/stm32f4xx_hal_tim.c ****         __HAL_UNLOCK(htim);
4391:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
4392:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4393:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4394:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_ETR_SetConfig(htim->Instance,
4395:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClearInputConfig->ClearInputPrescaler,
4396:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClearInputConfig->ClearInputPolarity,
4397:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClearInputConfig->ClearInputFilter);
4398:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4399:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4400:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4401:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
4402:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4403:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4404:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4405:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
4406:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4407:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
4408:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4409:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
4410:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4411:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Enable the OCREF clear feature for Channel 1 */
4412:HALLIB/Src/stm32f4xx_hal_tim.c ****         SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
4413:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4414:HALLIB/Src/stm32f4xx_hal_tim.c ****       else
4415:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4416:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Disable the OCREF clear feature for Channel 1 */
4417:HALLIB/Src/stm32f4xx_hal_tim.c ****         CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
4418:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4419:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4420:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4421:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
ARM GAS  /tmp/ccVHe0ZY.s 			page 79


4422:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4423:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
4424:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4425:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Enable the OCREF clear feature for Channel 2 */
4426:HALLIB/Src/stm32f4xx_hal_tim.c ****         SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
4427:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4428:HALLIB/Src/stm32f4xx_hal_tim.c ****       else
4429:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4430:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Disable the OCREF clear feature for Channel 2 */
4431:HALLIB/Src/stm32f4xx_hal_tim.c ****         CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
4432:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4433:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4434:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4435:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
4436:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4437:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
4438:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4439:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Enable the OCREF clear feature for Channel 3 */
4440:HALLIB/Src/stm32f4xx_hal_tim.c ****         SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
4441:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4442:HALLIB/Src/stm32f4xx_hal_tim.c ****       else
4443:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4444:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Disable the OCREF clear feature for Channel 3 */
4445:HALLIB/Src/stm32f4xx_hal_tim.c ****         CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
4446:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4447:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4448:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4449:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
4450:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4451:HALLIB/Src/stm32f4xx_hal_tim.c ****       if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
4452:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4453:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Enable the OCREF clear feature for Channel 4 */
4454:HALLIB/Src/stm32f4xx_hal_tim.c ****         SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
4455:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4456:HALLIB/Src/stm32f4xx_hal_tim.c ****       else
4457:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
4458:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Disable the OCREF clear feature for Channel 4 */
4459:HALLIB/Src/stm32f4xx_hal_tim.c ****         CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
4460:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
4461:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4462:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4463:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
4464:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4465:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4466:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4467:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4468:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4469:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4470:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4471:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
4472:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4473:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4474:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4475:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief   Configures the clock source to be used
4476:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4477:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
4478:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         contains the clock source information for the TIM peripheral.
ARM GAS  /tmp/ccVHe0ZY.s 			page 80


4479:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
4480:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4481:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClock
4482:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4483:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
4484:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4485:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Process Locked */
4486:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
4487:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4488:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4489:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4490:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
4491:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
4492:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4493:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
4494:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR;
4495:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
4496:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
4497:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
4498:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4499:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (sClockSourceConfig->ClockSource)
4500:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4501:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_INTERNAL:
4502:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4503:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_INSTANCE(htim->Instance));
4504:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4505:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4506:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4507:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ETRMODE1:
4508:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4509:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
4510:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
4511:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4512:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check ETR input conditioning related parameters */
4513:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
4514:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4515:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4516:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4517:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the ETR Clock source */
4518:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_ETR_SetConfig(htim->Instance,
4519:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClockSourceConfig->ClockPrescaler,
4520:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity,
4521:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClockSourceConfig->ClockFilter);
4522:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4523:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Select the External clock mode1 and the ETRF trigger */
4524:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpsmcr = htim->Instance->SMCR;
4525:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
4526:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Write to TIMx SMCR */
4527:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->SMCR = tmpsmcr;
4528:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4529:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4530:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4531:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ETRMODE2:
4532:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4533:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
4534:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
4535:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 81


4536:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check ETR input conditioning related parameters */
4537:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
4538:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4539:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4540:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4541:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the ETR Clock source */
4542:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_ETR_SetConfig(htim->Instance,
4543:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClockSourceConfig->ClockPrescaler,
4544:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClockSourceConfig->ClockPolarity,
4545:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClockSourceConfig->ClockFilter);
4546:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the External clock mode2 */
4547:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->SMCR |= TIM_SMCR_ECE;
4548:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4549:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4550:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4551:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_TI1:
4552:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4553:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check whether or not the timer instance supports external clock mode 1 */
4554:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
4555:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4556:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check TI1 input conditioning related parameters */
4557:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4558:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4559:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4560:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_TI1_ConfigInputStage(htim->Instance,
4561:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockPolarity,
4562:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockFilter);
4563:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
4564:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4565:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4566:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4567:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_TI2:
4568:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4569:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
4570:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
4571:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4572:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check TI2 input conditioning related parameters */
4573:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4574:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4575:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4576:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_TI2_ConfigInputStage(htim->Instance,
4577:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockPolarity,
4578:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockFilter);
4579:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
4580:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4581:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4582:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4583:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_TI1ED:
4584:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4585:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check whether or not the timer instance supports external clock mode 1 */
4586:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
4587:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4588:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check TI1 input conditioning related parameters */
4589:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
4590:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
4591:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4592:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_TI1_ConfigInputStage(htim->Instance,
ARM GAS  /tmp/ccVHe0ZY.s 			page 82


4593:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockPolarity,
4594:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockFilter);
4595:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
4596:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4597:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4598:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4599:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR0:
4600:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR1:
4601:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR2:
4602:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CLOCKSOURCE_ITR3:
4603:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4604:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check whether or not the timer instance supports internal trigger input */
4605:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
4606:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4607:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
4608:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4609:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4610:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4611:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
4612:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4613:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4614:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4615:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4616:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4617:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4618:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
4619:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4620:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4621:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4622:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Selects the signal connected to the TI1 input: direct from CH1_input
4623:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         or a XOR combination between CH1_input, CH2_input & CH3_input
4624:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle.
4625:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TI1_Selection Indicate whether or not channel 1 is connected to the
4626:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         output of a XOR gate.
4627:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
4628:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TI1SELECTION_CH1: The TIMx_CH1 pin is connected to TI1 input
4629:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
4630:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            pins are connected to the TI1 input (XOR combination)
4631:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
4632:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4633:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
4634:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4635:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpcr2;
4636:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4637:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
4638:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
4639:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_TI1SELECTION(TI1_Selection));
4640:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4641:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
4642:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpcr2 = htim->Instance->CR2;
4643:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4644:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the TI1 selection */
4645:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpcr2 &= ~TIM_CR2_TI1S;
4646:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4647:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the TI1 selection */
4648:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpcr2 |= TI1_Selection;
4649:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 83


4650:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMxCR2 */
4651:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->CR2 = tmpcr2;
4652:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4653:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
4654:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4655:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4656:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4657:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configures the TIM in Slave mode
4658:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle.
4659:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sSlaveConfig pointer to a TIM_SlaveConfigTypeDef structure that
4660:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         contains the selected trigger (internal trigger input, filtered
4661:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         timer input or external trigger input) and the Slave mode
4662:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         (Disable, Reset, Gated, Trigger, External clock mode 1).
4663:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
4664:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4665:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlav
4666:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4667:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
4668:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
4669:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
4670:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
4671:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4672:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
4673:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4674:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4675:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4676:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
4677:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4678:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->State = HAL_TIM_STATE_READY;
4679:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_UNLOCK(htim);
4680:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
4681:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4682:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4683:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable Trigger Interrupt */
4684:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
4685:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4686:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable Trigger DMA request */
4687:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
4688:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4689:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4690:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4691:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4692:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4693:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
4694:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4695:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4696:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4697:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configures the TIM in Slave mode in interrupt mode
4698:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle.
4699:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sSlaveConfig pointer to a TIM_SlaveConfigTypeDef structure that
4700:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         contains the selected trigger (internal trigger input, filtered
4701:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         timer input or external trigger input) and the Slave mode
4702:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         (Disable, Reset, Gated, Trigger, External clock mode 1).
4703:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL status
4704:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4705:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
4706:HALLIB/Src/stm32f4xx_hal_tim.c ****                                                 TIM_SlaveConfigTypeDef *sSlaveConfig)
ARM GAS  /tmp/ccVHe0ZY.s 			page 84


4707:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4708:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
4709:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
4710:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
4711:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
4712:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4713:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
4714:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4715:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_BUSY;
4716:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4717:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
4718:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4719:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->State = HAL_TIM_STATE_READY;
4720:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_UNLOCK(htim);
4721:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
4722:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4723:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4724:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Enable Trigger Interrupt */
4725:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
4726:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4727:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable Trigger DMA request */
4728:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
4729:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4730:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
4731:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4732:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
4733:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4734:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
4735:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4736:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4737:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4738:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Read the captured value from Capture Compare unit
4739:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle.
4740:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel TIM Channels to be enabled
4741:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
4742:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
4743:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
4744:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
4745:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
4746:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval Captured value
4747:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4748:HALLIB/Src/stm32f4xx_hal_tim.c **** uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
4749:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4750:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpreg = 0U;
4751:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4752:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (Channel)
4753:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
4754:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_1:
4755:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4756:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
4757:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
4758:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4759:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Return the capture 1 value */
4760:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpreg =  htim->Instance->CCR1;
4761:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4762:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4763:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
ARM GAS  /tmp/ccVHe0ZY.s 			page 85


4764:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_2:
4765:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4766:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
4767:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
4768:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4769:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Return the capture 2 value */
4770:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpreg =   htim->Instance->CCR2;
4771:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4772:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4773:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4774:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4775:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_3:
4776:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4777:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
4778:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
4779:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4780:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Return the capture 3 value */
4781:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpreg =   htim->Instance->CCR3;
4782:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4783:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4784:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4785:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4786:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_CHANNEL_4:
4787:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
4788:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
4789:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
4790:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4791:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Return the capture 4 value */
4792:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpreg =   htim->Instance->CCR4;
4793:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4794:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4795:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
4796:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4797:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
4798:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
4799:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
4800:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4801:HALLIB/Src/stm32f4xx_hal_tim.c ****   return tmpreg;
4802:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4803:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4804:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4805:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
4806:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4807:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4808:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group9 TIM Callbacks functions
4809:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief    TIM Callbacks functions
4810:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
4811:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
4812:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
4813:HALLIB/Src/stm32f4xx_hal_tim.c ****                         ##### TIM Callbacks functions #####
4814:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
4815:HALLIB/Src/stm32f4xx_hal_tim.c ****  [..]
4816:HALLIB/Src/stm32f4xx_hal_tim.c ****    This section provides TIM callback functions:
4817:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) TIM Period elapsed callback
4818:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) TIM Output Compare callback
4819:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) TIM Input capture callback
4820:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) TIM Trigger callback
ARM GAS  /tmp/ccVHe0ZY.s 			page 86


4821:HALLIB/Src/stm32f4xx_hal_tim.c ****    (+) TIM Error callback
4822:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4823:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
4824:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
4825:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4826:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4827:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4828:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Period elapsed callback in non-blocking mode
4829:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4830:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4831:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4832:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
4833:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4834:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4835:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4836:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4837:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4838:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
4839:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4840:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4841:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4842:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4843:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Period elapsed half complete callback in non-blocking mode
4844:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4845:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4846:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4847:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
4848:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4849:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4850:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4851:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4852:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4853:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
4854:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4855:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4856:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4857:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4858:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Output Compare callback in non-blocking mode
4859:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM OC handle
4860:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4861:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4862:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
4863:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4864:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4865:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4866:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4867:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4868:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
4869:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4870:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4871:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4872:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4873:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Input Capture callback in non-blocking mode
4874:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM IC handle
4875:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4876:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4877:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
ARM GAS  /tmp/ccVHe0ZY.s 			page 87


4878:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4879:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4880:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4881:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4882:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4883:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_IC_CaptureCallback could be implemented in the user file
4884:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4885:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4886:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4887:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4888:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Input Capture half complete callback in non-blocking mode
4889:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM IC handle
4890:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4891:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4892:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
4893:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4894:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4895:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4896:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4897:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4898:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
4899:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4900:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4901:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4902:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4903:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  PWM Pulse finished callback in non-blocking mode
4904:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4905:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4906:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4907:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
4908:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4909:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4910:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4911:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4912:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4913:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
4914:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4915:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4916:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4917:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4918:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  PWM Pulse finished half complete callback in non-blocking mode
4919:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4920:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4921:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4922:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
4923:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4924:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4925:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4926:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4927:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4928:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
4929:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4930:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4931:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4932:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4933:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Hall Trigger detection callback in non-blocking mode
4934:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
ARM GAS  /tmp/ccVHe0ZY.s 			page 88


4935:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4936:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4937:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
4938:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4939:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4940:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4941:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4942:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4943:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_TriggerCallback could be implemented in the user file
4944:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4945:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4946:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4947:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4948:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Hall Trigger detection half complete callback in non-blocking mode
4949:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4950:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4951:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4952:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
4953:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4954:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4955:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4956:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4957:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4958:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
4959:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4960:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4961:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4962:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4963:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Timer error callback in non-blocking mode
4964:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
4965:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
4966:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
4967:HALLIB/Src/stm32f4xx_hal_tim.c **** __weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
4968:HALLIB/Src/stm32f4xx_hal_tim.c **** {
4969:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
4970:HALLIB/Src/stm32f4xx_hal_tim.c ****   UNUSED(htim);
4971:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4972:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* NOTE : This function should not be modified, when the callback is needed,
4973:HALLIB/Src/stm32f4xx_hal_tim.c ****             the HAL_TIM_ErrorCallback could be implemented in the user file
4974:HALLIB/Src/stm32f4xx_hal_tim.c ****    */
4975:HALLIB/Src/stm32f4xx_hal_tim.c **** }
4976:HALLIB/Src/stm32f4xx_hal_tim.c **** 
4977:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
4978:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
4979:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Register a User TIM callback to be used instead of the weak predefined callback
4980:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param htim tim handle
4981:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param CallbackID ID of the callback to be registered
4982:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        This parameter can be one of the following values:
4983:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BASE_MSPINIT_CB_ID Base MspInit Callback ID
4984:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BASE_MSPDEINIT_CB_ID Base MspDeInit Callback ID
4985:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_MSPINIT_CB_ID IC MspInit Callback ID
4986:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_MSPDEINIT_CB_ID IC MspDeInit Callback ID
4987:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_MSPINIT_CB_ID OC MspInit Callback ID
4988:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_MSPDEINIT_CB_ID OC MspDeInit Callback ID
4989:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_MSPINIT_CB_ID PWM MspInit Callback ID
4990:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_MSPDEINIT_CB_ID PWM MspDeInit Callback ID
4991:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ONE_PULSE_MSPINIT_CB_ID One Pulse MspInit Callback ID
ARM GAS  /tmp/ccVHe0ZY.s 			page 89


4992:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID One Pulse MspDeInit Callback ID
4993:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ENCODER_MSPINIT_CB_ID Encoder MspInit Callback ID
4994:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ENCODER_MSPDEINIT_CB_ID Encoder MspDeInit Callback ID
4995:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID Hall Sensor MspInit Callback ID
4996:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID Hall Sensor MspDeInit Callback ID
4997:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PERIOD_ELAPSED_CB_ID Period Elapsed Callback ID
4998:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID Period Elapsed half complete Callback ID
4999:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_TRIGGER_CB_ID Trigger Callback ID
5000:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_TRIGGER_HALF_CB_ID Trigger half complete Callback ID
5001:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_CAPTURE_CB_ID Input Capture Callback ID
5002:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_CAPTURE_HALF_CB_ID Input Capture half complete Callback ID
5003:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_DELAY_ELAPSED_CB_ID Output Compare Delay Elapsed Callback ID
5004:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_PULSE_FINISHED_CB_ID PWM Pulse Finished Callback ID
5005:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID PWM Pulse Finished half complete Callb
5006:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ERROR_CB_ID Error Callback ID
5007:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_COMMUTATION_CB_ID Commutation Callback ID
5008:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_COMMUTATION_HALF_CB_ID Commutation half complete Callback ID
5009:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BREAK_CB_ID Break Callback ID
5010:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @param pCallback pointer to the callback function
5011:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @retval status
5012:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5013:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef Callb
5014:HALLIB/Src/stm32f4xx_hal_tim.c ****                                            pTIM_CallbackTypeDef pCallback)
5015:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5016:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_StatusTypeDef status = HAL_OK;
5017:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5018:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (pCallback == NULL)
5019:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5020:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
5021:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5022:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Process locked */
5023:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
5024:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5025:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_READY)
5026:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5027:HALLIB/Src/stm32f4xx_hal_tim.c ****     switch (CallbackID)
5028:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
5029:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BASE_MSPINIT_CB_ID :
5030:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Base_MspInitCallback                 = pCallback;
5031:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5032:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5033:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BASE_MSPDEINIT_CB_ID :
5034:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Base_MspDeInitCallback               = pCallback;
5035:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5036:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5037:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_MSPINIT_CB_ID :
5038:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_MspInitCallback                   = pCallback;
5039:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5040:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5041:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_MSPDEINIT_CB_ID :
5042:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_MspDeInitCallback                 = pCallback;
5043:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5044:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5045:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_MSPINIT_CB_ID :
5046:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_MspInitCallback                   = pCallback;
5047:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5048:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 90


5049:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_MSPDEINIT_CB_ID :
5050:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_MspDeInitCallback                 = pCallback;
5051:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5052:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5053:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_MSPINIT_CB_ID :
5054:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_MspInitCallback                  = pCallback;
5055:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5056:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5057:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_MSPDEINIT_CB_ID :
5058:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_MspDeInitCallback                = pCallback;
5059:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5060:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5061:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
5062:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OnePulse_MspInitCallback             = pCallback;
5063:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5064:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5065:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
5066:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OnePulse_MspDeInitCallback           = pCallback;
5067:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5068:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5069:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ENCODER_MSPINIT_CB_ID :
5070:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Encoder_MspInitCallback              = pCallback;
5071:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5072:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5073:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
5074:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Encoder_MspDeInitCallback            = pCallback;
5075:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5076:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5077:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
5078:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->HallSensor_MspInitCallback           = pCallback;
5079:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5080:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5081:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
5082:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->HallSensor_MspDeInitCallback         = pCallback;
5083:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5084:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5085:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PERIOD_ELAPSED_CB_ID :
5086:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PeriodElapsedCallback                = pCallback;
5087:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5088:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5089:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
5090:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PeriodElapsedHalfCpltCallback        = pCallback;
5091:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5092:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5093:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_TRIGGER_CB_ID :
5094:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->TriggerCallback                      = pCallback;
5095:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5096:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5097:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_TRIGGER_HALF_CB_ID :
5098:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->TriggerHalfCpltCallback              = pCallback;
5099:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5100:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5101:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_CAPTURE_CB_ID :
5102:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_CaptureCallback                   = pCallback;
5103:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5104:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5105:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
ARM GAS  /tmp/ccVHe0ZY.s 			page 91


5106:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_CaptureHalfCpltCallback           = pCallback;
5107:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5108:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5109:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
5110:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_DelayElapsedCallback              = pCallback;
5111:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5112:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5113:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
5114:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_PulseFinishedCallback            = pCallback;
5115:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5116:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5117:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
5118:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
5119:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5120:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5121:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ERROR_CB_ID :
5122:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->ErrorCallback                        = pCallback;
5123:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5124:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5125:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_COMMUTATION_CB_ID :
5126:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->CommutationCallback                  = pCallback;
5127:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5128:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5129:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_COMMUTATION_HALF_CB_ID :
5130:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->CommutationHalfCpltCallback          = pCallback;
5131:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5132:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5133:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BREAK_CB_ID :
5134:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->BreakCallback                        = pCallback;
5135:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5136:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5137:HALLIB/Src/stm32f4xx_hal_tim.c ****       default :
5138:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Return error status */
5139:HALLIB/Src/stm32f4xx_hal_tim.c ****         status =  HAL_ERROR;
5140:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5141:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
5142:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5143:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_RESET)
5144:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5145:HALLIB/Src/stm32f4xx_hal_tim.c ****     switch (CallbackID)
5146:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
5147:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BASE_MSPINIT_CB_ID :
5148:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Base_MspInitCallback         = pCallback;
5149:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5150:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5151:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BASE_MSPDEINIT_CB_ID :
5152:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Base_MspDeInitCallback       = pCallback;
5153:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5154:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5155:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_MSPINIT_CB_ID :
5156:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_MspInitCallback           = pCallback;
5157:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5158:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5159:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_MSPDEINIT_CB_ID :
5160:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_MspDeInitCallback         = pCallback;
5161:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5162:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 92


5163:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_MSPINIT_CB_ID :
5164:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_MspInitCallback           = pCallback;
5165:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5166:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5167:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_MSPDEINIT_CB_ID :
5168:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_MspDeInitCallback         = pCallback;
5169:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5170:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5171:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_MSPINIT_CB_ID :
5172:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_MspInitCallback          = pCallback;
5173:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5174:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5175:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_MSPDEINIT_CB_ID :
5176:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_MspDeInitCallback        = pCallback;
5177:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5178:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5179:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
5180:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OnePulse_MspInitCallback     = pCallback;
5181:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5182:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5183:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
5184:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OnePulse_MspDeInitCallback   = pCallback;
5185:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5186:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5187:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ENCODER_MSPINIT_CB_ID :
5188:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Encoder_MspInitCallback      = pCallback;
5189:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5190:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5191:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
5192:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Encoder_MspDeInitCallback    = pCallback;
5193:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5194:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5195:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
5196:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->HallSensor_MspInitCallback   = pCallback;
5197:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5198:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5199:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
5200:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->HallSensor_MspDeInitCallback = pCallback;
5201:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5202:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5203:HALLIB/Src/stm32f4xx_hal_tim.c ****       default :
5204:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Return error status */
5205:HALLIB/Src/stm32f4xx_hal_tim.c ****         status =  HAL_ERROR;
5206:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5207:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
5208:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5209:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
5210:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5211:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Return error status */
5212:HALLIB/Src/stm32f4xx_hal_tim.c ****     status =  HAL_ERROR;
5213:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5214:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5215:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Release Lock */
5216:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
5217:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5218:HALLIB/Src/stm32f4xx_hal_tim.c ****   return status;
5219:HALLIB/Src/stm32f4xx_hal_tim.c **** }
ARM GAS  /tmp/ccVHe0ZY.s 			page 93


5220:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5221:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5222:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Unregister a TIM callback
5223:HALLIB/Src/stm32f4xx_hal_tim.c ****   *         TIM callback is redirected to the weak predefined callback
5224:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param htim tim handle
5225:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param CallbackID ID of the callback to be unregistered
5226:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        This parameter can be one of the following values:
5227:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BASE_MSPINIT_CB_ID Base MspInit Callback ID
5228:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BASE_MSPDEINIT_CB_ID Base MspDeInit Callback ID
5229:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_MSPINIT_CB_ID IC MspInit Callback ID
5230:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_MSPDEINIT_CB_ID IC MspDeInit Callback ID
5231:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_MSPINIT_CB_ID OC MspInit Callback ID
5232:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_MSPDEINIT_CB_ID OC MspDeInit Callback ID
5233:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_MSPINIT_CB_ID PWM MspInit Callback ID
5234:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_MSPDEINIT_CB_ID PWM MspDeInit Callback ID
5235:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ONE_PULSE_MSPINIT_CB_ID One Pulse MspInit Callback ID
5236:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID One Pulse MspDeInit Callback ID
5237:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ENCODER_MSPINIT_CB_ID Encoder MspInit Callback ID
5238:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ENCODER_MSPDEINIT_CB_ID Encoder MspDeInit Callback ID
5239:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID Hall Sensor MspInit Callback ID
5240:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID Hall Sensor MspDeInit Callback ID
5241:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PERIOD_ELAPSED_CB_ID Period Elapsed Callback ID
5242:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID Period Elapsed half complete Callback ID
5243:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_TRIGGER_CB_ID Trigger Callback ID
5244:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_TRIGGER_HALF_CB_ID Trigger half complete Callback ID
5245:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_CAPTURE_CB_ID Input Capture Callback ID
5246:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_IC_CAPTURE_HALF_CB_ID Input Capture half complete Callback ID
5247:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_OC_DELAY_ELAPSED_CB_ID Output Compare Delay Elapsed Callback ID
5248:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_PULSE_FINISHED_CB_ID PWM Pulse Finished Callback ID
5249:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID PWM Pulse Finished half complete Callb
5250:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_ERROR_CB_ID Error Callback ID
5251:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_COMMUTATION_CB_ID Commutation Callback ID
5252:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_COMMUTATION_HALF_CB_ID Commutation half complete Callback ID
5253:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @arg @ref HAL_TIM_BREAK_CB_ID Break Callback ID
5254:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          @retval status
5255:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5256:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_StatusTypeDef HAL_TIM_UnRegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef Cal
5257:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5258:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_StatusTypeDef status = HAL_OK;
5259:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5260:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Process locked */
5261:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_LOCK(htim);
5262:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5263:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (htim->State == HAL_TIM_STATE_READY)
5264:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5265:HALLIB/Src/stm32f4xx_hal_tim.c ****     switch (CallbackID)
5266:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
5267:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BASE_MSPINIT_CB_ID :
5268:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Base_MspInitCallback              = HAL_TIM_Base_MspInit;                      /* Leg
5269:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5270:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5271:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BASE_MSPDEINIT_CB_ID :
5272:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Base_MspDeInitCallback            = HAL_TIM_Base_MspDeInit;                    /* Leg
5273:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5274:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5275:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_MSPINIT_CB_ID :
5276:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_MspInitCallback                = HAL_TIM_IC_MspInit;                        /* Leg
ARM GAS  /tmp/ccVHe0ZY.s 			page 94


5277:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5278:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5279:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_MSPDEINIT_CB_ID :
5280:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_MspDeInitCallback              = HAL_TIM_IC_MspDeInit;                      /* Leg
5281:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5282:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5283:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_MSPINIT_CB_ID :
5284:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_MspInitCallback                = HAL_TIM_OC_MspInit;                        /* Leg
5285:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5286:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5287:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_MSPDEINIT_CB_ID :
5288:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_MspDeInitCallback              = HAL_TIM_OC_MspDeInit;                      /* Leg
5289:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5290:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5291:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_MSPINIT_CB_ID :
5292:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_MspInitCallback               = HAL_TIM_PWM_MspInit;                       /* Leg
5293:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5294:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5295:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_MSPDEINIT_CB_ID :
5296:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_MspDeInitCallback             = HAL_TIM_PWM_MspDeInit;                     /* Leg
5297:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5298:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5299:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
5300:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OnePulse_MspInitCallback          = HAL_TIM_OnePulse_MspInit;                  /* Leg
5301:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5302:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5303:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
5304:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OnePulse_MspDeInitCallback        = HAL_TIM_OnePulse_MspDeInit;                /* Leg
5305:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5306:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5307:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ENCODER_MSPINIT_CB_ID :
5308:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Encoder_MspInitCallback           = HAL_TIM_Encoder_MspInit;                   /* Leg
5309:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5310:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5311:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
5312:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Encoder_MspDeInitCallback         = HAL_TIM_Encoder_MspDeInit;                 /* Leg
5313:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5314:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5315:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
5316:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->HallSensor_MspInitCallback        = HAL_TIMEx_HallSensor_MspInit;              /* Leg
5317:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5318:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5319:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
5320:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->HallSensor_MspDeInitCallback      = HAL_TIMEx_HallSensor_MspDeInit;            /* Leg
5321:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5322:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5323:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PERIOD_ELAPSED_CB_ID :
5324:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Leg
5325:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5326:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5327:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
5328:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Leg
5329:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5330:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5331:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_TRIGGER_CB_ID :
5332:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Leg
5333:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
ARM GAS  /tmp/ccVHe0ZY.s 			page 95


5334:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5335:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_TRIGGER_HALF_CB_ID :
5336:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Leg
5337:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5338:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5339:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_CAPTURE_CB_ID :
5340:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Leg
5341:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5342:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5343:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
5344:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Leg
5345:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5346:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5347:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
5348:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Leg
5349:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5350:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5351:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
5352:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Leg
5353:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5354:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5355:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
5356:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Leg
5357:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5358:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5359:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ERROR_CB_ID :
5360:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Leg
5361:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5362:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5363:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_COMMUTATION_CB_ID :
5364:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Leg
5365:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5366:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5367:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_COMMUTATION_HALF_CB_ID :
5368:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Leg
5369:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5370:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5371:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BREAK_CB_ID :
5372:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Leg
5373:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5374:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5375:HALLIB/Src/stm32f4xx_hal_tim.c ****       default :
5376:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Return error status */
5377:HALLIB/Src/stm32f4xx_hal_tim.c ****         status =  HAL_ERROR;
5378:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5379:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
5380:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5381:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (htim->State == HAL_TIM_STATE_RESET)
5382:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5383:HALLIB/Src/stm32f4xx_hal_tim.c ****     switch (CallbackID)
5384:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
5385:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BASE_MSPINIT_CB_ID :
5386:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Base_MspInitCallback         = HAL_TIM_Base_MspInit;              /* Legacy weak Base
5387:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5388:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5389:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_BASE_MSPDEINIT_CB_ID :
5390:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Base_MspDeInitCallback       = HAL_TIM_Base_MspDeInit;            /* Legacy weak Base
ARM GAS  /tmp/ccVHe0ZY.s 			page 96


5391:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5392:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5393:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_MSPINIT_CB_ID :
5394:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_MspInitCallback           = HAL_TIM_IC_MspInit;                /* Legacy weak IC M
5395:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5396:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5397:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_IC_MSPDEINIT_CB_ID :
5398:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->IC_MspDeInitCallback         = HAL_TIM_IC_MspDeInit;              /* Legacy weak IC M
5399:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5400:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5401:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_MSPINIT_CB_ID :
5402:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_MspInitCallback           = HAL_TIM_OC_MspInit;                /* Legacy weak OC M
5403:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5404:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5405:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_OC_MSPDEINIT_CB_ID :
5406:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OC_MspDeInitCallback         = HAL_TIM_OC_MspDeInit;              /* Legacy weak OC M
5407:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5408:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5409:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_MSPINIT_CB_ID :
5410:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_MspInitCallback          = HAL_TIM_PWM_MspInit;               /* Legacy weak PWM 
5411:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5412:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5413:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_PWM_MSPDEINIT_CB_ID :
5414:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->PWM_MspDeInitCallback        = HAL_TIM_PWM_MspDeInit;             /* Legacy weak PWM 
5415:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5416:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5417:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
5418:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OnePulse_MspInitCallback     = HAL_TIM_OnePulse_MspInit;          /* Legacy weak One 
5419:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5420:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5421:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
5422:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->OnePulse_MspDeInitCallback   = HAL_TIM_OnePulse_MspDeInit;        /* Legacy weak One 
5423:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5424:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5425:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ENCODER_MSPINIT_CB_ID :
5426:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Encoder_MspInitCallback      = HAL_TIM_Encoder_MspInit;           /* Legacy weak Enco
5427:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5428:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5429:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
5430:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Encoder_MspDeInitCallback    = HAL_TIM_Encoder_MspDeInit;         /* Legacy weak Enco
5431:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5432:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5433:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
5434:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->HallSensor_MspInitCallback   = HAL_TIMEx_HallSensor_MspInit;      /* Legacy weak Hall
5435:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5436:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5437:HALLIB/Src/stm32f4xx_hal_tim.c ****       case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
5438:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->HallSensor_MspDeInitCallback = HAL_TIMEx_HallSensor_MspDeInit;    /* Legacy weak Hall
5439:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5440:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5441:HALLIB/Src/stm32f4xx_hal_tim.c ****       default :
5442:HALLIB/Src/stm32f4xx_hal_tim.c ****         /* Return error status */
5443:HALLIB/Src/stm32f4xx_hal_tim.c ****         status =  HAL_ERROR;
5444:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
5445:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
5446:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5447:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
ARM GAS  /tmp/ccVHe0ZY.s 			page 97


5448:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5449:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Return error status */
5450:HALLIB/Src/stm32f4xx_hal_tim.c ****     status =  HAL_ERROR;
5451:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5452:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5453:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Release Lock */
5454:HALLIB/Src/stm32f4xx_hal_tim.c ****   __HAL_UNLOCK(htim);
5455:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5456:HALLIB/Src/stm32f4xx_hal_tim.c ****   return status;
5457:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5458:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5459:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5460:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5461:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
5462:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5463:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5464:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Exported_Functions_Group10 TIM Peripheral State functions
5465:HALLIB/Src/stm32f4xx_hal_tim.c ****   *  @brief   TIM Peripheral State functions
5466:HALLIB/Src/stm32f4xx_hal_tim.c ****   *
5467:HALLIB/Src/stm32f4xx_hal_tim.c **** @verbatim
5468:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
5469:HALLIB/Src/stm32f4xx_hal_tim.c ****                         ##### Peripheral State functions #####
5470:HALLIB/Src/stm32f4xx_hal_tim.c ****   ==============================================================================
5471:HALLIB/Src/stm32f4xx_hal_tim.c ****     [..]
5472:HALLIB/Src/stm32f4xx_hal_tim.c ****     This subsection permits to get in run-time the status of the peripheral
5473:HALLIB/Src/stm32f4xx_hal_tim.c ****     and the data flow.
5474:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5475:HALLIB/Src/stm32f4xx_hal_tim.c **** @endverbatim
5476:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
5477:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5478:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5479:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5480:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Return the TIM Base handle state.
5481:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Base handle
5482:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL state
5483:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5484:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
5485:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5486:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
5487:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5488:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5489:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5490:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Return the TIM OC handle state.
5491:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Output Compare handle
5492:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL state
5493:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5494:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
5495:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5496:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
5497:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5498:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5499:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5500:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Return the TIM PWM handle state.
5501:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
5502:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL state
5503:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5504:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
ARM GAS  /tmp/ccVHe0ZY.s 			page 98


5505:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5506:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
5507:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5508:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5509:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5510:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Return the TIM Input Capture handle state.
5511:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM IC handle
5512:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL state
5513:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5514:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
5515:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5516:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
5517:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5518:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5519:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5520:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Return the TIM One Pulse Mode handle state.
5521:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM OPM handle
5522:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL state
5523:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5524:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
5525:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5526:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
5527:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5528:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5529:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5530:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Return the TIM Encoder Mode handle state.
5531:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM Encoder Interface handle
5532:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval HAL state
5533:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5534:HALLIB/Src/stm32f4xx_hal_tim.c **** HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
5535:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5536:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
5537:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5538:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5539:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5540:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
5541:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5542:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5543:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5544:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @}
5545:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5546:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5547:HALLIB/Src/stm32f4xx_hal_tim.c **** /** @defgroup TIM_Private_Functions TIM Private Functions
5548:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @{
5549:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5550:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5551:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5552:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA error callback
5553:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
5554:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5555:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5556:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_DMAError(DMA_HandleTypeDef *hdma)
5557:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5558:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5559:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5560:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5561:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 99


5562:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5563:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->ErrorCallback(htim);
5564:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5565:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_ErrorCallback(htim);
5566:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5567:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5568:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5569:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5570:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA Delay Pulse complete callback.
5571:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
5572:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5573:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5574:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
5575:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5576:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5577:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5578:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5579:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5580:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (hdma == htim->hdma[TIM_DMA_ID_CC1])
5581:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5582:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
5583:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5584:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
5585:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5586:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
5587:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5588:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
5589:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5590:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
5591:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5592:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
5593:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5594:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
5595:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5596:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
5597:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5598:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
5599:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5600:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5601:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5602:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->PWM_PulseFinishedCallback(htim);
5603:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5604:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_PWM_PulseFinishedCallback(htim);
5605:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5606:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5607:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
5608:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5609:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5610:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5611:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA Delay Pulse half complete callback.
5612:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
5613:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5614:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5615:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
5616:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5617:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5618:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 100


5619:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5620:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5621:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (hdma == htim->hdma[TIM_DMA_ID_CC1])
5622:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5623:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
5624:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5625:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
5626:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5627:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
5628:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5629:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
5630:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5631:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
5632:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5633:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
5634:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5635:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
5636:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5637:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
5638:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5639:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
5640:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5641:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5642:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5643:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->PWM_PulseFinishedHalfCpltCallback(htim);
5644:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5645:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
5646:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5647:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5648:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
5649:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5650:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5651:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5652:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA Capture complete callback.
5653:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
5654:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5655:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5656:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
5657:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5658:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5659:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5660:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5661:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5662:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (hdma == htim->hdma[TIM_DMA_ID_CC1])
5663:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5664:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
5665:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5666:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
5667:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5668:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
5669:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5670:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
5671:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5672:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
5673:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5674:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
5675:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
ARM GAS  /tmp/ccVHe0ZY.s 			page 101


5676:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
5677:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5678:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
5679:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5680:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
5681:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5682:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5683:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5684:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->IC_CaptureCallback(htim);
5685:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5686:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_IC_CaptureCallback(htim);
5687:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5688:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5689:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
5690:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5691:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5692:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5693:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA Capture half complete callback.
5694:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
5695:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5696:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5697:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
5698:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5699:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5700:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5701:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5702:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5703:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (hdma == htim->hdma[TIM_DMA_ID_CC1])
5704:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5705:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
5706:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5707:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
5708:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5709:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
5710:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5711:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
5712:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5713:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
5714:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5715:HALLIB/Src/stm32f4xx_hal_tim.c ****   else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
5716:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5717:HALLIB/Src/stm32f4xx_hal_tim.c ****     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
5718:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5719:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
5720:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5721:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* nothing to do */
5722:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5723:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5724:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5725:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->IC_CaptureHalfCpltCallback(htim);
5726:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5727:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_IC_CaptureHalfCpltCallback(htim);
5728:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5729:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5730:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
5731:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5732:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 102


5733:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5734:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA Period Elapse complete callback.
5735:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
5736:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5737:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5738:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
5739:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5740:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5741:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5742:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5743:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5744:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5745:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->PeriodElapsedCallback(htim);
5746:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5747:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_PeriodElapsedCallback(htim);
5748:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5749:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5750:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5751:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5752:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA Period Elapse half complete callback.
5753:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
5754:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5755:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5756:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
5757:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5758:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5759:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5760:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5761:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5762:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5763:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->PeriodElapsedHalfCpltCallback(htim);
5764:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5765:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
5766:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5767:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5768:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5769:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5770:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA Trigger callback.
5771:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
5772:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5773:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5774:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
5775:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5776:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5777:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5778:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5779:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5780:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5781:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->TriggerCallback(htim);
5782:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5783:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_TriggerCallback(htim);
5784:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5785:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5786:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5787:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5788:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  TIM DMA Trigger half complete callback.
5789:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  hdma pointer to DMA handle.
ARM GAS  /tmp/ccVHe0ZY.s 			page 103


5790:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5791:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5792:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
5793:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5794:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
5795:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5796:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->State = HAL_TIM_STATE_READY;
5797:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5798:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
5799:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->TriggerHalfCpltCallback(htim);
5800:HALLIB/Src/stm32f4xx_hal_tim.c **** #else
5801:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_TIM_TriggerHalfCpltCallback(htim);
5802:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
5803:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5804:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5805:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5806:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Time Base configuration
5807:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx TIM peripheral
5808:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Structure TIM Base configuration structure
5809:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5810:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5811:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
5812:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5813:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpcr1;
5814:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpcr1 = TIMx->CR1;
5815:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5816:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set TIM Time Base Unit parameters ---------------------------------------*/
5817:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
5818:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5819:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Select the Counter Mode */
5820:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
5821:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr1 |= Structure->CounterMode;
5822:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5823:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
5825:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5826:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the clock division */
5827:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr1 &= ~TIM_CR1_CKD;
5828:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr1 |= (uint32_t)Structure->ClockDivision;
5829:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5830:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5831:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the auto-reload preload */
5832:HALLIB/Src/stm32f4xx_hal_tim.c ****   MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
5833:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5834:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CR1 = tmpcr1;
5835:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5836:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Autoreload value */
5837:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->ARR = (uint32_t)Structure->Period ;
5838:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5839:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Prescaler value */
5840:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->PSC = Structure->Prescaler;
5841:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5842:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
5843:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5844:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Repetition Counter value */
5845:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIMx->RCR = Structure->RepetitionCounter;
5846:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
ARM GAS  /tmp/ccVHe0ZY.s 			page 104


5847:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5848:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Generate an update event to reload the Prescaler
5849:HALLIB/Src/stm32f4xx_hal_tim.c ****      and the repetition counter (only for advanced timer) value immediately */
5850:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->EGR = TIM_EGR_UG;
5851:HALLIB/Src/stm32f4xx_hal_tim.c **** }
5852:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5853:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5854:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Timer Output Compare 1 configuration
5855:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
5856:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OC_Config The ouput configuration structure
5857:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5858:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5859:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
5860:HALLIB/Src/stm32f4xx_hal_tim.c **** {
  27              		.loc 1 5860 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 30B4     		push	{r4, r5}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 5, -4
5861:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmrx;
5862:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
5863:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpcr2;
5864:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5865:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
5866:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC1E;
  38              		.loc 1 5866 0
  39 0002 036A     		ldr	r3, [r0, #32]
  40 0004 23F00103 		bic	r3, r3, #1
  41 0008 0362     		str	r3, [r0, #32]
5867:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5868:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCER register value */
5869:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
  42              		.loc 1 5869 0
  43 000a 036A     		ldr	r3, [r0, #32]
  44              	.LVL1:
5870:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
5871:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpcr2 =  TIMx->CR2;
  45              		.loc 1 5871 0
  46 000c 4468     		ldr	r4, [r0, #4]
  47              	.LVL2:
5872:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5873:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCMR1 register value */
5874:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx = TIMx->CCMR1;
  48              		.loc 1 5874 0
  49 000e 8269     		ldr	r2, [r0, #24]
  50              	.LVL3:
5875:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5876:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Output Compare Mode Bits */
5877:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR1_OC1M;
5878:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR1_CC1S;
  51              		.loc 1 5878 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 105


  52 0010 22F07302 		bic	r2, r2, #115
  53              	.LVL4:
5879:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Output Compare Mode */
5880:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx |= OC_Config->OCMode;
  54              		.loc 1 5880 0
  55 0014 0D68     		ldr	r5, [r1]
  56 0016 2A43     		orrs	r2, r2, r5
  57              	.LVL5:
5881:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5882:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Output Polarity level */
5883:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~TIM_CCER_CC1P;
  58              		.loc 1 5883 0
  59 0018 23F00203 		bic	r3, r3, #2
  60              	.LVL6:
5884:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Output Compare Polarity */
5885:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= OC_Config->OCPolarity;
  61              		.loc 1 5885 0
  62 001c 8D68     		ldr	r5, [r1, #8]
  63 001e 2B43     		orrs	r3, r3, r5
  64              	.LVL7:
5886:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5887:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
  65              		.loc 1 5887 0
  66 0020 114D     		ldr	r5, .L7
  67 0022 A842     		cmp	r0, r5
  68 0024 11D0     		beq	.L2
  69              		.loc 1 5887 0 is_stmt 0 discriminator 1
  70 0026 05F58065 		add	r5, r5, #1024
  71 002a A842     		cmp	r0, r5
  72 002c 0DD0     		beq	.L2
  73              	.L3:
5888:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5889:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Check parameters */
5890:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
5891:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5892:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N Polarity level */
5893:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC1NP;
5894:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Polarity */
5895:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer |= OC_Config->OCNPolarity;
5896:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N State */
5897:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC1NE;
5898:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5899:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5900:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(TIMx))
  74              		.loc 1 5900 0 is_stmt 1
  75 002e 0E4D     		ldr	r5, .L7
  76 0030 A842     		cmp	r0, r5
  77 0032 11D0     		beq	.L4
  78              		.loc 1 5900 0 is_stmt 0 discriminator 1
  79 0034 05F58065 		add	r5, r5, #1024
  80 0038 A842     		cmp	r0, r5
  81 003a 0DD0     		beq	.L4
  82              	.L5:
5901:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5902:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Check parameters */
5903:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
5904:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
ARM GAS  /tmp/ccVHe0ZY.s 			page 106


5905:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5906:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
5907:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS1;
5908:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS1N;
5909:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output Idle state */
5910:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 |= OC_Config->OCIdleState;
5911:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Idle state */
5912:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 |= OC_Config->OCNIdleState;
5913:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5914:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5915:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CR2 */
5916:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CR2 = tmpcr2;
  83              		.loc 1 5916 0 is_stmt 1
  84 003c 4460     		str	r4, [r0, #4]
5917:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5918:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR1 */
5919:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmrx;
  85              		.loc 1 5919 0
  86 003e 8261     		str	r2, [r0, #24]
5920:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5921:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Capture Compare Register value */
5922:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCR1 = OC_Config->Pulse;
  87              		.loc 1 5922 0
  88 0040 4A68     		ldr	r2, [r1, #4]
  89              	.LVL8:
  90 0042 4263     		str	r2, [r0, #52]
  91              	.LVL9:
5923:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5924:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCER */
5925:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
  92              		.loc 1 5925 0
  93 0044 0362     		str	r3, [r0, #32]
5926:HALLIB/Src/stm32f4xx_hal_tim.c **** }
  94              		.loc 1 5926 0
  95 0046 30BC     		pop	{r4, r5}
  96              	.LCFI1:
  97              		.cfi_remember_state
  98              		.cfi_restore 5
  99              		.cfi_restore 4
 100              		.cfi_def_cfa_offset 0
 101              	.LVL10:
 102 0048 7047     		bx	lr
 103              	.LVL11:
 104              	.L2:
 105              	.LCFI2:
 106              		.cfi_restore_state
5893:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Polarity */
 107              		.loc 1 5893 0
 108 004a 23F00803 		bic	r3, r3, #8
 109              	.LVL12:
5895:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N State */
 110              		.loc 1 5895 0
 111 004e CD68     		ldr	r5, [r1, #12]
 112 0050 2B43     		orrs	r3, r3, r5
 113              	.LVL13:
5897:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 114              		.loc 1 5897 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 107


 115 0052 23F00403 		bic	r3, r3, #4
 116              	.LVL14:
 117 0056 EAE7     		b	.L3
 118              	.L4:
 119              	.LVL15:
5908:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output Idle state */
 120              		.loc 1 5908 0
 121 0058 24F44074 		bic	r4, r4, #768
 122              	.LVL16:
5910:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Idle state */
 123              		.loc 1 5910 0
 124 005c 4D69     		ldr	r5, [r1, #20]
 125 005e 2C43     		orrs	r4, r4, r5
 126              	.LVL17:
5912:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 127              		.loc 1 5912 0
 128 0060 8D69     		ldr	r5, [r1, #24]
 129 0062 2C43     		orrs	r4, r4, r5
 130              	.LVL18:
 131 0064 EAE7     		b	.L5
 132              	.L8:
 133 0066 00BF     		.align	2
 134              	.L7:
 135 0068 00000140 		.word	1073807360
 136              		.cfi_endproc
 137              	.LFE219:
 139              		.section	.text.TIM_OC3_SetConfig,"ax",%progbits
 140              		.align	1
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv4-sp-d16
 146              	TIM_OC3_SetConfig:
 147              	.LFB221:
5927:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5928:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
5929:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Timer Output Compare 2 configuration
5930:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
5931:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OC_Config The ouput configuration structure
5932:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
5933:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
5934:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
5935:HALLIB/Src/stm32f4xx_hal_tim.c **** {
5936:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmrx;
5937:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
5938:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpcr2;
5939:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5940:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
5941:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC2E;
5942:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5943:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCER register value */
5944:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
5945:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
5946:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpcr2 =  TIMx->CR2;
5947:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5948:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCMR1 register value */
5949:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx = TIMx->CCMR1;
ARM GAS  /tmp/ccVHe0ZY.s 			page 108


5950:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5951:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
5952:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR1_OC2M;
5953:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR1_CC2S;
5954:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5955:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Output Compare Mode */
5956:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx |= (OC_Config->OCMode << 8U);
5957:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5958:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Output Polarity level */
5959:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~TIM_CCER_CC2P;
5960:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Output Compare Polarity */
5961:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= (OC_Config->OCPolarity << 4U);
5962:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5963:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
5964:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5965:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
5966:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5967:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N Polarity level */
5968:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC2NP;
5969:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Polarity */
5970:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer |= (OC_Config->OCNPolarity << 4U);
5971:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N State */
5972:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC2NE;
5973:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5974:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5975:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5976:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(TIMx))
5977:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
5978:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Check parameters */
5979:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
5980:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
5981:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5982:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
5983:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS2;
5984:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS2N;
5985:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output Idle state */
5986:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCIdleState << 2U);
5987:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Idle state */
5988:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCNIdleState << 2U);
5989:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
5990:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5991:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CR2 */
5992:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CR2 = tmpcr2;
5993:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5994:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR1 */
5995:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmrx;
5996:HALLIB/Src/stm32f4xx_hal_tim.c **** 
5997:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Capture Compare Register value */
5998:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCR2 = OC_Config->Pulse;
5999:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6000:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCER */
6001:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
6002:HALLIB/Src/stm32f4xx_hal_tim.c **** }
6003:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6004:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6005:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Timer Output Compare 3 configuration
6006:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
ARM GAS  /tmp/ccVHe0ZY.s 			page 109


6007:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OC_Config The ouput configuration structure
6008:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6009:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6010:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
6011:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 148              		.loc 1 6011 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153              	.LVL19:
 154 0000 30B4     		push	{r4, r5}
 155              	.LCFI3:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 4, -8
 158              		.cfi_offset 5, -4
6012:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmrx;
6013:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6014:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpcr2;
6015:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6016:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 3: Reset the CC2E Bit */
6017:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC3E;
 159              		.loc 1 6017 0
 160 0002 036A     		ldr	r3, [r0, #32]
 161 0004 23F48073 		bic	r3, r3, #256
 162 0008 0362     		str	r3, [r0, #32]
6018:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6019:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCER register value */
6020:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 163              		.loc 1 6020 0
 164 000a 036A     		ldr	r3, [r0, #32]
 165              	.LVL20:
6021:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
6022:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpcr2 =  TIMx->CR2;
 166              		.loc 1 6022 0
 167 000c 4468     		ldr	r4, [r0, #4]
 168              	.LVL21:
6023:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6024:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCMR2 register value */
6025:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx = TIMx->CCMR2;
 169              		.loc 1 6025 0
 170 000e C269     		ldr	r2, [r0, #28]
 171              	.LVL22:
6026:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6027:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
6028:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR2_OC3M;
6029:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR2_CC3S;
 172              		.loc 1 6029 0
 173 0010 22F07302 		bic	r2, r2, #115
 174              	.LVL23:
6030:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Output Compare Mode */
6031:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx |= OC_Config->OCMode;
 175              		.loc 1 6031 0
 176 0014 0D68     		ldr	r5, [r1]
 177 0016 2A43     		orrs	r2, r2, r5
 178              	.LVL24:
6032:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 110


6033:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Output Polarity level */
6034:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~TIM_CCER_CC3P;
 179              		.loc 1 6034 0
 180 0018 23F40073 		bic	r3, r3, #512
 181              	.LVL25:
6035:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Output Compare Polarity */
6036:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= (OC_Config->OCPolarity << 8U);
 182              		.loc 1 6036 0
 183 001c 8D68     		ldr	r5, [r1, #8]
 184 001e 43EA0523 		orr	r3, r3, r5, lsl #8
 185              	.LVL26:
6037:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6038:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 186              		.loc 1 6038 0
 187 0022 134D     		ldr	r5, .L15
 188 0024 A842     		cmp	r0, r5
 189 0026 11D0     		beq	.L10
 190              		.loc 1 6038 0 is_stmt 0 discriminator 1
 191 0028 05F58065 		add	r5, r5, #1024
 192 002c A842     		cmp	r0, r5
 193 002e 0DD0     		beq	.L10
 194              	.L11:
6039:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
6040:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
6041:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6042:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N Polarity level */
6043:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC3NP;
6044:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Polarity */
6045:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer |= (OC_Config->OCNPolarity << 8U);
6046:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N State */
6047:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccer &= ~TIM_CCER_CC3NE;
6048:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
6049:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6050:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(TIMx))
 195              		.loc 1 6050 0 is_stmt 1
 196 0030 0F4D     		ldr	r5, .L15
 197 0032 A842     		cmp	r0, r5
 198 0034 12D0     		beq	.L12
 199              		.loc 1 6050 0 is_stmt 0 discriminator 1
 200 0036 05F58065 		add	r5, r5, #1024
 201 003a A842     		cmp	r0, r5
 202 003c 0ED0     		beq	.L12
 203              	.L13:
6051:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
6052:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Check parameters */
6053:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
6054:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
6055:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6056:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
6057:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS3;
6058:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS3N;
6059:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output Idle state */
6060:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCIdleState << 4U);
6061:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Idle state */
6062:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCNIdleState << 4U);
6063:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
6064:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 111


6065:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CR2 */
6066:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CR2 = tmpcr2;
 204              		.loc 1 6066 0 is_stmt 1
 205 003e 4460     		str	r4, [r0, #4]
6067:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6068:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR2 */
6069:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 206              		.loc 1 6069 0
 207 0040 C261     		str	r2, [r0, #28]
6070:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6071:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Capture Compare Register value */
6072:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCR3 = OC_Config->Pulse;
 208              		.loc 1 6072 0
 209 0042 4A68     		ldr	r2, [r1, #4]
 210              	.LVL27:
 211 0044 C263     		str	r2, [r0, #60]
 212              	.LVL28:
6073:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6074:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCER */
6075:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 213              		.loc 1 6075 0
 214 0046 0362     		str	r3, [r0, #32]
6076:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 215              		.loc 1 6076 0
 216 0048 30BC     		pop	{r4, r5}
 217              	.LCFI4:
 218              		.cfi_remember_state
 219              		.cfi_restore 5
 220              		.cfi_restore 4
 221              		.cfi_def_cfa_offset 0
 222              	.LVL29:
 223 004a 7047     		bx	lr
 224              	.LVL30:
 225              	.L10:
 226              	.LCFI5:
 227              		.cfi_restore_state
6043:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Polarity */
 228              		.loc 1 6043 0
 229 004c 23F40063 		bic	r3, r3, #2048
 230              	.LVL31:
6045:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N State */
 231              		.loc 1 6045 0
 232 0050 CD68     		ldr	r5, [r1, #12]
 233 0052 43EA0523 		orr	r3, r3, r5, lsl #8
 234              	.LVL32:
6047:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 235              		.loc 1 6047 0
 236 0056 23F48063 		bic	r3, r3, #1024
 237              	.LVL33:
 238 005a E9E7     		b	.L11
 239              	.L12:
 240              	.LVL34:
6058:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output Idle state */
 241              		.loc 1 6058 0
 242 005c 24F44054 		bic	r4, r4, #12288
 243              	.LVL35:
6060:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Idle state */
ARM GAS  /tmp/ccVHe0ZY.s 			page 112


 244              		.loc 1 6060 0
 245 0060 4D69     		ldr	r5, [r1, #20]
 246 0062 44EA0514 		orr	r4, r4, r5, lsl #4
 247              	.LVL36:
6062:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 248              		.loc 1 6062 0
 249 0066 8D69     		ldr	r5, [r1, #24]
 250 0068 44EA0514 		orr	r4, r4, r5, lsl #4
 251              	.LVL37:
 252 006c E7E7     		b	.L13
 253              	.L16:
 254 006e 00BF     		.align	2
 255              	.L15:
 256 0070 00000140 		.word	1073807360
 257              		.cfi_endproc
 258              	.LFE221:
 260              		.section	.text.TIM_OC4_SetConfig,"ax",%progbits
 261              		.align	1
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	TIM_OC4_SetConfig:
 268              	.LFB222:
6077:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6078:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6079:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Timer Output Compare 4 configuration
6080:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6081:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  OC_Config The ouput configuration structure
6082:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6083:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6084:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
6085:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 269              		.loc 1 6085 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274              	.LVL38:
 275 0000 30B4     		push	{r4, r5}
 276              	.LCFI6:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 4, -8
 279              		.cfi_offset 5, -4
6086:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmrx;
6087:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6088:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpcr2;
6089:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6090:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
6091:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC4E;
 280              		.loc 1 6091 0
 281 0002 036A     		ldr	r3, [r0, #32]
 282 0004 23F48053 		bic	r3, r3, #4096
 283 0008 0362     		str	r3, [r0, #32]
6092:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6093:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCER register value */
6094:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
ARM GAS  /tmp/ccVHe0ZY.s 			page 113


 284              		.loc 1 6094 0
 285 000a 036A     		ldr	r3, [r0, #32]
 286              	.LVL39:
6095:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
6096:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpcr2 =  TIMx->CR2;
 287              		.loc 1 6096 0
 288 000c 4468     		ldr	r4, [r0, #4]
 289              	.LVL40:
6097:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6098:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CCMR2 register value */
6099:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx = TIMx->CCMR2;
 290              		.loc 1 6099 0
 291 000e C269     		ldr	r2, [r0, #28]
 292              	.LVL41:
6100:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6101:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
6102:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR2_OC4M;
6103:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx &= ~TIM_CCMR2_CC4S;
 293              		.loc 1 6103 0
 294 0010 22F4E642 		bic	r2, r2, #29440
 295              	.LVL42:
6104:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6105:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Output Compare Mode */
6106:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmrx |= (OC_Config->OCMode << 8U);
 296              		.loc 1 6106 0
 297 0014 0D68     		ldr	r5, [r1]
 298 0016 42EA0522 		orr	r2, r2, r5, lsl #8
 299              	.LVL43:
6107:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6108:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Output Polarity level */
6109:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~TIM_CCER_CC4P;
 300              		.loc 1 6109 0
 301 001a 23F40053 		bic	r3, r3, #8192
 302              	.LVL44:
6110:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Output Compare Polarity */
6111:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= (OC_Config->OCPolarity << 12U);
 303              		.loc 1 6111 0
 304 001e 8D68     		ldr	r5, [r1, #8]
 305 0020 43EA0533 		orr	r3, r3, r5, lsl #12
 306              	.LVL45:
6112:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6113:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_BREAK_INSTANCE(TIMx))
 307              		.loc 1 6113 0
 308 0024 094D     		ldr	r5, .L21
 309 0026 A842     		cmp	r0, r5
 310 0028 0AD0     		beq	.L18
 311              		.loc 1 6113 0 is_stmt 0 discriminator 1
 312 002a 05F58065 		add	r5, r5, #1024
 313 002e A842     		cmp	r0, r5
 314 0030 06D0     		beq	.L18
 315              	.L19:
6114:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
6115:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Check parameters */
6116:HALLIB/Src/stm32f4xx_hal_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
6117:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6118:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output Compare IDLE State */
6119:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 &= ~TIM_CR2_OIS4;
ARM GAS  /tmp/ccVHe0ZY.s 			page 114


6120:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6121:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output Idle state */
6122:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr2 |= (OC_Config->OCIdleState << 6U);
6123:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
6124:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6125:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CR2 */
6126:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CR2 = tmpcr2;
 316              		.loc 1 6126 0 is_stmt 1
 317 0032 4460     		str	r4, [r0, #4]
6127:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6128:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR2 */
6129:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 318              		.loc 1 6129 0
 319 0034 C261     		str	r2, [r0, #28]
6130:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6131:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Capture Compare Register value */
6132:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCR4 = OC_Config->Pulse;
 320              		.loc 1 6132 0
 321 0036 4A68     		ldr	r2, [r1, #4]
 322              	.LVL46:
 323 0038 0264     		str	r2, [r0, #64]
 324              	.LVL47:
6133:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6134:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCER */
6135:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 325              		.loc 1 6135 0
 326 003a 0362     		str	r3, [r0, #32]
6136:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 327              		.loc 1 6136 0
 328 003c 30BC     		pop	{r4, r5}
 329              	.LCFI7:
 330              		.cfi_remember_state
 331              		.cfi_restore 5
 332              		.cfi_restore 4
 333              		.cfi_def_cfa_offset 0
 334              	.LVL48:
 335 003e 7047     		bx	lr
 336              	.LVL49:
 337              	.L18:
 338              	.LCFI8:
 339              		.cfi_restore_state
6119:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 340              		.loc 1 6119 0
 341 0040 24F48044 		bic	r4, r4, #16384
 342              	.LVL50:
6122:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 343              		.loc 1 6122 0
 344 0044 4D69     		ldr	r5, [r1, #20]
 345 0046 44EA8514 		orr	r4, r4, r5, lsl #6
 346              	.LVL51:
 347 004a F2E7     		b	.L19
 348              	.L22:
 349              		.align	2
 350              	.L21:
 351 004c 00000140 		.word	1073807360
 352              		.cfi_endproc
 353              	.LFE222:
ARM GAS  /tmp/ccVHe0ZY.s 			page 115


 355              		.section	.text.TIM_TI1_ConfigInputStage,"ax",%progbits
 356              		.align	1
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 360              		.fpu fpv4-sp-d16
 362              	TIM_TI1_ConfigInputStage:
 363              	.LFB225:
6137:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6138:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6139:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Slave Timer configuration function
6140:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  htim TIM handle
6141:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  sSlaveConfig Slave timer configuration
6142:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6143:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6144:HALLIB/Src/stm32f4xx_hal_tim.c **** static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
6145:HALLIB/Src/stm32f4xx_hal_tim.c ****                                                   TIM_SlaveConfigTypeDef *sSlaveConfig)
6146:HALLIB/Src/stm32f4xx_hal_tim.c **** {
6147:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
6148:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr1;
6149:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6150:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6151:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx SMCR register value */
6152:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = htim->Instance->SMCR;
6153:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6154:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the Trigger Selection Bits */
6155:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr &= ~TIM_SMCR_TS;
6156:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Input Trigger source */
6157:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr |= sSlaveConfig->InputTrigger;
6158:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6159:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the slave mode Bits */
6160:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr &= ~TIM_SMCR_SMS;
6161:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the slave mode */
6162:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr |= sSlaveConfig->SlaveMode;
6163:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6164:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx SMCR */
6165:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
6166:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6167:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Configure the trigger prescaler, filter, and polarity */
6168:HALLIB/Src/stm32f4xx_hal_tim.c ****   switch (sSlaveConfig->InputTrigger)
6169:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
6170:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_TS_ETRF:
6171:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
6172:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
6173:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
6174:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
6175:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
6176:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
6177:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure the ETR Trigger source */
6178:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_ETR_SetConfig(htim->Instance,
6179:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sSlaveConfig->TriggerPrescaler,
6180:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sSlaveConfig->TriggerPolarity,
6181:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sSlaveConfig->TriggerFilter);
6182:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
6183:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
6184:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6185:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_TS_TI1F_ED:
ARM GAS  /tmp/ccVHe0ZY.s 			page 116


6186:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
6187:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
6188:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
6189:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
6190:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6191:HALLIB/Src/stm32f4xx_hal_tim.c ****       if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
6192:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
6193:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
6194:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
6195:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6196:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Disable the Channel 1: Reset the CC1E Bit */
6197:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpccer = htim->Instance->CCER;
6198:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCER &= ~TIM_CCER_CC1E;
6199:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpccmr1 = htim->Instance->CCMR1;
6200:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6201:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Set the filter */
6202:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpccmr1 &= ~TIM_CCMR1_IC1F;
6203:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
6204:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6205:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Write to TIMx CCMR1 and CCER registers */
6206:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 = tmpccmr1;
6207:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCER = tmpccer;
6208:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
6209:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
6210:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6211:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_TS_TI1FP1:
6212:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
6213:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
6214:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
6215:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
6216:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
6217:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6218:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure TI1 Filter and Polarity */
6219:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_TI1_ConfigInputStage(htim->Instance,
6220:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sSlaveConfig->TriggerPolarity,
6221:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sSlaveConfig->TriggerFilter);
6222:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
6223:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
6224:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6225:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_TS_TI2FP2:
6226:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
6227:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameters */
6228:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
6229:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
6230:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
6231:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6232:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Configure TI2 Filter and Polarity */
6233:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_TI2_ConfigInputStage(htim->Instance,
6234:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sSlaveConfig->TriggerPolarity,
6235:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sSlaveConfig->TriggerFilter);
6236:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
6237:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
6238:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6239:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_TS_ITR0:
6240:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_TS_ITR1:
6241:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_TS_ITR2:
6242:HALLIB/Src/stm32f4xx_hal_tim.c ****     case TIM_TS_ITR3:
ARM GAS  /tmp/ccVHe0ZY.s 			page 117


6243:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
6244:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Check the parameter */
6245:HALLIB/Src/stm32f4xx_hal_tim.c ****       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
6246:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
6247:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
6248:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6249:HALLIB/Src/stm32f4xx_hal_tim.c ****     default:
6250:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
6251:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
6252:HALLIB/Src/stm32f4xx_hal_tim.c ****   return HAL_OK;
6253:HALLIB/Src/stm32f4xx_hal_tim.c **** }
6254:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6255:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6256:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configure the TI1 as Input.
6257:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral.
6258:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICPolarity The Input Polarity.
6259:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6260:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_RISING
6261:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_FALLING
6262:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_BOTHEDGE
6263:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICSelection specifies the input to be used.
6264:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6265:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_DIRECTTI: TIM Input 1 is selected to be connected to IC1.
6266:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_INDIRECTTI: TIM Input 1 is selected to be connected to IC2.
6267:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_TRC: TIM Input 1 is selected to be connected to TRC.
6268:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6269:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6270:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6271:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note TIM_ICFilter and TIM_ICPolarity are not used in INDIRECT mode as TI2FP1
6272:HALLIB/Src/stm32f4xx_hal_tim.c ****   *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
6273:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        protected against un-initialized filter and polarity values.
6274:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6275:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
6276:HALLIB/Src/stm32f4xx_hal_tim.c ****                        uint32_t TIM_ICFilter)
6277:HALLIB/Src/stm32f4xx_hal_tim.c **** {
6278:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr1;
6279:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6280:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6281:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
6282:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC1E;
6283:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
6284:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
6285:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6286:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Input */
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
6288:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
6289:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccmr1 &= ~TIM_CCMR1_CC1S;
6290:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccmr1 |= TIM_ICSelection;
6291:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
6292:HALLIB/Src/stm32f4xx_hal_tim.c ****   else
6293:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
6294:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccmr1 |= TIM_CCMR1_CC1S_0;
6295:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
6296:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6297:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the filter */
6298:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_IC1F;
6299:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
ARM GAS  /tmp/ccVHe0ZY.s 			page 118


6300:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6301:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Polarity and set the CC1E Bit */
6302:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
6303:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
6304:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6305:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
6306:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmr1;
6307:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
6308:HALLIB/Src/stm32f4xx_hal_tim.c **** }
6309:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6310:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6311:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configure the Polarity and Filter for TI1.
6312:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral.
6313:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICPolarity The Input Polarity.
6314:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6315:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_RISING
6316:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_FALLING
6317:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_BOTHEDGE
6318:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6319:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6320:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6321:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6322:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFil
6323:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 364              		.loc 1 6323 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369              	.LVL52:
 370 0000 10B4     		push	{r4}
 371              	.LCFI9:
 372              		.cfi_def_cfa_offset 4
 373              		.cfi_offset 4, -4
6324:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr1;
6325:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6326:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6327:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
6328:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 374              		.loc 1 6328 0
 375 0002 036A     		ldr	r3, [r0, #32]
 376              	.LVL53:
6329:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC1E;
 377              		.loc 1 6329 0
 378 0004 046A     		ldr	r4, [r0, #32]
 379 0006 24F00104 		bic	r4, r4, #1
 380 000a 0462     		str	r4, [r0, #32]
6330:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 381              		.loc 1 6330 0
 382 000c 8469     		ldr	r4, [r0, #24]
 383              	.LVL54:
6331:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6332:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the filter */
6333:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_IC1F;
 384              		.loc 1 6333 0
 385 000e 24F0F004 		bic	r4, r4, #240
 386              	.LVL55:
ARM GAS  /tmp/ccVHe0ZY.s 			page 119


6334:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= (TIM_ICFilter << 4U);
 387              		.loc 1 6334 0
 388 0012 44EA0212 		orr	r2, r4, r2, lsl #4
 389              	.LVL56:
6335:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6336:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Polarity and set the CC1E Bit */
6337:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 390              		.loc 1 6337 0
 391 0016 23F00A03 		bic	r3, r3, #10
 392              	.LVL57:
6338:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= TIM_ICPolarity;
 393              		.loc 1 6338 0
 394 001a 0B43     		orrs	r3, r3, r1
 395              	.LVL58:
6339:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6340:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
6341:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 396              		.loc 1 6341 0
 397 001c 8261     		str	r2, [r0, #24]
6342:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 398              		.loc 1 6342 0
 399 001e 0362     		str	r3, [r0, #32]
6343:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 400              		.loc 1 6343 0
 401 0020 5DF8044B 		ldr	r4, [sp], #4
 402              	.LCFI10:
 403              		.cfi_restore 4
 404              		.cfi_def_cfa_offset 0
 405 0024 7047     		bx	lr
 406              		.cfi_endproc
 407              	.LFE225:
 409              		.section	.text.TIM_TI2_SetConfig,"ax",%progbits
 410              		.align	1
 411              		.syntax unified
 412              		.thumb
 413              		.thumb_func
 414              		.fpu fpv4-sp-d16
 416              	TIM_TI2_SetConfig:
 417              	.LFB226:
6344:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6345:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6346:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configure the TI2 as Input.
6347:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6348:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICPolarity The Input Polarity.
6349:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6350:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_RISING
6351:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_FALLING
6352:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_BOTHEDGE
6353:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICSelection specifies the input to be used.
6354:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6355:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_DIRECTTI: TIM Input 2 is selected to be connected to IC2.
6356:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_INDIRECTTI: TIM Input 2 is selected to be connected to IC1.
6357:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_TRC: TIM Input 2 is selected to be connected to TRC.
6358:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6359:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6360:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6361:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note TIM_ICFilter and TIM_ICPolarity are not used in INDIRECT mode as TI1FP2
ARM GAS  /tmp/ccVHe0ZY.s 			page 120


6362:HALLIB/Src/stm32f4xx_hal_tim.c ****   *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
6363:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        protected against un-initialized filter and polarity values.
6364:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6365:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
6366:HALLIB/Src/stm32f4xx_hal_tim.c ****                               uint32_t TIM_ICFilter)
6367:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 418              		.loc 1 6367 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 423              	.LVL59:
 424 0000 30B4     		push	{r4, r5}
 425              	.LCFI11:
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 4, -8
 428              		.cfi_offset 5, -4
6368:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr1;
6369:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6370:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6371:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
6372:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC2E;
 429              		.loc 1 6372 0
 430 0002 046A     		ldr	r4, [r0, #32]
 431 0004 24F01004 		bic	r4, r4, #16
 432 0008 0462     		str	r4, [r0, #32]
6373:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 433              		.loc 1 6373 0
 434 000a 8469     		ldr	r4, [r0, #24]
 435              	.LVL60:
6374:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 436              		.loc 1 6374 0
 437 000c 056A     		ldr	r5, [r0, #32]
 438              	.LVL61:
6375:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6376:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Input */
6377:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_CC2S;
 439              		.loc 1 6377 0
 440 000e 24F44074 		bic	r4, r4, #768
 441              	.LVL62:
6378:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= (TIM_ICSelection << 8U);
 442              		.loc 1 6378 0
 443 0012 44EA0222 		orr	r2, r4, r2, lsl #8
 444              	.LVL63:
6379:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6380:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the filter */
6381:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_IC2F;
 445              		.loc 1 6381 0
 446 0016 22F47042 		bic	r2, r2, #61440
 447              	.LVL64:
6382:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 448              		.loc 1 6382 0
 449 001a 1B03     		lsls	r3, r3, #12
 450              	.LVL65:
 451 001c 9BB2     		uxth	r3, r3
 452 001e 1A43     		orrs	r2, r2, r3
 453              	.LVL66:
ARM GAS  /tmp/ccVHe0ZY.s 			page 121


6383:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6384:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Polarity and set the CC2E Bit */
6385:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 454              		.loc 1 6385 0
 455 0020 25F0A005 		bic	r5, r5, #160
 456              	.LVL67:
6386:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 457              		.loc 1 6386 0
 458 0024 0901     		lsls	r1, r1, #4
 459              	.LVL68:
 460 0026 01F0A001 		and	r1, r1, #160
 461 002a 0D43     		orrs	r5, r5, r1
 462              	.LVL69:
6387:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6388:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
6389:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 463              		.loc 1 6389 0
 464 002c 8261     		str	r2, [r0, #24]
6390:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 465              		.loc 1 6390 0
 466 002e 0562     		str	r5, [r0, #32]
6391:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 467              		.loc 1 6391 0
 468 0030 30BC     		pop	{r4, r5}
 469              	.LCFI12:
 470              		.cfi_restore 5
 471              		.cfi_restore 4
 472              		.cfi_def_cfa_offset 0
 473              	.LVL70:
 474 0032 7047     		bx	lr
 475              		.cfi_endproc
 476              	.LFE226:
 478              		.section	.text.TIM_TI2_ConfigInputStage,"ax",%progbits
 479              		.align	1
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	TIM_TI2_ConfigInputStage:
 486              	.LFB227:
6392:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6393:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6394:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configure the Polarity and Filter for TI2.
6395:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral.
6396:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICPolarity The Input Polarity.
6397:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6398:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_RISING
6399:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_FALLING
6400:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_BOTHEDGE
6401:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6402:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6403:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6404:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6405:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFil
6406:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 487              		.loc 1 6406 0
 488              		.cfi_startproc
ARM GAS  /tmp/ccVHe0ZY.s 			page 122


 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492              	.LVL71:
 493 0000 10B4     		push	{r4}
 494              	.LCFI13:
 495              		.cfi_def_cfa_offset 4
 496              		.cfi_offset 4, -4
6407:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr1;
6408:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6409:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6410:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
6411:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC2E;
 497              		.loc 1 6411 0
 498 0002 036A     		ldr	r3, [r0, #32]
 499 0004 23F01003 		bic	r3, r3, #16
 500 0008 0362     		str	r3, [r0, #32]
6412:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 501              		.loc 1 6412 0
 502 000a 8469     		ldr	r4, [r0, #24]
 503              	.LVL72:
6413:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 504              		.loc 1 6413 0
 505 000c 036A     		ldr	r3, [r0, #32]
 506              	.LVL73:
6414:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6415:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the filter */
6416:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 &= ~TIM_CCMR1_IC2F;
 507              		.loc 1 6416 0
 508 000e 24F47044 		bic	r4, r4, #61440
 509              	.LVL74:
6417:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= (TIM_ICFilter << 12U);
 510              		.loc 1 6417 0
 511 0012 44EA0232 		orr	r2, r4, r2, lsl #12
 512              	.LVL75:
6418:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6419:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Polarity and set the CC2E Bit */
6420:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 513              		.loc 1 6420 0
 514 0016 23F0A003 		bic	r3, r3, #160
 515              	.LVL76:
6421:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= (TIM_ICPolarity << 4U);
 516              		.loc 1 6421 0
 517 001a 43EA0113 		orr	r3, r3, r1, lsl #4
 518              	.LVL77:
6422:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6423:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
6424:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 519              		.loc 1 6424 0
 520 001e 8261     		str	r2, [r0, #24]
6425:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 521              		.loc 1 6425 0
 522 0020 0362     		str	r3, [r0, #32]
6426:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 523              		.loc 1 6426 0
 524 0022 5DF8044B 		ldr	r4, [sp], #4
 525              	.LCFI14:
ARM GAS  /tmp/ccVHe0ZY.s 			page 123


 526              		.cfi_restore 4
 527              		.cfi_def_cfa_offset 0
 528 0026 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE227:
 532              		.section	.text.TIM_TI3_SetConfig,"ax",%progbits
 533              		.align	1
 534              		.syntax unified
 535              		.thumb
 536              		.thumb_func
 537              		.fpu fpv4-sp-d16
 539              	TIM_TI3_SetConfig:
 540              	.LFB228:
6427:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6428:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6429:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configure the TI3 as Input.
6430:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6431:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICPolarity The Input Polarity.
6432:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6433:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_RISING
6434:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_FALLING
6435:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_BOTHEDGE
6436:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICSelection specifies the input to be used.
6437:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6438:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_DIRECTTI: TIM Input 3 is selected to be connected to IC3.
6439:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_INDIRECTTI: TIM Input 3 is selected to be connected to IC4.
6440:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_TRC: TIM Input 3 is selected to be connected to TRC.
6441:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6442:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6443:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6444:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note TIM_ICFilter and TIM_ICPolarity are not used in INDIRECT mode as TI3FP4
6445:HALLIB/Src/stm32f4xx_hal_tim.c ****   *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
6446:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        protected against un-initialized filter and polarity values.
6447:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6448:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
6449:HALLIB/Src/stm32f4xx_hal_tim.c ****                               uint32_t TIM_ICFilter)
6450:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 541              		.loc 1 6450 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              		@ link register save eliminated.
 546              	.LVL78:
 547 0000 30B4     		push	{r4, r5}
 548              	.LCFI15:
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 4, -8
 551              		.cfi_offset 5, -4
6451:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr2;
6452:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6453:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6454:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
6455:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC3E;
 552              		.loc 1 6455 0
 553 0002 046A     		ldr	r4, [r0, #32]
 554 0004 24F48074 		bic	r4, r4, #256
 555 0008 0462     		str	r4, [r0, #32]
ARM GAS  /tmp/ccVHe0ZY.s 			page 124


6456:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 556              		.loc 1 6456 0
 557 000a C469     		ldr	r4, [r0, #28]
 558              	.LVL79:
6457:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 559              		.loc 1 6457 0
 560 000c 056A     		ldr	r5, [r0, #32]
 561              	.LVL80:
6458:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6459:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Input */
6460:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 &= ~TIM_CCMR2_CC3S;
 562              		.loc 1 6460 0
 563 000e 24F00304 		bic	r4, r4, #3
 564              	.LVL81:
6461:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 |= TIM_ICSelection;
 565              		.loc 1 6461 0
 566 0012 2243     		orrs	r2, r2, r4
 567              	.LVL82:
6462:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6463:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the filter */
6464:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 &= ~TIM_CCMR2_IC3F;
 568              		.loc 1 6464 0
 569 0014 22F0F002 		bic	r2, r2, #240
 570              	.LVL83:
6465:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 571              		.loc 1 6465 0
 572 0018 1B01     		lsls	r3, r3, #4
 573              	.LVL84:
 574 001a DBB2     		uxtb	r3, r3
 575 001c 1A43     		orrs	r2, r2, r3
 576              	.LVL85:
6466:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6467:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Polarity and set the CC3E Bit */
6468:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 577              		.loc 1 6468 0
 578 001e 25F42065 		bic	r5, r5, #2560
 579              	.LVL86:
6469:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 580              		.loc 1 6469 0
 581 0022 0902     		lsls	r1, r1, #8
 582              	.LVL87:
 583 0024 01F42061 		and	r1, r1, #2560
 584 0028 0D43     		orrs	r5, r5, r1
 585              	.LVL88:
6470:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6471:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
6472:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 586              		.loc 1 6472 0
 587 002a C261     		str	r2, [r0, #28]
6473:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 588              		.loc 1 6473 0
 589 002c 0562     		str	r5, [r0, #32]
6474:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 590              		.loc 1 6474 0
 591 002e 30BC     		pop	{r4, r5}
 592              	.LCFI16:
 593              		.cfi_restore 5
ARM GAS  /tmp/ccVHe0ZY.s 			page 125


 594              		.cfi_restore 4
 595              		.cfi_def_cfa_offset 0
 596              	.LVL89:
 597 0030 7047     		bx	lr
 598              		.cfi_endproc
 599              	.LFE228:
 601              		.section	.text.TIM_TI4_SetConfig,"ax",%progbits
 602              		.align	1
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu fpv4-sp-d16
 608              	TIM_TI4_SetConfig:
 609              	.LFB229:
6475:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6476:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6477:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configure the TI4 as Input.
6478:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6479:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICPolarity The Input Polarity.
6480:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6481:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_RISING
6482:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_FALLING
6483:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICPOLARITY_BOTHEDGE
6484:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICSelection specifies the input to be used.
6485:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6486:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_DIRECTTI: TIM Input 4 is selected to be connected to IC4.
6487:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_INDIRECTTI: TIM Input 4 is selected to be connected to IC3.
6488:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ICSELECTION_TRC: TIM Input 4 is selected to be connected to TRC.
6489:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ICFilter Specifies the Input Capture Filter.
6490:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
6491:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @note TIM_ICFilter and TIM_ICPolarity are not used in INDIRECT mode as TI4FP3
6492:HALLIB/Src/stm32f4xx_hal_tim.c ****   *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
6493:HALLIB/Src/stm32f4xx_hal_tim.c ****   *        protected against un-initialized filter and polarity values.
6494:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6495:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6496:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
6497:HALLIB/Src/stm32f4xx_hal_tim.c ****                               uint32_t TIM_ICFilter)
6498:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 610              		.loc 1 6498 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615              	.LVL90:
 616 0000 30B4     		push	{r4, r5}
 617              	.LCFI17:
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 4, -8
 620              		.cfi_offset 5, -4
6499:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr2;
6500:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccer;
6501:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6502:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
6503:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~TIM_CCER_CC4E;
 621              		.loc 1 6503 0
 622 0002 046A     		ldr	r4, [r0, #32]
 623 0004 24F48054 		bic	r4, r4, #4096
ARM GAS  /tmp/ccVHe0ZY.s 			page 126


 624 0008 0462     		str	r4, [r0, #32]
6504:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 625              		.loc 1 6504 0
 626 000a C469     		ldr	r4, [r0, #28]
 627              	.LVL91:
6505:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 628              		.loc 1 6505 0
 629 000c 056A     		ldr	r5, [r0, #32]
 630              	.LVL92:
6506:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6507:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Input */
6508:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 &= ~TIM_CCMR2_CC4S;
 631              		.loc 1 6508 0
 632 000e 24F44074 		bic	r4, r4, #768
 633              	.LVL93:
6509:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 |= (TIM_ICSelection << 8U);
 634              		.loc 1 6509 0
 635 0012 44EA0222 		orr	r2, r4, r2, lsl #8
 636              	.LVL94:
6510:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6511:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the filter */
6512:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 &= ~TIM_CCMR2_IC4F;
 637              		.loc 1 6512 0
 638 0016 22F47042 		bic	r2, r2, #61440
 639              	.LVL95:
6513:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 640              		.loc 1 6513 0
 641 001a 1B03     		lsls	r3, r3, #12
 642              	.LVL96:
 643 001c 9BB2     		uxth	r3, r3
 644 001e 1A43     		orrs	r2, r2, r3
 645              	.LVL97:
6514:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6515:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Select the Polarity and set the CC4E Bit */
6516:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 646              		.loc 1 6516 0
 647 0020 25F42045 		bic	r5, r5, #40960
 648              	.LVL98:
6517:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 649              		.loc 1 6517 0
 650 0024 0903     		lsls	r1, r1, #12
 651              	.LVL99:
 652 0026 01F42041 		and	r1, r1, #40960
 653 002a 0D43     		orrs	r5, r5, r1
 654              	.LVL100:
6518:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6519:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
6520:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 655              		.loc 1 6520 0
 656 002c C261     		str	r2, [r0, #28]
6521:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer ;
 657              		.loc 1 6521 0
 658 002e 0562     		str	r5, [r0, #32]
6522:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 659              		.loc 1 6522 0
 660 0030 30BC     		pop	{r4, r5}
 661              	.LCFI18:
ARM GAS  /tmp/ccVHe0ZY.s 			page 127


 662              		.cfi_restore 5
 663              		.cfi_restore 4
 664              		.cfi_def_cfa_offset 0
 665              	.LVL101:
 666 0032 7047     		bx	lr
 667              		.cfi_endproc
 668              	.LFE229:
 670              		.section	.text.TIM_ITRx_SetConfig,"ax",%progbits
 671              		.align	1
 672              		.syntax unified
 673              		.thumb
 674              		.thumb_func
 675              		.fpu fpv4-sp-d16
 677              	TIM_ITRx_SetConfig:
 678              	.LFB230:
6523:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6524:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6525:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Selects the Input Trigger source
6526:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6527:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  InputTriggerSource The Input Trigger source.
6528:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6529:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
6530:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
6531:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
6532:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
6533:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
6534:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
6535:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
6536:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_TS_ETRF: External Trigger input
6537:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6538:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6539:HALLIB/Src/stm32f4xx_hal_tim.c **** static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
6540:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 679              		.loc 1 6540 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684              	.LVL102:
6541:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
6542:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6543:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx SMCR register value */
6544:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = TIMx->SMCR;
 685              		.loc 1 6544 0
 686 0000 8368     		ldr	r3, [r0, #8]
 687              	.LVL103:
6545:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the TS Bits */
6546:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr &= ~TIM_SMCR_TS;
 688              		.loc 1 6546 0
 689 0002 23F07003 		bic	r3, r3, #112
 690              	.LVL104:
6547:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Input Trigger source and the slave mode*/
6548:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 691              		.loc 1 6548 0
 692 0006 1943     		orrs	r1, r1, r3
 693              	.LVL105:
 694 0008 41F00701 		orr	r1, r1, #7
ARM GAS  /tmp/ccVHe0ZY.s 			page 128


 695              	.LVL106:
6549:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx SMCR */
6550:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->SMCR = tmpsmcr;
 696              		.loc 1 6550 0
 697 000c 8160     		str	r1, [r0, #8]
 698 000e 7047     		bx	lr
 699              		.cfi_endproc
 700              	.LFE230:
 702              		.section	.text.HAL_TIM_Base_MspInit,"ax",%progbits
 703              		.align	1
 704              		.weak	HAL_TIM_Base_MspInit
 705              		.syntax unified
 706              		.thumb
 707              		.thumb_func
 708              		.fpu fpv4-sp-d16
 710              	HAL_TIM_Base_MspInit:
 711              	.LFB121:
 354:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 712              		.loc 1 354 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716              		@ link register save eliminated.
 717              	.LVL107:
 718 0000 7047     		bx	lr
 719              		.cfi_endproc
 720              	.LFE121:
 722              		.section	.text.HAL_TIM_Base_MspDeInit,"ax",%progbits
 723              		.align	1
 724              		.weak	HAL_TIM_Base_MspDeInit
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu fpv4-sp-d16
 730              	HAL_TIM_Base_MspDeInit:
 731              	.LFB122:
 369:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 732              		.loc 1 369 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737              	.LVL108:
 738 0000 7047     		bx	lr
 739              		.cfi_endproc
 740              	.LFE122:
 742              		.section	.text.HAL_TIM_Base_DeInit,"ax",%progbits
 743              		.align	1
 744              		.global	HAL_TIM_Base_DeInit
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 748              		.fpu fpv4-sp-d16
 750              	HAL_TIM_Base_DeInit:
 751              	.LFB120:
 318:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 752              		.loc 1 318 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 129


 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              	.LVL109:
 318:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 757              		.loc 1 318 0
 758 0000 10B5     		push	{r4, lr}
 759              	.LCFI19:
 760              		.cfi_def_cfa_offset 8
 761              		.cfi_offset 4, -8
 762              		.cfi_offset 14, -4
 763 0002 0446     		mov	r4, r0
 322:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 764              		.loc 1 322 0
 765 0004 0223     		movs	r3, #2
 766 0006 80F83D30 		strb	r3, [r0, #61]
 325:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 767              		.loc 1 325 0
 768 000a 0368     		ldr	r3, [r0]
 769 000c 196A     		ldr	r1, [r3, #32]
 770 000e 41F21112 		movw	r2, #4369
 771 0012 1142     		tst	r1, r2
 772 0014 08D1     		bne	.L37
 325:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 773              		.loc 1 325 0 is_stmt 0 discriminator 1
 774 0016 196A     		ldr	r1, [r3, #32]
 775 0018 40F24442 		movw	r2, #1092
 776 001c 1142     		tst	r1, r2
 777 001e 03D1     		bne	.L37
 325:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 778              		.loc 1 325 0 discriminator 2
 779 0020 1A68     		ldr	r2, [r3]
 780 0022 22F00102 		bic	r2, r2, #1
 781 0026 1A60     		str	r2, [r3]
 782              	.L37:
 336:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 783              		.loc 1 336 0 is_stmt 1
 784 0028 2046     		mov	r0, r4
 785              	.LVL110:
 786 002a FFF7FEFF 		bl	HAL_TIM_Base_MspDeInit
 787              	.LVL111:
 340:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 788              		.loc 1 340 0
 789 002e 0020     		movs	r0, #0
 790 0030 84F83D00 		strb	r0, [r4, #61]
 343:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 791              		.loc 1 343 0
 792 0034 84F83C00 		strb	r0, [r4, #60]
 346:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 793              		.loc 1 346 0
 794 0038 10BD     		pop	{r4, pc}
 795              		.cfi_endproc
 796              	.LFE120:
 798              		.section	.text.HAL_TIM_Base_Start,"ax",%progbits
 799              		.align	1
 800              		.global	HAL_TIM_Base_Start
 801              		.syntax unified
ARM GAS  /tmp/ccVHe0ZY.s 			page 130


 802              		.thumb
 803              		.thumb_func
 804              		.fpu fpv4-sp-d16
 806              	HAL_TIM_Base_Start:
 807              	.LFB123:
 385:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 808              		.loc 1 385 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 813              	.LVL112:
 392:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 814              		.loc 1 392 0
 815 0000 0223     		movs	r3, #2
 816 0002 80F83D30 		strb	r3, [r0, #61]
 395:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 817              		.loc 1 395 0
 818 0006 0268     		ldr	r2, [r0]
 819 0008 9368     		ldr	r3, [r2, #8]
 820 000a 03F00703 		and	r3, r3, #7
 821              	.LVL113:
 396:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 822              		.loc 1 396 0
 823 000e 062B     		cmp	r3, #6
 824 0010 03D0     		beq	.L40
 398:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 825              		.loc 1 398 0
 826 0012 1368     		ldr	r3, [r2]
 827              	.LVL114:
 828 0014 43F00103 		orr	r3, r3, #1
 829 0018 1360     		str	r3, [r2]
 830              	.L40:
 402:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 831              		.loc 1 402 0
 832 001a 0123     		movs	r3, #1
 833 001c 80F83D30 		strb	r3, [r0, #61]
 406:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 834              		.loc 1 406 0
 835 0020 0020     		movs	r0, #0
 836              	.LVL115:
 837 0022 7047     		bx	lr
 838              		.cfi_endproc
 839              	.LFE123:
 841              		.section	.text.HAL_TIM_Base_Stop,"ax",%progbits
 842              		.align	1
 843              		.global	HAL_TIM_Base_Stop
 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 847              		.fpu fpv4-sp-d16
 849              	HAL_TIM_Base_Stop:
 850              	.LFB124:
 414:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 851              		.loc 1 414 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 131


 854              		@ frame_needed = 0, uses_anonymous_args = 0
 855              		@ link register save eliminated.
 856              	.LVL116:
 419:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 857              		.loc 1 419 0
 858 0000 0223     		movs	r3, #2
 859 0002 80F83D30 		strb	r3, [r0, #61]
 422:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 860              		.loc 1 422 0
 861 0006 0368     		ldr	r3, [r0]
 862 0008 196A     		ldr	r1, [r3, #32]
 863 000a 41F21112 		movw	r2, #4369
 864 000e 1142     		tst	r1, r2
 865 0010 08D1     		bne	.L42
 422:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 866              		.loc 1 422 0 is_stmt 0 discriminator 1
 867 0012 196A     		ldr	r1, [r3, #32]
 868 0014 40F24442 		movw	r2, #1092
 869 0018 1142     		tst	r1, r2
 870 001a 03D1     		bne	.L42
 422:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 871              		.loc 1 422 0 discriminator 2
 872 001c 1A68     		ldr	r2, [r3]
 873 001e 22F00102 		bic	r2, r2, #1
 874 0022 1A60     		str	r2, [r3]
 875              	.L42:
 425:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 876              		.loc 1 425 0 is_stmt 1
 877 0024 0123     		movs	r3, #1
 878 0026 80F83D30 		strb	r3, [r0, #61]
 429:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 879              		.loc 1 429 0
 880 002a 0020     		movs	r0, #0
 881              	.LVL117:
 882 002c 7047     		bx	lr
 883              		.cfi_endproc
 884              	.LFE124:
 886              		.section	.text.HAL_TIM_Base_Start_IT,"ax",%progbits
 887              		.align	1
 888              		.global	HAL_TIM_Base_Start_IT
 889              		.syntax unified
 890              		.thumb
 891              		.thumb_func
 892              		.fpu fpv4-sp-d16
 894              	HAL_TIM_Base_Start_IT:
 895              	.LFB125:
 437:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 896              		.loc 1 437 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 0
 899              		@ frame_needed = 0, uses_anonymous_args = 0
 900              		@ link register save eliminated.
 901              	.LVL118:
 444:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 902              		.loc 1 444 0
 903 0000 0268     		ldr	r2, [r0]
 904 0002 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccVHe0ZY.s 			page 132


 905 0004 43F00103 		orr	r3, r3, #1
 906 0008 D360     		str	r3, [r2, #12]
 447:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 907              		.loc 1 447 0
 908 000a 0268     		ldr	r2, [r0]
 909 000c 9368     		ldr	r3, [r2, #8]
 910 000e 03F00703 		and	r3, r3, #7
 911              	.LVL119:
 448:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 912              		.loc 1 448 0
 913 0012 062B     		cmp	r3, #6
 914 0014 03D0     		beq	.L44
 450:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 915              		.loc 1 450 0
 916 0016 1368     		ldr	r3, [r2]
 917              	.LVL120:
 918 0018 43F00103 		orr	r3, r3, #1
 919 001c 1360     		str	r3, [r2]
 920              	.L44:
 455:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 921              		.loc 1 455 0
 922 001e 0020     		movs	r0, #0
 923              	.LVL121:
 924 0020 7047     		bx	lr
 925              		.cfi_endproc
 926              	.LFE125:
 928              		.section	.text.HAL_TIM_Base_Stop_IT,"ax",%progbits
 929              		.align	1
 930              		.global	HAL_TIM_Base_Stop_IT
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 934              		.fpu fpv4-sp-d16
 936              	HAL_TIM_Base_Stop_IT:
 937              	.LFB126:
 463:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 938              		.loc 1 463 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 943              	.LVL122:
 467:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 944              		.loc 1 467 0
 945 0000 0268     		ldr	r2, [r0]
 946 0002 D368     		ldr	r3, [r2, #12]
 947 0004 23F00103 		bic	r3, r3, #1
 948 0008 D360     		str	r3, [r2, #12]
 470:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 949              		.loc 1 470 0
 950 000a 0368     		ldr	r3, [r0]
 951 000c 196A     		ldr	r1, [r3, #32]
 952 000e 41F21112 		movw	r2, #4369
 953 0012 1142     		tst	r1, r2
 954 0014 08D1     		bne	.L46
 470:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 955              		.loc 1 470 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccVHe0ZY.s 			page 133


 956 0016 196A     		ldr	r1, [r3, #32]
 957 0018 40F24442 		movw	r2, #1092
 958 001c 1142     		tst	r1, r2
 959 001e 03D1     		bne	.L46
 470:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 960              		.loc 1 470 0 discriminator 2
 961 0020 1A68     		ldr	r2, [r3]
 962 0022 22F00102 		bic	r2, r2, #1
 963 0026 1A60     		str	r2, [r3]
 964              	.L46:
 474:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 965              		.loc 1 474 0 is_stmt 1
 966 0028 0020     		movs	r0, #0
 967              	.LVL123:
 968 002a 7047     		bx	lr
 969              		.cfi_endproc
 970              	.LFE126:
 972              		.section	.text.HAL_TIM_Base_Start_DMA,"ax",%progbits
 973              		.align	1
 974              		.global	HAL_TIM_Base_Start_DMA
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu fpv4-sp-d16
 980              	HAL_TIM_Base_Start_DMA:
 981              	.LFB127:
 484:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 982              		.loc 1 484 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 0, uses_anonymous_args = 0
 986              	.LVL124:
 987 0000 38B5     		push	{r3, r4, r5, lr}
 988              	.LCFI20:
 989              		.cfi_def_cfa_offset 16
 990              		.cfi_offset 3, -16
 991              		.cfi_offset 4, -12
 992              		.cfi_offset 5, -8
 993              		.cfi_offset 14, -4
 490:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 994              		.loc 1 490 0
 995 0002 90F83D50 		ldrb	r5, [r0, #61]	@ zero_extendqisi2
 996 0006 EDB2     		uxtb	r5, r5
 997 0008 022D     		cmp	r5, #2
 998 000a 2FD0     		beq	.L51
 494:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 999              		.loc 1 494 0
 1000 000c 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 1001 0010 DBB2     		uxtb	r3, r3
 1002 0012 012B     		cmp	r3, #1
 1003 0014 21D0     		beq	.L55
 1004              	.L49:
 1005 0016 1346     		mov	r3, r2
 1006 0018 0446     		mov	r4, r0
 511:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 1007              		.loc 1 511 0
 1008 001a 026A     		ldr	r2, [r0, #32]
ARM GAS  /tmp/ccVHe0ZY.s 			page 134


 1009              	.LVL125:
 1010 001c 1648     		ldr	r0, .L57
 1011              	.LVL126:
 1012 001e D063     		str	r0, [r2, #60]
 512:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1013              		.loc 1 512 0
 1014 0020 226A     		ldr	r2, [r4, #32]
 1015 0022 1648     		ldr	r0, .L57+4
 1016 0024 1064     		str	r0, [r2, #64]
 515:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1017              		.loc 1 515 0
 1018 0026 226A     		ldr	r2, [r4, #32]
 1019 0028 1548     		ldr	r0, .L57+8
 1020 002a D064     		str	r0, [r2, #76]
 518:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 1021              		.loc 1 518 0
 1022 002c 2268     		ldr	r2, [r4]
 1023 002e 2C32     		adds	r2, r2, #44
 1024 0030 206A     		ldr	r0, [r4, #32]
 1025 0032 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1026              	.LVL127:
 1027 0036 0346     		mov	r3, r0
 1028 0038 D8B9     		cbnz	r0, .L53
 524:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1029              		.loc 1 524 0
 1030 003a 2168     		ldr	r1, [r4]
 1031 003c CA68     		ldr	r2, [r1, #12]
 1032 003e 42F48072 		orr	r2, r2, #256
 1033 0042 CA60     		str	r2, [r1, #12]
 527:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 1034              		.loc 1 527 0
 1035 0044 2168     		ldr	r1, [r4]
 1036 0046 8A68     		ldr	r2, [r1, #8]
 1037 0048 02F00702 		and	r2, r2, #7
 1038              	.LVL128:
 528:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 1039              		.loc 1 528 0
 1040 004c 062A     		cmp	r2, #6
 1041 004e 0ED0     		beq	.L48
 530:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 1042              		.loc 1 530 0
 1043 0050 0A68     		ldr	r2, [r1]
 1044              	.LVL129:
 1045 0052 42F00102 		orr	r2, r2, #1
 1046 0056 0A60     		str	r2, [r1]
 1047 0058 09E0     		b	.L48
 1048              	.LVL130:
 1049              	.L55:
 496:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 1050              		.loc 1 496 0
 1051 005a 19B1     		cbz	r1, .L56
 1052              	.L50:
 502:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 1053              		.loc 1 502 0
 1054 005c 0223     		movs	r3, #2
 1055 005e 80F83D30 		strb	r3, [r0, #61]
 1056 0062 D8E7     		b	.L49
ARM GAS  /tmp/ccVHe0ZY.s 			page 135


 1057              	.L56:
 496:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 1058              		.loc 1 496 0 discriminator 1
 1059 0064 002A     		cmp	r2, #0
 1060 0066 F9D0     		beq	.L50
 498:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 1061              		.loc 1 498 0
 1062 0068 0123     		movs	r3, #1
 1063 006a 00E0     		b	.L48
 1064              	.L51:
 492:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 1065              		.loc 1 492 0
 1066 006c 0223     		movs	r3, #2
 1067              	.LVL131:
 1068              	.L48:
 535:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1069              		.loc 1 535 0
 1070 006e 1846     		mov	r0, r3
 1071 0070 38BD     		pop	{r3, r4, r5, pc}
 1072              	.LVL132:
 1073              	.L53:
 520:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 1074              		.loc 1 520 0
 1075 0072 0123     		movs	r3, #1
 1076 0074 FBE7     		b	.L48
 1077              	.L58:
 1078 0076 00BF     		.align	2
 1079              	.L57:
 1080 0078 00000000 		.word	TIM_DMAPeriodElapsedCplt
 1081 007c 00000000 		.word	TIM_DMAPeriodElapsedHalfCplt
 1082 0080 00000000 		.word	TIM_DMAError
 1083              		.cfi_endproc
 1084              	.LFE127:
 1086              		.section	.text.HAL_TIM_Base_Stop_DMA,"ax",%progbits
 1087              		.align	1
 1088              		.global	HAL_TIM_Base_Stop_DMA
 1089              		.syntax unified
 1090              		.thumb
 1091              		.thumb_func
 1092              		.fpu fpv4-sp-d16
 1094              	HAL_TIM_Base_Stop_DMA:
 1095              	.LFB128:
 543:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1096              		.loc 1 543 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              	.LVL133:
 1101 0000 10B5     		push	{r4, lr}
 1102              	.LCFI21:
 1103              		.cfi_def_cfa_offset 8
 1104              		.cfi_offset 4, -8
 1105              		.cfi_offset 14, -4
 1106 0002 0446     		mov	r4, r0
 548:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1107              		.loc 1 548 0
 1108 0004 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccVHe0ZY.s 			page 136


 1109 0006 D368     		ldr	r3, [r2, #12]
 1110 0008 23F48073 		bic	r3, r3, #256
 1111 000c D360     		str	r3, [r2, #12]
 550:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1112              		.loc 1 550 0
 1113 000e 006A     		ldr	r0, [r0, #32]
 1114              	.LVL134:
 1115 0010 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 1116              	.LVL135:
 553:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1117              		.loc 1 553 0
 1118 0014 2368     		ldr	r3, [r4]
 1119 0016 196A     		ldr	r1, [r3, #32]
 1120 0018 41F21112 		movw	r2, #4369
 1121 001c 1142     		tst	r1, r2
 1122 001e 08D1     		bne	.L60
 553:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1123              		.loc 1 553 0 is_stmt 0 discriminator 1
 1124 0020 196A     		ldr	r1, [r3, #32]
 1125 0022 40F24442 		movw	r2, #1092
 1126 0026 1142     		tst	r1, r2
 1127 0028 03D1     		bne	.L60
 553:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1128              		.loc 1 553 0 discriminator 2
 1129 002a 1A68     		ldr	r2, [r3]
 1130 002c 22F00102 		bic	r2, r2, #1
 1131 0030 1A60     		str	r2, [r3]
 1132              	.L60:
 556:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1133              		.loc 1 556 0 is_stmt 1
 1134 0032 0123     		movs	r3, #1
 1135 0034 84F83D30 		strb	r3, [r4, #61]
 560:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1136              		.loc 1 560 0
 1137 0038 0020     		movs	r0, #0
 1138 003a 10BD     		pop	{r4, pc}
 1139              		.cfi_endproc
 1140              	.LFE128:
 1142              		.section	.text.HAL_TIM_OC_MspInit,"ax",%progbits
 1143              		.align	1
 1144              		.weak	HAL_TIM_OC_MspInit
 1145              		.syntax unified
 1146              		.thumb
 1147              		.thumb_func
 1148              		.fpu fpv4-sp-d16
 1150              	HAL_TIM_OC_MspInit:
 1151              	.LFB131:
 686:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1152              		.loc 1 686 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 0
 1155              		@ frame_needed = 0, uses_anonymous_args = 0
 1156              		@ link register save eliminated.
 1157              	.LVL136:
 1158 0000 7047     		bx	lr
 1159              		.cfi_endproc
 1160              	.LFE131:
ARM GAS  /tmp/ccVHe0ZY.s 			page 137


 1162              		.section	.text.HAL_TIM_OC_MspDeInit,"ax",%progbits
 1163              		.align	1
 1164              		.weak	HAL_TIM_OC_MspDeInit
 1165              		.syntax unified
 1166              		.thumb
 1167              		.thumb_func
 1168              		.fpu fpv4-sp-d16
 1170              	HAL_TIM_OC_MspDeInit:
 1171              	.LFB132:
 701:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1172              		.loc 1 701 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 0
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176              		@ link register save eliminated.
 1177              	.LVL137:
 1178 0000 7047     		bx	lr
 1179              		.cfi_endproc
 1180              	.LFE132:
 1182              		.section	.text.HAL_TIM_OC_DeInit,"ax",%progbits
 1183              		.align	1
 1184              		.global	HAL_TIM_OC_DeInit
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu fpv4-sp-d16
 1190              	HAL_TIM_OC_DeInit:
 1191              	.LFB130:
 650:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1192              		.loc 1 650 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              	.LVL138:
 650:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1197              		.loc 1 650 0
 1198 0000 10B5     		push	{r4, lr}
 1199              	.LCFI22:
 1200              		.cfi_def_cfa_offset 8
 1201              		.cfi_offset 4, -8
 1202              		.cfi_offset 14, -4
 1203 0002 0446     		mov	r4, r0
 654:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1204              		.loc 1 654 0
 1205 0004 0223     		movs	r3, #2
 1206 0006 80F83D30 		strb	r3, [r0, #61]
 657:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1207              		.loc 1 657 0
 1208 000a 0368     		ldr	r3, [r0]
 1209 000c 196A     		ldr	r1, [r3, #32]
 1210 000e 41F21112 		movw	r2, #4369
 1211 0012 1142     		tst	r1, r2
 1212 0014 08D1     		bne	.L65
 657:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1213              		.loc 1 657 0 is_stmt 0 discriminator 1
 1214 0016 196A     		ldr	r1, [r3, #32]
 1215 0018 40F24442 		movw	r2, #1092
ARM GAS  /tmp/ccVHe0ZY.s 			page 138


 1216 001c 1142     		tst	r1, r2
 1217 001e 03D1     		bne	.L65
 657:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1218              		.loc 1 657 0 discriminator 2
 1219 0020 1A68     		ldr	r2, [r3]
 1220 0022 22F00102 		bic	r2, r2, #1
 1221 0026 1A60     		str	r2, [r3]
 1222              	.L65:
 668:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 1223              		.loc 1 668 0 is_stmt 1
 1224 0028 2046     		mov	r0, r4
 1225              	.LVL139:
 1226 002a FFF7FEFF 		bl	HAL_TIM_OC_MspDeInit
 1227              	.LVL140:
 672:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1228              		.loc 1 672 0
 1229 002e 0020     		movs	r0, #0
 1230 0030 84F83D00 		strb	r0, [r4, #61]
 675:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1231              		.loc 1 675 0
 1232 0034 84F83C00 		strb	r0, [r4, #60]
 678:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1233              		.loc 1 678 0
 1234 0038 10BD     		pop	{r4, pc}
 1235              		.cfi_endproc
 1236              	.LFE130:
 1238              		.section	.text.HAL_TIM_PWM_MspInit,"ax",%progbits
 1239              		.align	1
 1240              		.weak	HAL_TIM_PWM_MspInit
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	HAL_TIM_PWM_MspInit:
 1247              	.LFB141:
1259:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1248              		.loc 1 1259 0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 1253              	.LVL141:
 1254 0000 7047     		bx	lr
 1255              		.cfi_endproc
 1256              	.LFE141:
 1258              		.section	.text.HAL_TIM_PWM_MspDeInit,"ax",%progbits
 1259              		.align	1
 1260              		.weak	HAL_TIM_PWM_MspDeInit
 1261              		.syntax unified
 1262              		.thumb
 1263              		.thumb_func
 1264              		.fpu fpv4-sp-d16
 1266              	HAL_TIM_PWM_MspDeInit:
 1267              	.LFB142:
1274:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1268              		.loc 1 1274 0
 1269              		.cfi_startproc
ARM GAS  /tmp/ccVHe0ZY.s 			page 139


 1270              		@ args = 0, pretend = 0, frame = 0
 1271              		@ frame_needed = 0, uses_anonymous_args = 0
 1272              		@ link register save eliminated.
 1273              	.LVL142:
 1274 0000 7047     		bx	lr
 1275              		.cfi_endproc
 1276              	.LFE142:
 1278              		.section	.text.HAL_TIM_PWM_DeInit,"ax",%progbits
 1279              		.align	1
 1280              		.global	HAL_TIM_PWM_DeInit
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1284              		.fpu fpv4-sp-d16
 1286              	HAL_TIM_PWM_DeInit:
 1287              	.LFB140:
1223:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1288              		.loc 1 1223 0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 0
 1291              		@ frame_needed = 0, uses_anonymous_args = 0
 1292              	.LVL143:
1223:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1293              		.loc 1 1223 0
 1294 0000 10B5     		push	{r4, lr}
 1295              	.LCFI23:
 1296              		.cfi_def_cfa_offset 8
 1297              		.cfi_offset 4, -8
 1298              		.cfi_offset 14, -4
 1299 0002 0446     		mov	r4, r0
1227:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1300              		.loc 1 1227 0
 1301 0004 0223     		movs	r3, #2
 1302 0006 80F83D30 		strb	r3, [r0, #61]
1230:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1303              		.loc 1 1230 0
 1304 000a 0368     		ldr	r3, [r0]
 1305 000c 196A     		ldr	r1, [r3, #32]
 1306 000e 41F21112 		movw	r2, #4369
 1307 0012 1142     		tst	r1, r2
 1308 0014 08D1     		bne	.L70
1230:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1309              		.loc 1 1230 0 is_stmt 0 discriminator 1
 1310 0016 196A     		ldr	r1, [r3, #32]
 1311 0018 40F24442 		movw	r2, #1092
 1312 001c 1142     		tst	r1, r2
 1313 001e 03D1     		bne	.L70
1230:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1314              		.loc 1 1230 0 discriminator 2
 1315 0020 1A68     		ldr	r2, [r3]
 1316 0022 22F00102 		bic	r2, r2, #1
 1317 0026 1A60     		str	r2, [r3]
 1318              	.L70:
1241:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 1319              		.loc 1 1241 0 is_stmt 1
 1320 0028 2046     		mov	r0, r4
 1321              	.LVL144:
ARM GAS  /tmp/ccVHe0ZY.s 			page 140


 1322 002a FFF7FEFF 		bl	HAL_TIM_PWM_MspDeInit
 1323              	.LVL145:
1245:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1324              		.loc 1 1245 0
 1325 002e 0020     		movs	r0, #0
 1326 0030 84F83D00 		strb	r0, [r4, #61]
1248:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1327              		.loc 1 1248 0
 1328 0034 84F83C00 		strb	r0, [r4, #60]
1251:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1329              		.loc 1 1251 0
 1330 0038 10BD     		pop	{r4, pc}
 1331              		.cfi_endproc
 1332              	.LFE140:
 1334              		.section	.text.HAL_TIM_IC_MspInit,"ax",%progbits
 1335              		.align	1
 1336              		.weak	HAL_TIM_IC_MspInit
 1337              		.syntax unified
 1338              		.thumb
 1339              		.thumb_func
 1340              		.fpu fpv4-sp-d16
 1342              	HAL_TIM_IC_MspInit:
 1343              	.LFB151:
1833:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1344              		.loc 1 1833 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 0
 1347              		@ frame_needed = 0, uses_anonymous_args = 0
 1348              		@ link register save eliminated.
 1349              	.LVL146:
 1350 0000 7047     		bx	lr
 1351              		.cfi_endproc
 1352              	.LFE151:
 1354              		.section	.text.HAL_TIM_IC_MspDeInit,"ax",%progbits
 1355              		.align	1
 1356              		.weak	HAL_TIM_IC_MspDeInit
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	HAL_TIM_IC_MspDeInit:
 1363              	.LFB152:
1848:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1364              		.loc 1 1848 0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 0
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 1368              		@ link register save eliminated.
 1369              	.LVL147:
 1370 0000 7047     		bx	lr
 1371              		.cfi_endproc
 1372              	.LFE152:
 1374              		.section	.text.HAL_TIM_IC_DeInit,"ax",%progbits
 1375              		.align	1
 1376              		.global	HAL_TIM_IC_DeInit
 1377              		.syntax unified
 1378              		.thumb
ARM GAS  /tmp/ccVHe0ZY.s 			page 141


 1379              		.thumb_func
 1380              		.fpu fpv4-sp-d16
 1382              	HAL_TIM_IC_DeInit:
 1383              	.LFB150:
1797:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1384              		.loc 1 1797 0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 1388              	.LVL148:
1797:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1389              		.loc 1 1797 0
 1390 0000 10B5     		push	{r4, lr}
 1391              	.LCFI24:
 1392              		.cfi_def_cfa_offset 8
 1393              		.cfi_offset 4, -8
 1394              		.cfi_offset 14, -4
 1395 0002 0446     		mov	r4, r0
1801:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1396              		.loc 1 1801 0
 1397 0004 0223     		movs	r3, #2
 1398 0006 80F83D30 		strb	r3, [r0, #61]
1804:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1399              		.loc 1 1804 0
 1400 000a 0368     		ldr	r3, [r0]
 1401 000c 196A     		ldr	r1, [r3, #32]
 1402 000e 41F21112 		movw	r2, #4369
 1403 0012 1142     		tst	r1, r2
 1404 0014 08D1     		bne	.L75
1804:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1405              		.loc 1 1804 0 is_stmt 0 discriminator 1
 1406 0016 196A     		ldr	r1, [r3, #32]
 1407 0018 40F24442 		movw	r2, #1092
 1408 001c 1142     		tst	r1, r2
 1409 001e 03D1     		bne	.L75
1804:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1410              		.loc 1 1804 0 discriminator 2
 1411 0020 1A68     		ldr	r2, [r3]
 1412 0022 22F00102 		bic	r2, r2, #1
 1413 0026 1A60     		str	r2, [r3]
 1414              	.L75:
1815:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 1415              		.loc 1 1815 0 is_stmt 1
 1416 0028 2046     		mov	r0, r4
 1417              	.LVL149:
 1418 002a FFF7FEFF 		bl	HAL_TIM_IC_MspDeInit
 1419              	.LVL150:
1819:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1420              		.loc 1 1819 0
 1421 002e 0020     		movs	r0, #0
 1422 0030 84F83D00 		strb	r0, [r4, #61]
1822:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1423              		.loc 1 1822 0
 1424 0034 84F83C00 		strb	r0, [r4, #60]
1825:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1425              		.loc 1 1825 0
 1426 0038 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccVHe0ZY.s 			page 142


 1427              		.cfi_endproc
 1428              	.LFE150:
 1430              		.section	.text.HAL_TIM_OnePulse_MspInit,"ax",%progbits
 1431              		.align	1
 1432              		.weak	HAL_TIM_OnePulse_MspInit
 1433              		.syntax unified
 1434              		.thumb
 1435              		.thumb_func
 1436              		.fpu fpv4-sp-d16
 1438              	HAL_TIM_OnePulse_MspInit:
 1439              	.LFB161:
2379:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1440              		.loc 1 2379 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 1444              		@ link register save eliminated.
 1445              	.LVL151:
 1446 0000 7047     		bx	lr
 1447              		.cfi_endproc
 1448              	.LFE161:
 1450              		.section	.text.HAL_TIM_OnePulse_MspDeInit,"ax",%progbits
 1451              		.align	1
 1452              		.weak	HAL_TIM_OnePulse_MspDeInit
 1453              		.syntax unified
 1454              		.thumb
 1455              		.thumb_func
 1456              		.fpu fpv4-sp-d16
 1458              	HAL_TIM_OnePulse_MspDeInit:
 1459              	.LFB162:
2394:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1460              		.loc 1 2394 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 0
 1463              		@ frame_needed = 0, uses_anonymous_args = 0
 1464              		@ link register save eliminated.
 1465              	.LVL152:
 1466 0000 7047     		bx	lr
 1467              		.cfi_endproc
 1468              	.LFE162:
 1470              		.section	.text.HAL_TIM_OnePulse_DeInit,"ax",%progbits
 1471              		.align	1
 1472              		.global	HAL_TIM_OnePulse_DeInit
 1473              		.syntax unified
 1474              		.thumb
 1475              		.thumb_func
 1476              		.fpu fpv4-sp-d16
 1478              	HAL_TIM_OnePulse_DeInit:
 1479              	.LFB160:
2343:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1480              		.loc 1 2343 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              	.LVL153:
2343:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1485              		.loc 1 2343 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 143


 1486 0000 10B5     		push	{r4, lr}
 1487              	.LCFI25:
 1488              		.cfi_def_cfa_offset 8
 1489              		.cfi_offset 4, -8
 1490              		.cfi_offset 14, -4
 1491 0002 0446     		mov	r4, r0
2347:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1492              		.loc 1 2347 0
 1493 0004 0223     		movs	r3, #2
 1494 0006 80F83D30 		strb	r3, [r0, #61]
2350:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1495              		.loc 1 2350 0
 1496 000a 0368     		ldr	r3, [r0]
 1497 000c 196A     		ldr	r1, [r3, #32]
 1498 000e 41F21112 		movw	r2, #4369
 1499 0012 1142     		tst	r1, r2
 1500 0014 08D1     		bne	.L80
2350:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1501              		.loc 1 2350 0 is_stmt 0 discriminator 1
 1502 0016 196A     		ldr	r1, [r3, #32]
 1503 0018 40F24442 		movw	r2, #1092
 1504 001c 1142     		tst	r1, r2
 1505 001e 03D1     		bne	.L80
2350:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1506              		.loc 1 2350 0 discriminator 2
 1507 0020 1A68     		ldr	r2, [r3]
 1508 0022 22F00102 		bic	r2, r2, #1
 1509 0026 1A60     		str	r2, [r3]
 1510              	.L80:
2361:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 1511              		.loc 1 2361 0 is_stmt 1
 1512 0028 2046     		mov	r0, r4
 1513              	.LVL154:
 1514 002a FFF7FEFF 		bl	HAL_TIM_OnePulse_MspDeInit
 1515              	.LVL155:
2365:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1516              		.loc 1 2365 0
 1517 002e 0020     		movs	r0, #0
 1518 0030 84F83D00 		strb	r0, [r4, #61]
2368:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1519              		.loc 1 2368 0
 1520 0034 84F83C00 		strb	r0, [r4, #60]
2371:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1521              		.loc 1 2371 0
 1522 0038 10BD     		pop	{r4, pc}
 1523              		.cfi_endproc
 1524              	.LFE160:
 1526              		.section	.text.HAL_TIM_Encoder_MspInit,"ax",%progbits
 1527              		.align	1
 1528              		.weak	HAL_TIM_Encoder_MspInit
 1529              		.syntax unified
 1530              		.thumb
 1531              		.thumb_func
 1532              		.fpu fpv4-sp-d16
 1534              	HAL_TIM_Encoder_MspInit:
 1535              	.LFB169:
2738:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccVHe0ZY.s 			page 144


 1536              		.loc 1 2738 0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 0
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 1540              		@ link register save eliminated.
 1541              	.LVL156:
 1542 0000 7047     		bx	lr
 1543              		.cfi_endproc
 1544              	.LFE169:
 1546              		.section	.text.HAL_TIM_Encoder_MspDeInit,"ax",%progbits
 1547              		.align	1
 1548              		.weak	HAL_TIM_Encoder_MspDeInit
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv4-sp-d16
 1554              	HAL_TIM_Encoder_MspDeInit:
 1555              	.LFB170:
2753:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 1556              		.loc 1 2753 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              		@ link register save eliminated.
 1561              	.LVL157:
 1562 0000 7047     		bx	lr
 1563              		.cfi_endproc
 1564              	.LFE170:
 1566              		.section	.text.HAL_TIM_Encoder_DeInit,"ax",%progbits
 1567              		.align	1
 1568              		.global	HAL_TIM_Encoder_DeInit
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1572              		.fpu fpv4-sp-d16
 1574              	HAL_TIM_Encoder_DeInit:
 1575              	.LFB168:
2702:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1576              		.loc 1 2702 0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580              	.LVL158:
2702:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1581              		.loc 1 2702 0
 1582 0000 10B5     		push	{r4, lr}
 1583              	.LCFI26:
 1584              		.cfi_def_cfa_offset 8
 1585              		.cfi_offset 4, -8
 1586              		.cfi_offset 14, -4
 1587 0002 0446     		mov	r4, r0
2706:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1588              		.loc 1 2706 0
 1589 0004 0223     		movs	r3, #2
 1590 0006 80F83D30 		strb	r3, [r0, #61]
2709:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1591              		.loc 1 2709 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 145


 1592 000a 0368     		ldr	r3, [r0]
 1593 000c 196A     		ldr	r1, [r3, #32]
 1594 000e 41F21112 		movw	r2, #4369
 1595 0012 1142     		tst	r1, r2
 1596 0014 08D1     		bne	.L85
2709:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1597              		.loc 1 2709 0 is_stmt 0 discriminator 1
 1598 0016 196A     		ldr	r1, [r3, #32]
 1599 0018 40F24442 		movw	r2, #1092
 1600 001c 1142     		tst	r1, r2
 1601 001e 03D1     		bne	.L85
2709:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1602              		.loc 1 2709 0 discriminator 2
 1603 0020 1A68     		ldr	r2, [r3]
 1604 0022 22F00102 		bic	r2, r2, #1
 1605 0026 1A60     		str	r2, [r3]
 1606              	.L85:
2720:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 1607              		.loc 1 2720 0 is_stmt 1
 1608 0028 2046     		mov	r0, r4
 1609              	.LVL159:
 1610 002a FFF7FEFF 		bl	HAL_TIM_Encoder_MspDeInit
 1611              	.LVL160:
2724:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1612              		.loc 1 2724 0
 1613 002e 0020     		movs	r0, #0
 1614 0030 84F83D00 		strb	r0, [r4, #61]
2727:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1615              		.loc 1 2727 0
 1616 0034 84F83C00 		strb	r0, [r4, #60]
2730:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1617              		.loc 1 2730 0
 1618 0038 10BD     		pop	{r4, pc}
 1619              		.cfi_endproc
 1620              	.LFE168:
 1622              		.section	.text.HAL_TIM_DMABurst_WriteStart,"ax",%progbits
 1623              		.align	1
 1624              		.global	HAL_TIM_DMABurst_WriteStart
 1625              		.syntax unified
 1626              		.thumb
 1627              		.thumb_func
 1628              		.fpu fpv4-sp-d16
 1630              	HAL_TIM_DMABurst_WriteStart:
 1631              	.LFB182:
3815:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 1632              		.loc 1 3815 0
 1633              		.cfi_startproc
 1634              		@ args = 4, pretend = 0, frame = 0
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 1636              	.LVL161:
 1637 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1638              	.LCFI27:
 1639              		.cfi_def_cfa_offset 24
 1640              		.cfi_offset 3, -24
 1641              		.cfi_offset 4, -20
 1642              		.cfi_offset 5, -16
 1643              		.cfi_offset 6, -12
ARM GAS  /tmp/ccVHe0ZY.s 			page 146


 1644              		.cfi_offset 7, -8
 1645              		.cfi_offset 14, -4
3822:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 1646              		.loc 1 3822 0
 1647 0002 90F83D50 		ldrb	r5, [r0, #61]	@ zero_extendqisi2
 1648 0006 EDB2     		uxtb	r5, r5
 1649 0008 022D     		cmp	r5, #2
 1650 000a 00F0D580 		beq	.L100
3826:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 1651              		.loc 1 3826 0
 1652 000e 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 1653 0012 E4B2     		uxtb	r4, r4
 1654 0014 012C     		cmp	r4, #1
 1655 0016 1ED0     		beq	.L110
 1656              	.L89:
 1657 0018 1E46     		mov	r6, r3
 1658 001a 1546     		mov	r5, r2
 1659 001c 0F46     		mov	r7, r1
 1660 001e 0446     		mov	r4, r0
3841:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 1661              		.loc 1 3841 0
 1662 0020 B2F5006F 		cmp	r2, #2048
 1663 0024 00F08380 		beq	.L92
 1664 0028 1FD8     		bhi	.L93
 1665 002a B2F5007F 		cmp	r2, #512
 1666 002e 52D0     		beq	.L94
 1667 0030 B2F5806F 		cmp	r2, #1024
 1668 0034 65D0     		beq	.L95
 1669 0036 B2F5807F 		cmp	r2, #256
 1670 003a 36D0     		beq	.L111
 1671              	.LVL162:
 1672              	.L91:
3965:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1673              		.loc 1 3965 0
 1674 003c 2368     		ldr	r3, [r4]
 1675 003e 069A     		ldr	r2, [sp, #24]
 1676 0040 1743     		orrs	r7, r7, r2
 1677              	.LVL163:
 1678 0042 9F64     		str	r7, [r3, #72]
3968:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1679              		.loc 1 3968 0
 1680 0044 2368     		ldr	r3, [r4]
 1681 0046 DA68     		ldr	r2, [r3, #12]
 1682 0048 2A43     		orrs	r2, r2, r5
 1683 004a DA60     		str	r2, [r3, #12]
3970:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1684              		.loc 1 3970 0
 1685 004c 0123     		movs	r3, #1
 1686 004e 84F83D30 		strb	r3, [r4, #61]
3973:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 1687              		.loc 1 3973 0
 1688 0052 0020     		movs	r0, #0
 1689 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1690              	.LVL164:
 1691              	.L110:
3828:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 1692              		.loc 1 3828 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 147


 1693 0056 1BB1     		cbz	r3, .L112
 1694              	.L90:
3834:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 1695              		.loc 1 3834 0
 1696 0058 0224     		movs	r4, #2
 1697 005a 80F83D40 		strb	r4, [r0, #61]
 1698 005e DBE7     		b	.L89
 1699              	.L112:
3828:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 1700              		.loc 1 3828 0 discriminator 1
 1701 0060 069C     		ldr	r4, [sp, #24]
 1702 0062 002C     		cmp	r4, #0
 1703 0064 F8D0     		beq	.L90
3830:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 1704              		.loc 1 3830 0
 1705 0066 0120     		movs	r0, #1
 1706              	.LVL165:
 1707 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1708              	.LVL166:
 1709              	.L93:
3841:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 1710              		.loc 1 3841 0
 1711 006a B2F5005F 		cmp	r2, #8192
 1712 006e 75D0     		beq	.L97
 1713 0070 B2F5804F 		cmp	r2, #16384
 1714 0074 00F08980 		beq	.L98
 1715 0078 B2F5805F 		cmp	r2, #4096
 1716 007c DED1     		bne	.L91
3913:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 1717              		.loc 1 3913 0
 1718 007e 036B     		ldr	r3, [r0, #48]
 1719              	.LVL167:
 1720 0080 4E4A     		ldr	r2, .L113
 1721              	.LVL168:
 1722 0082 DA63     		str	r2, [r3, #60]
3914:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1723              		.loc 1 3914 0
 1724 0084 036B     		ldr	r3, [r0, #48]
 1725 0086 4E4A     		ldr	r2, .L113+4
 1726 0088 1A64     		str	r2, [r3, #64]
3917:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1727              		.loc 1 3917 0
 1728 008a 036B     		ldr	r3, [r0, #48]
 1729 008c 4D4A     		ldr	r2, .L113+8
 1730 008e DA64     		str	r2, [r3, #76]
3921:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 1731              		.loc 1 3921 0
 1732 0090 0268     		ldr	r2, [r0]
 1733 0092 069B     		ldr	r3, [sp, #24]
 1734 0094 1B0A     		lsrs	r3, r3, #8
3920:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 1735              		.loc 1 3920 0
 1736 0096 0133     		adds	r3, r3, #1
 1737 0098 4C32     		adds	r2, r2, #76
 1738 009a 3146     		mov	r1, r6
 1739              	.LVL169:
 1740 009c 006B     		ldr	r0, [r0, #48]
ARM GAS  /tmp/ccVHe0ZY.s 			page 148


 1741              	.LVL170:
 1742 009e FFF7FEFF 		bl	HAL_DMA_Start_IT
 1743              	.LVL171:
 1744 00a2 0028     		cmp	r0, #0
 1745 00a4 CAD0     		beq	.L91
3923:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 1746              		.loc 1 3923 0
 1747 00a6 0120     		movs	r0, #1
 1748 00a8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1749              	.LVL172:
 1750              	.L111:
3846:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 1751              		.loc 1 3846 0
 1752 00aa 036A     		ldr	r3, [r0, #32]
 1753              	.LVL173:
 1754 00ac 464A     		ldr	r2, .L113+12
 1755              	.LVL174:
 1756 00ae DA63     		str	r2, [r3, #60]
3847:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1757              		.loc 1 3847 0
 1758 00b0 036A     		ldr	r3, [r0, #32]
 1759 00b2 464A     		ldr	r2, .L113+16
 1760 00b4 1A64     		str	r2, [r3, #64]
3850:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1761              		.loc 1 3850 0
 1762 00b6 036A     		ldr	r3, [r0, #32]
 1763 00b8 424A     		ldr	r2, .L113+8
 1764 00ba DA64     		str	r2, [r3, #76]
3853:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 1765              		.loc 1 3853 0
 1766 00bc 0268     		ldr	r2, [r0]
 1767 00be 069B     		ldr	r3, [sp, #24]
 1768 00c0 1B0A     		lsrs	r3, r3, #8
 1769 00c2 0133     		adds	r3, r3, #1
 1770 00c4 4C32     		adds	r2, r2, #76
 1771 00c6 3146     		mov	r1, r6
 1772              	.LVL175:
 1773 00c8 006A     		ldr	r0, [r0, #32]
 1774              	.LVL176:
 1775 00ca FFF7FEFF 		bl	HAL_DMA_Start_IT
 1776              	.LVL177:
 1777 00ce 0028     		cmp	r0, #0
 1778 00d0 B4D0     		beq	.L91
3855:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 1779              		.loc 1 3855 0
 1780 00d2 0120     		movs	r0, #1
 1781 00d4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1782              	.LVL178:
 1783              	.L94:
3862:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 1784              		.loc 1 3862 0
 1785 00d6 436A     		ldr	r3, [r0, #36]
 1786              	.LVL179:
 1787 00d8 384A     		ldr	r2, .L113
 1788              	.LVL180:
 1789 00da DA63     		str	r2, [r3, #60]
3863:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 149


 1790              		.loc 1 3863 0
 1791 00dc 436A     		ldr	r3, [r0, #36]
 1792 00de 384A     		ldr	r2, .L113+4
 1793 00e0 1A64     		str	r2, [r3, #64]
3866:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1794              		.loc 1 3866 0
 1795 00e2 436A     		ldr	r3, [r0, #36]
 1796 00e4 374A     		ldr	r2, .L113+8
 1797 00e6 DA64     		str	r2, [r3, #76]
3870:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 1798              		.loc 1 3870 0
 1799 00e8 0268     		ldr	r2, [r0]
 1800 00ea 069B     		ldr	r3, [sp, #24]
 1801 00ec 1B0A     		lsrs	r3, r3, #8
3869:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 1802              		.loc 1 3869 0
 1803 00ee 0133     		adds	r3, r3, #1
 1804 00f0 4C32     		adds	r2, r2, #76
 1805 00f2 3146     		mov	r1, r6
 1806              	.LVL181:
 1807 00f4 406A     		ldr	r0, [r0, #36]
 1808              	.LVL182:
 1809 00f6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1810              	.LVL183:
 1811 00fa 0028     		cmp	r0, #0
 1812 00fc 9ED0     		beq	.L91
3872:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 1813              		.loc 1 3872 0
 1814 00fe 0120     		movs	r0, #1
 1815 0100 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1816              	.LVL184:
 1817              	.L95:
3879:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 1818              		.loc 1 3879 0
 1819 0102 836A     		ldr	r3, [r0, #40]
 1820              	.LVL185:
 1821 0104 2D4A     		ldr	r2, .L113
 1822              	.LVL186:
 1823 0106 DA63     		str	r2, [r3, #60]
3880:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1824              		.loc 1 3880 0
 1825 0108 836A     		ldr	r3, [r0, #40]
 1826 010a 2D4A     		ldr	r2, .L113+4
 1827 010c 1A64     		str	r2, [r3, #64]
3883:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1828              		.loc 1 3883 0
 1829 010e 836A     		ldr	r3, [r0, #40]
 1830 0110 2C4A     		ldr	r2, .L113+8
 1831 0112 DA64     		str	r2, [r3, #76]
3887:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 1832              		.loc 1 3887 0
 1833 0114 0268     		ldr	r2, [r0]
 1834 0116 069B     		ldr	r3, [sp, #24]
 1835 0118 1B0A     		lsrs	r3, r3, #8
3886:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 1836              		.loc 1 3886 0
 1837 011a 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccVHe0ZY.s 			page 150


 1838 011c 4C32     		adds	r2, r2, #76
 1839 011e 3146     		mov	r1, r6
 1840              	.LVL187:
 1841 0120 806A     		ldr	r0, [r0, #40]
 1842              	.LVL188:
 1843 0122 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1844              	.LVL189:
 1845 0126 0028     		cmp	r0, #0
 1846 0128 88D0     		beq	.L91
3889:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 1847              		.loc 1 3889 0
 1848 012a 0120     		movs	r0, #1
 1849 012c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1850              	.LVL190:
 1851              	.L92:
3896:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 1852              		.loc 1 3896 0
 1853 012e C36A     		ldr	r3, [r0, #44]
 1854              	.LVL191:
 1855 0130 224A     		ldr	r2, .L113
 1856              	.LVL192:
 1857 0132 DA63     		str	r2, [r3, #60]
3897:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1858              		.loc 1 3897 0
 1859 0134 C36A     		ldr	r3, [r0, #44]
 1860 0136 224A     		ldr	r2, .L113+4
 1861 0138 1A64     		str	r2, [r3, #64]
3900:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1862              		.loc 1 3900 0
 1863 013a C36A     		ldr	r3, [r0, #44]
 1864 013c 214A     		ldr	r2, .L113+8
 1865 013e DA64     		str	r2, [r3, #76]
3904:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 1866              		.loc 1 3904 0
 1867 0140 0268     		ldr	r2, [r0]
 1868 0142 069B     		ldr	r3, [sp, #24]
 1869 0144 1B0A     		lsrs	r3, r3, #8
3903:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 1870              		.loc 1 3903 0
 1871 0146 0133     		adds	r3, r3, #1
 1872 0148 4C32     		adds	r2, r2, #76
 1873 014a 3146     		mov	r1, r6
 1874              	.LVL193:
 1875 014c C06A     		ldr	r0, [r0, #44]
 1876              	.LVL194:
 1877 014e FFF7FEFF 		bl	HAL_DMA_Start_IT
 1878              	.LVL195:
 1879 0152 0028     		cmp	r0, #0
 1880 0154 3FF472AF 		beq	.L91
3906:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 1881              		.loc 1 3906 0
 1882 0158 0120     		movs	r0, #1
 1883 015a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1884              	.LVL196:
 1885              	.L97:
3930:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 1886              		.loc 1 3930 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 151


 1887 015c 436B     		ldr	r3, [r0, #52]
 1888              	.LVL197:
 1889 015e 1C4A     		ldr	r2, .L113+20
 1890              	.LVL198:
 1891 0160 DA63     		str	r2, [r3, #60]
3931:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1892              		.loc 1 3931 0
 1893 0162 436B     		ldr	r3, [r0, #52]
 1894 0164 1B4A     		ldr	r2, .L113+24
 1895 0166 1A64     		str	r2, [r3, #64]
3934:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1896              		.loc 1 3934 0
 1897 0168 436B     		ldr	r3, [r0, #52]
 1898 016a 164A     		ldr	r2, .L113+8
 1899 016c DA64     		str	r2, [r3, #76]
3938:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 1900              		.loc 1 3938 0
 1901 016e 0268     		ldr	r2, [r0]
 1902 0170 069B     		ldr	r3, [sp, #24]
 1903 0172 1B0A     		lsrs	r3, r3, #8
3937:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 1904              		.loc 1 3937 0
 1905 0174 0133     		adds	r3, r3, #1
 1906 0176 4C32     		adds	r2, r2, #76
 1907 0178 3146     		mov	r1, r6
 1908              	.LVL199:
 1909 017a 406B     		ldr	r0, [r0, #52]
 1910              	.LVL200:
 1911 017c FFF7FEFF 		bl	HAL_DMA_Start_IT
 1912              	.LVL201:
 1913 0180 0028     		cmp	r0, #0
 1914 0182 3FF45BAF 		beq	.L91
3940:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 1915              		.loc 1 3940 0
 1916 0186 0120     		movs	r0, #1
 1917 0188 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1918              	.LVL202:
 1919              	.L98:
3947:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 1920              		.loc 1 3947 0
 1921 018a 836B     		ldr	r3, [r0, #56]
 1922              	.LVL203:
 1923 018c 124A     		ldr	r2, .L113+28
 1924              	.LVL204:
 1925 018e DA63     		str	r2, [r3, #60]
3948:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1926              		.loc 1 3948 0
 1927 0190 836B     		ldr	r3, [r0, #56]
 1928 0192 124A     		ldr	r2, .L113+32
 1929 0194 1A64     		str	r2, [r3, #64]
3951:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1930              		.loc 1 3951 0
 1931 0196 836B     		ldr	r3, [r0, #56]
 1932 0198 0A4A     		ldr	r2, .L113+8
 1933 019a DA64     		str	r2, [r3, #76]
3955:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 1934              		.loc 1 3955 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 152


 1935 019c 0268     		ldr	r2, [r0]
 1936 019e 069B     		ldr	r3, [sp, #24]
 1937 01a0 1B0A     		lsrs	r3, r3, #8
3954:HALLIB/Src/stm32f4xx_hal_tim.c ****                            (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 1938              		.loc 1 3954 0
 1939 01a2 0133     		adds	r3, r3, #1
 1940 01a4 4C32     		adds	r2, r2, #76
 1941 01a6 3146     		mov	r1, r6
 1942              	.LVL205:
 1943 01a8 806B     		ldr	r0, [r0, #56]
 1944              	.LVL206:
 1945 01aa FFF7FEFF 		bl	HAL_DMA_Start_IT
 1946              	.LVL207:
 1947 01ae 0028     		cmp	r0, #0
 1948 01b0 3FF444AF 		beq	.L91
3957:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 1949              		.loc 1 3957 0
 1950 01b4 0120     		movs	r0, #1
3974:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 1951              		.loc 1 3974 0
 1952 01b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1953              	.LVL208:
 1954              	.L100:
3824:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 1955              		.loc 1 3824 0
 1956 01b8 0220     		movs	r0, #2
 1957              	.LVL209:
 1958 01ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1959              	.LVL210:
 1960              	.L114:
 1961              		.align	2
 1962              	.L113:
 1963 01bc 00000000 		.word	TIM_DMADelayPulseCplt
 1964 01c0 00000000 		.word	TIM_DMADelayPulseHalfCplt
 1965 01c4 00000000 		.word	TIM_DMAError
 1966 01c8 00000000 		.word	TIM_DMAPeriodElapsedCplt
 1967 01cc 00000000 		.word	TIM_DMAPeriodElapsedHalfCplt
 1968 01d0 00000000 		.word	TIMEx_DMACommutationCplt
 1969 01d4 00000000 		.word	TIMEx_DMACommutationHalfCplt
 1970 01d8 00000000 		.word	TIM_DMATriggerCplt
 1971 01dc 00000000 		.word	TIM_DMATriggerHalfCplt
 1972              		.cfi_endproc
 1973              	.LFE182:
 1975              		.section	.text.HAL_TIM_DMABurst_WriteStop,"ax",%progbits
 1976              		.align	1
 1977              		.global	HAL_TIM_DMABurst_WriteStop
 1978              		.syntax unified
 1979              		.thumb
 1980              		.thumb_func
 1981              		.fpu fpv4-sp-d16
 1983              	HAL_TIM_DMABurst_WriteStop:
 1984              	.LFB183:
3983:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_StatusTypeDef status = HAL_OK;
 1985              		.loc 1 3983 0
 1986              		.cfi_startproc
 1987              		@ args = 0, pretend = 0, frame = 0
 1988              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 153


 1989              	.LVL211:
 1990 0000 38B5     		push	{r3, r4, r5, lr}
 1991              	.LCFI28:
 1992              		.cfi_def_cfa_offset 16
 1993              		.cfi_offset 3, -16
 1994              		.cfi_offset 4, -12
 1995              		.cfi_offset 5, -8
 1996              		.cfi_offset 14, -4
 1997 0002 0546     		mov	r5, r0
 1998 0004 0C46     		mov	r4, r1
 1999              	.LVL212:
3989:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2000              		.loc 1 3989 0
 2001 0006 B1F5006F 		cmp	r1, #2048
 2002 000a 2AD0     		beq	.L117
 2003 000c 0AD8     		bhi	.L118
 2004 000e B1F5007F 		cmp	r1, #512
 2005 0012 1ED0     		beq	.L119
 2006 0014 B1F5806F 		cmp	r1, #1024
 2007 0018 1FD0     		beq	.L120
 2008 001a B1F5807F 		cmp	r1, #256
 2009 001e 0ED0     		beq	.L128
 2010              	.L126:
3984:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 2011              		.loc 1 3984 0
 2012 0020 0020     		movs	r0, #0
 2013              	.LVL213:
 2014 0022 0FE0     		b	.L116
 2015              	.LVL214:
 2016              	.L118:
3989:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2017              		.loc 1 3989 0
 2018 0024 B1F5005F 		cmp	r1, #8192
 2019 0028 1FD0     		beq	.L122
 2020 002a B1F5804F 		cmp	r1, #16384
 2021 002e 20D0     		beq	.L123
 2022 0030 B1F5805F 		cmp	r1, #4096
 2023 0034 F4D1     		bne	.L126
4013:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2024              		.loc 1 4013 0
 2025 0036 006B     		ldr	r0, [r0, #48]
 2026              	.LVL215:
 2027 0038 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2028              	.LVL216:
4014:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2029              		.loc 1 4014 0
 2030 003c 02E0     		b	.L116
 2031              	.LVL217:
 2032              	.L128:
3993:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2033              		.loc 1 3993 0
 2034 003e 006A     		ldr	r0, [r0, #32]
 2035              	.LVL218:
 2036 0040 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2037              	.LVL219:
 2038              	.L116:
4030:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
ARM GAS  /tmp/ccVHe0ZY.s 			page 154


 2039              		.loc 1 4030 0
 2040 0044 20B9     		cbnz	r0, .L125
4033:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 2041              		.loc 1 4033 0
 2042 0046 2A68     		ldr	r2, [r5]
 2043 0048 D368     		ldr	r3, [r2, #12]
 2044 004a 23EA0404 		bic	r4, r3, r4
 2045              	.LVL220:
 2046 004e D460     		str	r4, [r2, #12]
 2047              	.L125:
4038:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2048              		.loc 1 4038 0
 2049 0050 38BD     		pop	{r3, r4, r5, pc}
 2050              	.LVL221:
 2051              	.L119:
3998:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2052              		.loc 1 3998 0
 2053 0052 406A     		ldr	r0, [r0, #36]
 2054              	.LVL222:
 2055 0054 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2056              	.LVL223:
3999:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2057              		.loc 1 3999 0
 2058 0058 F4E7     		b	.L116
 2059              	.LVL224:
 2060              	.L120:
4003:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2061              		.loc 1 4003 0
 2062 005a 806A     		ldr	r0, [r0, #40]
 2063              	.LVL225:
 2064 005c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2065              	.LVL226:
4004:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2066              		.loc 1 4004 0
 2067 0060 F0E7     		b	.L116
 2068              	.LVL227:
 2069              	.L117:
4008:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2070              		.loc 1 4008 0
 2071 0062 C06A     		ldr	r0, [r0, #44]
 2072              	.LVL228:
 2073 0064 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2074              	.LVL229:
4009:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2075              		.loc 1 4009 0
 2076 0068 ECE7     		b	.L116
 2077              	.LVL230:
 2078              	.L122:
4018:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2079              		.loc 1 4018 0
 2080 006a 406B     		ldr	r0, [r0, #52]
 2081              	.LVL231:
 2082 006c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2083              	.LVL232:
4019:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2084              		.loc 1 4019 0
 2085 0070 E8E7     		b	.L116
ARM GAS  /tmp/ccVHe0ZY.s 			page 155


 2086              	.LVL233:
 2087              	.L123:
4023:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2088              		.loc 1 4023 0
 2089 0072 806B     		ldr	r0, [r0, #56]
 2090              	.LVL234:
 2091 0074 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2092              	.LVL235:
4024:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2093              		.loc 1 4024 0
 2094 0078 E4E7     		b	.L116
 2095              		.cfi_endproc
 2096              	.LFE183:
 2098              		.section	.text.HAL_TIM_DMABurst_ReadStart,"ax",%progbits
 2099              		.align	1
 2100              		.global	HAL_TIM_DMABurst_ReadStart
 2101              		.syntax unified
 2102              		.thumb
 2103              		.thumb_func
 2104              		.fpu fpv4-sp-d16
 2106              	HAL_TIM_DMABurst_ReadStart:
 2107              	.LFB184:
4080:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 2108              		.loc 1 4080 0
 2109              		.cfi_startproc
 2110              		@ args = 4, pretend = 0, frame = 0
 2111              		@ frame_needed = 0, uses_anonymous_args = 0
 2112              	.LVL236:
 2113 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2114              	.LCFI29:
 2115              		.cfi_def_cfa_offset 24
 2116              		.cfi_offset 3, -24
 2117              		.cfi_offset 4, -20
 2118              		.cfi_offset 5, -16
 2119              		.cfi_offset 6, -12
 2120              		.cfi_offset 7, -8
 2121              		.cfi_offset 14, -4
4087:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2122              		.loc 1 4087 0
 2123 0002 90F83D50 		ldrb	r5, [r0, #61]	@ zero_extendqisi2
 2124 0006 EDB2     		uxtb	r5, r5
 2125 0008 022D     		cmp	r5, #2
 2126 000a 00F0D580 		beq	.L142
4091:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2127              		.loc 1 4091 0
 2128 000e 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 2129 0012 E4B2     		uxtb	r4, r4
 2130 0014 012C     		cmp	r4, #1
 2131 0016 1ED0     		beq	.L152
 2132              	.L131:
 2133 0018 1E46     		mov	r6, r3
 2134 001a 1546     		mov	r5, r2
 2135 001c 0F46     		mov	r7, r1
 2136 001e 0446     		mov	r4, r0
4106:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2137              		.loc 1 4106 0
 2138 0020 B2F5006F 		cmp	r2, #2048
ARM GAS  /tmp/ccVHe0ZY.s 			page 156


 2139 0024 00F08380 		beq	.L134
 2140 0028 1FD8     		bhi	.L135
 2141 002a B2F5007F 		cmp	r2, #512
 2142 002e 52D0     		beq	.L136
 2143 0030 B2F5806F 		cmp	r2, #1024
 2144 0034 65D0     		beq	.L137
 2145 0036 B2F5807F 		cmp	r2, #256
 2146 003a 36D0     		beq	.L153
 2147              	.LVL237:
 2148              	.L133:
4225:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2149              		.loc 1 4225 0
 2150 003c 2368     		ldr	r3, [r4]
 2151 003e 069A     		ldr	r2, [sp, #24]
 2152 0040 1743     		orrs	r7, r7, r2
 2153              	.LVL238:
 2154 0042 9F64     		str	r7, [r3, #72]
4228:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2155              		.loc 1 4228 0
 2156 0044 2368     		ldr	r3, [r4]
 2157 0046 DA68     		ldr	r2, [r3, #12]
 2158 0048 2A43     		orrs	r2, r2, r5
 2159 004a DA60     		str	r2, [r3, #12]
4230:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2160              		.loc 1 4230 0
 2161 004c 0123     		movs	r3, #1
 2162 004e 84F83D30 		strb	r3, [r4, #61]
4233:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 2163              		.loc 1 4233 0
 2164 0052 0020     		movs	r0, #0
 2165 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2166              	.LVL239:
 2167              	.L152:
4093:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 2168              		.loc 1 4093 0
 2169 0056 1BB1     		cbz	r3, .L154
 2170              	.L132:
4099:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2171              		.loc 1 4099 0
 2172 0058 0224     		movs	r4, #2
 2173 005a 80F83D40 		strb	r4, [r0, #61]
 2174 005e DBE7     		b	.L131
 2175              	.L154:
4093:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 2176              		.loc 1 4093 0 discriminator 1
 2177 0060 069C     		ldr	r4, [sp, #24]
 2178 0062 002C     		cmp	r4, #0
 2179 0064 F8D0     		beq	.L132
4095:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2180              		.loc 1 4095 0
 2181 0066 0120     		movs	r0, #1
 2182              	.LVL240:
 2183 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2184              	.LVL241:
 2185              	.L135:
4106:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2186              		.loc 1 4106 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 157


 2187 006a B2F5005F 		cmp	r2, #8192
 2188 006e 75D0     		beq	.L139
 2189 0070 B2F5804F 		cmp	r2, #16384
 2190 0074 00F08980 		beq	.L140
 2191 0078 B2F5805F 		cmp	r2, #4096
 2192 007c DED1     		bne	.L133
4175:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 2193              		.loc 1 4175 0
 2194 007e 036B     		ldr	r3, [r0, #48]
 2195              	.LVL242:
 2196 0080 4E4A     		ldr	r2, .L155
 2197              	.LVL243:
 2198 0082 DA63     		str	r2, [r3, #60]
4176:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2199              		.loc 1 4176 0
 2200 0084 036B     		ldr	r3, [r0, #48]
 2201 0086 4E4A     		ldr	r2, .L155+4
 2202 0088 1A64     		str	r2, [r3, #64]
4179:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2203              		.loc 1 4179 0
 2204 008a 036B     		ldr	r3, [r0, #48]
 2205 008c 4D4A     		ldr	r2, .L155+8
 2206 008e DA64     		str	r2, [r3, #76]
4182:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 2207              		.loc 1 4182 0
 2208 0090 0168     		ldr	r1, [r0]
 2209              	.LVL244:
 2210 0092 069B     		ldr	r3, [sp, #24]
 2211 0094 1B0A     		lsrs	r3, r3, #8
 2212 0096 0133     		adds	r3, r3, #1
 2213 0098 3246     		mov	r2, r6
 2214 009a 4C31     		adds	r1, r1, #76
 2215 009c 006B     		ldr	r0, [r0, #48]
 2216              	.LVL245:
 2217 009e FFF7FEFF 		bl	HAL_DMA_Start_IT
 2218              	.LVL246:
 2219 00a2 0028     		cmp	r0, #0
 2220 00a4 CAD0     		beq	.L133
4184:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 2221              		.loc 1 4184 0
 2222 00a6 0120     		movs	r0, #1
 2223 00a8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2224              	.LVL247:
 2225              	.L153:
4111:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 2226              		.loc 1 4111 0
 2227 00aa 036A     		ldr	r3, [r0, #32]
 2228              	.LVL248:
 2229 00ac 464A     		ldr	r2, .L155+12
 2230              	.LVL249:
 2231 00ae DA63     		str	r2, [r3, #60]
4112:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2232              		.loc 1 4112 0
 2233 00b0 036A     		ldr	r3, [r0, #32]
 2234 00b2 464A     		ldr	r2, .L155+16
 2235 00b4 1A64     		str	r2, [r3, #64]
4115:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 158


 2236              		.loc 1 4115 0
 2237 00b6 036A     		ldr	r3, [r0, #32]
 2238 00b8 424A     		ldr	r2, .L155+8
 2239 00ba DA64     		str	r2, [r3, #76]
4118:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 2240              		.loc 1 4118 0
 2241 00bc 0168     		ldr	r1, [r0]
 2242              	.LVL250:
 2243 00be 069B     		ldr	r3, [sp, #24]
 2244 00c0 1B0A     		lsrs	r3, r3, #8
 2245 00c2 0133     		adds	r3, r3, #1
 2246 00c4 3246     		mov	r2, r6
 2247 00c6 4C31     		adds	r1, r1, #76
 2248 00c8 006A     		ldr	r0, [r0, #32]
 2249              	.LVL251:
 2250 00ca FFF7FEFF 		bl	HAL_DMA_Start_IT
 2251              	.LVL252:
 2252 00ce 0028     		cmp	r0, #0
 2253 00d0 B4D0     		beq	.L133
4120:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 2254              		.loc 1 4120 0
 2255 00d2 0120     		movs	r0, #1
 2256 00d4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2257              	.LVL253:
 2258              	.L136:
4127:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 2259              		.loc 1 4127 0
 2260 00d6 436A     		ldr	r3, [r0, #36]
 2261              	.LVL254:
 2262 00d8 384A     		ldr	r2, .L155
 2263              	.LVL255:
 2264 00da DA63     		str	r2, [r3, #60]
4128:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2265              		.loc 1 4128 0
 2266 00dc 436A     		ldr	r3, [r0, #36]
 2267 00de 384A     		ldr	r2, .L155+4
 2268 00e0 1A64     		str	r2, [r3, #64]
4131:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2269              		.loc 1 4131 0
 2270 00e2 436A     		ldr	r3, [r0, #36]
 2271 00e4 374A     		ldr	r2, .L155+8
 2272 00e6 DA64     		str	r2, [r3, #76]
4134:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 2273              		.loc 1 4134 0
 2274 00e8 0168     		ldr	r1, [r0]
 2275              	.LVL256:
 2276 00ea 069B     		ldr	r3, [sp, #24]
 2277 00ec 1B0A     		lsrs	r3, r3, #8
 2278 00ee 0133     		adds	r3, r3, #1
 2279 00f0 3246     		mov	r2, r6
 2280 00f2 4C31     		adds	r1, r1, #76
 2281 00f4 406A     		ldr	r0, [r0, #36]
 2282              	.LVL257:
 2283 00f6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 2284              	.LVL258:
 2285 00fa 0028     		cmp	r0, #0
 2286 00fc 9ED0     		beq	.L133
ARM GAS  /tmp/ccVHe0ZY.s 			page 159


4136:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 2287              		.loc 1 4136 0
 2288 00fe 0120     		movs	r0, #1
 2289 0100 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2290              	.LVL259:
 2291              	.L137:
4143:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 2292              		.loc 1 4143 0
 2293 0102 836A     		ldr	r3, [r0, #40]
 2294              	.LVL260:
 2295 0104 2D4A     		ldr	r2, .L155
 2296              	.LVL261:
 2297 0106 DA63     		str	r2, [r3, #60]
4144:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2298              		.loc 1 4144 0
 2299 0108 836A     		ldr	r3, [r0, #40]
 2300 010a 2D4A     		ldr	r2, .L155+4
 2301 010c 1A64     		str	r2, [r3, #64]
4147:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2302              		.loc 1 4147 0
 2303 010e 836A     		ldr	r3, [r0, #40]
 2304 0110 2C4A     		ldr	r2, .L155+8
 2305 0112 DA64     		str	r2, [r3, #76]
4150:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 2306              		.loc 1 4150 0
 2307 0114 0168     		ldr	r1, [r0]
 2308              	.LVL262:
 2309 0116 069B     		ldr	r3, [sp, #24]
 2310 0118 1B0A     		lsrs	r3, r3, #8
 2311 011a 0133     		adds	r3, r3, #1
 2312 011c 3246     		mov	r2, r6
 2313 011e 4C31     		adds	r1, r1, #76
 2314 0120 806A     		ldr	r0, [r0, #40]
 2315              	.LVL263:
 2316 0122 FFF7FEFF 		bl	HAL_DMA_Start_IT
 2317              	.LVL264:
 2318 0126 0028     		cmp	r0, #0
 2319 0128 88D0     		beq	.L133
4152:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 2320              		.loc 1 4152 0
 2321 012a 0120     		movs	r0, #1
 2322 012c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2323              	.LVL265:
 2324              	.L134:
4159:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 2325              		.loc 1 4159 0
 2326 012e C36A     		ldr	r3, [r0, #44]
 2327              	.LVL266:
 2328 0130 224A     		ldr	r2, .L155
 2329              	.LVL267:
 2330 0132 DA63     		str	r2, [r3, #60]
4160:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2331              		.loc 1 4160 0
 2332 0134 C36A     		ldr	r3, [r0, #44]
 2333 0136 224A     		ldr	r2, .L155+4
 2334 0138 1A64     		str	r2, [r3, #64]
4163:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 160


 2335              		.loc 1 4163 0
 2336 013a C36A     		ldr	r3, [r0, #44]
 2337 013c 214A     		ldr	r2, .L155+8
 2338 013e DA64     		str	r2, [r3, #76]
4166:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 2339              		.loc 1 4166 0
 2340 0140 0168     		ldr	r1, [r0]
 2341              	.LVL268:
 2342 0142 069B     		ldr	r3, [sp, #24]
 2343 0144 1B0A     		lsrs	r3, r3, #8
 2344 0146 0133     		adds	r3, r3, #1
 2345 0148 3246     		mov	r2, r6
 2346 014a 4C31     		adds	r1, r1, #76
 2347 014c C06A     		ldr	r0, [r0, #44]
 2348              	.LVL269:
 2349 014e FFF7FEFF 		bl	HAL_DMA_Start_IT
 2350              	.LVL270:
 2351 0152 0028     		cmp	r0, #0
 2352 0154 3FF472AF 		beq	.L133
4168:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 2353              		.loc 1 4168 0
 2354 0158 0120     		movs	r0, #1
 2355 015a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2356              	.LVL271:
 2357              	.L139:
4191:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 2358              		.loc 1 4191 0
 2359 015c 436B     		ldr	r3, [r0, #52]
 2360              	.LVL272:
 2361 015e 1C4A     		ldr	r2, .L155+20
 2362              	.LVL273:
 2363 0160 DA63     		str	r2, [r3, #60]
4192:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2364              		.loc 1 4192 0
 2365 0162 436B     		ldr	r3, [r0, #52]
 2366 0164 1B4A     		ldr	r2, .L155+24
 2367 0166 1A64     		str	r2, [r3, #64]
4195:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2368              		.loc 1 4195 0
 2369 0168 436B     		ldr	r3, [r0, #52]
 2370 016a 164A     		ldr	r2, .L155+8
 2371 016c DA64     		str	r2, [r3, #76]
4198:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 2372              		.loc 1 4198 0
 2373 016e 0168     		ldr	r1, [r0]
 2374              	.LVL274:
 2375 0170 069B     		ldr	r3, [sp, #24]
 2376 0172 1B0A     		lsrs	r3, r3, #8
 2377 0174 0133     		adds	r3, r3, #1
 2378 0176 3246     		mov	r2, r6
 2379 0178 4C31     		adds	r1, r1, #76
 2380 017a 406B     		ldr	r0, [r0, #52]
 2381              	.LVL275:
 2382 017c FFF7FEFF 		bl	HAL_DMA_Start_IT
 2383              	.LVL276:
 2384 0180 0028     		cmp	r0, #0
 2385 0182 3FF45BAF 		beq	.L133
ARM GAS  /tmp/ccVHe0ZY.s 			page 161


4200:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 2386              		.loc 1 4200 0
 2387 0186 0120     		movs	r0, #1
 2388 0188 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2389              	.LVL277:
 2390              	.L140:
4207:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 2391              		.loc 1 4207 0
 2392 018a 836B     		ldr	r3, [r0, #56]
 2393              	.LVL278:
 2394 018c 124A     		ldr	r2, .L155+28
 2395              	.LVL279:
 2396 018e DA63     		str	r2, [r3, #60]
4208:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2397              		.loc 1 4208 0
 2398 0190 836B     		ldr	r3, [r0, #56]
 2399 0192 124A     		ldr	r2, .L155+32
 2400 0194 1A64     		str	r2, [r3, #64]
4211:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2401              		.loc 1 4211 0
 2402 0196 836B     		ldr	r3, [r0, #56]
 2403 0198 0A4A     		ldr	r2, .L155+8
 2404 019a DA64     		str	r2, [r3, #76]
4214:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 2405              		.loc 1 4214 0
 2406 019c 0168     		ldr	r1, [r0]
 2407              	.LVL280:
 2408 019e 069B     		ldr	r3, [sp, #24]
 2409 01a0 1B0A     		lsrs	r3, r3, #8
 2410 01a2 0133     		adds	r3, r3, #1
 2411 01a4 3246     		mov	r2, r6
 2412 01a6 4C31     		adds	r1, r1, #76
 2413 01a8 806B     		ldr	r0, [r0, #56]
 2414              	.LVL281:
 2415 01aa FFF7FEFF 		bl	HAL_DMA_Start_IT
 2416              	.LVL282:
 2417 01ae 0028     		cmp	r0, #0
 2418 01b0 3FF444AF 		beq	.L133
4216:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 2419              		.loc 1 4216 0
 2420 01b4 0120     		movs	r0, #1
4234:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2421              		.loc 1 4234 0
 2422 01b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2423              	.LVL283:
 2424              	.L142:
4089:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 2425              		.loc 1 4089 0
 2426 01b8 0220     		movs	r0, #2
 2427              	.LVL284:
 2428 01ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2429              	.LVL285:
 2430              	.L156:
 2431              		.align	2
 2432              	.L155:
 2433 01bc 00000000 		.word	TIM_DMACaptureCplt
 2434 01c0 00000000 		.word	TIM_DMACaptureHalfCplt
ARM GAS  /tmp/ccVHe0ZY.s 			page 162


 2435 01c4 00000000 		.word	TIM_DMAError
 2436 01c8 00000000 		.word	TIM_DMAPeriodElapsedCplt
 2437 01cc 00000000 		.word	TIM_DMAPeriodElapsedHalfCplt
 2438 01d0 00000000 		.word	TIMEx_DMACommutationCplt
 2439 01d4 00000000 		.word	TIMEx_DMACommutationHalfCplt
 2440 01d8 00000000 		.word	TIM_DMATriggerCplt
 2441 01dc 00000000 		.word	TIM_DMATriggerHalfCplt
 2442              		.cfi_endproc
 2443              	.LFE184:
 2445              		.section	.text.HAL_TIM_DMABurst_ReadStop,"ax",%progbits
 2446              		.align	1
 2447              		.global	HAL_TIM_DMABurst_ReadStop
 2448              		.syntax unified
 2449              		.thumb
 2450              		.thumb_func
 2451              		.fpu fpv4-sp-d16
 2453              	HAL_TIM_DMABurst_ReadStop:
 2454              	.LFB185:
4243:HALLIB/Src/stm32f4xx_hal_tim.c ****   HAL_StatusTypeDef status = HAL_OK;
 2455              		.loc 1 4243 0
 2456              		.cfi_startproc
 2457              		@ args = 0, pretend = 0, frame = 0
 2458              		@ frame_needed = 0, uses_anonymous_args = 0
 2459              	.LVL286:
 2460 0000 38B5     		push	{r3, r4, r5, lr}
 2461              	.LCFI30:
 2462              		.cfi_def_cfa_offset 16
 2463              		.cfi_offset 3, -16
 2464              		.cfi_offset 4, -12
 2465              		.cfi_offset 5, -8
 2466              		.cfi_offset 14, -4
 2467 0002 0546     		mov	r5, r0
 2468 0004 0C46     		mov	r4, r1
 2469              	.LVL287:
4249:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2470              		.loc 1 4249 0
 2471 0006 B1F5006F 		cmp	r1, #2048
 2472 000a 2AD0     		beq	.L159
 2473 000c 0AD8     		bhi	.L160
 2474 000e B1F5007F 		cmp	r1, #512
 2475 0012 1ED0     		beq	.L161
 2476 0014 B1F5806F 		cmp	r1, #1024
 2477 0018 1FD0     		beq	.L162
 2478 001a B1F5807F 		cmp	r1, #256
 2479 001e 0ED0     		beq	.L170
 2480              	.L168:
4244:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 2481              		.loc 1 4244 0
 2482 0020 0020     		movs	r0, #0
 2483              	.LVL288:
 2484 0022 0FE0     		b	.L158
 2485              	.LVL289:
 2486              	.L160:
4249:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2487              		.loc 1 4249 0
 2488 0024 B1F5005F 		cmp	r1, #8192
 2489 0028 1FD0     		beq	.L164
ARM GAS  /tmp/ccVHe0ZY.s 			page 163


 2490 002a B1F5804F 		cmp	r1, #16384
 2491 002e 20D0     		beq	.L165
 2492 0030 B1F5805F 		cmp	r1, #4096
 2493 0034 F4D1     		bne	.L168
4273:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2494              		.loc 1 4273 0
 2495 0036 006B     		ldr	r0, [r0, #48]
 2496              	.LVL290:
 2497 0038 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2498              	.LVL291:
4274:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2499              		.loc 1 4274 0
 2500 003c 02E0     		b	.L158
 2501              	.LVL292:
 2502              	.L170:
4253:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2503              		.loc 1 4253 0
 2504 003e 006A     		ldr	r0, [r0, #32]
 2505              	.LVL293:
 2506 0040 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2507              	.LVL294:
 2508              	.L158:
4290:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2509              		.loc 1 4290 0
 2510 0044 20B9     		cbnz	r0, .L167
4293:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 2511              		.loc 1 4293 0
 2512 0046 2A68     		ldr	r2, [r5]
 2513 0048 D368     		ldr	r3, [r2, #12]
 2514 004a 23EA0404 		bic	r4, r3, r4
 2515              	.LVL295:
 2516 004e D460     		str	r4, [r2, #12]
 2517              	.L167:
4298:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2518              		.loc 1 4298 0
 2519 0050 38BD     		pop	{r3, r4, r5, pc}
 2520              	.LVL296:
 2521              	.L161:
4258:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2522              		.loc 1 4258 0
 2523 0052 406A     		ldr	r0, [r0, #36]
 2524              	.LVL297:
 2525 0054 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2526              	.LVL298:
4259:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2527              		.loc 1 4259 0
 2528 0058 F4E7     		b	.L158
 2529              	.LVL299:
 2530              	.L162:
4263:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2531              		.loc 1 4263 0
 2532 005a 806A     		ldr	r0, [r0, #40]
 2533              	.LVL300:
 2534 005c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2535              	.LVL301:
4264:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2536              		.loc 1 4264 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 164


 2537 0060 F0E7     		b	.L158
 2538              	.LVL302:
 2539              	.L159:
4268:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2540              		.loc 1 4268 0
 2541 0062 C06A     		ldr	r0, [r0, #44]
 2542              	.LVL303:
 2543 0064 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2544              	.LVL304:
4269:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2545              		.loc 1 4269 0
 2546 0068 ECE7     		b	.L158
 2547              	.LVL305:
 2548              	.L164:
4278:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2549              		.loc 1 4278 0
 2550 006a 406B     		ldr	r0, [r0, #52]
 2551              	.LVL306:
 2552 006c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2553              	.LVL307:
4279:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2554              		.loc 1 4279 0
 2555 0070 E8E7     		b	.L158
 2556              	.LVL308:
 2557              	.L165:
4283:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 2558              		.loc 1 4283 0
 2559 0072 806B     		ldr	r0, [r0, #56]
 2560              	.LVL309:
 2561 0074 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2562              	.LVL310:
4284:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2563              		.loc 1 4284 0
 2564 0078 E4E7     		b	.L158
 2565              		.cfi_endproc
 2566              	.LFE185:
 2568              		.section	.text.HAL_TIM_GenerateEvent,"ax",%progbits
 2569              		.align	1
 2570              		.global	HAL_TIM_GenerateEvent
 2571              		.syntax unified
 2572              		.thumb
 2573              		.thumb_func
 2574              		.fpu fpv4-sp-d16
 2576              	HAL_TIM_GenerateEvent:
 2577              	.LFB186:
4321:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 2578              		.loc 1 4321 0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 0
 2581              		@ frame_needed = 0, uses_anonymous_args = 0
 2582              		@ link register save eliminated.
 2583              	.LVL311:
4327:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2584              		.loc 1 4327 0
 2585 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2586 0004 012B     		cmp	r3, #1
 2587 0006 0CD0     		beq	.L173
ARM GAS  /tmp/ccVHe0ZY.s 			page 165


4330:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2588              		.loc 1 4330 0 discriminator 2
 2589 0008 0223     		movs	r3, #2
 2590 000a 80F83D30 		strb	r3, [r0, #61]
4333:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2591              		.loc 1 4333 0 discriminator 2
 2592 000e 0368     		ldr	r3, [r0]
 2593 0010 5961     		str	r1, [r3, #20]
4336:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2594              		.loc 1 4336 0 discriminator 2
 2595 0012 0123     		movs	r3, #1
 2596 0014 80F83D30 		strb	r3, [r0, #61]
4338:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2597              		.loc 1 4338 0 discriminator 2
 2598 0018 0023     		movs	r3, #0
 2599 001a 80F83C30 		strb	r3, [r0, #60]
4341:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 2600              		.loc 1 4341 0 discriminator 2
 2601 001e 1846     		mov	r0, r3
 2602              	.LVL312:
 2603 0020 7047     		bx	lr
 2604              	.LVL313:
 2605              	.L173:
4327:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2606              		.loc 1 4327 0
 2607 0022 0220     		movs	r0, #2
 2608              	.LVL314:
4342:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2609              		.loc 1 4342 0
 2610 0024 7047     		bx	lr
 2611              		.cfi_endproc
 2612              	.LFE186:
 2614              		.section	.text.HAL_TIM_ConfigTI1Input,"ax",%progbits
 2615              		.align	1
 2616              		.global	HAL_TIM_ConfigTI1Input
 2617              		.syntax unified
 2618              		.thumb
 2619              		.thumb_func
 2620              		.fpu fpv4-sp-d16
 2622              	HAL_TIM_ConfigTI1Input:
 2623              	.LFB189:
4634:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpcr2;
 2624              		.loc 1 4634 0
 2625              		.cfi_startproc
 2626              		@ args = 0, pretend = 0, frame = 0
 2627              		@ frame_needed = 0, uses_anonymous_args = 0
 2628              		@ link register save eliminated.
 2629              	.LVL315:
4642:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2630              		.loc 1 4642 0
 2631 0000 0268     		ldr	r2, [r0]
 2632 0002 5368     		ldr	r3, [r2, #4]
 2633              	.LVL316:
4645:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2634              		.loc 1 4645 0
 2635 0004 23F08003 		bic	r3, r3, #128
 2636              	.LVL317:
ARM GAS  /tmp/ccVHe0ZY.s 			page 166


4648:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2637              		.loc 1 4648 0
 2638 0008 1943     		orrs	r1, r1, r3
 2639              	.LVL318:
4651:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2640              		.loc 1 4651 0
 2641 000a 5160     		str	r1, [r2, #4]
4654:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2642              		.loc 1 4654 0
 2643 000c 0020     		movs	r0, #0
 2644              	.LVL319:
 2645 000e 7047     		bx	lr
 2646              		.cfi_endproc
 2647              	.LFE189:
 2649              		.section	.text.HAL_TIM_ReadCapturedValue,"ax",%progbits
 2650              		.align	1
 2651              		.global	HAL_TIM_ReadCapturedValue
 2652              		.syntax unified
 2653              		.thumb
 2654              		.thumb_func
 2655              		.fpu fpv4-sp-d16
 2657              	HAL_TIM_ReadCapturedValue:
 2658              	.LFB192:
4749:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpreg = 0U;
 2659              		.loc 1 4749 0
 2660              		.cfi_startproc
 2661              		@ args = 0, pretend = 0, frame = 0
 2662              		@ frame_needed = 0, uses_anonymous_args = 0
 2663              		@ link register save eliminated.
 2664              	.LVL320:
4752:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2665              		.loc 1 4752 0
 2666 0000 0C29     		cmp	r1, #12
 2667 0002 14D8     		bhi	.L182
 2668 0004 DFE801F0 		tbb	[pc, r1]
 2669              	.L178:
 2670 0008 07       		.byte	(.L177-.L178)/2
 2671 0009 13       		.byte	(.L182-.L178)/2
 2672 000a 13       		.byte	(.L182-.L178)/2
 2673 000b 13       		.byte	(.L182-.L178)/2
 2674 000c 0A       		.byte	(.L179-.L178)/2
 2675 000d 13       		.byte	(.L182-.L178)/2
 2676 000e 13       		.byte	(.L182-.L178)/2
 2677 000f 13       		.byte	(.L182-.L178)/2
 2678 0010 0D       		.byte	(.L180-.L178)/2
 2679 0011 13       		.byte	(.L182-.L178)/2
 2680 0012 13       		.byte	(.L182-.L178)/2
 2681 0013 13       		.byte	(.L182-.L178)/2
 2682 0014 10       		.byte	(.L181-.L178)/2
 2683 0015 00       		.p2align 1
 2684              	.L177:
4760:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2685              		.loc 1 4760 0
 2686 0016 0368     		ldr	r3, [r0]
 2687 0018 586B     		ldr	r0, [r3, #52]
 2688              	.LVL321:
4762:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
ARM GAS  /tmp/ccVHe0ZY.s 			page 167


 2689              		.loc 1 4762 0
 2690 001a 7047     		bx	lr
 2691              	.LVL322:
 2692              	.L179:
4770:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2693              		.loc 1 4770 0
 2694 001c 0368     		ldr	r3, [r0]
 2695 001e 986B     		ldr	r0, [r3, #56]
 2696              	.LVL323:
4772:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2697              		.loc 1 4772 0
 2698 0020 7047     		bx	lr
 2699              	.LVL324:
 2700              	.L180:
4781:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2701              		.loc 1 4781 0
 2702 0022 0368     		ldr	r3, [r0]
 2703 0024 D86B     		ldr	r0, [r3, #60]
 2704              	.LVL325:
4783:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2705              		.loc 1 4783 0
 2706 0026 7047     		bx	lr
 2707              	.LVL326:
 2708              	.L181:
4792:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2709              		.loc 1 4792 0
 2710 0028 0368     		ldr	r3, [r0]
 2711 002a 186C     		ldr	r0, [r3, #64]
 2712              	.LVL327:
4794:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 2713              		.loc 1 4794 0
 2714 002c 7047     		bx	lr
 2715              	.LVL328:
 2716              	.L182:
4750:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2717              		.loc 1 4750 0
 2718 002e 0020     		movs	r0, #0
 2719              	.LVL329:
4802:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2720              		.loc 1 4802 0
 2721 0030 7047     		bx	lr
 2722              		.cfi_endproc
 2723              	.LFE192:
 2725              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 2726              		.align	1
 2727              		.weak	HAL_TIM_PeriodElapsedCallback
 2728              		.syntax unified
 2729              		.thumb
 2730              		.thumb_func
 2731              		.fpu fpv4-sp-d16
 2733              	HAL_TIM_PeriodElapsedCallback:
 2734              	.LFB193:
4833:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2735              		.loc 1 4833 0
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 168


 2739              		@ link register save eliminated.
 2740              	.LVL330:
 2741 0000 7047     		bx	lr
 2742              		.cfi_endproc
 2743              	.LFE193:
 2745              		.section	.text.TIM_DMAPeriodElapsedCplt,"ax",%progbits
 2746              		.align	1
 2747              		.syntax unified
 2748              		.thumb
 2749              		.thumb_func
 2750              		.fpu fpv4-sp-d16
 2752              	TIM_DMAPeriodElapsedCplt:
 2753              	.LFB214:
5739:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2754              		.loc 1 5739 0
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 0
 2757              		@ frame_needed = 0, uses_anonymous_args = 0
 2758              	.LVL331:
5739:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2759              		.loc 1 5739 0
 2760 0000 08B5     		push	{r3, lr}
 2761              	.LCFI31:
 2762              		.cfi_def_cfa_offset 8
 2763              		.cfi_offset 3, -8
 2764              		.cfi_offset 14, -4
5740:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2765              		.loc 1 5740 0
 2766 0002 806B     		ldr	r0, [r0, #56]
 2767              	.LVL332:
5742:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2768              		.loc 1 5742 0
 2769 0004 0123     		movs	r3, #1
 2770 0006 80F83D30 		strb	r3, [r0, #61]
5747:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2771              		.loc 1 5747 0
 2772 000a FFF7FEFF 		bl	HAL_TIM_PeriodElapsedCallback
 2773              	.LVL333:
 2774 000e 08BD     		pop	{r3, pc}
 2775              		.cfi_endproc
 2776              	.LFE214:
 2778              		.section	.text.HAL_TIM_PeriodElapsedHalfCpltCallback,"ax",%progbits
 2779              		.align	1
 2780              		.weak	HAL_TIM_PeriodElapsedHalfCpltCallback
 2781              		.syntax unified
 2782              		.thumb
 2783              		.thumb_func
 2784              		.fpu fpv4-sp-d16
 2786              	HAL_TIM_PeriodElapsedHalfCpltCallback:
 2787              	.LFB194:
4848:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2788              		.loc 1 4848 0
 2789              		.cfi_startproc
 2790              		@ args = 0, pretend = 0, frame = 0
 2791              		@ frame_needed = 0, uses_anonymous_args = 0
 2792              		@ link register save eliminated.
 2793              	.LVL334:
ARM GAS  /tmp/ccVHe0ZY.s 			page 169


 2794 0000 7047     		bx	lr
 2795              		.cfi_endproc
 2796              	.LFE194:
 2798              		.section	.text.TIM_DMAPeriodElapsedHalfCplt,"ax",%progbits
 2799              		.align	1
 2800              		.syntax unified
 2801              		.thumb
 2802              		.thumb_func
 2803              		.fpu fpv4-sp-d16
 2805              	TIM_DMAPeriodElapsedHalfCplt:
 2806              	.LFB215:
5757:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2807              		.loc 1 5757 0
 2808              		.cfi_startproc
 2809              		@ args = 0, pretend = 0, frame = 0
 2810              		@ frame_needed = 0, uses_anonymous_args = 0
 2811              	.LVL335:
5757:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2812              		.loc 1 5757 0
 2813 0000 08B5     		push	{r3, lr}
 2814              	.LCFI32:
 2815              		.cfi_def_cfa_offset 8
 2816              		.cfi_offset 3, -8
 2817              		.cfi_offset 14, -4
5758:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2818              		.loc 1 5758 0
 2819 0002 806B     		ldr	r0, [r0, #56]
 2820              	.LVL336:
5760:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2821              		.loc 1 5760 0
 2822 0004 0123     		movs	r3, #1
 2823 0006 80F83D30 		strb	r3, [r0, #61]
5765:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2824              		.loc 1 5765 0
 2825 000a FFF7FEFF 		bl	HAL_TIM_PeriodElapsedHalfCpltCallback
 2826              	.LVL337:
 2827 000e 08BD     		pop	{r3, pc}
 2828              		.cfi_endproc
 2829              	.LFE215:
 2831              		.section	.text.HAL_TIM_OC_DelayElapsedCallback,"ax",%progbits
 2832              		.align	1
 2833              		.weak	HAL_TIM_OC_DelayElapsedCallback
 2834              		.syntax unified
 2835              		.thumb
 2836              		.thumb_func
 2837              		.fpu fpv4-sp-d16
 2839              	HAL_TIM_OC_DelayElapsedCallback:
 2840              	.LFB195:
4863:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2841              		.loc 1 4863 0
 2842              		.cfi_startproc
 2843              		@ args = 0, pretend = 0, frame = 0
 2844              		@ frame_needed = 0, uses_anonymous_args = 0
 2845              		@ link register save eliminated.
 2846              	.LVL338:
 2847 0000 7047     		bx	lr
 2848              		.cfi_endproc
ARM GAS  /tmp/ccVHe0ZY.s 			page 170


 2849              	.LFE195:
 2851              		.section	.text.HAL_TIM_IC_CaptureCallback,"ax",%progbits
 2852              		.align	1
 2853              		.weak	HAL_TIM_IC_CaptureCallback
 2854              		.syntax unified
 2855              		.thumb
 2856              		.thumb_func
 2857              		.fpu fpv4-sp-d16
 2859              	HAL_TIM_IC_CaptureCallback:
 2860              	.LFB196:
4878:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2861              		.loc 1 4878 0
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 0
 2864              		@ frame_needed = 0, uses_anonymous_args = 0
 2865              		@ link register save eliminated.
 2866              	.LVL339:
 2867 0000 7047     		bx	lr
 2868              		.cfi_endproc
 2869              	.LFE196:
 2871              		.section	.text.TIM_DMACaptureCplt,"ax",%progbits
 2872              		.align	1
 2873              		.global	TIM_DMACaptureCplt
 2874              		.syntax unified
 2875              		.thumb
 2876              		.thumb_func
 2877              		.fpu fpv4-sp-d16
 2879              	TIM_DMACaptureCplt:
 2880              	.LFB212:
5657:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2881              		.loc 1 5657 0
 2882              		.cfi_startproc
 2883              		@ args = 0, pretend = 0, frame = 0
 2884              		@ frame_needed = 0, uses_anonymous_args = 0
 2885              	.LVL340:
5657:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2886              		.loc 1 5657 0
 2887 0000 10B5     		push	{r4, lr}
 2888              	.LCFI33:
 2889              		.cfi_def_cfa_offset 8
 2890              		.cfi_offset 4, -8
 2891              		.cfi_offset 14, -4
5658:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2892              		.loc 1 5658 0
 2893 0002 846B     		ldr	r4, [r0, #56]
 2894              	.LVL341:
5660:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2895              		.loc 1 5660 0
 2896 0004 0123     		movs	r3, #1
 2897 0006 84F83D30 		strb	r3, [r4, #61]
5662:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2898              		.loc 1 5662 0
 2899 000a 636A     		ldr	r3, [r4, #36]
 2900 000c 9842     		cmp	r0, r3
 2901 000e 0ED0     		beq	.L197
5666:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2902              		.loc 1 5666 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 171


 2903 0010 A36A     		ldr	r3, [r4, #40]
 2904 0012 9842     		cmp	r0, r3
 2905 0014 0ED0     		beq	.L198
5670:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2906              		.loc 1 5670 0
 2907 0016 E36A     		ldr	r3, [r4, #44]
 2908 0018 9842     		cmp	r0, r3
 2909 001a 0ED0     		beq	.L199
5674:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2910              		.loc 1 5674 0
 2911 001c 236B     		ldr	r3, [r4, #48]
 2912 001e 9842     		cmp	r0, r3
 2913 0020 0ED0     		beq	.L200
 2914              	.L193:
5686:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 2915              		.loc 1 5686 0
 2916 0022 2046     		mov	r0, r4
 2917              	.LVL342:
 2918 0024 FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 2919              	.LVL343:
5689:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 2920              		.loc 1 5689 0
 2921 0028 0023     		movs	r3, #0
 2922 002a 2377     		strb	r3, [r4, #28]
 2923 002c 10BD     		pop	{r4, pc}
 2924              	.LVL344:
 2925              	.L197:
5664:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 2926              		.loc 1 5664 0
 2927 002e 0123     		movs	r3, #1
 2928 0030 2377     		strb	r3, [r4, #28]
 2929 0032 F6E7     		b	.L193
 2930              	.L198:
5668:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 2931              		.loc 1 5668 0
 2932 0034 0223     		movs	r3, #2
 2933 0036 2377     		strb	r3, [r4, #28]
 2934 0038 F3E7     		b	.L193
 2935              	.L199:
5672:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 2936              		.loc 1 5672 0
 2937 003a 0423     		movs	r3, #4
 2938 003c 2377     		strb	r3, [r4, #28]
 2939 003e F0E7     		b	.L193
 2940              	.L200:
5676:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 2941              		.loc 1 5676 0
 2942 0040 0823     		movs	r3, #8
 2943 0042 2377     		strb	r3, [r4, #28]
 2944 0044 EDE7     		b	.L193
 2945              		.cfi_endproc
 2946              	.LFE212:
 2948              		.section	.text.HAL_TIM_IC_CaptureHalfCpltCallback,"ax",%progbits
 2949              		.align	1
 2950              		.weak	HAL_TIM_IC_CaptureHalfCpltCallback
 2951              		.syntax unified
 2952              		.thumb
ARM GAS  /tmp/ccVHe0ZY.s 			page 172


 2953              		.thumb_func
 2954              		.fpu fpv4-sp-d16
 2956              	HAL_TIM_IC_CaptureHalfCpltCallback:
 2957              	.LFB197:
4893:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 2958              		.loc 1 4893 0
 2959              		.cfi_startproc
 2960              		@ args = 0, pretend = 0, frame = 0
 2961              		@ frame_needed = 0, uses_anonymous_args = 0
 2962              		@ link register save eliminated.
 2963              	.LVL345:
 2964 0000 7047     		bx	lr
 2965              		.cfi_endproc
 2966              	.LFE197:
 2968              		.section	.text.TIM_DMACaptureHalfCplt,"ax",%progbits
 2969              		.align	1
 2970              		.global	TIM_DMACaptureHalfCplt
 2971              		.syntax unified
 2972              		.thumb
 2973              		.thumb_func
 2974              		.fpu fpv4-sp-d16
 2976              	TIM_DMACaptureHalfCplt:
 2977              	.LFB213:
5698:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2978              		.loc 1 5698 0
 2979              		.cfi_startproc
 2980              		@ args = 0, pretend = 0, frame = 0
 2981              		@ frame_needed = 0, uses_anonymous_args = 0
 2982              	.LVL346:
5698:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2983              		.loc 1 5698 0
 2984 0000 10B5     		push	{r4, lr}
 2985              	.LCFI34:
 2986              		.cfi_def_cfa_offset 8
 2987              		.cfi_offset 4, -8
 2988              		.cfi_offset 14, -4
5699:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2989              		.loc 1 5699 0
 2990 0002 846B     		ldr	r4, [r0, #56]
 2991              	.LVL347:
5701:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 2992              		.loc 1 5701 0
 2993 0004 0123     		movs	r3, #1
 2994 0006 84F83D30 		strb	r3, [r4, #61]
5703:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2995              		.loc 1 5703 0
 2996 000a 636A     		ldr	r3, [r4, #36]
 2997 000c 9842     		cmp	r0, r3
 2998 000e 0ED0     		beq	.L208
5707:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 2999              		.loc 1 5707 0
 3000 0010 A36A     		ldr	r3, [r4, #40]
 3001 0012 9842     		cmp	r0, r3
 3002 0014 0ED0     		beq	.L209
5711:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3003              		.loc 1 5711 0
 3004 0016 E36A     		ldr	r3, [r4, #44]
ARM GAS  /tmp/ccVHe0ZY.s 			page 173


 3005 0018 9842     		cmp	r0, r3
 3006 001a 0ED0     		beq	.L210
5715:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3007              		.loc 1 5715 0
 3008 001c 236B     		ldr	r3, [r4, #48]
 3009 001e 9842     		cmp	r0, r3
 3010 0020 0ED0     		beq	.L211
 3011              	.L204:
5727:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3012              		.loc 1 5727 0
 3013 0022 2046     		mov	r0, r4
 3014              	.LVL348:
 3015 0024 FFF7FEFF 		bl	HAL_TIM_IC_CaptureHalfCpltCallback
 3016              	.LVL349:
5730:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3017              		.loc 1 5730 0
 3018 0028 0023     		movs	r3, #0
 3019 002a 2377     		strb	r3, [r4, #28]
 3020 002c 10BD     		pop	{r4, pc}
 3021              	.LVL350:
 3022              	.L208:
5705:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3023              		.loc 1 5705 0
 3024 002e 0123     		movs	r3, #1
 3025 0030 2377     		strb	r3, [r4, #28]
 3026 0032 F6E7     		b	.L204
 3027              	.L209:
5709:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3028              		.loc 1 5709 0
 3029 0034 0223     		movs	r3, #2
 3030 0036 2377     		strb	r3, [r4, #28]
 3031 0038 F3E7     		b	.L204
 3032              	.L210:
5713:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3033              		.loc 1 5713 0
 3034 003a 0423     		movs	r3, #4
 3035 003c 2377     		strb	r3, [r4, #28]
 3036 003e F0E7     		b	.L204
 3037              	.L211:
5717:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3038              		.loc 1 5717 0
 3039 0040 0823     		movs	r3, #8
 3040 0042 2377     		strb	r3, [r4, #28]
 3041 0044 EDE7     		b	.L204
 3042              		.cfi_endproc
 3043              	.LFE213:
 3045              		.section	.text.HAL_TIM_PWM_PulseFinishedCallback,"ax",%progbits
 3046              		.align	1
 3047              		.weak	HAL_TIM_PWM_PulseFinishedCallback
 3048              		.syntax unified
 3049              		.thumb
 3050              		.thumb_func
 3051              		.fpu fpv4-sp-d16
 3053              	HAL_TIM_PWM_PulseFinishedCallback:
 3054              	.LFB198:
4908:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 3055              		.loc 1 4908 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 174


 3056              		.cfi_startproc
 3057              		@ args = 0, pretend = 0, frame = 0
 3058              		@ frame_needed = 0, uses_anonymous_args = 0
 3059              		@ link register save eliminated.
 3060              	.LVL351:
 3061 0000 7047     		bx	lr
 3062              		.cfi_endproc
 3063              	.LFE198:
 3065              		.section	.text.TIM_DMADelayPulseCplt,"ax",%progbits
 3066              		.align	1
 3067              		.global	TIM_DMADelayPulseCplt
 3068              		.syntax unified
 3069              		.thumb
 3070              		.thumb_func
 3071              		.fpu fpv4-sp-d16
 3073              	TIM_DMADelayPulseCplt:
 3074              	.LFB210:
5575:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3075              		.loc 1 5575 0
 3076              		.cfi_startproc
 3077              		@ args = 0, pretend = 0, frame = 0
 3078              		@ frame_needed = 0, uses_anonymous_args = 0
 3079              	.LVL352:
5575:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3080              		.loc 1 5575 0
 3081 0000 10B5     		push	{r4, lr}
 3082              	.LCFI35:
 3083              		.cfi_def_cfa_offset 8
 3084              		.cfi_offset 4, -8
 3085              		.cfi_offset 14, -4
5576:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3086              		.loc 1 5576 0
 3087 0002 846B     		ldr	r4, [r0, #56]
 3088              	.LVL353:
5578:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3089              		.loc 1 5578 0
 3090 0004 0123     		movs	r3, #1
 3091 0006 84F83D30 		strb	r3, [r4, #61]
5580:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3092              		.loc 1 5580 0
 3093 000a 636A     		ldr	r3, [r4, #36]
 3094 000c 9842     		cmp	r0, r3
 3095 000e 0ED0     		beq	.L219
5584:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3096              		.loc 1 5584 0
 3097 0010 A36A     		ldr	r3, [r4, #40]
 3098 0012 9842     		cmp	r0, r3
 3099 0014 0ED0     		beq	.L220
5588:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3100              		.loc 1 5588 0
 3101 0016 E36A     		ldr	r3, [r4, #44]
 3102 0018 9842     		cmp	r0, r3
 3103 001a 0ED0     		beq	.L221
5592:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3104              		.loc 1 5592 0
 3105 001c 236B     		ldr	r3, [r4, #48]
 3106 001e 9842     		cmp	r0, r3
ARM GAS  /tmp/ccVHe0ZY.s 			page 175


 3107 0020 0ED0     		beq	.L222
 3108              	.L215:
5604:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3109              		.loc 1 5604 0
 3110 0022 2046     		mov	r0, r4
 3111              	.LVL354:
 3112 0024 FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 3113              	.LVL355:
5607:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3114              		.loc 1 5607 0
 3115 0028 0023     		movs	r3, #0
 3116 002a 2377     		strb	r3, [r4, #28]
 3117 002c 10BD     		pop	{r4, pc}
 3118              	.LVL356:
 3119              	.L219:
5582:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3120              		.loc 1 5582 0
 3121 002e 0123     		movs	r3, #1
 3122 0030 2377     		strb	r3, [r4, #28]
 3123 0032 F6E7     		b	.L215
 3124              	.L220:
5586:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3125              		.loc 1 5586 0
 3126 0034 0223     		movs	r3, #2
 3127 0036 2377     		strb	r3, [r4, #28]
 3128 0038 F3E7     		b	.L215
 3129              	.L221:
5590:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3130              		.loc 1 5590 0
 3131 003a 0423     		movs	r3, #4
 3132 003c 2377     		strb	r3, [r4, #28]
 3133 003e F0E7     		b	.L215
 3134              	.L222:
5594:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3135              		.loc 1 5594 0
 3136 0040 0823     		movs	r3, #8
 3137 0042 2377     		strb	r3, [r4, #28]
 3138 0044 EDE7     		b	.L215
 3139              		.cfi_endproc
 3140              	.LFE210:
 3142              		.section	.text.HAL_TIM_PWM_PulseFinishedHalfCpltCallback,"ax",%progbits
 3143              		.align	1
 3144              		.weak	HAL_TIM_PWM_PulseFinishedHalfCpltCallback
 3145              		.syntax unified
 3146              		.thumb
 3147              		.thumb_func
 3148              		.fpu fpv4-sp-d16
 3150              	HAL_TIM_PWM_PulseFinishedHalfCpltCallback:
 3151              	.LFB199:
4923:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 3152              		.loc 1 4923 0
 3153              		.cfi_startproc
 3154              		@ args = 0, pretend = 0, frame = 0
 3155              		@ frame_needed = 0, uses_anonymous_args = 0
 3156              		@ link register save eliminated.
 3157              	.LVL357:
 3158 0000 7047     		bx	lr
ARM GAS  /tmp/ccVHe0ZY.s 			page 176


 3159              		.cfi_endproc
 3160              	.LFE199:
 3162              		.section	.text.TIM_DMADelayPulseHalfCplt,"ax",%progbits
 3163              		.align	1
 3164              		.global	TIM_DMADelayPulseHalfCplt
 3165              		.syntax unified
 3166              		.thumb
 3167              		.thumb_func
 3168              		.fpu fpv4-sp-d16
 3170              	TIM_DMADelayPulseHalfCplt:
 3171              	.LFB211:
5616:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3172              		.loc 1 5616 0
 3173              		.cfi_startproc
 3174              		@ args = 0, pretend = 0, frame = 0
 3175              		@ frame_needed = 0, uses_anonymous_args = 0
 3176              	.LVL358:
5616:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3177              		.loc 1 5616 0
 3178 0000 10B5     		push	{r4, lr}
 3179              	.LCFI36:
 3180              		.cfi_def_cfa_offset 8
 3181              		.cfi_offset 4, -8
 3182              		.cfi_offset 14, -4
5617:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3183              		.loc 1 5617 0
 3184 0002 846B     		ldr	r4, [r0, #56]
 3185              	.LVL359:
5619:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3186              		.loc 1 5619 0
 3187 0004 0123     		movs	r3, #1
 3188 0006 84F83D30 		strb	r3, [r4, #61]
5621:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3189              		.loc 1 5621 0
 3190 000a 636A     		ldr	r3, [r4, #36]
 3191 000c 9842     		cmp	r0, r3
 3192 000e 0ED0     		beq	.L230
5625:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3193              		.loc 1 5625 0
 3194 0010 A36A     		ldr	r3, [r4, #40]
 3195 0012 9842     		cmp	r0, r3
 3196 0014 0ED0     		beq	.L231
5629:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3197              		.loc 1 5629 0
 3198 0016 E36A     		ldr	r3, [r4, #44]
 3199 0018 9842     		cmp	r0, r3
 3200 001a 0ED0     		beq	.L232
5633:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3201              		.loc 1 5633 0
 3202 001c 236B     		ldr	r3, [r4, #48]
 3203 001e 9842     		cmp	r0, r3
 3204 0020 0ED0     		beq	.L233
 3205              	.L226:
5645:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3206              		.loc 1 5645 0
 3207 0022 2046     		mov	r0, r4
 3208              	.LVL360:
ARM GAS  /tmp/ccVHe0ZY.s 			page 177


 3209 0024 FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedHalfCpltCallback
 3210              	.LVL361:
5648:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3211              		.loc 1 5648 0
 3212 0028 0023     		movs	r3, #0
 3213 002a 2377     		strb	r3, [r4, #28]
 3214 002c 10BD     		pop	{r4, pc}
 3215              	.LVL362:
 3216              	.L230:
5623:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3217              		.loc 1 5623 0
 3218 002e 0123     		movs	r3, #1
 3219 0030 2377     		strb	r3, [r4, #28]
 3220 0032 F6E7     		b	.L226
 3221              	.L231:
5627:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3222              		.loc 1 5627 0
 3223 0034 0223     		movs	r3, #2
 3224 0036 2377     		strb	r3, [r4, #28]
 3225 0038 F3E7     		b	.L226
 3226              	.L232:
5631:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3227              		.loc 1 5631 0
 3228 003a 0423     		movs	r3, #4
 3229 003c 2377     		strb	r3, [r4, #28]
 3230 003e F0E7     		b	.L226
 3231              	.L233:
5635:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3232              		.loc 1 5635 0
 3233 0040 0823     		movs	r3, #8
 3234 0042 2377     		strb	r3, [r4, #28]
 3235 0044 EDE7     		b	.L226
 3236              		.cfi_endproc
 3237              	.LFE211:
 3239              		.section	.text.HAL_TIM_TriggerCallback,"ax",%progbits
 3240              		.align	1
 3241              		.weak	HAL_TIM_TriggerCallback
 3242              		.syntax unified
 3243              		.thumb
 3244              		.thumb_func
 3245              		.fpu fpv4-sp-d16
 3247              	HAL_TIM_TriggerCallback:
 3248              	.LFB200:
4938:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 3249              		.loc 1 4938 0
 3250              		.cfi_startproc
 3251              		@ args = 0, pretend = 0, frame = 0
 3252              		@ frame_needed = 0, uses_anonymous_args = 0
 3253              		@ link register save eliminated.
 3254              	.LVL363:
 3255 0000 7047     		bx	lr
 3256              		.cfi_endproc
 3257              	.LFE200:
 3259              		.section	.text.HAL_TIM_IRQHandler,"ax",%progbits
 3260              		.align	1
 3261              		.global	HAL_TIM_IRQHandler
 3262              		.syntax unified
ARM GAS  /tmp/ccVHe0ZY.s 			page 178


 3263              		.thumb
 3264              		.thumb_func
 3265              		.fpu fpv4-sp-d16
 3267              	HAL_TIM_IRQHandler:
 3268              	.LFB177:
3168:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Capture compare 1 event */
 3269              		.loc 1 3168 0
 3270              		.cfi_startproc
 3271              		@ args = 0, pretend = 0, frame = 0
 3272              		@ frame_needed = 0, uses_anonymous_args = 0
 3273              	.LVL364:
3168:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Capture compare 1 event */
 3274              		.loc 1 3168 0
 3275 0000 10B5     		push	{r4, lr}
 3276              	.LCFI37:
 3277              		.cfi_def_cfa_offset 8
 3278              		.cfi_offset 4, -8
 3279              		.cfi_offset 14, -4
 3280 0002 0446     		mov	r4, r0
3170:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3281              		.loc 1 3170 0
 3282 0004 0368     		ldr	r3, [r0]
 3283 0006 1A69     		ldr	r2, [r3, #16]
 3284 0008 12F0020F 		tst	r2, #2
 3285 000c 11D0     		beq	.L236
3172:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 3286              		.loc 1 3172 0
 3287 000e DA68     		ldr	r2, [r3, #12]
 3288 0010 12F0020F 		tst	r2, #2
 3289 0014 0DD0     		beq	.L236
3175:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 3290              		.loc 1 3175 0
 3291 0016 6FF00202 		mvn	r2, #2
 3292 001a 1A61     		str	r2, [r3, #16]
3176:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3293              		.loc 1 3176 0
 3294 001c 0123     		movs	r3, #1
 3295 001e 0377     		strb	r3, [r0, #28]
3179:HALLIB/Src/stm32f4xx_hal_tim.c ****         {
 3296              		.loc 1 3179 0
 3297 0020 0368     		ldr	r3, [r0]
 3298 0022 9B69     		ldr	r3, [r3, #24]
 3299 0024 13F0030F 		tst	r3, #3
 3300 0028 70D0     		beq	.L237
3184:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3301              		.loc 1 3184 0
 3302 002a FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 3303              	.LVL365:
 3304              	.L238:
3198:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 3305              		.loc 1 3198 0
 3306 002e 0023     		movs	r3, #0
 3307 0030 2377     		strb	r3, [r4, #28]
 3308              	.L236:
3203:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3309              		.loc 1 3203 0
 3310 0032 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccVHe0ZY.s 			page 179


 3311 0034 1A69     		ldr	r2, [r3, #16]
 3312 0036 12F0040F 		tst	r2, #4
 3313 003a 12D0     		beq	.L239
3205:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 3314              		.loc 1 3205 0
 3315 003c DA68     		ldr	r2, [r3, #12]
 3316 003e 12F0040F 		tst	r2, #4
 3317 0042 0ED0     		beq	.L239
3207:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 3318              		.loc 1 3207 0
 3319 0044 6FF00402 		mvn	r2, #4
 3320 0048 1A61     		str	r2, [r3, #16]
3208:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Input capture event */
 3321              		.loc 1 3208 0
 3322 004a 0223     		movs	r3, #2
 3323 004c 2377     		strb	r3, [r4, #28]
3210:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 3324              		.loc 1 3210 0
 3325 004e 2368     		ldr	r3, [r4]
 3326 0050 9B69     		ldr	r3, [r3, #24]
 3327 0052 13F4407F 		tst	r3, #768
 3328 0056 5FD0     		beq	.L240
3215:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3329              		.loc 1 3215 0
 3330 0058 2046     		mov	r0, r4
 3331 005a FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 3332              	.LVL366:
 3333              	.L241:
3229:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 3334              		.loc 1 3229 0
 3335 005e 0023     		movs	r3, #0
 3336 0060 2377     		strb	r3, [r4, #28]
 3337              	.L239:
3233:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3338              		.loc 1 3233 0
 3339 0062 2368     		ldr	r3, [r4]
 3340 0064 1A69     		ldr	r2, [r3, #16]
 3341 0066 12F0080F 		tst	r2, #8
 3342 006a 12D0     		beq	.L242
3235:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 3343              		.loc 1 3235 0
 3344 006c DA68     		ldr	r2, [r3, #12]
 3345 006e 12F0080F 		tst	r2, #8
 3346 0072 0ED0     		beq	.L242
3237:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 3347              		.loc 1 3237 0
 3348 0074 6FF00802 		mvn	r2, #8
 3349 0078 1A61     		str	r2, [r3, #16]
3238:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Input capture event */
 3350              		.loc 1 3238 0
 3351 007a 0423     		movs	r3, #4
 3352 007c 2377     		strb	r3, [r4, #28]
3240:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 3353              		.loc 1 3240 0
 3354 007e 2368     		ldr	r3, [r4]
 3355 0080 DB69     		ldr	r3, [r3, #28]
 3356 0082 13F0030F 		tst	r3, #3
ARM GAS  /tmp/ccVHe0ZY.s 			page 180


 3357 0086 4ED0     		beq	.L243
3245:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3358              		.loc 1 3245 0
 3359 0088 2046     		mov	r0, r4
 3360 008a FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 3361              	.LVL367:
 3362              	.L244:
3259:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 3363              		.loc 1 3259 0
 3364 008e 0023     		movs	r3, #0
 3365 0090 2377     		strb	r3, [r4, #28]
 3366              	.L242:
3263:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3367              		.loc 1 3263 0
 3368 0092 2368     		ldr	r3, [r4]
 3369 0094 1A69     		ldr	r2, [r3, #16]
 3370 0096 12F0100F 		tst	r2, #16
 3371 009a 12D0     		beq	.L245
3265:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 3372              		.loc 1 3265 0
 3373 009c DA68     		ldr	r2, [r3, #12]
 3374 009e 12F0100F 		tst	r2, #16
 3375 00a2 0ED0     		beq	.L245
3267:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 3376              		.loc 1 3267 0
 3377 00a4 6FF01002 		mvn	r2, #16
 3378 00a8 1A61     		str	r2, [r3, #16]
3268:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Input capture event */
 3379              		.loc 1 3268 0
 3380 00aa 0823     		movs	r3, #8
 3381 00ac 2377     		strb	r3, [r4, #28]
3270:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 3382              		.loc 1 3270 0
 3383 00ae 2368     		ldr	r3, [r4]
 3384 00b0 DB69     		ldr	r3, [r3, #28]
 3385 00b2 13F4407F 		tst	r3, #768
 3386 00b6 3DD0     		beq	.L246
3275:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3387              		.loc 1 3275 0
 3388 00b8 2046     		mov	r0, r4
 3389 00ba FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 3390              	.LVL368:
 3391              	.L247:
3289:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 3392              		.loc 1 3289 0
 3393 00be 0023     		movs	r3, #0
 3394 00c0 2377     		strb	r3, [r4, #28]
 3395              	.L245:
3293:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3396              		.loc 1 3293 0
 3397 00c2 2368     		ldr	r3, [r4]
 3398 00c4 1A69     		ldr	r2, [r3, #16]
 3399 00c6 12F0010F 		tst	r2, #1
 3400 00ca 03D0     		beq	.L248
3295:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 3401              		.loc 1 3295 0
 3402 00cc DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/ccVHe0ZY.s 			page 181


 3403 00ce 12F0010F 		tst	r2, #1
 3404 00d2 36D1     		bne	.L253
 3405              	.L248:
3306:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3406              		.loc 1 3306 0
 3407 00d4 2368     		ldr	r3, [r4]
 3408 00d6 1A69     		ldr	r2, [r3, #16]
 3409 00d8 12F0800F 		tst	r2, #128
 3410 00dc 03D0     		beq	.L249
3308:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 3411              		.loc 1 3308 0
 3412 00de DA68     		ldr	r2, [r3, #12]
 3413 00e0 12F0800F 		tst	r2, #128
 3414 00e4 34D1     		bne	.L254
 3415              	.L249:
3319:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3416              		.loc 1 3319 0
 3417 00e6 2368     		ldr	r3, [r4]
 3418 00e8 1A69     		ldr	r2, [r3, #16]
 3419 00ea 12F0400F 		tst	r2, #64
 3420 00ee 03D0     		beq	.L250
3321:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 3421              		.loc 1 3321 0
 3422 00f0 DA68     		ldr	r2, [r3, #12]
 3423 00f2 12F0400F 		tst	r2, #64
 3424 00f6 32D1     		bne	.L255
 3425              	.L250:
3332:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3426              		.loc 1 3332 0
 3427 00f8 2368     		ldr	r3, [r4]
 3428 00fa 1A69     		ldr	r2, [r3, #16]
 3429 00fc 12F0200F 		tst	r2, #32
 3430 0100 03D0     		beq	.L235
3334:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 3431              		.loc 1 3334 0
 3432 0102 DA68     		ldr	r2, [r3, #12]
 3433 0104 12F0200F 		tst	r2, #32
 3434 0108 30D1     		bne	.L256
 3435              	.L235:
 3436 010a 10BD     		pop	{r4, pc}
 3437              	.LVL369:
 3438              	.L237:
3194:HALLIB/Src/stm32f4xx_hal_tim.c ****           HAL_TIM_PWM_PulseFinishedCallback(htim);
 3439              		.loc 1 3194 0
 3440 010c FFF7FEFF 		bl	HAL_TIM_OC_DelayElapsedCallback
 3441              	.LVL370:
3195:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3442              		.loc 1 3195 0
 3443 0110 2046     		mov	r0, r4
 3444 0112 FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 3445              	.LVL371:
 3446 0116 8AE7     		b	.L238
 3447              	.L240:
3225:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
 3448              		.loc 1 3225 0
 3449 0118 2046     		mov	r0, r4
 3450 011a FFF7FEFF 		bl	HAL_TIM_OC_DelayElapsedCallback
ARM GAS  /tmp/ccVHe0ZY.s 			page 182


 3451              	.LVL372:
3226:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3452              		.loc 1 3226 0
 3453 011e 2046     		mov	r0, r4
 3454 0120 FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 3455              	.LVL373:
 3456 0124 9BE7     		b	.L241
 3457              	.L243:
3255:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
 3458              		.loc 1 3255 0
 3459 0126 2046     		mov	r0, r4
 3460 0128 FFF7FEFF 		bl	HAL_TIM_OC_DelayElapsedCallback
 3461              	.LVL374:
3256:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3462              		.loc 1 3256 0
 3463 012c 2046     		mov	r0, r4
 3464 012e FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 3465              	.LVL375:
 3466 0132 ACE7     		b	.L244
 3467              	.L246:
3285:HALLIB/Src/stm32f4xx_hal_tim.c ****         HAL_TIM_PWM_PulseFinishedCallback(htim);
 3468              		.loc 1 3285 0
 3469 0134 2046     		mov	r0, r4
 3470 0136 FFF7FEFF 		bl	HAL_TIM_OC_DelayElapsedCallback
 3471              	.LVL376:
3286:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3472              		.loc 1 3286 0
 3473 013a 2046     		mov	r0, r4
 3474 013c FFF7FEFF 		bl	HAL_TIM_PWM_PulseFinishedCallback
 3475              	.LVL377:
 3476 0140 BDE7     		b	.L247
 3477              	.L253:
3297:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 3478              		.loc 1 3297 0
 3479 0142 6FF00102 		mvn	r2, #1
 3480 0146 1A61     		str	r2, [r3, #16]
3301:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3481              		.loc 1 3301 0
 3482 0148 2046     		mov	r0, r4
 3483 014a FFF7FEFF 		bl	HAL_TIM_PeriodElapsedCallback
 3484              	.LVL378:
 3485 014e C1E7     		b	.L248
 3486              	.L254:
3310:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 3487              		.loc 1 3310 0
 3488 0150 6FF08002 		mvn	r2, #128
 3489 0154 1A61     		str	r2, [r3, #16]
3314:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3490              		.loc 1 3314 0
 3491 0156 2046     		mov	r0, r4
 3492 0158 FFF7FEFF 		bl	HAL_TIMEx_BreakCallback
 3493              	.LVL379:
 3494 015c C3E7     		b	.L249
 3495              	.L255:
3323:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 3496              		.loc 1 3323 0
 3497 015e 6FF04002 		mvn	r2, #64
ARM GAS  /tmp/ccVHe0ZY.s 			page 183


 3498 0162 1A61     		str	r2, [r3, #16]
3327:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3499              		.loc 1 3327 0
 3500 0164 2046     		mov	r0, r4
 3501 0166 FFF7FEFF 		bl	HAL_TIM_TriggerCallback
 3502              	.LVL380:
 3503 016a C5E7     		b	.L250
 3504              	.L256:
3336:HALLIB/Src/stm32f4xx_hal_tim.c **** #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 3505              		.loc 1 3336 0
 3506 016c 6FF02002 		mvn	r2, #32
 3507 0170 1A61     		str	r2, [r3, #16]
3340:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3508              		.loc 1 3340 0
 3509 0172 2046     		mov	r0, r4
 3510 0174 FFF7FEFF 		bl	HAL_TIMEx_CommutCallback
 3511              	.LVL381:
3344:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3512              		.loc 1 3344 0
 3513 0178 C7E7     		b	.L235
 3514              		.cfi_endproc
 3515              	.LFE177:
 3517              		.section	.text.TIM_DMATriggerCplt,"ax",%progbits
 3518              		.align	1
 3519              		.syntax unified
 3520              		.thumb
 3521              		.thumb_func
 3522              		.fpu fpv4-sp-d16
 3524              	TIM_DMATriggerCplt:
 3525              	.LFB216:
5775:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3526              		.loc 1 5775 0
 3527              		.cfi_startproc
 3528              		@ args = 0, pretend = 0, frame = 0
 3529              		@ frame_needed = 0, uses_anonymous_args = 0
 3530              	.LVL382:
 3531 0000 08B5     		push	{r3, lr}
 3532              	.LCFI38:
 3533              		.cfi_def_cfa_offset 8
 3534              		.cfi_offset 3, -8
 3535              		.cfi_offset 14, -4
5776:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3536              		.loc 1 5776 0
 3537 0002 806B     		ldr	r0, [r0, #56]
 3538              	.LVL383:
5778:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3539              		.loc 1 5778 0
 3540 0004 0123     		movs	r3, #1
 3541 0006 80F83D30 		strb	r3, [r0, #61]
5783:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3542              		.loc 1 5783 0
 3543 000a FFF7FEFF 		bl	HAL_TIM_TriggerCallback
 3544              	.LVL384:
 3545 000e 08BD     		pop	{r3, pc}
 3546              		.cfi_endproc
 3547              	.LFE216:
 3549              		.section	.text.HAL_TIM_TriggerHalfCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccVHe0ZY.s 			page 184


 3550              		.align	1
 3551              		.weak	HAL_TIM_TriggerHalfCpltCallback
 3552              		.syntax unified
 3553              		.thumb
 3554              		.thumb_func
 3555              		.fpu fpv4-sp-d16
 3557              	HAL_TIM_TriggerHalfCpltCallback:
 3558              	.LFB201:
4953:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 3559              		.loc 1 4953 0
 3560              		.cfi_startproc
 3561              		@ args = 0, pretend = 0, frame = 0
 3562              		@ frame_needed = 0, uses_anonymous_args = 0
 3563              		@ link register save eliminated.
 3564              	.LVL385:
 3565 0000 7047     		bx	lr
 3566              		.cfi_endproc
 3567              	.LFE201:
 3569              		.section	.text.TIM_DMATriggerHalfCplt,"ax",%progbits
 3570              		.align	1
 3571              		.syntax unified
 3572              		.thumb
 3573              		.thumb_func
 3574              		.fpu fpv4-sp-d16
 3576              	TIM_DMATriggerHalfCplt:
 3577              	.LFB217:
5793:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3578              		.loc 1 5793 0
 3579              		.cfi_startproc
 3580              		@ args = 0, pretend = 0, frame = 0
 3581              		@ frame_needed = 0, uses_anonymous_args = 0
 3582              	.LVL386:
5793:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3583              		.loc 1 5793 0
 3584 0000 08B5     		push	{r3, lr}
 3585              	.LCFI39:
 3586              		.cfi_def_cfa_offset 8
 3587              		.cfi_offset 3, -8
 3588              		.cfi_offset 14, -4
5794:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3589              		.loc 1 5794 0
 3590 0002 806B     		ldr	r0, [r0, #56]
 3591              	.LVL387:
5796:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3592              		.loc 1 5796 0
 3593 0004 0123     		movs	r3, #1
 3594 0006 80F83D30 		strb	r3, [r0, #61]
5801:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3595              		.loc 1 5801 0
 3596 000a FFF7FEFF 		bl	HAL_TIM_TriggerHalfCpltCallback
 3597              	.LVL388:
 3598 000e 08BD     		pop	{r3, pc}
 3599              		.cfi_endproc
 3600              	.LFE217:
 3602              		.section	.text.HAL_TIM_ErrorCallback,"ax",%progbits
 3603              		.align	1
 3604              		.weak	HAL_TIM_ErrorCallback
ARM GAS  /tmp/ccVHe0ZY.s 			page 185


 3605              		.syntax unified
 3606              		.thumb
 3607              		.thumb_func
 3608              		.fpu fpv4-sp-d16
 3610              	HAL_TIM_ErrorCallback:
 3611              	.LFB202:
4968:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 3612              		.loc 1 4968 0
 3613              		.cfi_startproc
 3614              		@ args = 0, pretend = 0, frame = 0
 3615              		@ frame_needed = 0, uses_anonymous_args = 0
 3616              		@ link register save eliminated.
 3617              	.LVL389:
 3618 0000 7047     		bx	lr
 3619              		.cfi_endproc
 3620              	.LFE202:
 3622              		.section	.text.TIM_DMAError,"ax",%progbits
 3623              		.align	1
 3624              		.global	TIM_DMAError
 3625              		.syntax unified
 3626              		.thumb
 3627              		.thumb_func
 3628              		.fpu fpv4-sp-d16
 3630              	TIM_DMAError:
 3631              	.LFB209:
5557:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3632              		.loc 1 5557 0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 3636              	.LVL390:
5557:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3637              		.loc 1 5557 0
 3638 0000 08B5     		push	{r3, lr}
 3639              	.LCFI40:
 3640              		.cfi_def_cfa_offset 8
 3641              		.cfi_offset 3, -8
 3642              		.cfi_offset 14, -4
5558:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3643              		.loc 1 5558 0
 3644 0002 806B     		ldr	r0, [r0, #56]
 3645              	.LVL391:
5560:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3646              		.loc 1 5560 0
 3647 0004 0123     		movs	r3, #1
 3648 0006 80F83D30 		strb	r3, [r0, #61]
5565:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3649              		.loc 1 5565 0
 3650 000a FFF7FEFF 		bl	HAL_TIM_ErrorCallback
 3651              	.LVL392:
 3652 000e 08BD     		pop	{r3, pc}
 3653              		.cfi_endproc
 3654              	.LFE209:
 3656              		.section	.text.HAL_TIM_Base_GetState,"ax",%progbits
 3657              		.align	1
 3658              		.global	HAL_TIM_Base_GetState
 3659              		.syntax unified
ARM GAS  /tmp/ccVHe0ZY.s 			page 186


 3660              		.thumb
 3661              		.thumb_func
 3662              		.fpu fpv4-sp-d16
 3664              	HAL_TIM_Base_GetState:
 3665              	.LFB203:
5485:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
 3666              		.loc 1 5485 0
 3667              		.cfi_startproc
 3668              		@ args = 0, pretend = 0, frame = 0
 3669              		@ frame_needed = 0, uses_anonymous_args = 0
 3670              		@ link register save eliminated.
 3671              	.LVL393:
5486:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3672              		.loc 1 5486 0
 3673 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 3674              	.LVL394:
5487:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3675              		.loc 1 5487 0
 3676 0004 7047     		bx	lr
 3677              		.cfi_endproc
 3678              	.LFE203:
 3680              		.section	.text.HAL_TIM_OC_GetState,"ax",%progbits
 3681              		.align	1
 3682              		.global	HAL_TIM_OC_GetState
 3683              		.syntax unified
 3684              		.thumb
 3685              		.thumb_func
 3686              		.fpu fpv4-sp-d16
 3688              	HAL_TIM_OC_GetState:
 3689              	.LFB204:
5495:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
 3690              		.loc 1 5495 0
 3691              		.cfi_startproc
 3692              		@ args = 0, pretend = 0, frame = 0
 3693              		@ frame_needed = 0, uses_anonymous_args = 0
 3694              		@ link register save eliminated.
 3695              	.LVL395:
5496:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3696              		.loc 1 5496 0
 3697 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 3698              	.LVL396:
5497:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3699              		.loc 1 5497 0
 3700 0004 7047     		bx	lr
 3701              		.cfi_endproc
 3702              	.LFE204:
 3704              		.section	.text.HAL_TIM_PWM_GetState,"ax",%progbits
 3705              		.align	1
 3706              		.global	HAL_TIM_PWM_GetState
 3707              		.syntax unified
 3708              		.thumb
 3709              		.thumb_func
 3710              		.fpu fpv4-sp-d16
 3712              	HAL_TIM_PWM_GetState:
 3713              	.LFB205:
5505:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
 3714              		.loc 1 5505 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 187


 3715              		.cfi_startproc
 3716              		@ args = 0, pretend = 0, frame = 0
 3717              		@ frame_needed = 0, uses_anonymous_args = 0
 3718              		@ link register save eliminated.
 3719              	.LVL397:
5506:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3720              		.loc 1 5506 0
 3721 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 3722              	.LVL398:
5507:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3723              		.loc 1 5507 0
 3724 0004 7047     		bx	lr
 3725              		.cfi_endproc
 3726              	.LFE205:
 3728              		.section	.text.HAL_TIM_IC_GetState,"ax",%progbits
 3729              		.align	1
 3730              		.global	HAL_TIM_IC_GetState
 3731              		.syntax unified
 3732              		.thumb
 3733              		.thumb_func
 3734              		.fpu fpv4-sp-d16
 3736              	HAL_TIM_IC_GetState:
 3737              	.LFB206:
5515:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
 3738              		.loc 1 5515 0
 3739              		.cfi_startproc
 3740              		@ args = 0, pretend = 0, frame = 0
 3741              		@ frame_needed = 0, uses_anonymous_args = 0
 3742              		@ link register save eliminated.
 3743              	.LVL399:
5516:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3744              		.loc 1 5516 0
 3745 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 3746              	.LVL400:
5517:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3747              		.loc 1 5517 0
 3748 0004 7047     		bx	lr
 3749              		.cfi_endproc
 3750              	.LFE206:
 3752              		.section	.text.HAL_TIM_OnePulse_GetState,"ax",%progbits
 3753              		.align	1
 3754              		.global	HAL_TIM_OnePulse_GetState
 3755              		.syntax unified
 3756              		.thumb
 3757              		.thumb_func
 3758              		.fpu fpv4-sp-d16
 3760              	HAL_TIM_OnePulse_GetState:
 3761              	.LFB207:
5525:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
 3762              		.loc 1 5525 0
 3763              		.cfi_startproc
 3764              		@ args = 0, pretend = 0, frame = 0
 3765              		@ frame_needed = 0, uses_anonymous_args = 0
 3766              		@ link register save eliminated.
 3767              	.LVL401:
5526:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3768              		.loc 1 5526 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 188


 3769 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 3770              	.LVL402:
5527:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3771              		.loc 1 5527 0
 3772 0004 7047     		bx	lr
 3773              		.cfi_endproc
 3774              	.LFE207:
 3776              		.section	.text.HAL_TIM_Encoder_GetState,"ax",%progbits
 3777              		.align	1
 3778              		.global	HAL_TIM_Encoder_GetState
 3779              		.syntax unified
 3780              		.thumb
 3781              		.thumb_func
 3782              		.fpu fpv4-sp-d16
 3784              	HAL_TIM_Encoder_GetState:
 3785              	.LFB208:
5535:HALLIB/Src/stm32f4xx_hal_tim.c ****   return htim->State;
 3786              		.loc 1 5535 0
 3787              		.cfi_startproc
 3788              		@ args = 0, pretend = 0, frame = 0
 3789              		@ frame_needed = 0, uses_anonymous_args = 0
 3790              		@ link register save eliminated.
 3791              	.LVL403:
5536:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3792              		.loc 1 5536 0
 3793 0000 90F83D00 		ldrb	r0, [r0, #61]	@ zero_extendqisi2
 3794              	.LVL404:
5537:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3795              		.loc 1 5537 0
 3796 0004 7047     		bx	lr
 3797              		.cfi_endproc
 3798              	.LFE208:
 3800              		.section	.text.TIM_Base_SetConfig,"ax",%progbits
 3801              		.align	1
 3802              		.global	TIM_Base_SetConfig
 3803              		.syntax unified
 3804              		.thumb
 3805              		.thumb_func
 3806              		.fpu fpv4-sp-d16
 3808              	TIM_Base_SetConfig:
 3809              	.LFB218:
5812:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpcr1;
 3810              		.loc 1 5812 0
 3811              		.cfi_startproc
 3812              		@ args = 0, pretend = 0, frame = 0
 3813              		@ frame_needed = 0, uses_anonymous_args = 0
 3814              		@ link register save eliminated.
 3815              	.LVL405:
5814:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3816              		.loc 1 5814 0
 3817 0000 0368     		ldr	r3, [r0]
 3818              	.LVL406:
5817:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3819              		.loc 1 5817 0
 3820 0002 314A     		ldr	r2, .L278
 3821 0004 9042     		cmp	r0, r2
 3822 0006 12D0     		beq	.L272
ARM GAS  /tmp/ccVHe0ZY.s 			page 189


5817:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3823              		.loc 1 5817 0 is_stmt 0 discriminator 1
 3824 0008 B0F1804F 		cmp	r0, #1073741824
 3825 000c 0FD0     		beq	.L272
5817:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3826              		.loc 1 5817 0 discriminator 2
 3827 000e A2F57C42 		sub	r2, r2, #64512
 3828 0012 9042     		cmp	r0, r2
 3829 0014 0BD0     		beq	.L272
5817:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3830              		.loc 1 5817 0 discriminator 3
 3831 0016 02F58062 		add	r2, r2, #1024
 3832 001a 9042     		cmp	r0, r2
 3833 001c 07D0     		beq	.L272
5817:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3834              		.loc 1 5817 0 discriminator 4
 3835 001e 02F58062 		add	r2, r2, #1024
 3836 0022 9042     		cmp	r0, r2
 3837 0024 03D0     		beq	.L272
5817:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3838              		.loc 1 5817 0 discriminator 5
 3839 0026 02F57842 		add	r2, r2, #63488
 3840 002a 9042     		cmp	r0, r2
 3841 002c 03D1     		bne	.L273
 3842              	.L272:
5820:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr1 |= Structure->CounterMode;
 3843              		.loc 1 5820 0 is_stmt 1
 3844 002e 23F07003 		bic	r3, r3, #112
 3845              	.LVL407:
5821:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3846              		.loc 1 5821 0
 3847 0032 4A68     		ldr	r2, [r1, #4]
 3848 0034 1343     		orrs	r3, r3, r2
 3849              	.LVL408:
 3850              	.L273:
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3851              		.loc 1 5824 0
 3852 0036 244A     		ldr	r2, .L278
 3853 0038 9042     		cmp	r0, r2
 3854 003a 2AD0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3855              		.loc 1 5824 0 is_stmt 0 discriminator 1
 3856 003c B0F1804F 		cmp	r0, #1073741824
 3857 0040 27D0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3858              		.loc 1 5824 0 discriminator 2
 3859 0042 A2F57C42 		sub	r2, r2, #64512
 3860 0046 9042     		cmp	r0, r2
 3861 0048 23D0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3862              		.loc 1 5824 0 discriminator 3
 3863 004a 02F58062 		add	r2, r2, #1024
 3864 004e 9042     		cmp	r0, r2
 3865 0050 1FD0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3866              		.loc 1 5824 0 discriminator 4
 3867 0052 02F58062 		add	r2, r2, #1024
ARM GAS  /tmp/ccVHe0ZY.s 			page 190


 3868 0056 9042     		cmp	r0, r2
 3869 0058 1BD0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3870              		.loc 1 5824 0 discriminator 5
 3871 005a 02F57842 		add	r2, r2, #63488
 3872 005e 9042     		cmp	r0, r2
 3873 0060 17D0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3874              		.loc 1 5824 0 discriminator 6
 3875 0062 02F57052 		add	r2, r2, #15360
 3876 0066 9042     		cmp	r0, r2
 3877 0068 13D0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3878              		.loc 1 5824 0 discriminator 7
 3879 006a 02F58062 		add	r2, r2, #1024
 3880 006e 9042     		cmp	r0, r2
 3881 0070 0FD0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3882              		.loc 1 5824 0 discriminator 8
 3883 0072 02F58062 		add	r2, r2, #1024
 3884 0076 9042     		cmp	r0, r2
 3885 0078 0BD0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3886              		.loc 1 5824 0 discriminator 9
 3887 007a A2F59832 		sub	r2, r2, #77824
 3888 007e 9042     		cmp	r0, r2
 3889 0080 07D0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3890              		.loc 1 5824 0 discriminator 10
 3891 0082 02F58062 		add	r2, r2, #1024
 3892 0086 9042     		cmp	r0, r2
 3893 0088 03D0     		beq	.L274
5824:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3894              		.loc 1 5824 0 discriminator 11
 3895 008a 02F58062 		add	r2, r2, #1024
 3896 008e 9042     		cmp	r0, r2
 3897 0090 03D1     		bne	.L275
 3898              	.L274:
5827:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpcr1 |= (uint32_t)Structure->ClockDivision;
 3899              		.loc 1 5827 0 is_stmt 1
 3900 0092 23F44073 		bic	r3, r3, #768
 3901              	.LVL409:
5828:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3902              		.loc 1 5828 0
 3903 0096 CA68     		ldr	r2, [r1, #12]
 3904 0098 1343     		orrs	r3, r3, r2
 3905              	.LVL410:
 3906              	.L275:
5832:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3907              		.loc 1 5832 0
 3908 009a 23F08003 		bic	r3, r3, #128
 3909              	.LVL411:
 3910 009e 4A69     		ldr	r2, [r1, #20]
 3911 00a0 1343     		orrs	r3, r3, r2
 3912              	.LVL412:
5834:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3913              		.loc 1 5834 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 191


 3914 00a2 0360     		str	r3, [r0]
5837:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3915              		.loc 1 5837 0
 3916 00a4 8B68     		ldr	r3, [r1, #8]
 3917              	.LVL413:
 3918 00a6 C362     		str	r3, [r0, #44]
 3919              	.LVL414:
5840:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3920              		.loc 1 5840 0
 3921 00a8 0B68     		ldr	r3, [r1]
 3922 00aa 8362     		str	r3, [r0, #40]
5842:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3923              		.loc 1 5842 0
 3924 00ac 064B     		ldr	r3, .L278
 3925 00ae 9842     		cmp	r0, r3
 3926 00b0 06D0     		beq	.L276
5842:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3927              		.loc 1 5842 0 is_stmt 0 discriminator 1
 3928 00b2 03F58063 		add	r3, r3, #1024
 3929 00b6 9842     		cmp	r0, r3
 3930 00b8 02D0     		beq	.L276
 3931              	.L277:
5850:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3932              		.loc 1 5850 0 is_stmt 1
 3933 00ba 0123     		movs	r3, #1
 3934 00bc 4361     		str	r3, [r0, #20]
 3935 00be 7047     		bx	lr
 3936              	.L276:
5845:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 3937              		.loc 1 5845 0
 3938 00c0 0B69     		ldr	r3, [r1, #16]
 3939 00c2 0363     		str	r3, [r0, #48]
 3940 00c4 F9E7     		b	.L277
 3941              	.L279:
 3942 00c6 00BF     		.align	2
 3943              	.L278:
 3944 00c8 00000140 		.word	1073807360
 3945              		.cfi_endproc
 3946              	.LFE218:
 3948              		.section	.text.HAL_TIM_Base_Init,"ax",%progbits
 3949              		.align	1
 3950              		.global	HAL_TIM_Base_Init
 3951              		.syntax unified
 3952              		.thumb
 3953              		.thumb_func
 3954              		.fpu fpv4-sp-d16
 3956              	HAL_TIM_Base_Init:
 3957              	.LFB119:
 266:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3958              		.loc 1 266 0
 3959              		.cfi_startproc
 3960              		@ args = 0, pretend = 0, frame = 0
 3961              		@ frame_needed = 0, uses_anonymous_args = 0
 3962              	.LVL415:
 268:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3963              		.loc 1 268 0
 3964 0000 A8B1     		cbz	r0, .L283
ARM GAS  /tmp/ccVHe0ZY.s 			page 192


 266:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 3965              		.loc 1 266 0
 3966 0002 10B5     		push	{r4, lr}
 3967              	.LCFI41:
 3968              		.cfi_def_cfa_offset 8
 3969              		.cfi_offset 4, -8
 3970              		.cfi_offset 14, -4
 3971 0004 0446     		mov	r4, r0
 279:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 3972              		.loc 1 279 0
 3973 0006 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 3974 000a 5BB1     		cbz	r3, .L288
 3975              	.LVL416:
 3976              	.L282:
 301:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3977              		.loc 1 301 0
 3978 000c 0223     		movs	r3, #2
 3979 000e 84F83D30 		strb	r3, [r4, #61]
 304:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3980              		.loc 1 304 0
 3981 0012 211D     		adds	r1, r4, #4
 3982 0014 2068     		ldr	r0, [r4]
 3983 0016 FFF7FEFF 		bl	TIM_Base_SetConfig
 3984              	.LVL417:
 307:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3985              		.loc 1 307 0
 3986 001a 0123     		movs	r3, #1
 3987 001c 84F83D30 		strb	r3, [r4, #61]
 309:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 3988              		.loc 1 309 0
 3989 0020 0020     		movs	r0, #0
 3990 0022 10BD     		pop	{r4, pc}
 3991              	.LVL418:
 3992              	.L288:
 282:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 3993              		.loc 1 282 0
 3994 0024 80F83C30 		strb	r3, [r0, #60]
 296:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 3995              		.loc 1 296 0
 3996 0028 FFF7FEFF 		bl	HAL_TIM_Base_MspInit
 3997              	.LVL419:
 3998 002c EEE7     		b	.L282
 3999              	.LVL420:
 4000              	.L283:
 4001              	.LCFI42:
 4002              		.cfi_def_cfa_offset 0
 4003              		.cfi_restore 4
 4004              		.cfi_restore 14
 270:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4005              		.loc 1 270 0
 4006 002e 0120     		movs	r0, #1
 4007              	.LVL421:
 4008 0030 7047     		bx	lr
 4009              		.cfi_endproc
 4010              	.LFE119:
 4012              		.section	.text.HAL_TIM_OC_Init,"ax",%progbits
 4013              		.align	1
ARM GAS  /tmp/ccVHe0ZY.s 			page 193


 4014              		.global	HAL_TIM_OC_Init
 4015              		.syntax unified
 4016              		.thumb
 4017              		.thumb_func
 4018              		.fpu fpv4-sp-d16
 4020              	HAL_TIM_OC_Init:
 4021              	.LFB129:
 598:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 4022              		.loc 1 598 0
 4023              		.cfi_startproc
 4024              		@ args = 0, pretend = 0, frame = 0
 4025              		@ frame_needed = 0, uses_anonymous_args = 0
 4026              	.LVL422:
 600:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4027              		.loc 1 600 0
 4028 0000 A8B1     		cbz	r0, .L292
 598:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 4029              		.loc 1 598 0
 4030 0002 10B5     		push	{r4, lr}
 4031              	.LCFI43:
 4032              		.cfi_def_cfa_offset 8
 4033              		.cfi_offset 4, -8
 4034              		.cfi_offset 14, -4
 4035 0004 0446     		mov	r4, r0
 611:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4036              		.loc 1 611 0
 4037 0006 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 4038 000a 5BB1     		cbz	r3, .L297
 4039              	.LVL423:
 4040              	.L291:
 633:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4041              		.loc 1 633 0
 4042 000c 0223     		movs	r3, #2
 4043 000e 84F83D30 		strb	r3, [r4, #61]
 636:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4044              		.loc 1 636 0
 4045 0012 211D     		adds	r1, r4, #4
 4046 0014 2068     		ldr	r0, [r4]
 4047 0016 FFF7FEFF 		bl	TIM_Base_SetConfig
 4048              	.LVL424:
 639:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4049              		.loc 1 639 0
 4050 001a 0123     		movs	r3, #1
 4051 001c 84F83D30 		strb	r3, [r4, #61]
 641:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4052              		.loc 1 641 0
 4053 0020 0020     		movs	r0, #0
 4054 0022 10BD     		pop	{r4, pc}
 4055              	.LVL425:
 4056              	.L297:
 614:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4057              		.loc 1 614 0
 4058 0024 80F83C30 		strb	r3, [r0, #60]
 628:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 4059              		.loc 1 628 0
 4060 0028 FFF7FEFF 		bl	HAL_TIM_OC_MspInit
 4061              	.LVL426:
ARM GAS  /tmp/ccVHe0ZY.s 			page 194


 4062 002c EEE7     		b	.L291
 4063              	.LVL427:
 4064              	.L292:
 4065              	.LCFI44:
 4066              		.cfi_def_cfa_offset 0
 4067              		.cfi_restore 4
 4068              		.cfi_restore 14
 602:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4069              		.loc 1 602 0
 4070 002e 0120     		movs	r0, #1
 4071              	.LVL428:
 4072 0030 7047     		bx	lr
 4073              		.cfi_endproc
 4074              	.LFE129:
 4076              		.section	.text.HAL_TIM_PWM_Init,"ax",%progbits
 4077              		.align	1
 4078              		.global	HAL_TIM_PWM_Init
 4079              		.syntax unified
 4080              		.thumb
 4081              		.thumb_func
 4082              		.fpu fpv4-sp-d16
 4084              	HAL_TIM_PWM_Init:
 4085              	.LFB139:
1171:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 4086              		.loc 1 1171 0
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 0
 4089              		@ frame_needed = 0, uses_anonymous_args = 0
 4090              	.LVL429:
1173:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4091              		.loc 1 1173 0
 4092 0000 A8B1     		cbz	r0, .L301
1171:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 4093              		.loc 1 1171 0
 4094 0002 10B5     		push	{r4, lr}
 4095              	.LCFI45:
 4096              		.cfi_def_cfa_offset 8
 4097              		.cfi_offset 4, -8
 4098              		.cfi_offset 14, -4
 4099 0004 0446     		mov	r4, r0
1184:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4100              		.loc 1 1184 0
 4101 0006 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 4102 000a 5BB1     		cbz	r3, .L306
 4103              	.LVL430:
 4104              	.L300:
1206:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4105              		.loc 1 1206 0
 4106 000c 0223     		movs	r3, #2
 4107 000e 84F83D30 		strb	r3, [r4, #61]
1209:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4108              		.loc 1 1209 0
 4109 0012 211D     		adds	r1, r4, #4
 4110 0014 2068     		ldr	r0, [r4]
 4111 0016 FFF7FEFF 		bl	TIM_Base_SetConfig
 4112              	.LVL431:
1212:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 195


 4113              		.loc 1 1212 0
 4114 001a 0123     		movs	r3, #1
 4115 001c 84F83D30 		strb	r3, [r4, #61]
1214:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4116              		.loc 1 1214 0
 4117 0020 0020     		movs	r0, #0
 4118 0022 10BD     		pop	{r4, pc}
 4119              	.LVL432:
 4120              	.L306:
1187:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4121              		.loc 1 1187 0
 4122 0024 80F83C30 		strb	r3, [r0, #60]
1201:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 4123              		.loc 1 1201 0
 4124 0028 FFF7FEFF 		bl	HAL_TIM_PWM_MspInit
 4125              	.LVL433:
 4126 002c EEE7     		b	.L300
 4127              	.LVL434:
 4128              	.L301:
 4129              	.LCFI46:
 4130              		.cfi_def_cfa_offset 0
 4131              		.cfi_restore 4
 4132              		.cfi_restore 14
1175:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4133              		.loc 1 1175 0
 4134 002e 0120     		movs	r0, #1
 4135              	.LVL435:
 4136 0030 7047     		bx	lr
 4137              		.cfi_endproc
 4138              	.LFE139:
 4140              		.section	.text.HAL_TIM_IC_Init,"ax",%progbits
 4141              		.align	1
 4142              		.global	HAL_TIM_IC_Init
 4143              		.syntax unified
 4144              		.thumb
 4145              		.thumb_func
 4146              		.fpu fpv4-sp-d16
 4148              	HAL_TIM_IC_Init:
 4149              	.LFB149:
1745:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 4150              		.loc 1 1745 0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 0
 4153              		@ frame_needed = 0, uses_anonymous_args = 0
 4154              	.LVL436:
1747:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4155              		.loc 1 1747 0
 4156 0000 A8B1     		cbz	r0, .L310
1745:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 4157              		.loc 1 1745 0
 4158 0002 10B5     		push	{r4, lr}
 4159              	.LCFI47:
 4160              		.cfi_def_cfa_offset 8
 4161              		.cfi_offset 4, -8
 4162              		.cfi_offset 14, -4
 4163 0004 0446     		mov	r4, r0
1758:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
ARM GAS  /tmp/ccVHe0ZY.s 			page 196


 4164              		.loc 1 1758 0
 4165 0006 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 4166 000a 5BB1     		cbz	r3, .L315
 4167              	.LVL437:
 4168              	.L309:
1780:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4169              		.loc 1 1780 0
 4170 000c 0223     		movs	r3, #2
 4171 000e 84F83D30 		strb	r3, [r4, #61]
1783:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4172              		.loc 1 1783 0
 4173 0012 211D     		adds	r1, r4, #4
 4174 0014 2068     		ldr	r0, [r4]
 4175 0016 FFF7FEFF 		bl	TIM_Base_SetConfig
 4176              	.LVL438:
1786:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4177              		.loc 1 1786 0
 4178 001a 0123     		movs	r3, #1
 4179 001c 84F83D30 		strb	r3, [r4, #61]
1788:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4180              		.loc 1 1788 0
 4181 0020 0020     		movs	r0, #0
 4182 0022 10BD     		pop	{r4, pc}
 4183              	.LVL439:
 4184              	.L315:
1761:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4185              		.loc 1 1761 0
 4186 0024 80F83C30 		strb	r3, [r0, #60]
1775:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 4187              		.loc 1 1775 0
 4188 0028 FFF7FEFF 		bl	HAL_TIM_IC_MspInit
 4189              	.LVL440:
 4190 002c EEE7     		b	.L309
 4191              	.LVL441:
 4192              	.L310:
 4193              	.LCFI48:
 4194              		.cfi_def_cfa_offset 0
 4195              		.cfi_restore 4
 4196              		.cfi_restore 14
1749:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4197              		.loc 1 1749 0
 4198 002e 0120     		movs	r0, #1
 4199              	.LVL442:
 4200 0030 7047     		bx	lr
 4201              		.cfi_endproc
 4202              	.LFE149:
 4204              		.section	.text.HAL_TIM_OnePulse_Init,"ax",%progbits
 4205              		.align	1
 4206              		.global	HAL_TIM_OnePulse_Init
 4207              		.syntax unified
 4208              		.thumb
 4209              		.thumb_func
 4210              		.fpu fpv4-sp-d16
 4212              	HAL_TIM_OnePulse_Init:
 4213              	.LFB159:
2284:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 4214              		.loc 1 2284 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 197


 4215              		.cfi_startproc
 4216              		@ args = 0, pretend = 0, frame = 0
 4217              		@ frame_needed = 0, uses_anonymous_args = 0
 4218              	.LVL443:
2286:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4219              		.loc 1 2286 0
 4220 0000 F8B1     		cbz	r0, .L319
2284:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the TIM handle allocation */
 4221              		.loc 1 2284 0
 4222 0002 38B5     		push	{r3, r4, r5, lr}
 4223              	.LCFI49:
 4224              		.cfi_def_cfa_offset 16
 4225              		.cfi_offset 3, -16
 4226              		.cfi_offset 4, -12
 4227              		.cfi_offset 5, -8
 4228              		.cfi_offset 14, -4
 4229 0004 0446     		mov	r4, r0
 4230 0006 0D46     		mov	r5, r1
2298:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4231              		.loc 1 2298 0
 4232 0008 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
 4233 000c A3B1     		cbz	r3, .L324
 4234              	.LVL444:
 4235              	.L318:
2320:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4236              		.loc 1 2320 0
 4237 000e 0223     		movs	r3, #2
 4238 0010 84F83D30 		strb	r3, [r4, #61]
2323:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4239              		.loc 1 2323 0
 4240 0014 211D     		adds	r1, r4, #4
 4241 0016 2068     		ldr	r0, [r4]
 4242 0018 FFF7FEFF 		bl	TIM_Base_SetConfig
 4243              	.LVL445:
2326:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4244              		.loc 1 2326 0
 4245 001c 2268     		ldr	r2, [r4]
 4246 001e 1368     		ldr	r3, [r2]
 4247 0020 23F00803 		bic	r3, r3, #8
 4248 0024 1360     		str	r3, [r2]
2329:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4249              		.loc 1 2329 0
 4250 0026 2268     		ldr	r2, [r4]
 4251 0028 1368     		ldr	r3, [r2]
 4252 002a 2B43     		orrs	r3, r3, r5
 4253 002c 1360     		str	r3, [r2]
2332:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4254              		.loc 1 2332 0
 4255 002e 0123     		movs	r3, #1
 4256 0030 84F83D30 		strb	r3, [r4, #61]
2334:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4257              		.loc 1 2334 0
 4258 0034 0020     		movs	r0, #0
 4259 0036 38BD     		pop	{r3, r4, r5, pc}
 4260              	.LVL446:
 4261              	.L324:
2301:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 198


 4262              		.loc 1 2301 0
 4263 0038 80F83C30 		strb	r3, [r0, #60]
2315:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 4264              		.loc 1 2315 0
 4265 003c FFF7FEFF 		bl	HAL_TIM_OnePulse_MspInit
 4266              	.LVL447:
 4267 0040 E5E7     		b	.L318
 4268              	.LVL448:
 4269              	.L319:
 4270              	.LCFI50:
 4271              		.cfi_def_cfa_offset 0
 4272              		.cfi_restore 3
 4273              		.cfi_restore 4
 4274              		.cfi_restore 5
 4275              		.cfi_restore 14
2288:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4276              		.loc 1 2288 0
 4277 0042 0120     		movs	r0, #1
 4278              	.LVL449:
 4279 0044 7047     		bx	lr
 4280              		.cfi_endproc
 4281              	.LFE159:
 4283              		.section	.text.HAL_TIM_Encoder_Init,"ax",%progbits
 4284              		.align	1
 4285              		.global	HAL_TIM_Encoder_Init
 4286              		.syntax unified
 4287              		.thumb
 4288              		.thumb_func
 4289              		.fpu fpv4-sp-d16
 4291              	HAL_TIM_Encoder_Init:
 4292              	.LFB167:
2597:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 4293              		.loc 1 2597 0
 4294              		.cfi_startproc
 4295              		@ args = 0, pretend = 0, frame = 0
 4296              		@ frame_needed = 0, uses_anonymous_args = 0
 4297              	.LVL450:
2603:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4298              		.loc 1 2603 0
 4299 0000 0028     		cmp	r0, #0
 4300 0002 49D0     		beq	.L328
2597:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 4301              		.loc 1 2597 0
 4302 0004 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4303              	.LCFI51:
 4304              		.cfi_def_cfa_offset 24
 4305              		.cfi_offset 3, -24
 4306              		.cfi_offset 4, -20
 4307              		.cfi_offset 5, -16
 4308              		.cfi_offset 6, -12
 4309              		.cfi_offset 7, -8
 4310              		.cfi_offset 14, -4
 4311 0006 0546     		mov	r5, r0
 4312 0008 0C46     		mov	r4, r1
2623:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4313              		.loc 1 2623 0
 4314 000a 90F83D30 		ldrb	r3, [r0, #61]	@ zero_extendqisi2
ARM GAS  /tmp/ccVHe0ZY.s 			page 199


 4315 000e 002B     		cmp	r3, #0
 4316 0010 3DD0     		beq	.L333
 4317              	.LVL451:
 4318              	.L327:
2645:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4319              		.loc 1 2645 0
 4320 0012 0223     		movs	r3, #2
 4321 0014 85F83D30 		strb	r3, [r5, #61]
2648:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4322              		.loc 1 2648 0
 4323 0018 2946     		mov	r1, r5
 4324 001a 51F8042B 		ldr	r2, [r1], #4
 4325 001e 9368     		ldr	r3, [r2, #8]
 4326 0020 23F48043 		bic	r3, r3, #16384
 4327 0024 23F00703 		bic	r3, r3, #7
 4328 0028 9360     		str	r3, [r2, #8]
2651:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4329              		.loc 1 2651 0
 4330 002a 2868     		ldr	r0, [r5]
 4331 002c FFF7FEFF 		bl	TIM_Base_SetConfig
 4332              	.LVL452:
2654:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4333              		.loc 1 2654 0
 4334 0030 2868     		ldr	r0, [r5]
 4335 0032 8668     		ldr	r6, [r0, #8]
 4336              	.LVL453:
2657:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4337              		.loc 1 2657 0
 4338 0034 8369     		ldr	r3, [r0, #24]
 4339              	.LVL454:
2660:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4340              		.loc 1 2660 0
 4341 0036 026A     		ldr	r2, [r0, #32]
 4342              	.LVL455:
2663:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4343              		.loc 1 2663 0
 4344 0038 2168     		ldr	r1, [r4]
 4345 003a 0E43     		orrs	r6, r6, r1
 4346              	.LVL456:
2666:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 4347              		.loc 1 2666 0
 4348 003c 23F44073 		bic	r3, r3, #768
 4349              	.LVL457:
 4350 0040 23F00303 		bic	r3, r3, #3
 4351              	.LVL458:
2667:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4352              		.loc 1 2667 0
 4353 0044 A168     		ldr	r1, [r4, #8]
 4354 0046 A769     		ldr	r7, [r4, #24]
 4355 0048 41EA0721 		orr	r1, r1, r7, lsl #8
 4356 004c 0B43     		orrs	r3, r3, r1
 4357              	.LVL459:
2671:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 4358              		.loc 1 2671 0
 4359 004e 23F47C43 		bic	r3, r3, #64512
 4360              	.LVL460:
 4361 0052 23F0FC03 		bic	r3, r3, #252
ARM GAS  /tmp/ccVHe0ZY.s 			page 200


 4362              	.LVL461:
2672:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 4363              		.loc 1 2672 0
 4364 0056 E168     		ldr	r1, [r4, #12]
 4365 0058 E769     		ldr	r7, [r4, #28]
 4366 005a 41EA0721 		orr	r1, r1, r7, lsl #8
 4367 005e 0B43     		orrs	r3, r3, r1
 4368              	.LVL462:
2673:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4369              		.loc 1 2673 0
 4370 0060 2769     		ldr	r7, [r4, #16]
 4371 0062 216A     		ldr	r1, [r4, #32]
 4372 0064 0903     		lsls	r1, r1, #12
 4373 0066 41EA0711 		orr	r1, r1, r7, lsl #4
 4374 006a 0B43     		orrs	r3, r3, r1
 4375              	.LVL463:
2677:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 4376              		.loc 1 2677 0
 4377 006c 22F0AA02 		bic	r2, r2, #170
 4378              	.LVL464:
2678:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4379              		.loc 1 2678 0
 4380 0070 6168     		ldr	r1, [r4, #4]
 4381 0072 6469     		ldr	r4, [r4, #20]
 4382              	.LVL465:
 4383 0074 41EA0411 		orr	r1, r1, r4, lsl #4
 4384 0078 0A43     		orrs	r2, r2, r1
 4385              	.LVL466:
2681:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4386              		.loc 1 2681 0
 4387 007a 8660     		str	r6, [r0, #8]
2684:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4388              		.loc 1 2684 0
 4389 007c 2968     		ldr	r1, [r5]
 4390 007e 8B61     		str	r3, [r1, #24]
2687:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4391              		.loc 1 2687 0
 4392 0080 2B68     		ldr	r3, [r5]
 4393              	.LVL467:
 4394 0082 1A62     		str	r2, [r3, #32]
 4395              	.LVL468:
2690:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4396              		.loc 1 2690 0
 4397 0084 0123     		movs	r3, #1
 4398 0086 85F83D30 		strb	r3, [r5, #61]
2692:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4399              		.loc 1 2692 0
 4400 008a 0020     		movs	r0, #0
 4401 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4402              	.LVL469:
 4403              	.L333:
2626:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4404              		.loc 1 2626 0
 4405 008e 80F83C30 		strb	r3, [r0, #60]
2640:HALLIB/Src/stm32f4xx_hal_tim.c **** #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 4406              		.loc 1 2640 0
 4407 0092 FFF7FEFF 		bl	HAL_TIM_Encoder_MspInit
ARM GAS  /tmp/ccVHe0ZY.s 			page 201


 4408              	.LVL470:
 4409 0096 BCE7     		b	.L327
 4410              	.LVL471:
 4411              	.L328:
 4412              	.LCFI52:
 4413              		.cfi_def_cfa_offset 0
 4414              		.cfi_restore 3
 4415              		.cfi_restore 4
 4416              		.cfi_restore 5
 4417              		.cfi_restore 6
 4418              		.cfi_restore 7
 4419              		.cfi_restore 14
2605:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4420              		.loc 1 2605 0
 4421 0098 0120     		movs	r0, #1
 4422              	.LVL472:
 4423 009a 7047     		bx	lr
 4424              		.cfi_endproc
 4425              	.LFE167:
 4427              		.section	.text.TIM_OC2_SetConfig,"ax",%progbits
 4428              		.align	1
 4429              		.global	TIM_OC2_SetConfig
 4430              		.syntax unified
 4431              		.thumb
 4432              		.thumb_func
 4433              		.fpu fpv4-sp-d16
 4435              	TIM_OC2_SetConfig:
 4436              	.LFB220:
5935:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmrx;
 4437              		.loc 1 5935 0
 4438              		.cfi_startproc
 4439              		@ args = 0, pretend = 0, frame = 0
 4440              		@ frame_needed = 0, uses_anonymous_args = 0
 4441              		@ link register save eliminated.
 4442              	.LVL473:
 4443 0000 30B4     		push	{r4, r5}
 4444              	.LCFI53:
 4445              		.cfi_def_cfa_offset 8
 4446              		.cfi_offset 4, -8
 4447              		.cfi_offset 5, -4
5941:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4448              		.loc 1 5941 0
 4449 0002 036A     		ldr	r3, [r0, #32]
 4450 0004 23F01003 		bic	r3, r3, #16
 4451 0008 0362     		str	r3, [r0, #32]
5944:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Get the TIMx CR2 register value */
 4452              		.loc 1 5944 0
 4453 000a 036A     		ldr	r3, [r0, #32]
 4454              	.LVL474:
5946:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4455              		.loc 1 5946 0
 4456 000c 4468     		ldr	r4, [r0, #4]
 4457              	.LVL475:
5949:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4458              		.loc 1 5949 0
 4459 000e 8269     		ldr	r2, [r0, #24]
 4460              	.LVL476:
ARM GAS  /tmp/ccVHe0ZY.s 			page 202


5953:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4461              		.loc 1 5953 0
 4462 0010 22F4E642 		bic	r2, r2, #29440
 4463              	.LVL477:
5956:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4464              		.loc 1 5956 0
 4465 0014 0D68     		ldr	r5, [r1]
 4466 0016 42EA0522 		orr	r2, r2, r5, lsl #8
 4467              	.LVL478:
5959:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Output Compare Polarity */
 4468              		.loc 1 5959 0
 4469 001a 23F02003 		bic	r3, r3, #32
 4470              	.LVL479:
5961:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4471              		.loc 1 5961 0
 4472 001e 8D68     		ldr	r5, [r1, #8]
 4473 0020 43EA0513 		orr	r3, r3, r5, lsl #4
 4474              	.LVL480:
5963:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4475              		.loc 1 5963 0
 4476 0024 124D     		ldr	r5, .L340
 4477 0026 A842     		cmp	r0, r5
 4478 0028 11D0     		beq	.L335
5963:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4479              		.loc 1 5963 0 is_stmt 0 discriminator 1
 4480 002a 05F58065 		add	r5, r5, #1024
 4481 002e A842     		cmp	r0, r5
 4482 0030 0DD0     		beq	.L335
 4483              	.L336:
5976:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4484              		.loc 1 5976 0 is_stmt 1
 4485 0032 0F4D     		ldr	r5, .L340
 4486 0034 A842     		cmp	r0, r5
 4487 0036 12D0     		beq	.L337
5976:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4488              		.loc 1 5976 0 is_stmt 0 discriminator 1
 4489 0038 05F58065 		add	r5, r5, #1024
 4490 003c A842     		cmp	r0, r5
 4491 003e 0ED0     		beq	.L337
 4492              	.L338:
5992:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4493              		.loc 1 5992 0 is_stmt 1
 4494 0040 4460     		str	r4, [r0, #4]
5995:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4495              		.loc 1 5995 0
 4496 0042 8261     		str	r2, [r0, #24]
5998:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4497              		.loc 1 5998 0
 4498 0044 4A68     		ldr	r2, [r1, #4]
 4499              	.LVL481:
 4500 0046 8263     		str	r2, [r0, #56]
 4501              	.LVL482:
6001:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4502              		.loc 1 6001 0
 4503 0048 0362     		str	r3, [r0, #32]
6002:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4504              		.loc 1 6002 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 203


 4505 004a 30BC     		pop	{r4, r5}
 4506              	.LCFI54:
 4507              		.cfi_remember_state
 4508              		.cfi_restore 5
 4509              		.cfi_restore 4
 4510              		.cfi_def_cfa_offset 0
 4511              	.LVL483:
 4512 004c 7047     		bx	lr
 4513              	.LVL484:
 4514              	.L335:
 4515              	.LCFI55:
 4516              		.cfi_restore_state
5968:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Polarity */
 4517              		.loc 1 5968 0
 4518 004e 23F08003 		bic	r3, r3, #128
 4519              	.LVL485:
5970:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Reset the Output N State */
 4520              		.loc 1 5970 0
 4521 0052 CD68     		ldr	r5, [r1, #12]
 4522 0054 43EA0513 		orr	r3, r3, r5, lsl #4
 4523              	.LVL486:
5972:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4524              		.loc 1 5972 0
 4525 0058 23F04003 		bic	r3, r3, #64
 4526              	.LVL487:
 4527 005c E9E7     		b	.L336
 4528              	.L337:
 4529              	.LVL488:
5984:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output Idle state */
 4530              		.loc 1 5984 0
 4531 005e 24F44064 		bic	r4, r4, #3072
 4532              	.LVL489:
5986:HALLIB/Src/stm32f4xx_hal_tim.c ****     /* Set the Output N Idle state */
 4533              		.loc 1 5986 0
 4534 0062 4D69     		ldr	r5, [r1, #20]
 4535 0064 44EA8504 		orr	r4, r4, r5, lsl #2
 4536              	.LVL490:
5988:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4537              		.loc 1 5988 0
 4538 0068 8D69     		ldr	r5, [r1, #24]
 4539 006a 44EA8504 		orr	r4, r4, r5, lsl #2
 4540              	.LVL491:
 4541 006e E7E7     		b	.L338
 4542              	.L341:
 4543              		.align	2
 4544              	.L340:
 4545 0070 00000140 		.word	1073807360
 4546              		.cfi_endproc
 4547              	.LFE220:
 4549              		.section	.text.HAL_TIM_OC_ConfigChannel,"ax",%progbits
 4550              		.align	1
 4551              		.global	HAL_TIM_OC_ConfigChannel
 4552              		.syntax unified
 4553              		.thumb
 4554              		.thumb_func
 4555              		.fpu fpv4-sp-d16
 4557              	HAL_TIM_OC_ConfigChannel:
ARM GAS  /tmp/ccVHe0ZY.s 			page 204


 4558              	.LFB178:
3385:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 4559              		.loc 1 3385 0
 4560              		.cfi_startproc
 4561              		@ args = 0, pretend = 0, frame = 0
 4562              		@ frame_needed = 0, uses_anonymous_args = 0
 4563              	.LVL492:
3392:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4564              		.loc 1 3392 0
 4565 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 4566 0004 012B     		cmp	r3, #1
 4567 0006 28D0     		beq	.L350
3385:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 4568              		.loc 1 3385 0 discriminator 2
 4569 0008 10B5     		push	{r4, lr}
 4570              	.LCFI56:
 4571              		.cfi_def_cfa_offset 8
 4572              		.cfi_offset 4, -8
 4573              		.cfi_offset 14, -4
 4574 000a 0446     		mov	r4, r0
3392:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4575              		.loc 1 3392 0 discriminator 2
 4576 000c 0123     		movs	r3, #1
 4577 000e 80F83C30 		strb	r3, [r0, #60]
3394:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4578              		.loc 1 3394 0 discriminator 2
 4579 0012 0223     		movs	r3, #2
 4580 0014 80F83D30 		strb	r3, [r0, #61]
3396:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4581              		.loc 1 3396 0 discriminator 2
 4582 0018 0C2A     		cmp	r2, #12
 4583 001a 0BD8     		bhi	.L344
 4584 001c DFE802F0 		tbb	[pc, r2]
 4585              	.L346:
 4586 0020 07       		.byte	(.L345-.L346)/2
 4587 0021 0A       		.byte	(.L344-.L346)/2
 4588 0022 0A       		.byte	(.L344-.L346)/2
 4589 0023 0A       		.byte	(.L344-.L346)/2
 4590 0024 11       		.byte	(.L347-.L346)/2
 4591 0025 0A       		.byte	(.L344-.L346)/2
 4592 0026 0A       		.byte	(.L344-.L346)/2
 4593 0027 0A       		.byte	(.L344-.L346)/2
 4594 0028 15       		.byte	(.L348-.L346)/2
 4595 0029 0A       		.byte	(.L344-.L346)/2
 4596 002a 0A       		.byte	(.L344-.L346)/2
 4597 002b 0A       		.byte	(.L344-.L346)/2
 4598 002c 19       		.byte	(.L349-.L346)/2
 4599 002d 00       		.p2align 1
 4600              	.L345:
3404:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 4601              		.loc 1 3404 0
 4602 002e 0068     		ldr	r0, [r0]
 4603              	.LVL493:
 4604 0030 FFF7FEFF 		bl	TIM_OC1_SetConfig
 4605              	.LVL494:
 4606              	.L344:
3442:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 205


 4607              		.loc 1 3442 0
 4608 0034 0123     		movs	r3, #1
 4609 0036 84F83D30 		strb	r3, [r4, #61]
3444:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4610              		.loc 1 3444 0
 4611 003a 0020     		movs	r0, #0
 4612 003c 84F83C00 		strb	r0, [r4, #60]
3446:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4613              		.loc 1 3446 0
 4614 0040 10BD     		pop	{r4, pc}
 4615              	.LVL495:
 4616              	.L347:
3414:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 4617              		.loc 1 3414 0
 4618 0042 0068     		ldr	r0, [r0]
 4619              	.LVL496:
 4620 0044 FFF7FEFF 		bl	TIM_OC2_SetConfig
 4621              	.LVL497:
3415:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 4622              		.loc 1 3415 0
 4623 0048 F4E7     		b	.L344
 4624              	.LVL498:
 4625              	.L348:
3424:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 4626              		.loc 1 3424 0
 4627 004a 0068     		ldr	r0, [r0]
 4628              	.LVL499:
 4629 004c FFF7FEFF 		bl	TIM_OC3_SetConfig
 4630              	.LVL500:
3425:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 4631              		.loc 1 3425 0
 4632 0050 F0E7     		b	.L344
 4633              	.LVL501:
 4634              	.L349:
3434:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 4635              		.loc 1 3434 0
 4636 0052 0068     		ldr	r0, [r0]
 4637              	.LVL502:
 4638 0054 FFF7FEFF 		bl	TIM_OC4_SetConfig
 4639              	.LVL503:
3435:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 4640              		.loc 1 3435 0
 4641 0058 ECE7     		b	.L344
 4642              	.LVL504:
 4643              	.L350:
 4644              	.LCFI57:
 4645              		.cfi_def_cfa_offset 0
 4646              		.cfi_restore 4
 4647              		.cfi_restore 14
3392:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4648              		.loc 1 3392 0
 4649 005a 0220     		movs	r0, #2
 4650              	.LVL505:
 4651 005c 7047     		bx	lr
 4652              		.cfi_endproc
 4653              	.LFE178:
 4655              		.section	.text.HAL_TIM_PWM_ConfigChannel,"ax",%progbits
ARM GAS  /tmp/ccVHe0ZY.s 			page 206


 4656              		.align	1
 4657              		.global	HAL_TIM_PWM_ConfigChannel
 4658              		.syntax unified
 4659              		.thumb
 4660              		.thumb_func
 4661              		.fpu fpv4-sp-d16
 4663              	HAL_TIM_PWM_ConfigChannel:
 4664              	.LFB180:
3562:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 4665              		.loc 1 3562 0
 4666              		.cfi_startproc
 4667              		@ args = 0, pretend = 0, frame = 0
 4668              		@ frame_needed = 0, uses_anonymous_args = 0
 4669              	.LVL506:
 4670 0000 38B5     		push	{r3, r4, r5, lr}
 4671              	.LCFI58:
 4672              		.cfi_def_cfa_offset 16
 4673              		.cfi_offset 3, -16
 4674              		.cfi_offset 4, -12
 4675              		.cfi_offset 5, -8
 4676              		.cfi_offset 14, -4
3570:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4677              		.loc 1 3570 0
 4678 0002 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 4679 0006 012B     		cmp	r3, #1
 4680 0008 66D0     		beq	.L363
 4681 000a 0D46     		mov	r5, r1
 4682 000c 0446     		mov	r4, r0
3570:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4683              		.loc 1 3570 0 is_stmt 0 discriminator 2
 4684 000e 0123     		movs	r3, #1
 4685 0010 80F83C30 		strb	r3, [r0, #60]
3572:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4686              		.loc 1 3572 0 is_stmt 1 discriminator 2
 4687 0014 0223     		movs	r3, #2
 4688 0016 80F83D30 		strb	r3, [r0, #61]
3574:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4689              		.loc 1 3574 0 discriminator 2
 4690 001a 0C2A     		cmp	r2, #12
 4691 001c 1AD8     		bhi	.L357
 4692 001e DFE802F0 		tbb	[pc, r2]
 4693              	.L359:
 4694 0022 07       		.byte	(.L358-.L359)/2
 4695 0023 19       		.byte	(.L357-.L359)/2
 4696 0024 19       		.byte	(.L357-.L359)/2
 4697 0025 19       		.byte	(.L357-.L359)/2
 4698 0026 20       		.byte	(.L360-.L359)/2
 4699 0027 19       		.byte	(.L357-.L359)/2
 4700 0028 19       		.byte	(.L357-.L359)/2
 4701 0029 19       		.byte	(.L357-.L359)/2
 4702 002a 34       		.byte	(.L361-.L359)/2
 4703 002b 19       		.byte	(.L357-.L359)/2
 4704 002c 19       		.byte	(.L357-.L359)/2
 4705 002d 19       		.byte	(.L357-.L359)/2
 4706 002e 47       		.byte	(.L362-.L359)/2
 4707 002f 00       		.p2align 1
 4708              	.L358:
ARM GAS  /tmp/ccVHe0ZY.s 			page 207


3582:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4709              		.loc 1 3582 0
 4710 0030 0068     		ldr	r0, [r0]
 4711              	.LVL507:
 4712 0032 FFF7FEFF 		bl	TIM_OC1_SetConfig
 4713              	.LVL508:
3585:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4714              		.loc 1 3585 0
 4715 0036 2268     		ldr	r2, [r4]
 4716 0038 9369     		ldr	r3, [r2, #24]
 4717 003a 43F00803 		orr	r3, r3, #8
 4718 003e 9361     		str	r3, [r2, #24]
3588:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 |= sConfig->OCFastMode;
 4719              		.loc 1 3588 0
 4720 0040 2268     		ldr	r2, [r4]
 4721 0042 9369     		ldr	r3, [r2, #24]
 4722 0044 23F00403 		bic	r3, r3, #4
 4723 0048 9361     		str	r3, [r2, #24]
3589:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 4724              		.loc 1 3589 0
 4725 004a 2268     		ldr	r2, [r4]
 4726 004c 9369     		ldr	r3, [r2, #24]
 4727 004e 2969     		ldr	r1, [r5, #16]
 4728 0050 0B43     		orrs	r3, r3, r1
 4729 0052 9361     		str	r3, [r2, #24]
 4730              	.L357:
3648:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4731              		.loc 1 3648 0
 4732 0054 0123     		movs	r3, #1
 4733 0056 84F83D30 		strb	r3, [r4, #61]
3650:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4734              		.loc 1 3650 0
 4735 005a 0020     		movs	r0, #0
 4736 005c 84F83C00 		strb	r0, [r4, #60]
3652:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4737              		.loc 1 3652 0
 4738 0060 38BD     		pop	{r3, r4, r5, pc}
 4739              	.LVL509:
 4740              	.L360:
3599:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4741              		.loc 1 3599 0
 4742 0062 0068     		ldr	r0, [r0]
 4743              	.LVL510:
 4744 0064 FFF7FEFF 		bl	TIM_OC2_SetConfig
 4745              	.LVL511:
3602:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4746              		.loc 1 3602 0
 4747 0068 2268     		ldr	r2, [r4]
 4748 006a 9369     		ldr	r3, [r2, #24]
 4749 006c 43F40063 		orr	r3, r3, #2048
 4750 0070 9361     		str	r3, [r2, #24]
3605:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 4751              		.loc 1 3605 0
 4752 0072 2268     		ldr	r2, [r4]
 4753 0074 9369     		ldr	r3, [r2, #24]
 4754 0076 23F48063 		bic	r3, r3, #1024
 4755 007a 9361     		str	r3, [r2, #24]
ARM GAS  /tmp/ccVHe0ZY.s 			page 208


3606:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 4756              		.loc 1 3606 0
 4757 007c 2268     		ldr	r2, [r4]
 4758 007e 9369     		ldr	r3, [r2, #24]
 4759 0080 2969     		ldr	r1, [r5, #16]
 4760 0082 43EA0123 		orr	r3, r3, r1, lsl #8
 4761 0086 9361     		str	r3, [r2, #24]
3607:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 4762              		.loc 1 3607 0
 4763 0088 E4E7     		b	.L357
 4764              	.LVL512:
 4765              	.L361:
3616:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4766              		.loc 1 3616 0
 4767 008a 0068     		ldr	r0, [r0]
 4768              	.LVL513:
 4769 008c FFF7FEFF 		bl	TIM_OC3_SetConfig
 4770              	.LVL514:
3619:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4771              		.loc 1 3619 0
 4772 0090 2268     		ldr	r2, [r4]
 4773 0092 D369     		ldr	r3, [r2, #28]
 4774 0094 43F00803 		orr	r3, r3, #8
 4775 0098 D361     		str	r3, [r2, #28]
3622:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR2 |= sConfig->OCFastMode;
 4776              		.loc 1 3622 0
 4777 009a 2268     		ldr	r2, [r4]
 4778 009c D369     		ldr	r3, [r2, #28]
 4779 009e 23F00403 		bic	r3, r3, #4
 4780 00a2 D361     		str	r3, [r2, #28]
3623:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 4781              		.loc 1 3623 0
 4782 00a4 2268     		ldr	r2, [r4]
 4783 00a6 D369     		ldr	r3, [r2, #28]
 4784 00a8 2969     		ldr	r1, [r5, #16]
 4785 00aa 0B43     		orrs	r3, r3, r1
 4786 00ac D361     		str	r3, [r2, #28]
3624:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 4787              		.loc 1 3624 0
 4788 00ae D1E7     		b	.L357
 4789              	.LVL515:
 4790              	.L362:
3633:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4791              		.loc 1 3633 0
 4792 00b0 0068     		ldr	r0, [r0]
 4793              	.LVL516:
 4794 00b2 FFF7FEFF 		bl	TIM_OC4_SetConfig
 4795              	.LVL517:
3636:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4796              		.loc 1 3636 0
 4797 00b6 2268     		ldr	r2, [r4]
 4798 00b8 D369     		ldr	r3, [r2, #28]
 4799 00ba 43F40063 		orr	r3, r3, #2048
 4800 00be D361     		str	r3, [r2, #28]
3639:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 4801              		.loc 1 3639 0
 4802 00c0 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccVHe0ZY.s 			page 209


 4803 00c2 D369     		ldr	r3, [r2, #28]
 4804 00c4 23F48063 		bic	r3, r3, #1024
 4805 00c8 D361     		str	r3, [r2, #28]
3640:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 4806              		.loc 1 3640 0
 4807 00ca 2268     		ldr	r2, [r4]
 4808 00cc D369     		ldr	r3, [r2, #28]
 4809 00ce 2969     		ldr	r1, [r5, #16]
 4810 00d0 43EA0123 		orr	r3, r3, r1, lsl #8
 4811 00d4 D361     		str	r3, [r2, #28]
3641:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 4812              		.loc 1 3641 0
 4813 00d6 BDE7     		b	.L357
 4814              	.LVL518:
 4815              	.L363:
3570:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4816              		.loc 1 3570 0
 4817 00d8 0220     		movs	r0, #2
 4818              	.LVL519:
3653:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4819              		.loc 1 3653 0
 4820 00da 38BD     		pop	{r3, r4, r5, pc}
 4821              		.cfi_endproc
 4822              	.LFE180:
 4824              		.section	.text.TIM_TI1_SetConfig,"ax",%progbits
 4825              		.align	1
 4826              		.global	TIM_TI1_SetConfig
 4827              		.syntax unified
 4828              		.thumb
 4829              		.thumb_func
 4830              		.fpu fpv4-sp-d16
 4832              	TIM_TI1_SetConfig:
 4833              	.LFB224:
6277:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpccmr1;
 4834              		.loc 1 6277 0
 4835              		.cfi_startproc
 4836              		@ args = 0, pretend = 0, frame = 0
 4837              		@ frame_needed = 0, uses_anonymous_args = 0
 4838              		@ link register save eliminated.
 4839              	.LVL520:
 4840 0000 70B4     		push	{r4, r5, r6}
 4841              	.LCFI59:
 4842              		.cfi_def_cfa_offset 12
 4843              		.cfi_offset 4, -12
 4844              		.cfi_offset 5, -8
 4845              		.cfi_offset 6, -4
6282:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 4846              		.loc 1 6282 0
 4847 0002 046A     		ldr	r4, [r0, #32]
 4848 0004 24F00104 		bic	r4, r4, #1
 4849 0008 0462     		str	r4, [r0, #32]
6283:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer = TIMx->CCER;
 4850              		.loc 1 6283 0
 4851 000a 8469     		ldr	r4, [r0, #24]
 4852              	.LVL521:
6284:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4853              		.loc 1 6284 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 210


 4854 000c 056A     		ldr	r5, [r0, #32]
 4855              	.LVL522:
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4856              		.loc 1 6287 0
 4857 000e 224E     		ldr	r6, .L380
 4858 0010 B042     		cmp	r0, r6
 4859 0012 2ED0     		beq	.L369
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4860              		.loc 1 6287 0 is_stmt 0 discriminator 2
 4861 0014 B0F1804F 		cmp	r0, #1073741824
 4862 0018 2DD0     		beq	.L370
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4863              		.loc 1 6287 0 discriminator 4
 4864 001a A6F57C46 		sub	r6, r6, #64512
 4865 001e B042     		cmp	r0, r6
 4866 0020 2BD0     		beq	.L371
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4867              		.loc 1 6287 0 discriminator 6
 4868 0022 06F58066 		add	r6, r6, #1024
 4869 0026 B042     		cmp	r0, r6
 4870 0028 29D0     		beq	.L372
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4871              		.loc 1 6287 0 discriminator 8
 4872 002a 06F58066 		add	r6, r6, #1024
 4873 002e B042     		cmp	r0, r6
 4874 0030 27D0     		beq	.L373
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4875              		.loc 1 6287 0 discriminator 10
 4876 0032 06F57846 		add	r6, r6, #63488
 4877 0036 B042     		cmp	r0, r6
 4878 0038 25D0     		beq	.L374
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4879              		.loc 1 6287 0 discriminator 12
 4880 003a 06F57056 		add	r6, r6, #15360
 4881 003e B042     		cmp	r0, r6
 4882 0040 23D0     		beq	.L375
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4883              		.loc 1 6287 0 discriminator 14
 4884 0042 A6F59436 		sub	r6, r6, #75776
 4885 0046 B042     		cmp	r0, r6
 4886 0048 11D0     		beq	.L378
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4887              		.loc 1 6287 0
 4888 004a 0026     		movs	r6, #0
 4889              	.L366:
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4890              		.loc 1 6287 0 discriminator 18
 4891 004c FEB9     		cbnz	r6, .L379
6294:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4892              		.loc 1 6294 0 is_stmt 1
 4893 004e 44F00102 		orr	r2, r4, #1
 4894              	.LVL523:
 4895              	.L368:
6298:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 4896              		.loc 1 6298 0
 4897 0052 22F0F002 		bic	r2, r2, #240
 4898              	.LVL524:
ARM GAS  /tmp/ccVHe0ZY.s 			page 211


6299:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4899              		.loc 1 6299 0
 4900 0056 1B01     		lsls	r3, r3, #4
 4901              	.LVL525:
 4902 0058 DBB2     		uxtb	r3, r3
 4903 005a 1343     		orrs	r3, r3, r2
 4904              	.LVL526:
6302:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 4905              		.loc 1 6302 0
 4906 005c 25F00A02 		bic	r2, r5, #10
 4907              	.LVL527:
6303:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4908              		.loc 1 6303 0
 4909 0060 01F00A01 		and	r1, r1, #10
 4910              	.LVL528:
 4911 0064 1143     		orrs	r1, r1, r2
 4912              	.LVL529:
6306:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER = tmpccer;
 4913              		.loc 1 6306 0
 4914 0066 8361     		str	r3, [r0, #24]
6307:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 4915              		.loc 1 6307 0
 4916 0068 0162     		str	r1, [r0, #32]
6308:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4917              		.loc 1 6308 0
 4918 006a 70BC     		pop	{r4, r5, r6}
 4919              	.LCFI60:
 4920              		.cfi_remember_state
 4921              		.cfi_restore 6
 4922              		.cfi_restore 5
 4923              		.cfi_restore 4
 4924              		.cfi_def_cfa_offset 0
 4925 006c 7047     		bx	lr
 4926              	.LVL530:
 4927              	.L378:
 4928              	.LCFI61:
 4929              		.cfi_restore_state
6287:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 4930              		.loc 1 6287 0
 4931 006e 0126     		movs	r6, #1
 4932 0070 ECE7     		b	.L366
 4933              	.L369:
 4934 0072 0126     		movs	r6, #1
 4935 0074 EAE7     		b	.L366
 4936              	.L370:
 4937 0076 0126     		movs	r6, #1
 4938 0078 E8E7     		b	.L366
 4939              	.L371:
 4940 007a 0126     		movs	r6, #1
 4941 007c E6E7     		b	.L366
 4942              	.L372:
 4943 007e 0126     		movs	r6, #1
 4944 0080 E4E7     		b	.L366
 4945              	.L373:
 4946 0082 0126     		movs	r6, #1
 4947 0084 E2E7     		b	.L366
 4948              	.L374:
ARM GAS  /tmp/ccVHe0ZY.s 			page 212


 4949 0086 0126     		movs	r6, #1
 4950 0088 E0E7     		b	.L366
 4951              	.L375:
 4952 008a 0126     		movs	r6, #1
 4953 008c DEE7     		b	.L366
 4954              	.L379:
6289:HALLIB/Src/stm32f4xx_hal_tim.c ****     tmpccmr1 |= TIM_ICSelection;
 4955              		.loc 1 6289 0
 4956 008e 24F00304 		bic	r4, r4, #3
 4957              	.LVL531:
6290:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 4958              		.loc 1 6290 0
 4959 0092 2243     		orrs	r2, r2, r4
 4960              	.LVL532:
 4961 0094 DDE7     		b	.L368
 4962              	.L381:
 4963 0096 00BF     		.align	2
 4964              	.L380:
 4965 0098 00000140 		.word	1073807360
 4966              		.cfi_endproc
 4967              	.LFE224:
 4969              		.section	.text.HAL_TIM_IC_ConfigChannel,"ax",%progbits
 4970              		.align	1
 4971              		.global	HAL_TIM_IC_ConfigChannel
 4972              		.syntax unified
 4973              		.thumb
 4974              		.thumb_func
 4975              		.fpu fpv4-sp-d16
 4977              	HAL_TIM_IC_ConfigChannel:
 4978              	.LFB179:
3463:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 4979              		.loc 1 3463 0
 4980              		.cfi_startproc
 4981              		@ args = 0, pretend = 0, frame = 0
 4982              		@ frame_needed = 0, uses_anonymous_args = 0
 4983              	.LVL533:
 4984 0000 38B5     		push	{r3, r4, r5, lr}
 4985              	.LCFI62:
 4986              		.cfi_def_cfa_offset 16
 4987              		.cfi_offset 3, -16
 4988              		.cfi_offset 4, -12
 4989              		.cfi_offset 5, -8
 4990              		.cfi_offset 14, -4
3472:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4991              		.loc 1 3472 0
 4992 0002 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 4993 0006 012B     		cmp	r3, #1
 4994 0008 58D0     		beq	.L388
 4995 000a 0D46     		mov	r5, r1
 4996 000c 0446     		mov	r4, r0
3472:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 4997              		.loc 1 3472 0 is_stmt 0 discriminator 2
 4998 000e 0123     		movs	r3, #1
 4999 0010 80F83C30 		strb	r3, [r0, #60]
3474:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5000              		.loc 1 3474 0 is_stmt 1 discriminator 2
 5001 0014 0223     		movs	r3, #2
ARM GAS  /tmp/ccVHe0ZY.s 			page 213


 5002 0016 80F83D30 		strb	r3, [r0, #61]
3476:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5003              		.loc 1 3476 0 discriminator 2
 5004 001a DAB1     		cbz	r2, .L390
3490:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5005              		.loc 1 3490 0
 5006 001c 042A     		cmp	r2, #4
 5007 001e 2AD0     		beq	.L391
3506:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5008              		.loc 1 3506 0
 5009 0020 082A     		cmp	r2, #8
 5010 0022 3AD0     		beq	.L392
3527:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICPolarity,
 5011              		.loc 1 3527 0
 5012 0024 CB68     		ldr	r3, [r1, #12]
 5013 0026 4A68     		ldr	r2, [r1, #4]
 5014              	.LVL534:
 5015 0028 0968     		ldr	r1, [r1]
 5016              	.LVL535:
 5017 002a 0068     		ldr	r0, [r0]
 5018              	.LVL536:
 5019 002c FFF7FEFF 		bl	TIM_TI4_SetConfig
 5020              	.LVL537:
3533:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5021              		.loc 1 3533 0
 5022 0030 2268     		ldr	r2, [r4]
 5023 0032 D369     		ldr	r3, [r2, #28]
 5024 0034 23F44063 		bic	r3, r3, #3072
 5025 0038 D361     		str	r3, [r2, #28]
3536:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 5026              		.loc 1 3536 0
 5027 003a 2268     		ldr	r2, [r4]
 5028 003c D369     		ldr	r3, [r2, #28]
 5029 003e A968     		ldr	r1, [r5, #8]
 5030 0040 43EA0123 		orr	r3, r3, r1, lsl #8
 5031 0044 D361     		str	r3, [r2, #28]
 5032              	.L385:
3539:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5033              		.loc 1 3539 0
 5034 0046 0123     		movs	r3, #1
 5035 0048 84F83D30 		strb	r3, [r4, #61]
3541:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5036              		.loc 1 3541 0
 5037 004c 0020     		movs	r0, #0
 5038 004e 84F83C00 		strb	r0, [r4, #60]
3543:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5039              		.loc 1 3543 0
 5040 0052 38BD     		pop	{r3, r4, r5, pc}
 5041              	.LVL538:
 5042              	.L390:
3479:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICPolarity,
 5043              		.loc 1 3479 0
 5044 0054 CB68     		ldr	r3, [r1, #12]
 5045 0056 4A68     		ldr	r2, [r1, #4]
 5046              	.LVL539:
 5047 0058 0968     		ldr	r1, [r1]
 5048              	.LVL540:
ARM GAS  /tmp/ccVHe0ZY.s 			page 214


 5049 005a 0068     		ldr	r0, [r0]
 5050              	.LVL541:
 5051 005c FFF7FEFF 		bl	TIM_TI1_SetConfig
 5052              	.LVL542:
3485:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5053              		.loc 1 3485 0
 5054 0060 2268     		ldr	r2, [r4]
 5055 0062 9369     		ldr	r3, [r2, #24]
 5056 0064 23F00C03 		bic	r3, r3, #12
 5057 0068 9361     		str	r3, [r2, #24]
3488:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 5058              		.loc 1 3488 0
 5059 006a 2268     		ldr	r2, [r4]
 5060 006c 9369     		ldr	r3, [r2, #24]
 5061 006e A968     		ldr	r1, [r5, #8]
 5062 0070 0B43     		orrs	r3, r3, r1
 5063 0072 9361     		str	r3, [r2, #24]
 5064 0074 E7E7     		b	.L385
 5065              	.LVL543:
 5066              	.L391:
3495:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICPolarity,
 5067              		.loc 1 3495 0
 5068 0076 CB68     		ldr	r3, [r1, #12]
 5069 0078 4A68     		ldr	r2, [r1, #4]
 5070              	.LVL544:
 5071 007a 0968     		ldr	r1, [r1]
 5072              	.LVL545:
 5073 007c 0068     		ldr	r0, [r0]
 5074              	.LVL546:
 5075 007e FFF7FEFF 		bl	TIM_TI2_SetConfig
 5076              	.LVL547:
3501:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5077              		.loc 1 3501 0
 5078 0082 2268     		ldr	r2, [r4]
 5079 0084 9369     		ldr	r3, [r2, #24]
 5080 0086 23F44063 		bic	r3, r3, #3072
 5081 008a 9361     		str	r3, [r2, #24]
3504:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 5082              		.loc 1 3504 0
 5083 008c 2268     		ldr	r2, [r4]
 5084 008e 9369     		ldr	r3, [r2, #24]
 5085 0090 A968     		ldr	r1, [r5, #8]
 5086 0092 43EA0123 		orr	r3, r3, r1, lsl #8
 5087 0096 9361     		str	r3, [r2, #24]
 5088 0098 D5E7     		b	.L385
 5089              	.LVL548:
 5090              	.L392:
3511:HALLIB/Src/stm32f4xx_hal_tim.c ****                       sConfig->ICPolarity,
 5091              		.loc 1 3511 0
 5092 009a CB68     		ldr	r3, [r1, #12]
 5093 009c 4A68     		ldr	r2, [r1, #4]
 5094              	.LVL549:
 5095 009e 0968     		ldr	r1, [r1]
 5096              	.LVL550:
 5097 00a0 0068     		ldr	r0, [r0]
 5098              	.LVL551:
 5099 00a2 FFF7FEFF 		bl	TIM_TI3_SetConfig
ARM GAS  /tmp/ccVHe0ZY.s 			page 215


 5100              	.LVL552:
3517:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5101              		.loc 1 3517 0
 5102 00a6 2268     		ldr	r2, [r4]
 5103 00a8 D369     		ldr	r3, [r2, #28]
 5104 00aa 23F00C03 		bic	r3, r3, #12
 5105 00ae D361     		str	r3, [r2, #28]
3520:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 5106              		.loc 1 3520 0
 5107 00b0 2268     		ldr	r2, [r4]
 5108 00b2 D369     		ldr	r3, [r2, #28]
 5109 00b4 A968     		ldr	r1, [r5, #8]
 5110 00b6 0B43     		orrs	r3, r3, r1
 5111 00b8 D361     		str	r3, [r2, #28]
 5112 00ba C4E7     		b	.L385
 5113              	.LVL553:
 5114              	.L388:
3472:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5115              		.loc 1 3472 0
 5116 00bc 0220     		movs	r0, #2
 5117              	.LVL554:
3544:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5118              		.loc 1 3544 0
 5119 00be 38BD     		pop	{r3, r4, r5, pc}
 5120              		.cfi_endproc
 5121              	.LFE179:
 5123              		.section	.text.HAL_TIM_OnePulse_ConfigChannel,"ax",%progbits
 5124              		.align	1
 5125              		.global	HAL_TIM_OnePulse_ConfigChannel
 5126              		.syntax unified
 5127              		.thumb
 5128              		.thumb_func
 5129              		.fpu fpv4-sp-d16
 5131              	HAL_TIM_OnePulse_ConfigChannel:
 5132              	.LFB181:
3676:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_OC_InitTypeDef temp1;
 5133              		.loc 1 3676 0
 5134              		.cfi_startproc
 5135              		@ args = 0, pretend = 0, frame = 32
 5136              		@ frame_needed = 0, uses_anonymous_args = 0
 5137              	.LVL555:
3683:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5138              		.loc 1 3683 0
 5139 0000 9A42     		cmp	r2, r3
 5140 0002 72D0     		beq	.L401
3676:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_OC_InitTypeDef temp1;
 5141              		.loc 1 3676 0
 5142 0004 70B5     		push	{r4, r5, r6, lr}
 5143              	.LCFI63:
 5144              		.cfi_def_cfa_offset 16
 5145              		.cfi_offset 4, -16
 5146              		.cfi_offset 5, -12
 5147              		.cfi_offset 6, -8
 5148              		.cfi_offset 14, -4
 5149 0006 88B0     		sub	sp, sp, #32
 5150              	.LCFI64:
 5151              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/ccVHe0ZY.s 			page 216


3686:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5152              		.loc 1 3686 0
 5153 0008 90F83C40 		ldrb	r4, [r0, #60]	@ zero_extendqisi2
 5154 000c 012C     		cmp	r4, #1
 5155 000e 6ED0     		beq	.L402
 5156 0010 1E46     		mov	r6, r3
 5157 0012 0D46     		mov	r5, r1
 5158 0014 0446     		mov	r4, r0
3686:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5159              		.loc 1 3686 0 is_stmt 0 discriminator 2
 5160 0016 0123     		movs	r3, #1
 5161              	.LVL556:
 5162 0018 80F83C30 		strb	r3, [r0, #60]
3688:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5163              		.loc 1 3688 0 is_stmt 1 discriminator 2
 5164 001c 0223     		movs	r3, #2
 5165 001e 80F83D30 		strb	r3, [r0, #61]
3691:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.Pulse = sConfig->Pulse;
 5166              		.loc 1 3691 0 discriminator 2
 5167 0022 0B68     		ldr	r3, [r1]
 5168 0024 0193     		str	r3, [sp, #4]
3692:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCPolarity = sConfig->OCPolarity;
 5169              		.loc 1 3692 0 discriminator 2
 5170 0026 4B68     		ldr	r3, [r1, #4]
 5171 0028 0293     		str	r3, [sp, #8]
3693:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCNPolarity = sConfig->OCNPolarity;
 5172              		.loc 1 3693 0 discriminator 2
 5173 002a 8B68     		ldr	r3, [r1, #8]
 5174 002c 0393     		str	r3, [sp, #12]
3694:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCIdleState = sConfig->OCIdleState;
 5175              		.loc 1 3694 0 discriminator 2
 5176 002e CB68     		ldr	r3, [r1, #12]
 5177 0030 0493     		str	r3, [sp, #16]
3695:HALLIB/Src/stm32f4xx_hal_tim.c ****     temp1.OCNIdleState = sConfig->OCNIdleState;
 5178              		.loc 1 3695 0 discriminator 2
 5179 0032 0B69     		ldr	r3, [r1, #16]
 5180 0034 0693     		str	r3, [sp, #24]
3696:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5181              		.loc 1 3696 0 discriminator 2
 5182 0036 4B69     		ldr	r3, [r1, #20]
 5183 0038 0793     		str	r3, [sp, #28]
3698:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 5184              		.loc 1 3698 0 discriminator 2
 5185 003a 62B1     		cbz	r2, .L396
 5186 003c 042A     		cmp	r2, #4
 5187 003e 0FD0     		beq	.L397
 5188              	.LVL557:
 5189              	.L395:
3718:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 5190              		.loc 1 3718 0
 5191 0040 9EB1     		cbz	r6, .L399
 5192 0042 042E     		cmp	r6, #4
 5193 0044 31D0     		beq	.L400
 5194              	.L398:
3763:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5195              		.loc 1 3763 0
 5196 0046 0123     		movs	r3, #1
ARM GAS  /tmp/ccVHe0ZY.s 			page 217


 5197 0048 84F83D30 		strb	r3, [r4, #61]
3765:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5198              		.loc 1 3765 0
 5199 004c 0020     		movs	r0, #0
 5200 004e 84F83C00 		strb	r0, [r4, #60]
 5201              	.LVL558:
 5202              	.L394:
3773:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5203              		.loc 1 3773 0
 5204 0052 08B0     		add	sp, sp, #32
 5205              	.LCFI65:
 5206              		.cfi_remember_state
 5207              		.cfi_def_cfa_offset 16
 5208              		@ sp needed
 5209 0054 70BD     		pop	{r4, r5, r6, pc}
 5210              	.LVL559:
 5211              	.L396:
 5212              	.LCFI66:
 5213              		.cfi_restore_state
3704:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
 5214              		.loc 1 3704 0
 5215 0056 01A9     		add	r1, sp, #4
 5216              	.LVL560:
 5217 0058 0068     		ldr	r0, [r0]
 5218              	.LVL561:
 5219 005a FFF7FEFF 		bl	TIM_OC1_SetConfig
 5220              	.LVL562:
3705:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5221              		.loc 1 3705 0
 5222 005e EFE7     		b	.L395
 5223              	.LVL563:
 5224              	.L397:
3711:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
 5225              		.loc 1 3711 0
 5226 0060 01A9     		add	r1, sp, #4
 5227              	.LVL564:
 5228 0062 0068     		ldr	r0, [r0]
 5229              	.LVL565:
 5230 0064 FFF7FEFF 		bl	TIM_OC2_SetConfig
 5231              	.LVL566:
3712:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5232              		.loc 1 3712 0
 5233 0068 EAE7     		b	.L395
 5234              	.L399:
3724:HALLIB/Src/stm32f4xx_hal_tim.c ****                           sConfig->ICSelection, sConfig->ICFilter);
 5235              		.loc 1 3724 0
 5236 006a 2B6A     		ldr	r3, [r5, #32]
 5237 006c EA69     		ldr	r2, [r5, #28]
 5238 006e A969     		ldr	r1, [r5, #24]
 5239 0070 2068     		ldr	r0, [r4]
 5240 0072 FFF7FEFF 		bl	TIM_TI1_SetConfig
 5241              	.LVL567:
3728:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5242              		.loc 1 3728 0
 5243 0076 2268     		ldr	r2, [r4]
 5244 0078 9369     		ldr	r3, [r2, #24]
 5245 007a 23F00C03 		bic	r3, r3, #12
ARM GAS  /tmp/ccVHe0ZY.s 			page 218


 5246 007e 9361     		str	r3, [r2, #24]
3731:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_TS_TI1FP1;
 5247              		.loc 1 3731 0
 5248 0080 2268     		ldr	r2, [r4]
 5249 0082 9368     		ldr	r3, [r2, #8]
 5250 0084 23F07003 		bic	r3, r3, #112
 5251 0088 9360     		str	r3, [r2, #8]
3732:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5252              		.loc 1 3732 0
 5253 008a 2268     		ldr	r2, [r4]
 5254 008c 9368     		ldr	r3, [r2, #8]
 5255 008e 43F05003 		orr	r3, r3, #80
 5256 0092 9360     		str	r3, [r2, #8]
3735:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 5257              		.loc 1 3735 0
 5258 0094 2268     		ldr	r2, [r4]
 5259 0096 9368     		ldr	r3, [r2, #8]
 5260 0098 23F00703 		bic	r3, r3, #7
 5261 009c 9360     		str	r3, [r2, #8]
3736:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
 5262              		.loc 1 3736 0
 5263 009e 2268     		ldr	r2, [r4]
 5264 00a0 9368     		ldr	r3, [r2, #8]
 5265 00a2 43F00603 		orr	r3, r3, #6
 5266 00a6 9360     		str	r3, [r2, #8]
3737:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5267              		.loc 1 3737 0
 5268 00a8 CDE7     		b	.L398
 5269              	.L400:
3743:HALLIB/Src/stm32f4xx_hal_tim.c ****                           sConfig->ICSelection, sConfig->ICFilter);
 5270              		.loc 1 3743 0
 5271 00aa 2B6A     		ldr	r3, [r5, #32]
 5272 00ac EA69     		ldr	r2, [r5, #28]
 5273 00ae A969     		ldr	r1, [r5, #24]
 5274 00b0 2068     		ldr	r0, [r4]
 5275 00b2 FFF7FEFF 		bl	TIM_TI2_SetConfig
 5276              	.LVL568:
3747:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5277              		.loc 1 3747 0
 5278 00b6 2268     		ldr	r2, [r4]
 5279 00b8 9369     		ldr	r3, [r2, #24]
 5280 00ba 23F44063 		bic	r3, r3, #3072
 5281 00be 9361     		str	r3, [r2, #24]
3750:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_TS_TI2FP2;
 5282              		.loc 1 3750 0
 5283 00c0 2268     		ldr	r2, [r4]
 5284 00c2 9368     		ldr	r3, [r2, #8]
 5285 00c4 23F07003 		bic	r3, r3, #112
 5286 00c8 9360     		str	r3, [r2, #8]
3751:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5287              		.loc 1 3751 0
 5288 00ca 2268     		ldr	r2, [r4]
 5289 00cc 9368     		ldr	r3, [r2, #8]
 5290 00ce 43F06003 		orr	r3, r3, #96
 5291 00d2 9360     		str	r3, [r2, #8]
3754:HALLIB/Src/stm32f4xx_hal_tim.c ****         htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 5292              		.loc 1 3754 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 219


 5293 00d4 2268     		ldr	r2, [r4]
 5294 00d6 9368     		ldr	r3, [r2, #8]
 5295 00d8 23F00703 		bic	r3, r3, #7
 5296 00dc 9360     		str	r3, [r2, #8]
3755:HALLIB/Src/stm32f4xx_hal_tim.c ****         break;
 5297              		.loc 1 3755 0
 5298 00de 2268     		ldr	r2, [r4]
 5299 00e0 9368     		ldr	r3, [r2, #8]
 5300 00e2 43F00603 		orr	r3, r3, #6
 5301 00e6 9360     		str	r3, [r2, #8]
3756:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5302              		.loc 1 3756 0
 5303 00e8 ADE7     		b	.L398
 5304              	.LVL569:
 5305              	.L401:
 5306              	.LCFI67:
 5307              		.cfi_def_cfa_offset 0
 5308              		.cfi_restore 4
 5309              		.cfi_restore 5
 5310              		.cfi_restore 6
 5311              		.cfi_restore 14
3771:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 5312              		.loc 1 3771 0
 5313 00ea 0120     		movs	r0, #1
 5314              	.LVL570:
 5315 00ec 7047     		bx	lr
 5316              	.LVL571:
 5317              	.L402:
 5318              	.LCFI68:
 5319              		.cfi_def_cfa_offset 48
 5320              		.cfi_offset 4, -16
 5321              		.cfi_offset 5, -12
 5322              		.cfi_offset 6, -8
 5323              		.cfi_offset 14, -4
3686:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5324              		.loc 1 3686 0
 5325 00ee 0220     		movs	r0, #2
 5326              	.LVL572:
 5327 00f0 AFE7     		b	.L394
 5328              		.cfi_endproc
 5329              	.LFE181:
 5331              		.section	.text.TIM_ETR_SetConfig,"ax",%progbits
 5332              		.align	1
 5333              		.global	TIM_ETR_SetConfig
 5334              		.syntax unified
 5335              		.thumb
 5336              		.thumb_func
 5337              		.fpu fpv4-sp-d16
 5339              	TIM_ETR_SetConfig:
 5340              	.LFB231:
6551:HALLIB/Src/stm32f4xx_hal_tim.c **** }
6552:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6553:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
6554:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6555:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ExtTRGPrescaler The external Trigger Prescaler.
6556:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6557:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ETRPRESCALER_DIV1: ETRP Prescaler OFF.
ARM GAS  /tmp/ccVHe0ZY.s 			page 220


6558:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ETRPRESCALER_DIV2: ETRP frequency divided by 2.
6559:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ETRPRESCALER_DIV4: ETRP frequency divided by 4.
6560:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ETRPRESCALER_DIV8: ETRP frequency divided by 8.
6561:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIM_ExtTRGPolarity The external Trigger Polarity.
6562:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6563:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ETRPOLARITY_INVERTED: active low or falling edge active.
6564:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_ETRPOLARITY_NONINVERTED: active high or rising edge active.
6565:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  ExtTRGFilter External Trigger Filter.
6566:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
6567:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6568:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6569:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
6570:HALLIB/Src/stm32f4xx_hal_tim.c ****                        uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
6571:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 5341              		.loc 1 6571 0
 5342              		.cfi_startproc
 5343              		@ args = 0, pretend = 0, frame = 0
 5344              		@ frame_needed = 0, uses_anonymous_args = 0
 5345              		@ link register save eliminated.
 5346              	.LVL573:
 5347 0000 10B4     		push	{r4}
 5348              	.LCFI69:
 5349              		.cfi_def_cfa_offset 4
 5350              		.cfi_offset 4, -4
6572:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
6573:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6574:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr = TIMx->SMCR;
 5351              		.loc 1 6574 0
 5352 0002 8468     		ldr	r4, [r0, #8]
 5353              	.LVL574:
6575:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6576:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the ETR Bits */
6577:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 5354              		.loc 1 6577 0
 5355 0004 24F47F44 		bic	r4, r4, #65280
 5356              	.LVL575:
6578:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6579:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
6580:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 5357              		.loc 1 6580 0
 5358 0008 42EA0323 		orr	r3, r2, r3, lsl #8
 5359              	.LVL576:
 5360 000c 1943     		orrs	r1, r1, r3
 5361              	.LVL577:
 5362 000e 0C43     		orrs	r4, r4, r1
 5363              	.LVL578:
6581:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6582:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Write to TIMx SMCR */
6583:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->SMCR = tmpsmcr;
 5364              		.loc 1 6583 0
 5365 0010 8460     		str	r4, [r0, #8]
6584:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5366              		.loc 1 6584 0
 5367 0012 5DF8044B 		ldr	r4, [sp], #4
 5368              	.LCFI70:
 5369              		.cfi_restore 4
 5370              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 221


 5371              	.LVL579:
 5372 0016 7047     		bx	lr
 5373              		.cfi_endproc
 5374              	.LFE231:
 5376              		.section	.text.HAL_TIM_ConfigOCrefClear,"ax",%progbits
 5377              		.align	1
 5378              		.global	HAL_TIM_ConfigOCrefClear
 5379              		.syntax unified
 5380              		.thumb
 5381              		.thumb_func
 5382              		.fpu fpv4-sp-d16
 5384              	HAL_TIM_ConfigOCrefClear:
 5385              	.LFB187:
4360:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 5386              		.loc 1 4360 0
 5387              		.cfi_startproc
 5388              		@ args = 0, pretend = 0, frame = 0
 5389              		@ frame_needed = 0, uses_anonymous_args = 0
 5390              	.LVL580:
4366:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5391              		.loc 1 4366 0
 5392 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 5393 0004 012B     		cmp	r3, #1
 5394 0006 6BD0     		beq	.L425
4360:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 5395              		.loc 1 4360 0 discriminator 2
 5396 0008 70B5     		push	{r4, r5, r6, lr}
 5397              	.LCFI71:
 5398              		.cfi_def_cfa_offset 16
 5399              		.cfi_offset 4, -16
 5400              		.cfi_offset 5, -12
 5401              		.cfi_offset 6, -8
 5402              		.cfi_offset 14, -4
 5403 000a 1646     		mov	r6, r2
 5404 000c 0D46     		mov	r5, r1
 5405 000e 0446     		mov	r4, r0
4366:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5406              		.loc 1 4366 0 discriminator 2
 5407 0010 0123     		movs	r3, #1
 5408 0012 80F83C30 		strb	r3, [r0, #60]
4368:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5409              		.loc 1 4368 0 discriminator 2
 5410 0016 0223     		movs	r3, #2
 5411 0018 80F83D30 		strb	r3, [r0, #61]
4370:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5412              		.loc 1 4370 0 discriminator 2
 5413 001c 4B68     		ldr	r3, [r1, #4]
 5414 001e 63B1     		cbz	r3, .L412
 5415 0020 012B     		cmp	r3, #1
 5416 0022 10D0     		beq	.L413
 5417              	.LVL581:
 5418              	.L411:
4405:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5419              		.loc 1 4405 0
 5420 0024 0C2E     		cmp	r6, #12
 5421 0026 24D8     		bhi	.L415
 5422 0028 DFE806F0 		tbb	[pc, r6]
ARM GAS  /tmp/ccVHe0ZY.s 			page 222


 5423              	.L417:
 5424 002c 1C       		.byte	(.L416-.L417)/2
 5425 002d 23       		.byte	(.L415-.L417)/2
 5426 002e 23       		.byte	(.L415-.L417)/2
 5427 002f 23       		.byte	(.L415-.L417)/2
 5428 0030 30       		.byte	(.L418-.L417)/2
 5429 0031 23       		.byte	(.L415-.L417)/2
 5430 0032 23       		.byte	(.L415-.L417)/2
 5431 0033 23       		.byte	(.L415-.L417)/2
 5432 0034 3E       		.byte	(.L419-.L417)/2
 5433 0035 23       		.byte	(.L415-.L417)/2
 5434 0036 23       		.byte	(.L415-.L417)/2
 5435 0037 23       		.byte	(.L415-.L417)/2
 5436 0038 4C       		.byte	(.L420-.L417)/2
 5437              	.LVL582:
 5438 0039 00       		.p2align 1
 5439              	.L412:
4375:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 5440              		.loc 1 4375 0
 5441 003a 0268     		ldr	r2, [r0]
 5442              	.LVL583:
 5443 003c 9368     		ldr	r3, [r2, #8]
 5444 003e 23F47F43 		bic	r3, r3, #65280
 5445 0042 9360     		str	r3, [r2, #8]
4376:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5446              		.loc 1 4376 0
 5447 0044 EEE7     		b	.L411
 5448              	.LVL584:
 5449              	.L413:
4387:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 5450              		.loc 1 4387 0
 5451 0046 C968     		ldr	r1, [r1, #12]
 5452              	.LVL585:
 5453 0048 31B1     		cbz	r1, .L414
4389:HALLIB/Src/stm32f4xx_hal_tim.c ****         __HAL_UNLOCK(htim);
 5454              		.loc 1 4389 0
 5455 004a 0120     		movs	r0, #1
 5456              	.LVL586:
 5457 004c 84F83D00 		strb	r0, [r4, #61]
4390:HALLIB/Src/stm32f4xx_hal_tim.c ****         return HAL_ERROR;
 5458              		.loc 1 4390 0
 5459 0050 0023     		movs	r3, #0
 5460 0052 84F83C30 		strb	r3, [r4, #60]
4391:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5461              		.loc 1 4391 0
 5462 0056 70BD     		pop	{r4, r5, r6, pc}
 5463              	.LVL587:
 5464              	.L414:
4394:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClearInputConfig->ClearInputPrescaler,
 5465              		.loc 1 4394 0
 5466 0058 2B69     		ldr	r3, [r5, #16]
 5467 005a AA68     		ldr	r2, [r5, #8]
 5468              	.LVL588:
 5469 005c 0068     		ldr	r0, [r0]
 5470              	.LVL589:
 5471 005e FFF7FEFF 		bl	TIM_ETR_SetConfig
 5472              	.LVL590:
ARM GAS  /tmp/ccVHe0ZY.s 			page 223


4398:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5473              		.loc 1 4398 0
 5474 0062 DFE7     		b	.L411
 5475              	.L416:
4409:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 5476              		.loc 1 4409 0
 5477 0064 2B68     		ldr	r3, [r5]
 5478 0066 5BB1     		cbz	r3, .L421
4412:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5479              		.loc 1 4412 0
 5480 0068 2268     		ldr	r2, [r4]
 5481 006a 9369     		ldr	r3, [r2, #24]
 5482 006c 43F08003 		orr	r3, r3, #128
 5483 0070 9361     		str	r3, [r2, #24]
 5484              	.L415:
4467:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5485              		.loc 1 4467 0
 5486 0072 0123     		movs	r3, #1
 5487 0074 84F83D30 		strb	r3, [r4, #61]
4469:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5488              		.loc 1 4469 0
 5489 0078 0020     		movs	r0, #0
 5490 007a 84F83C00 		strb	r0, [r4, #60]
4471:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5491              		.loc 1 4471 0
 5492 007e 70BD     		pop	{r4, r5, r6, pc}
 5493              	.LVL591:
 5494              	.L421:
4417:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5495              		.loc 1 4417 0
 5496 0080 2268     		ldr	r2, [r4]
 5497 0082 9369     		ldr	r3, [r2, #24]
 5498 0084 23F08003 		bic	r3, r3, #128
 5499 0088 9361     		str	r3, [r2, #24]
 5500 008a F2E7     		b	.L415
 5501              	.L418:
4423:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 5502              		.loc 1 4423 0
 5503 008c 2B68     		ldr	r3, [r5]
 5504 008e 2BB1     		cbz	r3, .L422
4426:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5505              		.loc 1 4426 0
 5506 0090 2268     		ldr	r2, [r4]
 5507 0092 9369     		ldr	r3, [r2, #24]
 5508 0094 43F40043 		orr	r3, r3, #32768
 5509 0098 9361     		str	r3, [r2, #24]
 5510 009a EAE7     		b	.L415
 5511              	.L422:
4431:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5512              		.loc 1 4431 0
 5513 009c 2268     		ldr	r2, [r4]
 5514 009e 9369     		ldr	r3, [r2, #24]
 5515 00a0 23F40043 		bic	r3, r3, #32768
 5516 00a4 9361     		str	r3, [r2, #24]
 5517 00a6 E4E7     		b	.L415
 5518              	.L419:
4437:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
ARM GAS  /tmp/ccVHe0ZY.s 			page 224


 5519              		.loc 1 4437 0
 5520 00a8 2B68     		ldr	r3, [r5]
 5521 00aa 2BB1     		cbz	r3, .L423
4440:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5522              		.loc 1 4440 0
 5523 00ac 2268     		ldr	r2, [r4]
 5524 00ae D369     		ldr	r3, [r2, #28]
 5525 00b0 43F08003 		orr	r3, r3, #128
 5526 00b4 D361     		str	r3, [r2, #28]
 5527 00b6 DCE7     		b	.L415
 5528              	.L423:
4445:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5529              		.loc 1 4445 0
 5530 00b8 2268     		ldr	r2, [r4]
 5531 00ba D369     		ldr	r3, [r2, #28]
 5532 00bc 23F08003 		bic	r3, r3, #128
 5533 00c0 D361     		str	r3, [r2, #28]
 5534 00c2 D6E7     		b	.L415
 5535              	.L420:
4451:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 5536              		.loc 1 4451 0
 5537 00c4 2B68     		ldr	r3, [r5]
 5538 00c6 2BB1     		cbz	r3, .L424
4454:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5539              		.loc 1 4454 0
 5540 00c8 2268     		ldr	r2, [r4]
 5541 00ca D369     		ldr	r3, [r2, #28]
 5542 00cc 43F40043 		orr	r3, r3, #32768
 5543 00d0 D361     		str	r3, [r2, #28]
 5544 00d2 CEE7     		b	.L415
 5545              	.L424:
4459:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5546              		.loc 1 4459 0
 5547 00d4 2268     		ldr	r2, [r4]
 5548 00d6 D369     		ldr	r3, [r2, #28]
 5549 00d8 23F40043 		bic	r3, r3, #32768
 5550 00dc D361     		str	r3, [r2, #28]
 5551 00de C8E7     		b	.L415
 5552              	.LVL592:
 5553              	.L425:
 5554              	.LCFI72:
 5555              		.cfi_def_cfa_offset 0
 5556              		.cfi_restore 4
 5557              		.cfi_restore 5
 5558              		.cfi_restore 6
 5559              		.cfi_restore 14
4366:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5560              		.loc 1 4366 0
 5561 00e0 0220     		movs	r0, #2
 5562              	.LVL593:
 5563 00e2 7047     		bx	lr
 5564              		.cfi_endproc
 5565              	.LFE187:
 5567              		.section	.text.HAL_TIM_ConfigClockSource,"ax",%progbits
 5568              		.align	1
 5569              		.global	HAL_TIM_ConfigClockSource
 5570              		.syntax unified
ARM GAS  /tmp/ccVHe0ZY.s 			page 225


 5571              		.thumb
 5572              		.thumb_func
 5573              		.fpu fpv4-sp-d16
 5575              	HAL_TIM_ConfigClockSource:
 5576              	.LFB188:
4482:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 5577              		.loc 1 4482 0
 5578              		.cfi_startproc
 5579              		@ args = 0, pretend = 0, frame = 0
 5580              		@ frame_needed = 0, uses_anonymous_args = 0
 5581              	.LVL594:
4486:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5582              		.loc 1 4486 0
 5583 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 5584 0004 012B     		cmp	r3, #1
 5585 0006 66D0     		beq	.L442
4482:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 5586              		.loc 1 4482 0 discriminator 2
 5587 0008 10B5     		push	{r4, lr}
 5588              	.LCFI73:
 5589              		.cfi_def_cfa_offset 8
 5590              		.cfi_offset 4, -8
 5591              		.cfi_offset 14, -4
 5592 000a 0446     		mov	r4, r0
4486:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5593              		.loc 1 4486 0 discriminator 2
 5594 000c 0123     		movs	r3, #1
 5595 000e 80F83C30 		strb	r3, [r0, #60]
4488:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5596              		.loc 1 4488 0 discriminator 2
 5597 0012 0223     		movs	r3, #2
 5598 0014 80F83D30 		strb	r3, [r0, #61]
4494:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 5599              		.loc 1 4494 0 discriminator 2
 5600 0018 0268     		ldr	r2, [r0]
 5601 001a 9368     		ldr	r3, [r2, #8]
 5602              	.LVL595:
4496:HALLIB/Src/stm32f4xx_hal_tim.c ****   htim->Instance->SMCR = tmpsmcr;
 5603              		.loc 1 4496 0 discriminator 2
 5604 001c 23F47F43 		bic	r3, r3, #65280
 5605              	.LVL596:
 5606 0020 23F07703 		bic	r3, r3, #119
 5607              	.LVL597:
4497:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5608              		.loc 1 4497 0 discriminator 2
 5609 0024 9360     		str	r3, [r2, #8]
4499:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5610              		.loc 1 4499 0 discriminator 2
 5611 0026 0B68     		ldr	r3, [r1]
 5612              	.LVL598:
 5613 0028 402B     		cmp	r3, #64
 5614 002a 4AD0     		beq	.L433
 5615 002c 13D9     		bls	.L447
 5616 002e 602B     		cmp	r3, #96
 5617 0030 3DD0     		beq	.L437
 5618 0032 1ED9     		bls	.L448
 5619 0034 702B     		cmp	r3, #112
ARM GAS  /tmp/ccVHe0ZY.s 			page 226


 5620 0036 28D0     		beq	.L440
 5621 0038 B3F5005F 		cmp	r3, #8192
 5622 003c 30D1     		bne	.L432
4542:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClockSourceConfig->ClockPrescaler,
 5623              		.loc 1 4542 0
 5624 003e CB68     		ldr	r3, [r1, #12]
 5625 0040 4A68     		ldr	r2, [r1, #4]
 5626              	.LVL599:
 5627 0042 8968     		ldr	r1, [r1, #8]
 5628              	.LVL600:
 5629 0044 0068     		ldr	r0, [r0]
 5630              	.LVL601:
 5631 0046 FFF7FEFF 		bl	TIM_ETR_SetConfig
 5632              	.LVL602:
4547:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 5633              		.loc 1 4547 0
 5634 004a 2268     		ldr	r2, [r4]
 5635 004c 9368     		ldr	r3, [r2, #8]
 5636 004e 43F48043 		orr	r3, r3, #16384
 5637 0052 9360     		str	r3, [r2, #8]
4548:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5638              		.loc 1 4548 0
 5639 0054 24E0     		b	.L432
 5640              	.LVL603:
 5641              	.L447:
4499:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5642              		.loc 1 4499 0 discriminator 2
 5643 0056 102B     		cmp	r3, #16
 5644 0058 06D0     		beq	.L435
 5645 005a 04D9     		bls	.L449
 5646 005c 202B     		cmp	r3, #32
 5647 005e 03D0     		beq	.L435
 5648 0060 302B     		cmp	r3, #48
 5649 0062 01D0     		beq	.L435
 5650 0064 1CE0     		b	.L432
 5651              	.L449:
 5652 0066 DBB9     		cbnz	r3, .L432
 5653              	.L435:
4607:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 5654              		.loc 1 4607 0
 5655 0068 1946     		mov	r1, r3
 5656              	.LVL604:
 5657 006a 2068     		ldr	r0, [r4]
 5658              	.LVL605:
 5659 006c FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5660              	.LVL606:
4608:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5661              		.loc 1 4608 0
 5662 0070 16E0     		b	.L432
 5663              	.LVL607:
 5664              	.L448:
4499:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5665              		.loc 1 4499 0 discriminator 2
 5666 0072 502B     		cmp	r3, #80
 5667 0074 14D1     		bne	.L432
4560:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockPolarity,
 5668              		.loc 1 4560 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 227


 5669 0076 CA68     		ldr	r2, [r1, #12]
 5670              	.LVL608:
 5671 0078 4968     		ldr	r1, [r1, #4]
 5672              	.LVL609:
 5673 007a 0068     		ldr	r0, [r0]
 5674              	.LVL610:
 5675 007c FFF7FEFF 		bl	TIM_TI1_ConfigInputStage
 5676              	.LVL611:
4563:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 5677              		.loc 1 4563 0
 5678 0080 5021     		movs	r1, #80
 5679 0082 2068     		ldr	r0, [r4]
 5680 0084 FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5681              	.LVL612:
4564:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5682              		.loc 1 4564 0
 5683 0088 0AE0     		b	.L432
 5684              	.LVL613:
 5685              	.L440:
4518:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sClockSourceConfig->ClockPrescaler,
 5686              		.loc 1 4518 0
 5687 008a CB68     		ldr	r3, [r1, #12]
 5688 008c 4A68     		ldr	r2, [r1, #4]
 5689              	.LVL614:
 5690 008e 8968     		ldr	r1, [r1, #8]
 5691              	.LVL615:
 5692 0090 0068     		ldr	r0, [r0]
 5693              	.LVL616:
 5694 0092 FFF7FEFF 		bl	TIM_ETR_SetConfig
 5695              	.LVL617:
4524:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 5696              		.loc 1 4524 0
 5697 0096 2268     		ldr	r2, [r4]
 5698 0098 9368     		ldr	r3, [r2, #8]
 5699              	.LVL618:
4525:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Write to TIMx SMCR */
 5700              		.loc 1 4525 0
 5701 009a 43F07703 		orr	r3, r3, #119
 5702              	.LVL619:
4527:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 5703              		.loc 1 4527 0
 5704 009e 9360     		str	r3, [r2, #8]
 5705              	.LVL620:
 5706              	.L432:
4614:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5707              		.loc 1 4614 0
 5708 00a0 0123     		movs	r3, #1
 5709 00a2 84F83D30 		strb	r3, [r4, #61]
4616:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5710              		.loc 1 4616 0
 5711 00a6 0020     		movs	r0, #0
 5712 00a8 84F83C00 		strb	r0, [r4, #60]
4618:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5713              		.loc 1 4618 0
 5714 00ac 10BD     		pop	{r4, pc}
 5715              	.LVL621:
 5716              	.L437:
ARM GAS  /tmp/ccVHe0ZY.s 			page 228


4576:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockPolarity,
 5717              		.loc 1 4576 0
 5718 00ae CA68     		ldr	r2, [r1, #12]
 5719              	.LVL622:
 5720 00b0 4968     		ldr	r1, [r1, #4]
 5721              	.LVL623:
 5722 00b2 0068     		ldr	r0, [r0]
 5723              	.LVL624:
 5724 00b4 FFF7FEFF 		bl	TIM_TI2_ConfigInputStage
 5725              	.LVL625:
4579:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 5726              		.loc 1 4579 0
 5727 00b8 6021     		movs	r1, #96
 5728 00ba 2068     		ldr	r0, [r4]
 5729 00bc FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5730              	.LVL626:
4580:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5731              		.loc 1 4580 0
 5732 00c0 EEE7     		b	.L432
 5733              	.LVL627:
 5734              	.L433:
4592:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sClockSourceConfig->ClockPolarity,
 5735              		.loc 1 4592 0
 5736 00c2 CA68     		ldr	r2, [r1, #12]
 5737              	.LVL628:
 5738 00c4 4968     		ldr	r1, [r1, #4]
 5739              	.LVL629:
 5740 00c6 0068     		ldr	r0, [r0]
 5741              	.LVL630:
 5742 00c8 FFF7FEFF 		bl	TIM_TI1_ConfigInputStage
 5743              	.LVL631:
4595:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 5744              		.loc 1 4595 0
 5745 00cc 4021     		movs	r1, #64
 5746 00ce 2068     		ldr	r0, [r4]
 5747 00d0 FFF7FEFF 		bl	TIM_ITRx_SetConfig
 5748              	.LVL632:
4596:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5749              		.loc 1 4596 0
 5750 00d4 E4E7     		b	.L432
 5751              	.LVL633:
 5752              	.L442:
 5753              	.LCFI74:
 5754              		.cfi_def_cfa_offset 0
 5755              		.cfi_restore 4
 5756              		.cfi_restore 14
4486:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5757              		.loc 1 4486 0
 5758 00d6 0220     		movs	r0, #2
 5759              	.LVL634:
 5760 00d8 7047     		bx	lr
 5761              		.cfi_endproc
 5762              	.LFE188:
 5764              		.section	.text.TIM_SlaveTimer_SetConfig,"ax",%progbits
 5765              		.align	1
 5766              		.syntax unified
 5767              		.thumb
ARM GAS  /tmp/ccVHe0ZY.s 			page 229


 5768              		.thumb_func
 5769              		.fpu fpv4-sp-d16
 5771              	TIM_SlaveTimer_SetConfig:
 5772              	.LFB223:
6146:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 5773              		.loc 1 6146 0
 5774              		.cfi_startproc
 5775              		@ args = 0, pretend = 0, frame = 0
 5776              		@ frame_needed = 0, uses_anonymous_args = 0
 5777              	.LVL635:
 5778 0000 10B5     		push	{r4, lr}
 5779              	.LCFI75:
 5780              		.cfi_def_cfa_offset 8
 5781              		.cfi_offset 4, -8
 5782              		.cfi_offset 14, -4
6152:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5783              		.loc 1 6152 0
 5784 0002 0268     		ldr	r2, [r0]
 5785 0004 9368     		ldr	r3, [r2, #8]
 5786              	.LVL636:
6155:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the Input Trigger source */
 5787              		.loc 1 6155 0
 5788 0006 23F07003 		bic	r3, r3, #112
 5789              	.LVL637:
6157:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5790              		.loc 1 6157 0
 5791 000a 4C68     		ldr	r4, [r1, #4]
 5792 000c 2343     		orrs	r3, r3, r4
 5793              	.LVL638:
6160:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set the slave mode */
 5794              		.loc 1 6160 0
 5795 000e 23F00703 		bic	r3, r3, #7
 5796              	.LVL639:
6162:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5797              		.loc 1 6162 0
 5798 0012 0C68     		ldr	r4, [r1]
 5799 0014 2343     		orrs	r3, r3, r4
 5800              	.LVL640:
6165:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5801              		.loc 1 6165 0
 5802 0016 9360     		str	r3, [r2, #8]
6168:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5803              		.loc 1 6168 0
 5804 0018 4B68     		ldr	r3, [r1, #4]
 5805              	.LVL641:
 5806 001a 502B     		cmp	r3, #80
 5807 001c 23D0     		beq	.L452
 5808 001e 0BD9     		bls	.L460
 5809 0020 602B     		cmp	r3, #96
 5810 0022 27D0     		beq	.L455
 5811 0024 702B     		cmp	r3, #112
 5812 0026 2CD1     		bne	.L457
6178:HALLIB/Src/stm32f4xx_hal_tim.c ****                         sSlaveConfig->TriggerPrescaler,
 5813              		.loc 1 6178 0
 5814 0028 0B69     		ldr	r3, [r1, #16]
 5815 002a 8A68     		ldr	r2, [r1, #8]
 5816              	.LVL642:
ARM GAS  /tmp/ccVHe0ZY.s 			page 230


 5817 002c C968     		ldr	r1, [r1, #12]
 5818              	.LVL643:
 5819 002e 0068     		ldr	r0, [r0]
 5820              	.LVL644:
 5821 0030 FFF7FEFF 		bl	TIM_ETR_SetConfig
 5822              	.LVL645:
6252:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5823              		.loc 1 6252 0
 5824 0034 0020     		movs	r0, #0
6182:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5825              		.loc 1 6182 0
 5826 0036 10BD     		pop	{r4, pc}
 5827              	.LVL646:
 5828              	.L460:
6168:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5829              		.loc 1 6168 0
 5830 0038 402B     		cmp	r3, #64
 5831 003a 22D1     		bne	.L457
6191:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 5832              		.loc 1 6191 0
 5833 003c 0B68     		ldr	r3, [r1]
 5834 003e 052B     		cmp	r3, #5
 5835 0040 21D0     		beq	.L458
6197:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCER &= ~TIM_CCER_CC1E;
 5836              		.loc 1 6197 0
 5837 0042 0368     		ldr	r3, [r0]
 5838 0044 1C6A     		ldr	r4, [r3, #32]
 5839              	.LVL647:
6198:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpccmr1 = htim->Instance->CCMR1;
 5840              		.loc 1 6198 0
 5841 0046 1A6A     		ldr	r2, [r3, #32]
 5842              	.LVL648:
 5843 0048 22F00102 		bic	r2, r2, #1
 5844 004c 1A62     		str	r2, [r3, #32]
6199:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5845              		.loc 1 6199 0
 5846 004e 0268     		ldr	r2, [r0]
 5847 0050 9369     		ldr	r3, [r2, #24]
 5848              	.LVL649:
6202:HALLIB/Src/stm32f4xx_hal_tim.c ****       tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 5849              		.loc 1 6202 0
 5850 0052 23F0F003 		bic	r3, r3, #240
 5851              	.LVL650:
6203:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5852              		.loc 1 6203 0
 5853 0056 0969     		ldr	r1, [r1, #16]
 5854              	.LVL651:
 5855 0058 43EA0113 		orr	r3, r3, r1, lsl #4
 5856              	.LVL652:
6206:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->Instance->CCER = tmpccer;
 5857              		.loc 1 6206 0
 5858 005c 9361     		str	r3, [r2, #24]
6207:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 5859              		.loc 1 6207 0
 5860 005e 0368     		ldr	r3, [r0]
 5861              	.LVL653:
 5862 0060 1C62     		str	r4, [r3, #32]
ARM GAS  /tmp/ccVHe0ZY.s 			page 231


 5863              	.LVL654:
6252:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5864              		.loc 1 6252 0
 5865 0062 0020     		movs	r0, #0
 5866              	.LVL655:
6208:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5867              		.loc 1 6208 0
 5868 0064 10BD     		pop	{r4, pc}
 5869              	.LVL656:
 5870              	.L452:
6219:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sSlaveConfig->TriggerPolarity,
 5871              		.loc 1 6219 0
 5872 0066 0A69     		ldr	r2, [r1, #16]
 5873              	.LVL657:
 5874 0068 8968     		ldr	r1, [r1, #8]
 5875              	.LVL658:
 5876 006a 0068     		ldr	r0, [r0]
 5877              	.LVL659:
 5878 006c FFF7FEFF 		bl	TIM_TI1_ConfigInputStage
 5879              	.LVL660:
6252:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5880              		.loc 1 6252 0
 5881 0070 0020     		movs	r0, #0
6222:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5882              		.loc 1 6222 0
 5883 0072 10BD     		pop	{r4, pc}
 5884              	.LVL661:
 5885              	.L455:
6233:HALLIB/Src/stm32f4xx_hal_tim.c ****                                sSlaveConfig->TriggerPolarity,
 5886              		.loc 1 6233 0
 5887 0074 0A69     		ldr	r2, [r1, #16]
 5888              	.LVL662:
 5889 0076 8968     		ldr	r1, [r1, #8]
 5890              	.LVL663:
 5891 0078 0068     		ldr	r0, [r0]
 5892              	.LVL664:
 5893 007a FFF7FEFF 		bl	TIM_TI2_ConfigInputStage
 5894              	.LVL665:
6252:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5895              		.loc 1 6252 0
 5896 007e 0020     		movs	r0, #0
6236:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 5897              		.loc 1 6236 0
 5898 0080 10BD     		pop	{r4, pc}
 5899              	.LVL666:
 5900              	.L457:
6252:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 5901              		.loc 1 6252 0
 5902 0082 0020     		movs	r0, #0
 5903              	.LVL667:
 5904 0084 10BD     		pop	{r4, pc}
 5905              	.LVL668:
 5906              	.L458:
6193:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 5907              		.loc 1 6193 0
 5908 0086 0120     		movs	r0, #1
 5909              	.LVL669:
ARM GAS  /tmp/ccVHe0ZY.s 			page 232


6253:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5910              		.loc 1 6253 0
 5911 0088 10BD     		pop	{r4, pc}
 5912              		.cfi_endproc
 5913              	.LFE223:
 5915              		.section	.text.HAL_TIM_SlaveConfigSynchro,"ax",%progbits
 5916              		.align	1
 5917              		.global	HAL_TIM_SlaveConfigSynchro
 5918              		.syntax unified
 5919              		.thumb
 5920              		.thumb_func
 5921              		.fpu fpv4-sp-d16
 5923              	HAL_TIM_SlaveConfigSynchro:
 5924              	.LFB190:
4666:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 5925              		.loc 1 4666 0
 5926              		.cfi_startproc
 5927              		@ args = 0, pretend = 0, frame = 0
 5928              		@ frame_needed = 0, uses_anonymous_args = 0
 5929              	.LVL670:
4672:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5930              		.loc 1 4672 0
 5931 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 5932 0004 012B     		cmp	r3, #1
 5933 0006 02D1     		bne	.L469
 5934 0008 0223     		movs	r3, #2
4694:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5935              		.loc 1 4694 0
 5936 000a 1846     		mov	r0, r3
 5937              	.LVL671:
 5938 000c 7047     		bx	lr
 5939              	.LVL672:
 5940              	.L469:
4666:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 5941              		.loc 1 4666 0 discriminator 2
 5942 000e 10B5     		push	{r4, lr}
 5943              	.LCFI76:
 5944              		.cfi_def_cfa_offset 8
 5945              		.cfi_offset 4, -8
 5946              		.cfi_offset 14, -4
 5947 0010 0446     		mov	r4, r0
4672:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5948              		.loc 1 4672 0 discriminator 2
 5949 0012 0123     		movs	r3, #1
 5950 0014 80F83C30 		strb	r3, [r0, #60]
4674:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5951              		.loc 1 4674 0 discriminator 2
 5952 0018 0223     		movs	r3, #2
 5953 001a 80F83D30 		strb	r3, [r0, #61]
4676:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 5954              		.loc 1 4676 0 discriminator 2
 5955 001e FFF7FEFF 		bl	TIM_SlaveTimer_SetConfig
 5956              	.LVL673:
 5957 0022 0346     		mov	r3, r0
 5958 0024 88B9     		cbnz	r0, .L470
4684:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5959              		.loc 1 4684 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 233


 5960 0026 2168     		ldr	r1, [r4]
 5961 0028 CA68     		ldr	r2, [r1, #12]
 5962 002a 22F04002 		bic	r2, r2, #64
 5963 002e CA60     		str	r2, [r1, #12]
4687:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5964              		.loc 1 4687 0
 5965 0030 2168     		ldr	r1, [r4]
 5966 0032 CA68     		ldr	r2, [r1, #12]
 5967 0034 22F48042 		bic	r2, r2, #16384
 5968 0038 CA60     		str	r2, [r1, #12]
4689:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5969              		.loc 1 4689 0
 5970 003a 0122     		movs	r2, #1
 5971 003c 84F83D20 		strb	r2, [r4, #61]
4691:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5972              		.loc 1 4691 0
 5973 0040 0022     		movs	r2, #0
 5974 0042 84F83C20 		strb	r2, [r4, #60]
 5975              	.L462:
4694:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 5976              		.loc 1 4694 0
 5977 0046 1846     		mov	r0, r3
 5978 0048 10BD     		pop	{r4, pc}
 5979              	.LVL674:
 5980              	.L470:
4678:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_UNLOCK(htim);
 5981              		.loc 1 4678 0
 5982 004a 0123     		movs	r3, #1
 5983 004c 84F83D30 		strb	r3, [r4, #61]
4679:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
 5984              		.loc 1 4679 0
 5985 0050 0022     		movs	r2, #0
 5986 0052 84F83C20 		strb	r2, [r4, #60]
4680:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 5987              		.loc 1 4680 0
 5988 0056 F6E7     		b	.L462
 5989              		.cfi_endproc
 5990              	.LFE190:
 5992              		.section	.text.HAL_TIM_SlaveConfigSynchro_IT,"ax",%progbits
 5993              		.align	1
 5994              		.global	HAL_TIM_SlaveConfigSynchro_IT
 5995              		.syntax unified
 5996              		.thumb
 5997              		.thumb_func
 5998              		.fpu fpv4-sp-d16
 6000              	HAL_TIM_SlaveConfigSynchro_IT:
 6001              	.LFB191:
4707:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 6002              		.loc 1 4707 0
 6003              		.cfi_startproc
 6004              		@ args = 0, pretend = 0, frame = 0
 6005              		@ frame_needed = 0, uses_anonymous_args = 0
 6006              	.LVL675:
4713:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6007              		.loc 1 4713 0
 6008 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 6009 0004 012B     		cmp	r3, #1
ARM GAS  /tmp/ccVHe0ZY.s 			page 234


 6010 0006 02D1     		bne	.L479
 6011 0008 0223     		movs	r3, #2
4735:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6012              		.loc 1 4735 0
 6013 000a 1846     		mov	r0, r3
 6014              	.LVL676:
 6015 000c 7047     		bx	lr
 6016              	.LVL677:
 6017              	.L479:
4707:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 6018              		.loc 1 4707 0 discriminator 2
 6019 000e 10B5     		push	{r4, lr}
 6020              	.LCFI77:
 6021              		.cfi_def_cfa_offset 8
 6022              		.cfi_offset 4, -8
 6023              		.cfi_offset 14, -4
 6024 0010 0446     		mov	r4, r0
4713:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6025              		.loc 1 4713 0 discriminator 2
 6026 0012 0123     		movs	r3, #1
 6027 0014 80F83C30 		strb	r3, [r0, #60]
4715:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6028              		.loc 1 4715 0 discriminator 2
 6029 0018 0223     		movs	r3, #2
 6030 001a 80F83D30 		strb	r3, [r0, #61]
4717:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6031              		.loc 1 4717 0 discriminator 2
 6032 001e FFF7FEFF 		bl	TIM_SlaveTimer_SetConfig
 6033              	.LVL678:
 6034 0022 0346     		mov	r3, r0
 6035 0024 88B9     		cbnz	r0, .L480
4725:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6036              		.loc 1 4725 0
 6037 0026 2168     		ldr	r1, [r4]
 6038 0028 CA68     		ldr	r2, [r1, #12]
 6039 002a 42F04002 		orr	r2, r2, #64
 6040 002e CA60     		str	r2, [r1, #12]
4728:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6041              		.loc 1 4728 0
 6042 0030 2168     		ldr	r1, [r4]
 6043 0032 CA68     		ldr	r2, [r1, #12]
 6044 0034 22F48042 		bic	r2, r2, #16384
 6045 0038 CA60     		str	r2, [r1, #12]
4730:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6046              		.loc 1 4730 0
 6047 003a 0122     		movs	r2, #1
 6048 003c 84F83D20 		strb	r2, [r4, #61]
4732:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6049              		.loc 1 4732 0
 6050 0040 0022     		movs	r2, #0
 6051 0042 84F83C20 		strb	r2, [r4, #60]
 6052              	.L472:
4735:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6053              		.loc 1 4735 0
 6054 0046 1846     		mov	r0, r3
 6055 0048 10BD     		pop	{r4, pc}
 6056              	.LVL679:
ARM GAS  /tmp/ccVHe0ZY.s 			page 235


 6057              	.L480:
4719:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_UNLOCK(htim);
 6058              		.loc 1 4719 0
 6059 004a 0123     		movs	r3, #1
 6060 004c 84F83D30 		strb	r3, [r4, #61]
4720:HALLIB/Src/stm32f4xx_hal_tim.c ****     return HAL_ERROR;
 6061              		.loc 1 4720 0
 6062 0050 0022     		movs	r2, #0
 6063 0052 84F83C20 		strb	r2, [r4, #60]
4721:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6064              		.loc 1 4721 0
 6065 0056 F6E7     		b	.L472
 6066              		.cfi_endproc
 6067              	.LFE191:
 6069              		.section	.text.TIM_CCxChannelCmd,"ax",%progbits
 6070              		.align	1
 6071              		.global	TIM_CCxChannelCmd
 6072              		.syntax unified
 6073              		.thumb
 6074              		.thumb_func
 6075              		.fpu fpv4-sp-d16
 6077              	TIM_CCxChannelCmd:
 6078              	.LFB232:
6585:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6586:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
6587:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
6588:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  TIMx to select the TIM peripheral
6589:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  Channel specifies the TIM Channel
6590:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be one of the following values:
6591:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_1: TIM Channel 1
6592:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_2: TIM Channel 2
6593:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_3: TIM Channel 3
6594:HALLIB/Src/stm32f4xx_hal_tim.c ****   *            @arg TIM_CHANNEL_4: TIM Channel 4
6595:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @param  ChannelState specifies the TIM Channel CCxE bit new state.
6596:HALLIB/Src/stm32f4xx_hal_tim.c ****   *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
6597:HALLIB/Src/stm32f4xx_hal_tim.c ****   * @retval None
6598:HALLIB/Src/stm32f4xx_hal_tim.c ****   */
6599:HALLIB/Src/stm32f4xx_hal_tim.c **** void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
6600:HALLIB/Src/stm32f4xx_hal_tim.c **** {
 6079              		.loc 1 6600 0
 6080              		.cfi_startproc
 6081              		@ args = 0, pretend = 0, frame = 0
 6082              		@ frame_needed = 0, uses_anonymous_args = 0
 6083              		@ link register save eliminated.
 6084              	.LVL680:
 6085 0000 10B4     		push	{r4}
 6086              	.LCFI78:
 6087              		.cfi_def_cfa_offset 4
 6088              		.cfi_offset 4, -4
6601:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmp;
6602:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6603:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
6604:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CC1_INSTANCE(TIMx));
6605:HALLIB/Src/stm32f4xx_hal_tim.c ****   assert_param(IS_TIM_CHANNELS(Channel));
6606:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6607:HALLIB/Src/stm32f4xx_hal_tim.c ****   tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 6089              		.loc 1 6607 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 236


 6090 0002 01F01F01 		and	r1, r1, #31
 6091              	.LVL681:
 6092 0006 0123     		movs	r3, #1
 6093 0008 03FA01F4 		lsl	r4, r3, r1
 6094              	.LVL682:
6608:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6609:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Reset the CCxE Bit */
6610:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER &= ~tmp;
 6095              		.loc 1 6610 0
 6096 000c 036A     		ldr	r3, [r0, #32]
 6097 000e 23EA0403 		bic	r3, r3, r4
 6098 0012 0362     		str	r3, [r0, #32]
6611:HALLIB/Src/stm32f4xx_hal_tim.c **** 
6612:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Set or reset the CCxE Bit */
6613:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 6099              		.loc 1 6613 0
 6100 0014 036A     		ldr	r3, [r0, #32]
 6101 0016 8A40     		lsls	r2, r2, r1
 6102              	.LVL683:
 6103 0018 1343     		orrs	r3, r3, r2
 6104 001a 0362     		str	r3, [r0, #32]
6614:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 6105              		.loc 1 6614 0
 6106 001c 5DF8044B 		ldr	r4, [sp], #4
 6107              	.LCFI79:
 6108              		.cfi_restore 4
 6109              		.cfi_def_cfa_offset 0
 6110              	.LVL684:
 6111 0020 7047     		bx	lr
 6112              		.cfi_endproc
 6113              	.LFE232:
 6115              		.section	.text.HAL_TIM_OC_Start,"ax",%progbits
 6116              		.align	1
 6117              		.global	HAL_TIM_OC_Start
 6118              		.syntax unified
 6119              		.thumb
 6120              		.thumb_func
 6121              		.fpu fpv4-sp-d16
 6123              	HAL_TIM_OC_Start:
 6124              	.LFB133:
 722:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 6125              		.loc 1 722 0
 6126              		.cfi_startproc
 6127              		@ args = 0, pretend = 0, frame = 0
 6128              		@ frame_needed = 0, uses_anonymous_args = 0
 6129              	.LVL685:
 6130 0000 10B5     		push	{r4, lr}
 6131              	.LCFI80:
 6132              		.cfi_def_cfa_offset 8
 6133              		.cfi_offset 4, -8
 6134              		.cfi_offset 14, -4
 6135 0002 0446     		mov	r4, r0
 729:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6136              		.loc 1 729 0
 6137 0004 0122     		movs	r2, #1
 6138 0006 0068     		ldr	r0, [r0]
 6139              	.LVL686:
ARM GAS  /tmp/ccVHe0ZY.s 			page 237


 6140 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 6141              	.LVL687:
 731:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6142              		.loc 1 731 0
 6143 000c 2368     		ldr	r3, [r4]
 6144 000e 0E4A     		ldr	r2, .L491
 6145 0010 9342     		cmp	r3, r2
 6146 0012 17D0     		beq	.L487
 731:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6147              		.loc 1 731 0 is_stmt 0 discriminator 2
 6148 0014 02F58062 		add	r2, r2, #1024
 6149 0018 9342     		cmp	r3, r2
 6150 001a 11D0     		beq	.L490
 731:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6151              		.loc 1 731 0
 6152 001c 0022     		movs	r2, #0
 6153              	.L484:
 731:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6154              		.loc 1 731 0 discriminator 6
 6155 001e 1AB1     		cbz	r2, .L485
 734:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6156              		.loc 1 734 0 is_stmt 1
 6157 0020 5A6C     		ldr	r2, [r3, #68]
 6158 0022 42F40042 		orr	r2, r2, #32768
 6159 0026 5A64     		str	r2, [r3, #68]
 6160              	.L485:
 738:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 6161              		.loc 1 738 0
 6162 0028 2268     		ldr	r2, [r4]
 6163 002a 9368     		ldr	r3, [r2, #8]
 6164 002c 03F00703 		and	r3, r3, #7
 6165              	.LVL688:
 739:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6166              		.loc 1 739 0
 6167 0030 062B     		cmp	r3, #6
 6168 0032 03D0     		beq	.L486
 741:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6169              		.loc 1 741 0
 6170 0034 1368     		ldr	r3, [r2]
 6171              	.LVL689:
 6172 0036 43F00103 		orr	r3, r3, #1
 6173 003a 1360     		str	r3, [r2]
 6174              	.L486:
 746:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6175              		.loc 1 746 0
 6176 003c 0020     		movs	r0, #0
 6177 003e 10BD     		pop	{r4, pc}
 6178              	.LVL690:
 6179              	.L490:
 731:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6180              		.loc 1 731 0
 6181 0040 0122     		movs	r2, #1
 6182 0042 ECE7     		b	.L484
 6183              	.L487:
 6184 0044 0122     		movs	r2, #1
 6185 0046 EAE7     		b	.L484
 6186              	.L492:
ARM GAS  /tmp/ccVHe0ZY.s 			page 238


 6187              		.align	2
 6188              	.L491:
 6189 0048 00000140 		.word	1073807360
 6190              		.cfi_endproc
 6191              	.LFE133:
 6193              		.section	.text.HAL_TIM_OC_Stop,"ax",%progbits
 6194              		.align	1
 6195              		.global	HAL_TIM_OC_Stop
 6196              		.syntax unified
 6197              		.thumb
 6198              		.thumb_func
 6199              		.fpu fpv4-sp-d16
 6201              	HAL_TIM_OC_Stop:
 6202              	.LFB134:
 760:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 6203              		.loc 1 760 0
 6204              		.cfi_startproc
 6205              		@ args = 0, pretend = 0, frame = 0
 6206              		@ frame_needed = 0, uses_anonymous_args = 0
 6207              	.LVL691:
 6208 0000 10B5     		push	{r4, lr}
 6209              	.LCFI81:
 6210              		.cfi_def_cfa_offset 8
 6211              		.cfi_offset 4, -8
 6212              		.cfi_offset 14, -4
 6213 0002 0446     		mov	r4, r0
 765:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6214              		.loc 1 765 0
 6215 0004 0022     		movs	r2, #0
 6216 0006 0068     		ldr	r0, [r0]
 6217              	.LVL692:
 6218 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 6219              	.LVL693:
 767:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6220              		.loc 1 767 0
 6221 000c 2368     		ldr	r3, [r4]
 6222 000e 164A     		ldr	r2, .L501
 6223 0010 9342     		cmp	r3, r2
 6224 0012 26D0     		beq	.L497
 767:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6225              		.loc 1 767 0 is_stmt 0 discriminator 2
 6226 0014 02F58062 		add	r2, r2, #1024
 6227 0018 9342     		cmp	r3, r2
 6228 001a 20D0     		beq	.L500
 767:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6229              		.loc 1 767 0
 6230 001c 0022     		movs	r2, #0
 6231              	.L494:
 767:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6232              		.loc 1 767 0 discriminator 6
 6233 001e 6AB1     		cbz	r2, .L495
 770:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6234              		.loc 1 770 0 is_stmt 1
 6235 0020 196A     		ldr	r1, [r3, #32]
 6236 0022 41F21112 		movw	r2, #4369
 6237 0026 1142     		tst	r1, r2
 6238 0028 08D1     		bne	.L495
ARM GAS  /tmp/ccVHe0ZY.s 			page 239


 770:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6239              		.loc 1 770 0 is_stmt 0 discriminator 1
 6240 002a 196A     		ldr	r1, [r3, #32]
 6241 002c 40F24442 		movw	r2, #1092
 6242 0030 1142     		tst	r1, r2
 6243 0032 03D1     		bne	.L495
 770:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6244              		.loc 1 770 0 discriminator 2
 6245 0034 5A6C     		ldr	r2, [r3, #68]
 6246 0036 22F40042 		bic	r2, r2, #32768
 6247 003a 5A64     		str	r2, [r3, #68]
 6248              	.L495:
 774:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6249              		.loc 1 774 0 is_stmt 1
 6250 003c 2368     		ldr	r3, [r4]
 6251 003e 196A     		ldr	r1, [r3, #32]
 6252 0040 41F21112 		movw	r2, #4369
 6253 0044 1142     		tst	r1, r2
 6254 0046 08D1     		bne	.L496
 774:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6255              		.loc 1 774 0 is_stmt 0 discriminator 1
 6256 0048 196A     		ldr	r1, [r3, #32]
 6257 004a 40F24442 		movw	r2, #1092
 6258 004e 1142     		tst	r1, r2
 6259 0050 03D1     		bne	.L496
 774:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6260              		.loc 1 774 0 discriminator 2
 6261 0052 1A68     		ldr	r2, [r3]
 6262 0054 22F00102 		bic	r2, r2, #1
 6263 0058 1A60     		str	r2, [r3]
 6264              	.L496:
 778:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6265              		.loc 1 778 0 is_stmt 1
 6266 005a 0020     		movs	r0, #0
 6267 005c 10BD     		pop	{r4, pc}
 6268              	.LVL694:
 6269              	.L500:
 767:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6270              		.loc 1 767 0
 6271 005e 0122     		movs	r2, #1
 6272 0060 DDE7     		b	.L494
 6273              	.L497:
 6274 0062 0122     		movs	r2, #1
 6275 0064 DBE7     		b	.L494
 6276              	.L502:
 6277 0066 00BF     		.align	2
 6278              	.L501:
 6279 0068 00000140 		.word	1073807360
 6280              		.cfi_endproc
 6281              	.LFE134:
 6283              		.section	.text.HAL_TIM_OC_Start_IT,"ax",%progbits
 6284              		.align	1
 6285              		.global	HAL_TIM_OC_Start_IT
 6286              		.syntax unified
 6287              		.thumb
 6288              		.thumb_func
 6289              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccVHe0ZY.s 			page 240


 6291              	HAL_TIM_OC_Start_IT:
 6292              	.LFB135:
 792:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 6293              		.loc 1 792 0
 6294              		.cfi_startproc
 6295              		@ args = 0, pretend = 0, frame = 0
 6296              		@ frame_needed = 0, uses_anonymous_args = 0
 6297              	.LVL695:
 6298 0000 10B5     		push	{r4, lr}
 6299              	.LCFI82:
 6300              		.cfi_def_cfa_offset 8
 6301              		.cfi_offset 4, -8
 6302              		.cfi_offset 14, -4
 6303 0002 0446     		mov	r4, r0
 798:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6304              		.loc 1 798 0
 6305 0004 0C29     		cmp	r1, #12
 6306 0006 0DD8     		bhi	.L504
 6307 0008 DFE801F0 		tbb	[pc, r1]
 6308              	.L506:
 6309 000c 07       		.byte	(.L505-.L506)/2
 6310 000d 0C       		.byte	(.L504-.L506)/2
 6311 000e 0C       		.byte	(.L504-.L506)/2
 6312 000f 0C       		.byte	(.L504-.L506)/2
 6313 0010 2A       		.byte	(.L507-.L506)/2
 6314 0011 0C       		.byte	(.L504-.L506)/2
 6315 0012 0C       		.byte	(.L504-.L506)/2
 6316 0013 0C       		.byte	(.L504-.L506)/2
 6317 0014 30       		.byte	(.L508-.L506)/2
 6318 0015 0C       		.byte	(.L504-.L506)/2
 6319 0016 0C       		.byte	(.L504-.L506)/2
 6320 0017 0C       		.byte	(.L504-.L506)/2
 6321 0018 36       		.byte	(.L509-.L506)/2
 6322 0019 00       		.p2align 1
 6323              	.L505:
 803:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6324              		.loc 1 803 0
 6325 001a 0268     		ldr	r2, [r0]
 6326 001c D368     		ldr	r3, [r2, #12]
 6327 001e 43F00203 		orr	r3, r3, #2
 6328 0022 D360     		str	r3, [r2, #12]
 6329              	.L504:
 833:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6330              		.loc 1 833 0
 6331 0024 0122     		movs	r2, #1
 6332 0026 2068     		ldr	r0, [r4]
 6333              	.LVL696:
 6334 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 6335              	.LVL697:
 835:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6336              		.loc 1 835 0
 6337 002c 2368     		ldr	r3, [r4]
 6338 002e 174A     		ldr	r2, .L517
 6339 0030 9342     		cmp	r3, r2
 6340 0032 29D0     		beq	.L513
 835:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6341              		.loc 1 835 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccVHe0ZY.s 			page 241


 6342 0034 02F58062 		add	r2, r2, #1024
 6343 0038 9342     		cmp	r3, r2
 6344 003a 23D0     		beq	.L516
 835:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6345              		.loc 1 835 0
 6346 003c 0022     		movs	r2, #0
 6347              	.L510:
 835:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6348              		.loc 1 835 0 discriminator 6
 6349 003e 1AB1     		cbz	r2, .L511
 838:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6350              		.loc 1 838 0 is_stmt 1
 6351 0040 5A6C     		ldr	r2, [r3, #68]
 6352 0042 42F40042 		orr	r2, r2, #32768
 6353 0046 5A64     		str	r2, [r3, #68]
 6354              	.L511:
 842:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 6355              		.loc 1 842 0
 6356 0048 2268     		ldr	r2, [r4]
 6357 004a 9368     		ldr	r3, [r2, #8]
 6358 004c 03F00703 		and	r3, r3, #7
 6359              	.LVL698:
 843:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6360              		.loc 1 843 0
 6361 0050 062B     		cmp	r3, #6
 6362 0052 03D0     		beq	.L512
 845:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6363              		.loc 1 845 0
 6364 0054 1368     		ldr	r3, [r2]
 6365              	.LVL699:
 6366 0056 43F00103 		orr	r3, r3, #1
 6367 005a 1360     		str	r3, [r2]
 6368              	.L512:
 850:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6369              		.loc 1 850 0
 6370 005c 0020     		movs	r0, #0
 6371 005e 10BD     		pop	{r4, pc}
 6372              	.LVL700:
 6373              	.L507:
 810:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6374              		.loc 1 810 0
 6375 0060 0268     		ldr	r2, [r0]
 6376 0062 D368     		ldr	r3, [r2, #12]
 6377 0064 43F00403 		orr	r3, r3, #4
 6378 0068 D360     		str	r3, [r2, #12]
 811:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6379              		.loc 1 811 0
 6380 006a DBE7     		b	.L504
 6381              	.L508:
 817:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6382              		.loc 1 817 0
 6383 006c 0268     		ldr	r2, [r0]
 6384 006e D368     		ldr	r3, [r2, #12]
 6385 0070 43F00803 		orr	r3, r3, #8
 6386 0074 D360     		str	r3, [r2, #12]
 818:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6387              		.loc 1 818 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 242


 6388 0076 D5E7     		b	.L504
 6389              	.L509:
 824:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6390              		.loc 1 824 0
 6391 0078 0268     		ldr	r2, [r0]
 6392 007a D368     		ldr	r3, [r2, #12]
 6393 007c 43F01003 		orr	r3, r3, #16
 6394 0080 D360     		str	r3, [r2, #12]
 825:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6395              		.loc 1 825 0
 6396 0082 CFE7     		b	.L504
 6397              	.LVL701:
 6398              	.L516:
 835:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6399              		.loc 1 835 0
 6400 0084 0122     		movs	r2, #1
 6401 0086 DAE7     		b	.L510
 6402              	.L513:
 6403 0088 0122     		movs	r2, #1
 6404 008a D8E7     		b	.L510
 6405              	.L518:
 6406              		.align	2
 6407              	.L517:
 6408 008c 00000140 		.word	1073807360
 6409              		.cfi_endproc
 6410              	.LFE135:
 6412              		.section	.text.HAL_TIM_OC_Stop_IT,"ax",%progbits
 6413              		.align	1
 6414              		.global	HAL_TIM_OC_Stop_IT
 6415              		.syntax unified
 6416              		.thumb
 6417              		.thumb_func
 6418              		.fpu fpv4-sp-d16
 6420              	HAL_TIM_OC_Stop_IT:
 6421              	.LFB136:
 864:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 6422              		.loc 1 864 0
 6423              		.cfi_startproc
 6424              		@ args = 0, pretend = 0, frame = 0
 6425              		@ frame_needed = 0, uses_anonymous_args = 0
 6426              	.LVL702:
 6427 0000 10B5     		push	{r4, lr}
 6428              	.LCFI83:
 6429              		.cfi_def_cfa_offset 8
 6430              		.cfi_offset 4, -8
 6431              		.cfi_offset 14, -4
 6432 0002 0446     		mov	r4, r0
 868:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6433              		.loc 1 868 0
 6434 0004 0C29     		cmp	r1, #12
 6435 0006 0DD8     		bhi	.L520
 6436 0008 DFE801F0 		tbb	[pc, r1]
 6437              	.L522:
 6438 000c 07       		.byte	(.L521-.L522)/2
 6439 000d 0C       		.byte	(.L520-.L522)/2
 6440 000e 0C       		.byte	(.L520-.L522)/2
 6441 000f 0C       		.byte	(.L520-.L522)/2
ARM GAS  /tmp/ccVHe0ZY.s 			page 243


 6442 0010 39       		.byte	(.L523-.L522)/2
 6443 0011 0C       		.byte	(.L520-.L522)/2
 6444 0012 0C       		.byte	(.L520-.L522)/2
 6445 0013 0C       		.byte	(.L520-.L522)/2
 6446 0014 3F       		.byte	(.L524-.L522)/2
 6447 0015 0C       		.byte	(.L520-.L522)/2
 6448 0016 0C       		.byte	(.L520-.L522)/2
 6449 0017 0C       		.byte	(.L520-.L522)/2
 6450 0018 45       		.byte	(.L525-.L522)/2
 6451 0019 00       		.p2align 1
 6452              	.L521:
 873:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6453              		.loc 1 873 0
 6454 001a 0268     		ldr	r2, [r0]
 6455 001c D368     		ldr	r3, [r2, #12]
 6456 001e 23F00203 		bic	r3, r3, #2
 6457 0022 D360     		str	r3, [r2, #12]
 6458              	.L520:
 903:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6459              		.loc 1 903 0
 6460 0024 0022     		movs	r2, #0
 6461 0026 2068     		ldr	r0, [r4]
 6462              	.LVL703:
 6463 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 6464              	.LVL704:
 905:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6465              		.loc 1 905 0
 6466 002c 2368     		ldr	r3, [r4]
 6467 002e 1F4A     		ldr	r2, .L533
 6468 0030 9342     		cmp	r3, r2
 6469 0032 38D0     		beq	.L529
 905:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6470              		.loc 1 905 0 is_stmt 0 discriminator 2
 6471 0034 02F58062 		add	r2, r2, #1024
 6472 0038 9342     		cmp	r3, r2
 6473 003a 32D0     		beq	.L532
 905:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6474              		.loc 1 905 0
 6475 003c 0022     		movs	r2, #0
 6476              	.L526:
 905:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6477              		.loc 1 905 0 discriminator 6
 6478 003e 6AB1     		cbz	r2, .L527
 908:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6479              		.loc 1 908 0 is_stmt 1
 6480 0040 196A     		ldr	r1, [r3, #32]
 6481 0042 41F21112 		movw	r2, #4369
 6482 0046 1142     		tst	r1, r2
 6483 0048 08D1     		bne	.L527
 908:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6484              		.loc 1 908 0 is_stmt 0 discriminator 1
 6485 004a 196A     		ldr	r1, [r3, #32]
 6486 004c 40F24442 		movw	r2, #1092
 6487 0050 1142     		tst	r1, r2
 6488 0052 03D1     		bne	.L527
 908:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6489              		.loc 1 908 0 discriminator 2
ARM GAS  /tmp/ccVHe0ZY.s 			page 244


 6490 0054 5A6C     		ldr	r2, [r3, #68]
 6491 0056 22F40042 		bic	r2, r2, #32768
 6492 005a 5A64     		str	r2, [r3, #68]
 6493              	.L527:
 912:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6494              		.loc 1 912 0 is_stmt 1
 6495 005c 2368     		ldr	r3, [r4]
 6496 005e 196A     		ldr	r1, [r3, #32]
 6497 0060 41F21112 		movw	r2, #4369
 6498 0064 1142     		tst	r1, r2
 6499 0066 08D1     		bne	.L528
 912:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6500              		.loc 1 912 0 is_stmt 0 discriminator 1
 6501 0068 196A     		ldr	r1, [r3, #32]
 6502 006a 40F24442 		movw	r2, #1092
 6503 006e 1142     		tst	r1, r2
 6504 0070 03D1     		bne	.L528
 912:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6505              		.loc 1 912 0 discriminator 2
 6506 0072 1A68     		ldr	r2, [r3]
 6507 0074 22F00102 		bic	r2, r2, #1
 6508 0078 1A60     		str	r2, [r3]
 6509              	.L528:
 916:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6510              		.loc 1 916 0 is_stmt 1
 6511 007a 0020     		movs	r0, #0
 6512 007c 10BD     		pop	{r4, pc}
 6513              	.LVL705:
 6514              	.L523:
 880:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6515              		.loc 1 880 0
 6516 007e 0268     		ldr	r2, [r0]
 6517 0080 D368     		ldr	r3, [r2, #12]
 6518 0082 23F00403 		bic	r3, r3, #4
 6519 0086 D360     		str	r3, [r2, #12]
 881:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6520              		.loc 1 881 0
 6521 0088 CCE7     		b	.L520
 6522              	.L524:
 887:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6523              		.loc 1 887 0
 6524 008a 0268     		ldr	r2, [r0]
 6525 008c D368     		ldr	r3, [r2, #12]
 6526 008e 23F00803 		bic	r3, r3, #8
 6527 0092 D360     		str	r3, [r2, #12]
 888:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6528              		.loc 1 888 0
 6529 0094 C6E7     		b	.L520
 6530              	.L525:
 894:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6531              		.loc 1 894 0
 6532 0096 0268     		ldr	r2, [r0]
 6533 0098 D368     		ldr	r3, [r2, #12]
 6534 009a 23F01003 		bic	r3, r3, #16
 6535 009e D360     		str	r3, [r2, #12]
 895:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6536              		.loc 1 895 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 245


 6537 00a0 C0E7     		b	.L520
 6538              	.LVL706:
 6539              	.L532:
 905:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6540              		.loc 1 905 0
 6541 00a2 0122     		movs	r2, #1
 6542 00a4 CBE7     		b	.L526
 6543              	.L529:
 6544 00a6 0122     		movs	r2, #1
 6545 00a8 C9E7     		b	.L526
 6546              	.L534:
 6547 00aa 00BF     		.align	2
 6548              	.L533:
 6549 00ac 00000140 		.word	1073807360
 6550              		.cfi_endproc
 6551              	.LFE136:
 6553              		.section	.text.HAL_TIM_OC_Start_DMA,"ax",%progbits
 6554              		.align	1
 6555              		.global	HAL_TIM_OC_Start_DMA
 6556              		.syntax unified
 6557              		.thumb
 6558              		.thumb_func
 6559              		.fpu fpv4-sp-d16
 6561              	HAL_TIM_OC_Start_DMA:
 6562              	.LFB137:
 932:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 6563              		.loc 1 932 0
 6564              		.cfi_startproc
 6565              		@ args = 0, pretend = 0, frame = 0
 6566              		@ frame_needed = 0, uses_anonymous_args = 0
 6567              	.LVL707:
 6568 0000 70B5     		push	{r4, r5, r6, lr}
 6569              	.LCFI84:
 6570              		.cfi_def_cfa_offset 16
 6571              		.cfi_offset 4, -16
 6572              		.cfi_offset 5, -12
 6573              		.cfi_offset 6, -8
 6574              		.cfi_offset 14, -4
 938:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6575              		.loc 1 938 0
 6576 0002 90F83D50 		ldrb	r5, [r0, #61]	@ zero_extendqisi2
 6577 0006 EDB2     		uxtb	r5, r5
 6578 0008 022D     		cmp	r5, #2
 6579 000a 00F09880 		beq	.L547
 942:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6580              		.loc 1 942 0
 6581 000e 90F83D60 		ldrb	r6, [r0, #61]	@ zero_extendqisi2
 6582 0012 F6B2     		uxtb	r6, r6
 6583 0014 012E     		cmp	r6, #1
 6584 0016 0DD0     		beq	.L557
 6585              	.L537:
 6586 0018 1646     		mov	r6, r2
 6587 001a 0D46     		mov	r5, r1
 6588 001c 0446     		mov	r4, r0
 958:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6589              		.loc 1 958 0
 6590 001e 0C29     		cmp	r1, #12
ARM GAS  /tmp/ccVHe0ZY.s 			page 246


 6591 0020 27D8     		bhi	.L539
 6592 0022 DFE801F0 		tbb	[pc, r1]
 6593              	.LVL708:
 6594              	.L541:
 6595 0026 10       		.byte	(.L540-.L541)/2
 6596 0027 26       		.byte	(.L539-.L541)/2
 6597 0028 26       		.byte	(.L539-.L541)/2
 6598 0029 26       		.byte	(.L539-.L541)/2
 6599 002a 45       		.byte	(.L542-.L541)/2
 6600 002b 26       		.byte	(.L539-.L541)/2
 6601 002c 26       		.byte	(.L539-.L541)/2
 6602 002d 26       		.byte	(.L539-.L541)/2
 6603 002e 5C       		.byte	(.L543-.L541)/2
 6604 002f 26       		.byte	(.L539-.L541)/2
 6605 0030 26       		.byte	(.L539-.L541)/2
 6606 0031 26       		.byte	(.L539-.L541)/2
 6607 0032 72       		.byte	(.L544-.L541)/2
 6608 0033 00       		.p2align 1
 6609              	.L557:
 944:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 6610              		.loc 1 944 0
 6611 0034 1AB1     		cbz	r2, .L558
 6612              	.L538:
 950:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6613              		.loc 1 950 0
 6614 0036 0224     		movs	r4, #2
 6615 0038 80F83D40 		strb	r4, [r0, #61]
 6616 003c ECE7     		b	.L537
 6617              	.L558:
 944:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 6618              		.loc 1 944 0 discriminator 1
 6619 003e 002B     		cmp	r3, #0
 6620 0040 F9D0     		beq	.L538
 946:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6621              		.loc 1 946 0
 6622 0042 0120     		movs	r0, #1
 6623              	.LVL709:
 6624 0044 70BD     		pop	{r4, r5, r6, pc}
 6625              	.LVL710:
 6626              	.L540:
 963:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 6627              		.loc 1 963 0
 6628 0046 426A     		ldr	r2, [r0, #36]
 6629 0048 4349     		ldr	r1, .L560
 6630              	.LVL711:
 6631 004a D163     		str	r1, [r2, #60]
 964:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6632              		.loc 1 964 0
 6633 004c 426A     		ldr	r2, [r0, #36]
 6634 004e 4349     		ldr	r1, .L560+4
 6635 0050 1164     		str	r1, [r2, #64]
 967:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6636              		.loc 1 967 0
 6637 0052 426A     		ldr	r2, [r0, #36]
 6638 0054 4249     		ldr	r1, .L560+8
 6639 0056 D164     		str	r1, [r2, #76]
 970:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
ARM GAS  /tmp/ccVHe0ZY.s 			page 247


 6640              		.loc 1 970 0
 6641 0058 0268     		ldr	r2, [r0]
 6642 005a 3432     		adds	r2, r2, #52
 6643 005c 3146     		mov	r1, r6
 6644 005e 406A     		ldr	r0, [r0, #36]
 6645              	.LVL712:
 6646 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6647              	.LVL713:
 6648 0064 0028     		cmp	r0, #0
 6649 0066 6CD1     		bne	.L549
 976:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6650              		.loc 1 976 0
 6651 0068 2268     		ldr	r2, [r4]
 6652 006a D368     		ldr	r3, [r2, #12]
 6653 006c 43F40073 		orr	r3, r3, #512
 6654 0070 D360     		str	r3, [r2, #12]
 6655              	.L539:
1043:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6656              		.loc 1 1043 0
 6657 0072 0122     		movs	r2, #1
 6658 0074 2946     		mov	r1, r5
 6659 0076 2068     		ldr	r0, [r4]
 6660 0078 FFF7FEFF 		bl	TIM_CCxChannelCmd
 6661              	.LVL714:
1045:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6662              		.loc 1 1045 0
 6663 007c 2368     		ldr	r3, [r4]
 6664 007e 394A     		ldr	r2, .L560+12
 6665 0080 9342     		cmp	r3, r2
 6666 0082 5AD0     		beq	.L553
1045:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6667              		.loc 1 1045 0 is_stmt 0 discriminator 2
 6668 0084 02F58062 		add	r2, r2, #1024
 6669 0088 9342     		cmp	r3, r2
 6670 008a 54D0     		beq	.L559
1045:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6671              		.loc 1 1045 0
 6672 008c 0022     		movs	r2, #0
 6673              	.L545:
1045:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6674              		.loc 1 1045 0 discriminator 6
 6675 008e 1AB1     		cbz	r2, .L546
1048:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6676              		.loc 1 1048 0 is_stmt 1
 6677 0090 5A6C     		ldr	r2, [r3, #68]
 6678 0092 42F40042 		orr	r2, r2, #32768
 6679 0096 5A64     		str	r2, [r3, #68]
 6680              	.L546:
1052:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 6681              		.loc 1 1052 0
 6682 0098 2268     		ldr	r2, [r4]
 6683 009a 9368     		ldr	r3, [r2, #8]
 6684 009c 03F00703 		and	r3, r3, #7
 6685              	.LVL715:
1053:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6686              		.loc 1 1053 0
 6687 00a0 062B     		cmp	r3, #6
ARM GAS  /tmp/ccVHe0ZY.s 			page 248


 6688 00a2 56D0     		beq	.L555
1055:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6689              		.loc 1 1055 0
 6690 00a4 1368     		ldr	r3, [r2]
 6691              	.LVL716:
 6692 00a6 43F00103 		orr	r3, r3, #1
 6693 00aa 1360     		str	r3, [r2]
1059:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 6694              		.loc 1 1059 0
 6695 00ac 0020     		movs	r0, #0
 6696 00ae 70BD     		pop	{r4, r5, r6, pc}
 6697              	.LVL717:
 6698              	.L542:
 983:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 6699              		.loc 1 983 0
 6700 00b0 826A     		ldr	r2, [r0, #40]
 6701 00b2 2949     		ldr	r1, .L560
 6702              	.LVL718:
 6703 00b4 D163     		str	r1, [r2, #60]
 984:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6704              		.loc 1 984 0
 6705 00b6 826A     		ldr	r2, [r0, #40]
 6706 00b8 2849     		ldr	r1, .L560+4
 6707 00ba 1164     		str	r1, [r2, #64]
 987:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6708              		.loc 1 987 0
 6709 00bc 826A     		ldr	r2, [r0, #40]
 6710 00be 2849     		ldr	r1, .L560+8
 6711 00c0 D164     		str	r1, [r2, #76]
 990:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 6712              		.loc 1 990 0
 6713 00c2 0268     		ldr	r2, [r0]
 6714 00c4 3832     		adds	r2, r2, #56
 6715 00c6 3146     		mov	r1, r6
 6716 00c8 806A     		ldr	r0, [r0, #40]
 6717              	.LVL719:
 6718 00ca FFF7FEFF 		bl	HAL_DMA_Start_IT
 6719              	.LVL720:
 6720 00ce 0028     		cmp	r0, #0
 6721 00d0 39D1     		bne	.L550
 996:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6722              		.loc 1 996 0
 6723 00d2 2268     		ldr	r2, [r4]
 6724 00d4 D368     		ldr	r3, [r2, #12]
 6725 00d6 43F48063 		orr	r3, r3, #1024
 6726 00da D360     		str	r3, [r2, #12]
 997:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6727              		.loc 1 997 0
 6728 00dc C9E7     		b	.L539
 6729              	.LVL721:
 6730              	.L543:
1003:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 6731              		.loc 1 1003 0
 6732 00de C26A     		ldr	r2, [r0, #44]
 6733 00e0 1D49     		ldr	r1, .L560
 6734              	.LVL722:
 6735 00e2 D163     		str	r1, [r2, #60]
ARM GAS  /tmp/ccVHe0ZY.s 			page 249


1004:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6736              		.loc 1 1004 0
 6737 00e4 C26A     		ldr	r2, [r0, #44]
 6738 00e6 1D49     		ldr	r1, .L560+4
 6739 00e8 1164     		str	r1, [r2, #64]
1007:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6740              		.loc 1 1007 0
 6741 00ea C26A     		ldr	r2, [r0, #44]
 6742 00ec 1C49     		ldr	r1, .L560+8
 6743 00ee D164     		str	r1, [r2, #76]
1010:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 6744              		.loc 1 1010 0
 6745 00f0 0268     		ldr	r2, [r0]
 6746 00f2 3C32     		adds	r2, r2, #60
 6747 00f4 3146     		mov	r1, r6
 6748 00f6 C06A     		ldr	r0, [r0, #44]
 6749              	.LVL723:
 6750 00f8 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6751              	.LVL724:
 6752 00fc 28BB     		cbnz	r0, .L551
1015:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6753              		.loc 1 1015 0
 6754 00fe 2268     		ldr	r2, [r4]
 6755 0100 D368     		ldr	r3, [r2, #12]
 6756 0102 43F40063 		orr	r3, r3, #2048
 6757 0106 D360     		str	r3, [r2, #12]
1016:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6758              		.loc 1 1016 0
 6759 0108 B3E7     		b	.L539
 6760              	.LVL725:
 6761              	.L544:
1022:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 6762              		.loc 1 1022 0
 6763 010a 026B     		ldr	r2, [r0, #48]
 6764 010c 1249     		ldr	r1, .L560
 6765              	.LVL726:
 6766 010e D163     		str	r1, [r2, #60]
1023:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6767              		.loc 1 1023 0
 6768 0110 026B     		ldr	r2, [r0, #48]
 6769 0112 1249     		ldr	r1, .L560+4
 6770 0114 1164     		str	r1, [r2, #64]
1026:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6771              		.loc 1 1026 0
 6772 0116 026B     		ldr	r2, [r0, #48]
 6773 0118 1149     		ldr	r1, .L560+8
 6774 011a D164     		str	r1, [r2, #76]
1029:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 6775              		.loc 1 1029 0
 6776 011c 0268     		ldr	r2, [r0]
 6777 011e 4032     		adds	r2, r2, #64
 6778 0120 3146     		mov	r1, r6
 6779 0122 006B     		ldr	r0, [r0, #48]
 6780              	.LVL727:
 6781 0124 FFF7FEFF 		bl	HAL_DMA_Start_IT
 6782              	.LVL728:
 6783 0128 88B9     		cbnz	r0, .L552
ARM GAS  /tmp/ccVHe0ZY.s 			page 250


1034:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6784              		.loc 1 1034 0
 6785 012a 2268     		ldr	r2, [r4]
 6786 012c D368     		ldr	r3, [r2, #12]
 6787 012e 43F48053 		orr	r3, r3, #4096
 6788 0132 D360     		str	r3, [r2, #12]
1035:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6789              		.loc 1 1035 0
 6790 0134 9DE7     		b	.L539
 6791              	.L559:
1045:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6792              		.loc 1 1045 0
 6793 0136 0122     		movs	r2, #1
 6794 0138 A9E7     		b	.L545
 6795              	.L553:
 6796 013a 0122     		movs	r2, #1
 6797 013c A7E7     		b	.L545
 6798              	.LVL729:
 6799              	.L547:
 940:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6800              		.loc 1 940 0
 6801 013e 0220     		movs	r0, #2
 6802              	.LVL730:
 6803 0140 70BD     		pop	{r4, r5, r6, pc}
 6804              	.LVL731:
 6805              	.L549:
 972:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 6806              		.loc 1 972 0
 6807 0142 0120     		movs	r0, #1
 6808 0144 70BD     		pop	{r4, r5, r6, pc}
 6809              	.LVL732:
 6810              	.L550:
 992:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 6811              		.loc 1 992 0
 6812 0146 0120     		movs	r0, #1
 6813 0148 70BD     		pop	{r4, r5, r6, pc}
 6814              	.LVL733:
 6815              	.L551:
1012:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 6816              		.loc 1 1012 0
 6817 014a 0120     		movs	r0, #1
 6818 014c 70BD     		pop	{r4, r5, r6, pc}
 6819              	.LVL734:
 6820              	.L552:
1031:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 6821              		.loc 1 1031 0
 6822 014e 0120     		movs	r0, #1
 6823 0150 70BD     		pop	{r4, r5, r6, pc}
 6824              	.LVL735:
 6825              	.L555:
1059:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 6826              		.loc 1 1059 0
 6827 0152 0020     		movs	r0, #0
1060:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6828              		.loc 1 1060 0
 6829 0154 70BD     		pop	{r4, r5, r6, pc}
 6830              	.LVL736:
ARM GAS  /tmp/ccVHe0ZY.s 			page 251


 6831              	.L561:
 6832 0156 00BF     		.align	2
 6833              	.L560:
 6834 0158 00000000 		.word	TIM_DMADelayPulseCplt
 6835 015c 00000000 		.word	TIM_DMADelayPulseHalfCplt
 6836 0160 00000000 		.word	TIM_DMAError
 6837 0164 00000140 		.word	1073807360
 6838              		.cfi_endproc
 6839              	.LFE137:
 6841              		.section	.text.HAL_TIM_OC_Stop_DMA,"ax",%progbits
 6842              		.align	1
 6843              		.global	HAL_TIM_OC_Stop_DMA
 6844              		.syntax unified
 6845              		.thumb
 6846              		.thumb_func
 6847              		.fpu fpv4-sp-d16
 6849              	HAL_TIM_OC_Stop_DMA:
 6850              	.LFB138:
1074:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 6851              		.loc 1 1074 0
 6852              		.cfi_startproc
 6853              		@ args = 0, pretend = 0, frame = 0
 6854              		@ frame_needed = 0, uses_anonymous_args = 0
 6855              	.LVL737:
 6856 0000 38B5     		push	{r3, r4, r5, lr}
 6857              	.LCFI85:
 6858              		.cfi_def_cfa_offset 16
 6859              		.cfi_offset 3, -16
 6860              		.cfi_offset 4, -12
 6861              		.cfi_offset 5, -8
 6862              		.cfi_offset 14, -4
 6863 0002 0446     		mov	r4, r0
 6864 0004 0D46     		mov	r5, r1
1078:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6865              		.loc 1 1078 0
 6866 0006 0C29     		cmp	r1, #12
 6867 0008 10D8     		bhi	.L563
 6868 000a DFE801F0 		tbb	[pc, r1]
 6869              	.L565:
 6870 000e 07       		.byte	(.L564-.L565)/2
 6871 000f 0F       		.byte	(.L563-.L565)/2
 6872 0010 0F       		.byte	(.L563-.L565)/2
 6873 0011 0F       		.byte	(.L563-.L565)/2
 6874 0012 40       		.byte	(.L566-.L565)/2
 6875 0013 0F       		.byte	(.L563-.L565)/2
 6876 0014 0F       		.byte	(.L563-.L565)/2
 6877 0015 0F       		.byte	(.L563-.L565)/2
 6878 0016 49       		.byte	(.L567-.L565)/2
 6879 0017 0F       		.byte	(.L563-.L565)/2
 6880 0018 0F       		.byte	(.L563-.L565)/2
 6881 0019 0F       		.byte	(.L563-.L565)/2
 6882 001a 52       		.byte	(.L568-.L565)/2
 6883 001b 00       		.p2align 1
 6884              	.L564:
1083:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 6885              		.loc 1 1083 0
 6886 001c 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccVHe0ZY.s 			page 252


 6887 001e D368     		ldr	r3, [r2, #12]
 6888 0020 23F40073 		bic	r3, r3, #512
 6889 0024 D360     		str	r3, [r2, #12]
1084:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6890              		.loc 1 1084 0
 6891 0026 406A     		ldr	r0, [r0, #36]
 6892              	.LVL738:
 6893 0028 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6894              	.LVL739:
 6895              	.L563:
1117:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6896              		.loc 1 1117 0
 6897 002c 0022     		movs	r2, #0
 6898 002e 2946     		mov	r1, r5
 6899 0030 2068     		ldr	r0, [r4]
 6900 0032 FFF7FEFF 		bl	TIM_CCxChannelCmd
 6901              	.LVL740:
1119:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6902              		.loc 1 1119 0
 6903 0036 2368     		ldr	r3, [r4]
 6904 0038 244A     		ldr	r2, .L576
 6905 003a 9342     		cmp	r3, r2
 6906 003c 44D0     		beq	.L572
1119:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6907              		.loc 1 1119 0 is_stmt 0 discriminator 2
 6908 003e 02F58062 		add	r2, r2, #1024
 6909 0042 9342     		cmp	r3, r2
 6910 0044 3ED0     		beq	.L575
1119:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6911              		.loc 1 1119 0
 6912 0046 0022     		movs	r2, #0
 6913              	.L569:
1119:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6914              		.loc 1 1119 0 discriminator 6
 6915 0048 6AB1     		cbz	r2, .L570
1122:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6916              		.loc 1 1122 0 is_stmt 1
 6917 004a 196A     		ldr	r1, [r3, #32]
 6918 004c 41F21112 		movw	r2, #4369
 6919 0050 1142     		tst	r1, r2
 6920 0052 08D1     		bne	.L570
1122:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6921              		.loc 1 1122 0 is_stmt 0 discriminator 1
 6922 0054 196A     		ldr	r1, [r3, #32]
 6923 0056 40F24442 		movw	r2, #1092
 6924 005a 1142     		tst	r1, r2
 6925 005c 03D1     		bne	.L570
1122:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 6926              		.loc 1 1122 0 discriminator 2
 6927 005e 5A6C     		ldr	r2, [r3, #68]
 6928 0060 22F40042 		bic	r2, r2, #32768
 6929 0064 5A64     		str	r2, [r3, #68]
 6930              	.L570:
1126:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6931              		.loc 1 1126 0 is_stmt 1
 6932 0066 2368     		ldr	r3, [r4]
 6933 0068 196A     		ldr	r1, [r3, #32]
ARM GAS  /tmp/ccVHe0ZY.s 			page 253


 6934 006a 41F21112 		movw	r2, #4369
 6935 006e 1142     		tst	r1, r2
 6936 0070 08D1     		bne	.L571
1126:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6937              		.loc 1 1126 0 is_stmt 0 discriminator 1
 6938 0072 196A     		ldr	r1, [r3, #32]
 6939 0074 40F24442 		movw	r2, #1092
 6940 0078 1142     		tst	r1, r2
 6941 007a 03D1     		bne	.L571
1126:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6942              		.loc 1 1126 0 discriminator 2
 6943 007c 1A68     		ldr	r2, [r3]
 6944 007e 22F00102 		bic	r2, r2, #1
 6945 0082 1A60     		str	r2, [r3]
 6946              	.L571:
1129:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6947              		.loc 1 1129 0 is_stmt 1
 6948 0084 0123     		movs	r3, #1
 6949 0086 84F83D30 		strb	r3, [r4, #61]
1133:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 6950              		.loc 1 1133 0
 6951 008a 0020     		movs	r0, #0
 6952 008c 38BD     		pop	{r3, r4, r5, pc}
 6953              	.LVL741:
 6954              	.L566:
1091:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 6955              		.loc 1 1091 0
 6956 008e 0268     		ldr	r2, [r0]
 6957 0090 D368     		ldr	r3, [r2, #12]
 6958 0092 23F48063 		bic	r3, r3, #1024
 6959 0096 D360     		str	r3, [r2, #12]
1092:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6960              		.loc 1 1092 0
 6961 0098 806A     		ldr	r0, [r0, #40]
 6962              	.LVL742:
 6963 009a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6964              	.LVL743:
1093:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6965              		.loc 1 1093 0
 6966 009e C5E7     		b	.L563
 6967              	.LVL744:
 6968              	.L567:
1099:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 6969              		.loc 1 1099 0
 6970 00a0 0268     		ldr	r2, [r0]
 6971 00a2 D368     		ldr	r3, [r2, #12]
 6972 00a4 23F40063 		bic	r3, r3, #2048
 6973 00a8 D360     		str	r3, [r2, #12]
1100:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6974              		.loc 1 1100 0
 6975 00aa C06A     		ldr	r0, [r0, #44]
 6976              	.LVL745:
 6977 00ac FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6978              	.LVL746:
1101:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6979              		.loc 1 1101 0
 6980 00b0 BCE7     		b	.L563
ARM GAS  /tmp/ccVHe0ZY.s 			page 254


 6981              	.LVL747:
 6982              	.L568:
1107:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 6983              		.loc 1 1107 0
 6984 00b2 0268     		ldr	r2, [r0]
 6985 00b4 D368     		ldr	r3, [r2, #12]
 6986 00b6 23F48053 		bic	r3, r3, #4096
 6987 00ba D360     		str	r3, [r2, #12]
1108:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 6988              		.loc 1 1108 0
 6989 00bc 006B     		ldr	r0, [r0, #48]
 6990              	.LVL748:
 6991 00be FFF7FEFF 		bl	HAL_DMA_Abort_IT
 6992              	.LVL749:
1109:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 6993              		.loc 1 1109 0
 6994 00c2 B3E7     		b	.L563
 6995              	.L575:
1119:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 6996              		.loc 1 1119 0
 6997 00c4 0122     		movs	r2, #1
 6998 00c6 BFE7     		b	.L569
 6999              	.L572:
 7000 00c8 0122     		movs	r2, #1
 7001 00ca BDE7     		b	.L569
 7002              	.L577:
 7003              		.align	2
 7004              	.L576:
 7005 00cc 00000140 		.word	1073807360
 7006              		.cfi_endproc
 7007              	.LFE138:
 7009              		.section	.text.HAL_TIM_PWM_Start,"ax",%progbits
 7010              		.align	1
 7011              		.global	HAL_TIM_PWM_Start
 7012              		.syntax unified
 7013              		.thumb
 7014              		.thumb_func
 7015              		.fpu fpv4-sp-d16
 7017              	HAL_TIM_PWM_Start:
 7018              	.LFB143:
1295:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 7019              		.loc 1 1295 0
 7020              		.cfi_startproc
 7021              		@ args = 0, pretend = 0, frame = 0
 7022              		@ frame_needed = 0, uses_anonymous_args = 0
 7023              	.LVL750:
 7024 0000 10B5     		push	{r4, lr}
 7025              	.LCFI86:
 7026              		.cfi_def_cfa_offset 8
 7027              		.cfi_offset 4, -8
 7028              		.cfi_offset 14, -4
 7029 0002 0446     		mov	r4, r0
1302:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7030              		.loc 1 1302 0
 7031 0004 0122     		movs	r2, #1
 7032 0006 0068     		ldr	r0, [r0]
 7033              	.LVL751:
ARM GAS  /tmp/ccVHe0ZY.s 			page 255


 7034 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7035              	.LVL752:
1304:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7036              		.loc 1 1304 0
 7037 000c 2368     		ldr	r3, [r4]
 7038 000e 0E4A     		ldr	r2, .L586
 7039 0010 9342     		cmp	r3, r2
 7040 0012 17D0     		beq	.L582
1304:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7041              		.loc 1 1304 0 is_stmt 0 discriminator 2
 7042 0014 02F58062 		add	r2, r2, #1024
 7043 0018 9342     		cmp	r3, r2
 7044 001a 11D0     		beq	.L585
1304:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7045              		.loc 1 1304 0
 7046 001c 0022     		movs	r2, #0
 7047              	.L579:
1304:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7048              		.loc 1 1304 0 discriminator 6
 7049 001e 1AB1     		cbz	r2, .L580
1307:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7050              		.loc 1 1307 0 is_stmt 1
 7051 0020 5A6C     		ldr	r2, [r3, #68]
 7052 0022 42F40042 		orr	r2, r2, #32768
 7053 0026 5A64     		str	r2, [r3, #68]
 7054              	.L580:
1311:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 7055              		.loc 1 1311 0
 7056 0028 2268     		ldr	r2, [r4]
 7057 002a 9368     		ldr	r3, [r2, #8]
 7058 002c 03F00703 		and	r3, r3, #7
 7059              	.LVL753:
1312:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7060              		.loc 1 1312 0
 7061 0030 062B     		cmp	r3, #6
 7062 0032 03D0     		beq	.L581
1314:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7063              		.loc 1 1314 0
 7064 0034 1368     		ldr	r3, [r2]
 7065              	.LVL754:
 7066 0036 43F00103 		orr	r3, r3, #1
 7067 003a 1360     		str	r3, [r2]
 7068              	.L581:
1319:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7069              		.loc 1 1319 0
 7070 003c 0020     		movs	r0, #0
 7071 003e 10BD     		pop	{r4, pc}
 7072              	.LVL755:
 7073              	.L585:
1304:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7074              		.loc 1 1304 0
 7075 0040 0122     		movs	r2, #1
 7076 0042 ECE7     		b	.L579
 7077              	.L582:
 7078 0044 0122     		movs	r2, #1
 7079 0046 EAE7     		b	.L579
 7080              	.L587:
ARM GAS  /tmp/ccVHe0ZY.s 			page 256


 7081              		.align	2
 7082              	.L586:
 7083 0048 00000140 		.word	1073807360
 7084              		.cfi_endproc
 7085              	.LFE143:
 7087              		.section	.text.HAL_TIM_PWM_Stop,"ax",%progbits
 7088              		.align	1
 7089              		.global	HAL_TIM_PWM_Stop
 7090              		.syntax unified
 7091              		.thumb
 7092              		.thumb_func
 7093              		.fpu fpv4-sp-d16
 7095              	HAL_TIM_PWM_Stop:
 7096              	.LFB144:
1333:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 7097              		.loc 1 1333 0
 7098              		.cfi_startproc
 7099              		@ args = 0, pretend = 0, frame = 0
 7100              		@ frame_needed = 0, uses_anonymous_args = 0
 7101              	.LVL756:
 7102 0000 10B5     		push	{r4, lr}
 7103              	.LCFI87:
 7104              		.cfi_def_cfa_offset 8
 7105              		.cfi_offset 4, -8
 7106              		.cfi_offset 14, -4
 7107 0002 0446     		mov	r4, r0
1338:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7108              		.loc 1 1338 0
 7109 0004 0022     		movs	r2, #0
 7110 0006 0068     		ldr	r0, [r0]
 7111              	.LVL757:
 7112 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7113              	.LVL758:
1340:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7114              		.loc 1 1340 0
 7115 000c 2368     		ldr	r3, [r4]
 7116 000e 174A     		ldr	r2, .L596
 7117 0010 9342     		cmp	r3, r2
 7118 0012 29D0     		beq	.L592
1340:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7119              		.loc 1 1340 0 is_stmt 0 discriminator 2
 7120 0014 02F58062 		add	r2, r2, #1024
 7121 0018 9342     		cmp	r3, r2
 7122 001a 23D0     		beq	.L595
1340:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7123              		.loc 1 1340 0
 7124 001c 0022     		movs	r2, #0
 7125              	.L589:
1340:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7126              		.loc 1 1340 0 discriminator 6
 7127 001e 6AB1     		cbz	r2, .L590
1343:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7128              		.loc 1 1343 0 is_stmt 1
 7129 0020 196A     		ldr	r1, [r3, #32]
 7130 0022 41F21112 		movw	r2, #4369
 7131 0026 1142     		tst	r1, r2
 7132 0028 08D1     		bne	.L590
ARM GAS  /tmp/ccVHe0ZY.s 			page 257


1343:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7133              		.loc 1 1343 0 is_stmt 0 discriminator 1
 7134 002a 196A     		ldr	r1, [r3, #32]
 7135 002c 40F24442 		movw	r2, #1092
 7136 0030 1142     		tst	r1, r2
 7137 0032 03D1     		bne	.L590
1343:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7138              		.loc 1 1343 0 discriminator 2
 7139 0034 5A6C     		ldr	r2, [r3, #68]
 7140 0036 22F40042 		bic	r2, r2, #32768
 7141 003a 5A64     		str	r2, [r3, #68]
 7142              	.L590:
1347:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7143              		.loc 1 1347 0 is_stmt 1
 7144 003c 2368     		ldr	r3, [r4]
 7145 003e 196A     		ldr	r1, [r3, #32]
 7146 0040 41F21112 		movw	r2, #4369
 7147 0044 1142     		tst	r1, r2
 7148 0046 08D1     		bne	.L591
1347:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7149              		.loc 1 1347 0 is_stmt 0 discriminator 1
 7150 0048 196A     		ldr	r1, [r3, #32]
 7151 004a 40F24442 		movw	r2, #1092
 7152 004e 1142     		tst	r1, r2
 7153 0050 03D1     		bne	.L591
1347:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7154              		.loc 1 1347 0 discriminator 2
 7155 0052 1A68     		ldr	r2, [r3]
 7156 0054 22F00102 		bic	r2, r2, #1
 7157 0058 1A60     		str	r2, [r3]
 7158              	.L591:
1350:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7159              		.loc 1 1350 0 is_stmt 1
 7160 005a 0123     		movs	r3, #1
 7161 005c 84F83D30 		strb	r3, [r4, #61]
1354:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7162              		.loc 1 1354 0
 7163 0060 0020     		movs	r0, #0
 7164 0062 10BD     		pop	{r4, pc}
 7165              	.LVL759:
 7166              	.L595:
1340:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7167              		.loc 1 1340 0
 7168 0064 0122     		movs	r2, #1
 7169 0066 DAE7     		b	.L589
 7170              	.L592:
 7171 0068 0122     		movs	r2, #1
 7172 006a D8E7     		b	.L589
 7173              	.L597:
 7174              		.align	2
 7175              	.L596:
 7176 006c 00000140 		.word	1073807360
 7177              		.cfi_endproc
 7178              	.LFE144:
 7180              		.section	.text.HAL_TIM_PWM_Start_IT,"ax",%progbits
 7181              		.align	1
 7182              		.global	HAL_TIM_PWM_Start_IT
ARM GAS  /tmp/ccVHe0ZY.s 			page 258


 7183              		.syntax unified
 7184              		.thumb
 7185              		.thumb_func
 7186              		.fpu fpv4-sp-d16
 7188              	HAL_TIM_PWM_Start_IT:
 7189              	.LFB145:
1368:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 7190              		.loc 1 1368 0
 7191              		.cfi_startproc
 7192              		@ args = 0, pretend = 0, frame = 0
 7193              		@ frame_needed = 0, uses_anonymous_args = 0
 7194              	.LVL760:
 7195 0000 10B5     		push	{r4, lr}
 7196              	.LCFI88:
 7197              		.cfi_def_cfa_offset 8
 7198              		.cfi_offset 4, -8
 7199              		.cfi_offset 14, -4
 7200 0002 0446     		mov	r4, r0
1373:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7201              		.loc 1 1373 0
 7202 0004 0C29     		cmp	r1, #12
 7203 0006 0DD8     		bhi	.L599
 7204 0008 DFE801F0 		tbb	[pc, r1]
 7205              	.L601:
 7206 000c 07       		.byte	(.L600-.L601)/2
 7207 000d 0C       		.byte	(.L599-.L601)/2
 7208 000e 0C       		.byte	(.L599-.L601)/2
 7209 000f 0C       		.byte	(.L599-.L601)/2
 7210 0010 2A       		.byte	(.L602-.L601)/2
 7211 0011 0C       		.byte	(.L599-.L601)/2
 7212 0012 0C       		.byte	(.L599-.L601)/2
 7213 0013 0C       		.byte	(.L599-.L601)/2
 7214 0014 30       		.byte	(.L603-.L601)/2
 7215 0015 0C       		.byte	(.L599-.L601)/2
 7216 0016 0C       		.byte	(.L599-.L601)/2
 7217 0017 0C       		.byte	(.L599-.L601)/2
 7218 0018 36       		.byte	(.L604-.L601)/2
 7219 0019 00       		.p2align 1
 7220              	.L600:
1378:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7221              		.loc 1 1378 0
 7222 001a 0268     		ldr	r2, [r0]
 7223 001c D368     		ldr	r3, [r2, #12]
 7224 001e 43F00203 		orr	r3, r3, #2
 7225 0022 D360     		str	r3, [r2, #12]
 7226              	.L599:
1408:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7227              		.loc 1 1408 0
 7228 0024 0122     		movs	r2, #1
 7229 0026 2068     		ldr	r0, [r4]
 7230              	.LVL761:
 7231 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7232              	.LVL762:
1410:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7233              		.loc 1 1410 0
 7234 002c 2368     		ldr	r3, [r4]
 7235 002e 174A     		ldr	r2, .L612
ARM GAS  /tmp/ccVHe0ZY.s 			page 259


 7236 0030 9342     		cmp	r3, r2
 7237 0032 29D0     		beq	.L608
1410:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7238              		.loc 1 1410 0 is_stmt 0 discriminator 2
 7239 0034 02F58062 		add	r2, r2, #1024
 7240 0038 9342     		cmp	r3, r2
 7241 003a 23D0     		beq	.L611
1410:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7242              		.loc 1 1410 0
 7243 003c 0022     		movs	r2, #0
 7244              	.L605:
1410:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7245              		.loc 1 1410 0 discriminator 6
 7246 003e 1AB1     		cbz	r2, .L606
1413:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7247              		.loc 1 1413 0 is_stmt 1
 7248 0040 5A6C     		ldr	r2, [r3, #68]
 7249 0042 42F40042 		orr	r2, r2, #32768
 7250 0046 5A64     		str	r2, [r3, #68]
 7251              	.L606:
1417:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 7252              		.loc 1 1417 0
 7253 0048 2268     		ldr	r2, [r4]
 7254 004a 9368     		ldr	r3, [r2, #8]
 7255 004c 03F00703 		and	r3, r3, #7
 7256              	.LVL763:
1418:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7257              		.loc 1 1418 0
 7258 0050 062B     		cmp	r3, #6
 7259 0052 03D0     		beq	.L607
1420:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7260              		.loc 1 1420 0
 7261 0054 1368     		ldr	r3, [r2]
 7262              	.LVL764:
 7263 0056 43F00103 		orr	r3, r3, #1
 7264 005a 1360     		str	r3, [r2]
 7265              	.L607:
1425:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7266              		.loc 1 1425 0
 7267 005c 0020     		movs	r0, #0
 7268 005e 10BD     		pop	{r4, pc}
 7269              	.LVL765:
 7270              	.L602:
1385:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7271              		.loc 1 1385 0
 7272 0060 0268     		ldr	r2, [r0]
 7273 0062 D368     		ldr	r3, [r2, #12]
 7274 0064 43F00403 		orr	r3, r3, #4
 7275 0068 D360     		str	r3, [r2, #12]
1386:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7276              		.loc 1 1386 0
 7277 006a DBE7     		b	.L599
 7278              	.L603:
1392:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7279              		.loc 1 1392 0
 7280 006c 0268     		ldr	r2, [r0]
 7281 006e D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccVHe0ZY.s 			page 260


 7282 0070 43F00803 		orr	r3, r3, #8
 7283 0074 D360     		str	r3, [r2, #12]
1393:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7284              		.loc 1 1393 0
 7285 0076 D5E7     		b	.L599
 7286              	.L604:
1399:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7287              		.loc 1 1399 0
 7288 0078 0268     		ldr	r2, [r0]
 7289 007a D368     		ldr	r3, [r2, #12]
 7290 007c 43F01003 		orr	r3, r3, #16
 7291 0080 D360     		str	r3, [r2, #12]
1400:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7292              		.loc 1 1400 0
 7293 0082 CFE7     		b	.L599
 7294              	.LVL766:
 7295              	.L611:
1410:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7296              		.loc 1 1410 0
 7297 0084 0122     		movs	r2, #1
 7298 0086 DAE7     		b	.L605
 7299              	.L608:
 7300 0088 0122     		movs	r2, #1
 7301 008a D8E7     		b	.L605
 7302              	.L613:
 7303              		.align	2
 7304              	.L612:
 7305 008c 00000140 		.word	1073807360
 7306              		.cfi_endproc
 7307              	.LFE145:
 7309              		.section	.text.HAL_TIM_PWM_Stop_IT,"ax",%progbits
 7310              		.align	1
 7311              		.global	HAL_TIM_PWM_Stop_IT
 7312              		.syntax unified
 7313              		.thumb
 7314              		.thumb_func
 7315              		.fpu fpv4-sp-d16
 7317              	HAL_TIM_PWM_Stop_IT:
 7318              	.LFB146:
1439:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 7319              		.loc 1 1439 0
 7320              		.cfi_startproc
 7321              		@ args = 0, pretend = 0, frame = 0
 7322              		@ frame_needed = 0, uses_anonymous_args = 0
 7323              	.LVL767:
 7324 0000 10B5     		push	{r4, lr}
 7325              	.LCFI89:
 7326              		.cfi_def_cfa_offset 8
 7327              		.cfi_offset 4, -8
 7328              		.cfi_offset 14, -4
 7329 0002 0446     		mov	r4, r0
1443:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7330              		.loc 1 1443 0
 7331 0004 0C29     		cmp	r1, #12
 7332 0006 0DD8     		bhi	.L615
 7333 0008 DFE801F0 		tbb	[pc, r1]
 7334              	.L617:
ARM GAS  /tmp/ccVHe0ZY.s 			page 261


 7335 000c 07       		.byte	(.L616-.L617)/2
 7336 000d 0C       		.byte	(.L615-.L617)/2
 7337 000e 0C       		.byte	(.L615-.L617)/2
 7338 000f 0C       		.byte	(.L615-.L617)/2
 7339 0010 39       		.byte	(.L618-.L617)/2
 7340 0011 0C       		.byte	(.L615-.L617)/2
 7341 0012 0C       		.byte	(.L615-.L617)/2
 7342 0013 0C       		.byte	(.L615-.L617)/2
 7343 0014 3F       		.byte	(.L619-.L617)/2
 7344 0015 0C       		.byte	(.L615-.L617)/2
 7345 0016 0C       		.byte	(.L615-.L617)/2
 7346 0017 0C       		.byte	(.L615-.L617)/2
 7347 0018 45       		.byte	(.L620-.L617)/2
 7348 0019 00       		.p2align 1
 7349              	.L616:
1448:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7350              		.loc 1 1448 0
 7351 001a 0268     		ldr	r2, [r0]
 7352 001c D368     		ldr	r3, [r2, #12]
 7353 001e 23F00203 		bic	r3, r3, #2
 7354 0022 D360     		str	r3, [r2, #12]
 7355              	.L615:
1478:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7356              		.loc 1 1478 0
 7357 0024 0022     		movs	r2, #0
 7358 0026 2068     		ldr	r0, [r4]
 7359              	.LVL768:
 7360 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7361              	.LVL769:
1480:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7362              		.loc 1 1480 0
 7363 002c 2368     		ldr	r3, [r4]
 7364 002e 1F4A     		ldr	r2, .L628
 7365 0030 9342     		cmp	r3, r2
 7366 0032 38D0     		beq	.L624
1480:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7367              		.loc 1 1480 0 is_stmt 0 discriminator 2
 7368 0034 02F58062 		add	r2, r2, #1024
 7369 0038 9342     		cmp	r3, r2
 7370 003a 32D0     		beq	.L627
1480:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7371              		.loc 1 1480 0
 7372 003c 0022     		movs	r2, #0
 7373              	.L621:
1480:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7374              		.loc 1 1480 0 discriminator 6
 7375 003e 6AB1     		cbz	r2, .L622
1483:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7376              		.loc 1 1483 0 is_stmt 1
 7377 0040 196A     		ldr	r1, [r3, #32]
 7378 0042 41F21112 		movw	r2, #4369
 7379 0046 1142     		tst	r1, r2
 7380 0048 08D1     		bne	.L622
1483:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7381              		.loc 1 1483 0 is_stmt 0 discriminator 1
 7382 004a 196A     		ldr	r1, [r3, #32]
 7383 004c 40F24442 		movw	r2, #1092
ARM GAS  /tmp/ccVHe0ZY.s 			page 262


 7384 0050 1142     		tst	r1, r2
 7385 0052 03D1     		bne	.L622
1483:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7386              		.loc 1 1483 0 discriminator 2
 7387 0054 5A6C     		ldr	r2, [r3, #68]
 7388 0056 22F40042 		bic	r2, r2, #32768
 7389 005a 5A64     		str	r2, [r3, #68]
 7390              	.L622:
1487:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7391              		.loc 1 1487 0 is_stmt 1
 7392 005c 2368     		ldr	r3, [r4]
 7393 005e 196A     		ldr	r1, [r3, #32]
 7394 0060 41F21112 		movw	r2, #4369
 7395 0064 1142     		tst	r1, r2
 7396 0066 08D1     		bne	.L623
1487:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7397              		.loc 1 1487 0 is_stmt 0 discriminator 1
 7398 0068 196A     		ldr	r1, [r3, #32]
 7399 006a 40F24442 		movw	r2, #1092
 7400 006e 1142     		tst	r1, r2
 7401 0070 03D1     		bne	.L623
1487:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7402              		.loc 1 1487 0 discriminator 2
 7403 0072 1A68     		ldr	r2, [r3]
 7404 0074 22F00102 		bic	r2, r2, #1
 7405 0078 1A60     		str	r2, [r3]
 7406              	.L623:
1491:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7407              		.loc 1 1491 0 is_stmt 1
 7408 007a 0020     		movs	r0, #0
 7409 007c 10BD     		pop	{r4, pc}
 7410              	.LVL770:
 7411              	.L618:
1455:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7412              		.loc 1 1455 0
 7413 007e 0268     		ldr	r2, [r0]
 7414 0080 D368     		ldr	r3, [r2, #12]
 7415 0082 23F00403 		bic	r3, r3, #4
 7416 0086 D360     		str	r3, [r2, #12]
1456:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7417              		.loc 1 1456 0
 7418 0088 CCE7     		b	.L615
 7419              	.L619:
1462:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7420              		.loc 1 1462 0
 7421 008a 0268     		ldr	r2, [r0]
 7422 008c D368     		ldr	r3, [r2, #12]
 7423 008e 23F00803 		bic	r3, r3, #8
 7424 0092 D360     		str	r3, [r2, #12]
1463:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7425              		.loc 1 1463 0
 7426 0094 C6E7     		b	.L615
 7427              	.L620:
1469:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7428              		.loc 1 1469 0
 7429 0096 0268     		ldr	r2, [r0]
 7430 0098 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccVHe0ZY.s 			page 263


 7431 009a 23F01003 		bic	r3, r3, #16
 7432 009e D360     		str	r3, [r2, #12]
1470:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7433              		.loc 1 1470 0
 7434 00a0 C0E7     		b	.L615
 7435              	.LVL771:
 7436              	.L627:
1480:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7437              		.loc 1 1480 0
 7438 00a2 0122     		movs	r2, #1
 7439 00a4 CBE7     		b	.L621
 7440              	.L624:
 7441 00a6 0122     		movs	r2, #1
 7442 00a8 C9E7     		b	.L621
 7443              	.L629:
 7444 00aa 00BF     		.align	2
 7445              	.L628:
 7446 00ac 00000140 		.word	1073807360
 7447              		.cfi_endproc
 7448              	.LFE146:
 7450              		.section	.text.HAL_TIM_PWM_Start_DMA,"ax",%progbits
 7451              		.align	1
 7452              		.global	HAL_TIM_PWM_Start_DMA
 7453              		.syntax unified
 7454              		.thumb
 7455              		.thumb_func
 7456              		.fpu fpv4-sp-d16
 7458              	HAL_TIM_PWM_Start_DMA:
 7459              	.LFB147:
1507:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 7460              		.loc 1 1507 0
 7461              		.cfi_startproc
 7462              		@ args = 0, pretend = 0, frame = 0
 7463              		@ frame_needed = 0, uses_anonymous_args = 0
 7464              	.LVL772:
 7465 0000 70B5     		push	{r4, r5, r6, lr}
 7466              	.LCFI90:
 7467              		.cfi_def_cfa_offset 16
 7468              		.cfi_offset 4, -16
 7469              		.cfi_offset 5, -12
 7470              		.cfi_offset 6, -8
 7471              		.cfi_offset 14, -4
1513:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7472              		.loc 1 1513 0
 7473 0002 90F83D50 		ldrb	r5, [r0, #61]	@ zero_extendqisi2
 7474 0006 EDB2     		uxtb	r5, r5
 7475 0008 022D     		cmp	r5, #2
 7476 000a 00F09880 		beq	.L642
1517:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7477              		.loc 1 1517 0
 7478 000e 90F83D60 		ldrb	r6, [r0, #61]	@ zero_extendqisi2
 7479 0012 F6B2     		uxtb	r6, r6
 7480 0014 012E     		cmp	r6, #1
 7481 0016 0DD0     		beq	.L652
 7482              	.L632:
 7483 0018 1646     		mov	r6, r2
 7484 001a 0D46     		mov	r5, r1
ARM GAS  /tmp/ccVHe0ZY.s 			page 264


 7485 001c 0446     		mov	r4, r0
1533:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7486              		.loc 1 1533 0
 7487 001e 0C29     		cmp	r1, #12
 7488 0020 27D8     		bhi	.L634
 7489 0022 DFE801F0 		tbb	[pc, r1]
 7490              	.LVL773:
 7491              	.L636:
 7492 0026 10       		.byte	(.L635-.L636)/2
 7493 0027 26       		.byte	(.L634-.L636)/2
 7494 0028 26       		.byte	(.L634-.L636)/2
 7495 0029 26       		.byte	(.L634-.L636)/2
 7496 002a 45       		.byte	(.L637-.L636)/2
 7497 002b 26       		.byte	(.L634-.L636)/2
 7498 002c 26       		.byte	(.L634-.L636)/2
 7499 002d 26       		.byte	(.L634-.L636)/2
 7500 002e 5C       		.byte	(.L638-.L636)/2
 7501 002f 26       		.byte	(.L634-.L636)/2
 7502 0030 26       		.byte	(.L634-.L636)/2
 7503 0031 26       		.byte	(.L634-.L636)/2
 7504 0032 72       		.byte	(.L639-.L636)/2
 7505 0033 00       		.p2align 1
 7506              	.L652:
1519:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 7507              		.loc 1 1519 0
 7508 0034 1AB1     		cbz	r2, .L653
 7509              	.L633:
1525:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7510              		.loc 1 1525 0
 7511 0036 0224     		movs	r4, #2
 7512 0038 80F83D40 		strb	r4, [r0, #61]
 7513 003c ECE7     		b	.L632
 7514              	.L653:
1519:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 7515              		.loc 1 1519 0 discriminator 1
 7516 003e 002B     		cmp	r3, #0
 7517 0040 F9D0     		beq	.L633
1521:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7518              		.loc 1 1521 0
 7519 0042 0120     		movs	r0, #1
 7520              	.LVL774:
 7521 0044 70BD     		pop	{r4, r5, r6, pc}
 7522              	.LVL775:
 7523              	.L635:
1538:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 7524              		.loc 1 1538 0
 7525 0046 426A     		ldr	r2, [r0, #36]
 7526 0048 4349     		ldr	r1, .L655
 7527              	.LVL776:
 7528 004a D163     		str	r1, [r2, #60]
1539:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7529              		.loc 1 1539 0
 7530 004c 426A     		ldr	r2, [r0, #36]
 7531 004e 4349     		ldr	r1, .L655+4
 7532 0050 1164     		str	r1, [r2, #64]
1542:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7533              		.loc 1 1542 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 265


 7534 0052 426A     		ldr	r2, [r0, #36]
 7535 0054 4249     		ldr	r1, .L655+8
 7536 0056 D164     		str	r1, [r2, #76]
1545:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 7537              		.loc 1 1545 0
 7538 0058 0268     		ldr	r2, [r0]
 7539 005a 3432     		adds	r2, r2, #52
 7540 005c 3146     		mov	r1, r6
 7541 005e 406A     		ldr	r0, [r0, #36]
 7542              	.LVL777:
 7543 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 7544              	.LVL778:
 7545 0064 0028     		cmp	r0, #0
 7546 0066 6CD1     		bne	.L644
1551:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7547              		.loc 1 1551 0
 7548 0068 2268     		ldr	r2, [r4]
 7549 006a D368     		ldr	r3, [r2, #12]
 7550 006c 43F40073 		orr	r3, r3, #512
 7551 0070 D360     		str	r3, [r2, #12]
 7552              	.L634:
1617:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7553              		.loc 1 1617 0
 7554 0072 0122     		movs	r2, #1
 7555 0074 2946     		mov	r1, r5
 7556 0076 2068     		ldr	r0, [r4]
 7557 0078 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7558              	.LVL779:
1619:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7559              		.loc 1 1619 0
 7560 007c 2368     		ldr	r3, [r4]
 7561 007e 394A     		ldr	r2, .L655+12
 7562 0080 9342     		cmp	r3, r2
 7563 0082 5AD0     		beq	.L648
1619:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7564              		.loc 1 1619 0 is_stmt 0 discriminator 2
 7565 0084 02F58062 		add	r2, r2, #1024
 7566 0088 9342     		cmp	r3, r2
 7567 008a 54D0     		beq	.L654
1619:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7568              		.loc 1 1619 0
 7569 008c 0022     		movs	r2, #0
 7570              	.L640:
1619:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7571              		.loc 1 1619 0 discriminator 6
 7572 008e 1AB1     		cbz	r2, .L641
1622:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7573              		.loc 1 1622 0 is_stmt 1
 7574 0090 5A6C     		ldr	r2, [r3, #68]
 7575 0092 42F40042 		orr	r2, r2, #32768
 7576 0096 5A64     		str	r2, [r3, #68]
 7577              	.L641:
1626:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 7578              		.loc 1 1626 0
 7579 0098 2268     		ldr	r2, [r4]
 7580 009a 9368     		ldr	r3, [r2, #8]
 7581 009c 03F00703 		and	r3, r3, #7
ARM GAS  /tmp/ccVHe0ZY.s 			page 266


 7582              	.LVL780:
1627:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7583              		.loc 1 1627 0
 7584 00a0 062B     		cmp	r3, #6
 7585 00a2 56D0     		beq	.L650
1629:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7586              		.loc 1 1629 0
 7587 00a4 1368     		ldr	r3, [r2]
 7588              	.LVL781:
 7589 00a6 43F00103 		orr	r3, r3, #1
 7590 00aa 1360     		str	r3, [r2]
1633:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 7591              		.loc 1 1633 0
 7592 00ac 0020     		movs	r0, #0
 7593 00ae 70BD     		pop	{r4, r5, r6, pc}
 7594              	.LVL782:
 7595              	.L637:
1558:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 7596              		.loc 1 1558 0
 7597 00b0 826A     		ldr	r2, [r0, #40]
 7598 00b2 2949     		ldr	r1, .L655
 7599              	.LVL783:
 7600 00b4 D163     		str	r1, [r2, #60]
1559:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7601              		.loc 1 1559 0
 7602 00b6 826A     		ldr	r2, [r0, #40]
 7603 00b8 2849     		ldr	r1, .L655+4
 7604 00ba 1164     		str	r1, [r2, #64]
1562:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7605              		.loc 1 1562 0
 7606 00bc 826A     		ldr	r2, [r0, #40]
 7607 00be 2849     		ldr	r1, .L655+8
 7608 00c0 D164     		str	r1, [r2, #76]
1565:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 7609              		.loc 1 1565 0
 7610 00c2 0268     		ldr	r2, [r0]
 7611 00c4 3832     		adds	r2, r2, #56
 7612 00c6 3146     		mov	r1, r6
 7613 00c8 806A     		ldr	r0, [r0, #40]
 7614              	.LVL784:
 7615 00ca FFF7FEFF 		bl	HAL_DMA_Start_IT
 7616              	.LVL785:
 7617 00ce 0028     		cmp	r0, #0
 7618 00d0 39D1     		bne	.L645
1570:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7619              		.loc 1 1570 0
 7620 00d2 2268     		ldr	r2, [r4]
 7621 00d4 D368     		ldr	r3, [r2, #12]
 7622 00d6 43F48063 		orr	r3, r3, #1024
 7623 00da D360     		str	r3, [r2, #12]
1571:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7624              		.loc 1 1571 0
 7625 00dc C9E7     		b	.L634
 7626              	.LVL786:
 7627              	.L638:
1577:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 7628              		.loc 1 1577 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 267


 7629 00de C26A     		ldr	r2, [r0, #44]
 7630 00e0 1D49     		ldr	r1, .L655
 7631              	.LVL787:
 7632 00e2 D163     		str	r1, [r2, #60]
1578:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7633              		.loc 1 1578 0
 7634 00e4 C26A     		ldr	r2, [r0, #44]
 7635 00e6 1D49     		ldr	r1, .L655+4
 7636 00e8 1164     		str	r1, [r2, #64]
1581:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7637              		.loc 1 1581 0
 7638 00ea C26A     		ldr	r2, [r0, #44]
 7639 00ec 1C49     		ldr	r1, .L655+8
 7640 00ee D164     		str	r1, [r2, #76]
1584:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 7641              		.loc 1 1584 0
 7642 00f0 0268     		ldr	r2, [r0]
 7643 00f2 3C32     		adds	r2, r2, #60
 7644 00f4 3146     		mov	r1, r6
 7645 00f6 C06A     		ldr	r0, [r0, #44]
 7646              	.LVL788:
 7647 00f8 FFF7FEFF 		bl	HAL_DMA_Start_IT
 7648              	.LVL789:
 7649 00fc 28BB     		cbnz	r0, .L646
1589:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7650              		.loc 1 1589 0
 7651 00fe 2268     		ldr	r2, [r4]
 7652 0100 D368     		ldr	r3, [r2, #12]
 7653 0102 43F40063 		orr	r3, r3, #2048
 7654 0106 D360     		str	r3, [r2, #12]
1590:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7655              		.loc 1 1590 0
 7656 0108 B3E7     		b	.L634
 7657              	.LVL790:
 7658              	.L639:
1596:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 7659              		.loc 1 1596 0
 7660 010a 026B     		ldr	r2, [r0, #48]
 7661 010c 1249     		ldr	r1, .L655
 7662              	.LVL791:
 7663 010e D163     		str	r1, [r2, #60]
1597:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7664              		.loc 1 1597 0
 7665 0110 026B     		ldr	r2, [r0, #48]
 7666 0112 1249     		ldr	r1, .L655+4
 7667 0114 1164     		str	r1, [r2, #64]
1600:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7668              		.loc 1 1600 0
 7669 0116 026B     		ldr	r2, [r0, #48]
 7670 0118 1149     		ldr	r1, .L655+8
 7671 011a D164     		str	r1, [r2, #76]
1603:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 7672              		.loc 1 1603 0
 7673 011c 0268     		ldr	r2, [r0]
 7674 011e 4032     		adds	r2, r2, #64
 7675 0120 3146     		mov	r1, r6
 7676 0122 006B     		ldr	r0, [r0, #48]
ARM GAS  /tmp/ccVHe0ZY.s 			page 268


 7677              	.LVL792:
 7678 0124 FFF7FEFF 		bl	HAL_DMA_Start_IT
 7679              	.LVL793:
 7680 0128 88B9     		cbnz	r0, .L647
1608:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7681              		.loc 1 1608 0
 7682 012a 2268     		ldr	r2, [r4]
 7683 012c D368     		ldr	r3, [r2, #12]
 7684 012e 43F48053 		orr	r3, r3, #4096
 7685 0132 D360     		str	r3, [r2, #12]
1609:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7686              		.loc 1 1609 0
 7687 0134 9DE7     		b	.L634
 7688              	.L654:
1619:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7689              		.loc 1 1619 0
 7690 0136 0122     		movs	r2, #1
 7691 0138 A9E7     		b	.L640
 7692              	.L648:
 7693 013a 0122     		movs	r2, #1
 7694 013c A7E7     		b	.L640
 7695              	.LVL794:
 7696              	.L642:
1515:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7697              		.loc 1 1515 0
 7698 013e 0220     		movs	r0, #2
 7699              	.LVL795:
 7700 0140 70BD     		pop	{r4, r5, r6, pc}
 7701              	.LVL796:
 7702              	.L644:
1547:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 7703              		.loc 1 1547 0
 7704 0142 0120     		movs	r0, #1
 7705 0144 70BD     		pop	{r4, r5, r6, pc}
 7706              	.LVL797:
 7707              	.L645:
1567:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 7708              		.loc 1 1567 0
 7709 0146 0120     		movs	r0, #1
 7710 0148 70BD     		pop	{r4, r5, r6, pc}
 7711              	.LVL798:
 7712              	.L646:
1586:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 7713              		.loc 1 1586 0
 7714 014a 0120     		movs	r0, #1
 7715 014c 70BD     		pop	{r4, r5, r6, pc}
 7716              	.LVL799:
 7717              	.L647:
1605:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 7718              		.loc 1 1605 0
 7719 014e 0120     		movs	r0, #1
 7720 0150 70BD     		pop	{r4, r5, r6, pc}
 7721              	.LVL800:
 7722              	.L650:
1633:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 7723              		.loc 1 1633 0
 7724 0152 0020     		movs	r0, #0
ARM GAS  /tmp/ccVHe0ZY.s 			page 269


1634:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7725              		.loc 1 1634 0
 7726 0154 70BD     		pop	{r4, r5, r6, pc}
 7727              	.LVL801:
 7728              	.L656:
 7729 0156 00BF     		.align	2
 7730              	.L655:
 7731 0158 00000000 		.word	TIM_DMADelayPulseCplt
 7732 015c 00000000 		.word	TIM_DMADelayPulseHalfCplt
 7733 0160 00000000 		.word	TIM_DMAError
 7734 0164 00000140 		.word	1073807360
 7735              		.cfi_endproc
 7736              	.LFE147:
 7738              		.section	.text.HAL_TIM_PWM_Stop_DMA,"ax",%progbits
 7739              		.align	1
 7740              		.global	HAL_TIM_PWM_Stop_DMA
 7741              		.syntax unified
 7742              		.thumb
 7743              		.thumb_func
 7744              		.fpu fpv4-sp-d16
 7746              	HAL_TIM_PWM_Stop_DMA:
 7747              	.LFB148:
1648:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 7748              		.loc 1 1648 0
 7749              		.cfi_startproc
 7750              		@ args = 0, pretend = 0, frame = 0
 7751              		@ frame_needed = 0, uses_anonymous_args = 0
 7752              	.LVL802:
 7753 0000 38B5     		push	{r3, r4, r5, lr}
 7754              	.LCFI91:
 7755              		.cfi_def_cfa_offset 16
 7756              		.cfi_offset 3, -16
 7757              		.cfi_offset 4, -12
 7758              		.cfi_offset 5, -8
 7759              		.cfi_offset 14, -4
 7760 0002 0446     		mov	r4, r0
 7761 0004 0D46     		mov	r5, r1
1652:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7762              		.loc 1 1652 0
 7763 0006 0C29     		cmp	r1, #12
 7764 0008 10D8     		bhi	.L658
 7765 000a DFE801F0 		tbb	[pc, r1]
 7766              	.L660:
 7767 000e 07       		.byte	(.L659-.L660)/2
 7768 000f 0F       		.byte	(.L658-.L660)/2
 7769 0010 0F       		.byte	(.L658-.L660)/2
 7770 0011 0F       		.byte	(.L658-.L660)/2
 7771 0012 40       		.byte	(.L661-.L660)/2
 7772 0013 0F       		.byte	(.L658-.L660)/2
 7773 0014 0F       		.byte	(.L658-.L660)/2
 7774 0015 0F       		.byte	(.L658-.L660)/2
 7775 0016 49       		.byte	(.L662-.L660)/2
 7776 0017 0F       		.byte	(.L658-.L660)/2
 7777 0018 0F       		.byte	(.L658-.L660)/2
 7778 0019 0F       		.byte	(.L658-.L660)/2
 7779 001a 52       		.byte	(.L663-.L660)/2
 7780 001b 00       		.p2align 1
ARM GAS  /tmp/ccVHe0ZY.s 			page 270


 7781              	.L659:
1657:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 7782              		.loc 1 1657 0
 7783 001c 0268     		ldr	r2, [r0]
 7784 001e D368     		ldr	r3, [r2, #12]
 7785 0020 23F40073 		bic	r3, r3, #512
 7786 0024 D360     		str	r3, [r2, #12]
1658:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7787              		.loc 1 1658 0
 7788 0026 406A     		ldr	r0, [r0, #36]
 7789              	.LVL803:
 7790 0028 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 7791              	.LVL804:
 7792              	.L658:
1691:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7793              		.loc 1 1691 0
 7794 002c 0022     		movs	r2, #0
 7795 002e 2946     		mov	r1, r5
 7796 0030 2068     		ldr	r0, [r4]
 7797 0032 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7798              	.LVL805:
1693:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7799              		.loc 1 1693 0
 7800 0036 2368     		ldr	r3, [r4]
 7801 0038 244A     		ldr	r2, .L671
 7802 003a 9342     		cmp	r3, r2
 7803 003c 44D0     		beq	.L667
1693:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7804              		.loc 1 1693 0 is_stmt 0 discriminator 2
 7805 003e 02F58062 		add	r2, r2, #1024
 7806 0042 9342     		cmp	r3, r2
 7807 0044 3ED0     		beq	.L670
1693:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7808              		.loc 1 1693 0
 7809 0046 0022     		movs	r2, #0
 7810              	.L664:
1693:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7811              		.loc 1 1693 0 discriminator 6
 7812 0048 6AB1     		cbz	r2, .L665
1696:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7813              		.loc 1 1696 0 is_stmt 1
 7814 004a 196A     		ldr	r1, [r3, #32]
 7815 004c 41F21112 		movw	r2, #4369
 7816 0050 1142     		tst	r1, r2
 7817 0052 08D1     		bne	.L665
1696:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7818              		.loc 1 1696 0 is_stmt 0 discriminator 1
 7819 0054 196A     		ldr	r1, [r3, #32]
 7820 0056 40F24442 		movw	r2, #1092
 7821 005a 1142     		tst	r1, r2
 7822 005c 03D1     		bne	.L665
1696:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7823              		.loc 1 1696 0 discriminator 2
 7824 005e 5A6C     		ldr	r2, [r3, #68]
 7825 0060 22F40042 		bic	r2, r2, #32768
 7826 0064 5A64     		str	r2, [r3, #68]
 7827              	.L665:
ARM GAS  /tmp/ccVHe0ZY.s 			page 271


1700:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7828              		.loc 1 1700 0 is_stmt 1
 7829 0066 2368     		ldr	r3, [r4]
 7830 0068 196A     		ldr	r1, [r3, #32]
 7831 006a 41F21112 		movw	r2, #4369
 7832 006e 1142     		tst	r1, r2
 7833 0070 08D1     		bne	.L666
1700:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7834              		.loc 1 1700 0 is_stmt 0 discriminator 1
 7835 0072 196A     		ldr	r1, [r3, #32]
 7836 0074 40F24442 		movw	r2, #1092
 7837 0078 1142     		tst	r1, r2
 7838 007a 03D1     		bne	.L666
1700:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7839              		.loc 1 1700 0 discriminator 2
 7840 007c 1A68     		ldr	r2, [r3]
 7841 007e 22F00102 		bic	r2, r2, #1
 7842 0082 1A60     		str	r2, [r3]
 7843              	.L666:
1703:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7844              		.loc 1 1703 0 is_stmt 1
 7845 0084 0123     		movs	r3, #1
 7846 0086 84F83D30 		strb	r3, [r4, #61]
1707:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7847              		.loc 1 1707 0
 7848 008a 0020     		movs	r0, #0
 7849 008c 38BD     		pop	{r3, r4, r5, pc}
 7850              	.LVL806:
 7851              	.L661:
1665:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 7852              		.loc 1 1665 0
 7853 008e 0268     		ldr	r2, [r0]
 7854 0090 D368     		ldr	r3, [r2, #12]
 7855 0092 23F48063 		bic	r3, r3, #1024
 7856 0096 D360     		str	r3, [r2, #12]
1666:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7857              		.loc 1 1666 0
 7858 0098 806A     		ldr	r0, [r0, #40]
 7859              	.LVL807:
 7860 009a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 7861              	.LVL808:
1667:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7862              		.loc 1 1667 0
 7863 009e C5E7     		b	.L658
 7864              	.LVL809:
 7865              	.L662:
1673:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 7866              		.loc 1 1673 0
 7867 00a0 0268     		ldr	r2, [r0]
 7868 00a2 D368     		ldr	r3, [r2, #12]
 7869 00a4 23F40063 		bic	r3, r3, #2048
 7870 00a8 D360     		str	r3, [r2, #12]
1674:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7871              		.loc 1 1674 0
 7872 00aa C06A     		ldr	r0, [r0, #44]
 7873              	.LVL810:
 7874 00ac FFF7FEFF 		bl	HAL_DMA_Abort_IT
ARM GAS  /tmp/ccVHe0ZY.s 			page 272


 7875              	.LVL811:
1675:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7876              		.loc 1 1675 0
 7877 00b0 BCE7     		b	.L658
 7878              	.LVL812:
 7879              	.L663:
1681:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 7880              		.loc 1 1681 0
 7881 00b2 0268     		ldr	r2, [r0]
 7882 00b4 D368     		ldr	r3, [r2, #12]
 7883 00b6 23F48053 		bic	r3, r3, #4096
 7884 00ba D360     		str	r3, [r2, #12]
1682:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 7885              		.loc 1 1682 0
 7886 00bc 006B     		ldr	r0, [r0, #48]
 7887              	.LVL813:
 7888 00be FFF7FEFF 		bl	HAL_DMA_Abort_IT
 7889              	.LVL814:
1683:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 7890              		.loc 1 1683 0
 7891 00c2 B3E7     		b	.L658
 7892              	.L670:
1693:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7893              		.loc 1 1693 0
 7894 00c4 0122     		movs	r2, #1
 7895 00c6 BFE7     		b	.L664
 7896              	.L667:
 7897 00c8 0122     		movs	r2, #1
 7898 00ca BDE7     		b	.L664
 7899              	.L672:
 7900              		.align	2
 7901              	.L671:
 7902 00cc 00000140 		.word	1073807360
 7903              		.cfi_endproc
 7904              	.LFE148:
 7906              		.section	.text.HAL_TIM_IC_Start,"ax",%progbits
 7907              		.align	1
 7908              		.global	HAL_TIM_IC_Start
 7909              		.syntax unified
 7910              		.thumb
 7911              		.thumb_func
 7912              		.fpu fpv4-sp-d16
 7914              	HAL_TIM_IC_Start:
 7915              	.LFB153:
1869:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 7916              		.loc 1 1869 0
 7917              		.cfi_startproc
 7918              		@ args = 0, pretend = 0, frame = 0
 7919              		@ frame_needed = 0, uses_anonymous_args = 0
 7920              	.LVL815:
 7921 0000 10B5     		push	{r4, lr}
 7922              	.LCFI92:
 7923              		.cfi_def_cfa_offset 8
 7924              		.cfi_offset 4, -8
 7925              		.cfi_offset 14, -4
 7926 0002 0446     		mov	r4, r0
1876:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 273


 7927              		.loc 1 1876 0
 7928 0004 0122     		movs	r2, #1
 7929 0006 0068     		ldr	r0, [r0]
 7930              	.LVL816:
 7931 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7932              	.LVL817:
1879:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 7933              		.loc 1 1879 0
 7934 000c 2268     		ldr	r2, [r4]
 7935 000e 9368     		ldr	r3, [r2, #8]
 7936 0010 03F00703 		and	r3, r3, #7
 7937              	.LVL818:
1880:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 7938              		.loc 1 1880 0
 7939 0014 062B     		cmp	r3, #6
 7940 0016 03D0     		beq	.L674
1882:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 7941              		.loc 1 1882 0
 7942 0018 1368     		ldr	r3, [r2]
 7943              	.LVL819:
 7944 001a 43F00103 		orr	r3, r3, #1
 7945 001e 1360     		str	r3, [r2]
 7946              	.L674:
1887:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7947              		.loc 1 1887 0
 7948 0020 0020     		movs	r0, #0
 7949 0022 10BD     		pop	{r4, pc}
 7950              		.cfi_endproc
 7951              	.LFE153:
 7953              		.section	.text.HAL_TIM_IC_Stop,"ax",%progbits
 7954              		.align	1
 7955              		.global	HAL_TIM_IC_Stop
 7956              		.syntax unified
 7957              		.thumb
 7958              		.thumb_func
 7959              		.fpu fpv4-sp-d16
 7961              	HAL_TIM_IC_Stop:
 7962              	.LFB154:
1901:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 7963              		.loc 1 1901 0
 7964              		.cfi_startproc
 7965              		@ args = 0, pretend = 0, frame = 0
 7966              		@ frame_needed = 0, uses_anonymous_args = 0
 7967              	.LVL820:
 7968 0000 10B5     		push	{r4, lr}
 7969              	.LCFI93:
 7970              		.cfi_def_cfa_offset 8
 7971              		.cfi_offset 4, -8
 7972              		.cfi_offset 14, -4
 7973 0002 0446     		mov	r4, r0
1906:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7974              		.loc 1 1906 0
 7975 0004 0022     		movs	r2, #0
 7976 0006 0068     		ldr	r0, [r0]
 7977              	.LVL821:
 7978 0008 FFF7FEFF 		bl	TIM_CCxChannelCmd
 7979              	.LVL822:
ARM GAS  /tmp/ccVHe0ZY.s 			page 274


1909:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7980              		.loc 1 1909 0
 7981 000c 2368     		ldr	r3, [r4]
 7982 000e 196A     		ldr	r1, [r3, #32]
 7983 0010 41F21112 		movw	r2, #4369
 7984 0014 1142     		tst	r1, r2
 7985 0016 08D1     		bne	.L677
1909:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7986              		.loc 1 1909 0 is_stmt 0 discriminator 1
 7987 0018 196A     		ldr	r1, [r3, #32]
 7988 001a 40F24442 		movw	r2, #1092
 7989 001e 1142     		tst	r1, r2
 7990 0020 03D1     		bne	.L677
1909:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7991              		.loc 1 1909 0 discriminator 2
 7992 0022 1A68     		ldr	r2, [r3]
 7993 0024 22F00102 		bic	r2, r2, #1
 7994 0028 1A60     		str	r2, [r3]
 7995              	.L677:
1913:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 7996              		.loc 1 1913 0 is_stmt 1
 7997 002a 0020     		movs	r0, #0
 7998 002c 10BD     		pop	{r4, pc}
 7999              		.cfi_endproc
 8000              	.LFE154:
 8002              		.section	.text.HAL_TIM_IC_Start_IT,"ax",%progbits
 8003              		.align	1
 8004              		.global	HAL_TIM_IC_Start_IT
 8005              		.syntax unified
 8006              		.thumb
 8007              		.thumb_func
 8008              		.fpu fpv4-sp-d16
 8010              	HAL_TIM_IC_Start_IT:
 8011              	.LFB155:
1927:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 8012              		.loc 1 1927 0
 8013              		.cfi_startproc
 8014              		@ args = 0, pretend = 0, frame = 0
 8015              		@ frame_needed = 0, uses_anonymous_args = 0
 8016              	.LVL823:
 8017 0000 10B5     		push	{r4, lr}
 8018              	.LCFI94:
 8019              		.cfi_def_cfa_offset 8
 8020              		.cfi_offset 4, -8
 8021              		.cfi_offset 14, -4
 8022 0002 0446     		mov	r4, r0
1933:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8023              		.loc 1 1933 0
 8024 0004 0C29     		cmp	r1, #12
 8025 0006 0DD8     		bhi	.L680
 8026 0008 DFE801F0 		tbb	[pc, r1]
 8027              	.L682:
 8028 000c 07       		.byte	(.L681-.L682)/2
 8029 000d 0C       		.byte	(.L680-.L682)/2
 8030 000e 0C       		.byte	(.L680-.L682)/2
 8031 000f 0C       		.byte	(.L680-.L682)/2
 8032 0010 1C       		.byte	(.L683-.L682)/2
ARM GAS  /tmp/ccVHe0ZY.s 			page 275


 8033 0011 0C       		.byte	(.L680-.L682)/2
 8034 0012 0C       		.byte	(.L680-.L682)/2
 8035 0013 0C       		.byte	(.L680-.L682)/2
 8036 0014 22       		.byte	(.L684-.L682)/2
 8037 0015 0C       		.byte	(.L680-.L682)/2
 8038 0016 0C       		.byte	(.L680-.L682)/2
 8039 0017 0C       		.byte	(.L680-.L682)/2
 8040 0018 28       		.byte	(.L685-.L682)/2
 8041 0019 00       		.p2align 1
 8042              	.L681:
1938:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8043              		.loc 1 1938 0
 8044 001a 0268     		ldr	r2, [r0]
 8045 001c D368     		ldr	r3, [r2, #12]
 8046 001e 43F00203 		orr	r3, r3, #2
 8047 0022 D360     		str	r3, [r2, #12]
 8048              	.L680:
1967:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8049              		.loc 1 1967 0
 8050 0024 0122     		movs	r2, #1
 8051 0026 2068     		ldr	r0, [r4]
 8052              	.LVL824:
 8053 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8054              	.LVL825:
1970:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8055              		.loc 1 1970 0
 8056 002c 2268     		ldr	r2, [r4]
 8057 002e 9368     		ldr	r3, [r2, #8]
 8058 0030 03F00703 		and	r3, r3, #7
 8059              	.LVL826:
1971:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8060              		.loc 1 1971 0
 8061 0034 062B     		cmp	r3, #6
 8062 0036 03D0     		beq	.L686
1973:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8063              		.loc 1 1973 0
 8064 0038 1368     		ldr	r3, [r2]
 8065              	.LVL827:
 8066 003a 43F00103 		orr	r3, r3, #1
 8067 003e 1360     		str	r3, [r2]
 8068              	.L686:
1978:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8069              		.loc 1 1978 0
 8070 0040 0020     		movs	r0, #0
 8071 0042 10BD     		pop	{r4, pc}
 8072              	.LVL828:
 8073              	.L683:
1945:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8074              		.loc 1 1945 0
 8075 0044 0268     		ldr	r2, [r0]
 8076 0046 D368     		ldr	r3, [r2, #12]
 8077 0048 43F00403 		orr	r3, r3, #4
 8078 004c D360     		str	r3, [r2, #12]
1946:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8079              		.loc 1 1946 0
 8080 004e E9E7     		b	.L680
 8081              	.L684:
ARM GAS  /tmp/ccVHe0ZY.s 			page 276


1952:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8082              		.loc 1 1952 0
 8083 0050 0268     		ldr	r2, [r0]
 8084 0052 D368     		ldr	r3, [r2, #12]
 8085 0054 43F00803 		orr	r3, r3, #8
 8086 0058 D360     		str	r3, [r2, #12]
1953:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8087              		.loc 1 1953 0
 8088 005a E3E7     		b	.L680
 8089              	.L685:
1959:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8090              		.loc 1 1959 0
 8091 005c 0268     		ldr	r2, [r0]
 8092 005e D368     		ldr	r3, [r2, #12]
 8093 0060 43F01003 		orr	r3, r3, #16
 8094 0064 D360     		str	r3, [r2, #12]
1960:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8095              		.loc 1 1960 0
 8096 0066 DDE7     		b	.L680
 8097              		.cfi_endproc
 8098              	.LFE155:
 8100              		.section	.text.HAL_TIM_IC_Stop_IT,"ax",%progbits
 8101              		.align	1
 8102              		.global	HAL_TIM_IC_Stop_IT
 8103              		.syntax unified
 8104              		.thumb
 8105              		.thumb_func
 8106              		.fpu fpv4-sp-d16
 8108              	HAL_TIM_IC_Stop_IT:
 8109              	.LFB156:
1992:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 8110              		.loc 1 1992 0
 8111              		.cfi_startproc
 8112              		@ args = 0, pretend = 0, frame = 0
 8113              		@ frame_needed = 0, uses_anonymous_args = 0
 8114              	.LVL829:
 8115 0000 10B5     		push	{r4, lr}
 8116              	.LCFI95:
 8117              		.cfi_def_cfa_offset 8
 8118              		.cfi_offset 4, -8
 8119              		.cfi_offset 14, -4
 8120 0002 0446     		mov	r4, r0
1996:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8121              		.loc 1 1996 0
 8122 0004 0C29     		cmp	r1, #12
 8123 0006 0DD8     		bhi	.L689
 8124 0008 DFE801F0 		tbb	[pc, r1]
 8125              	.L691:
 8126 000c 07       		.byte	(.L690-.L691)/2
 8127 000d 0C       		.byte	(.L689-.L691)/2
 8128 000e 0C       		.byte	(.L689-.L691)/2
 8129 000f 0C       		.byte	(.L689-.L691)/2
 8130 0010 21       		.byte	(.L692-.L691)/2
 8131 0011 0C       		.byte	(.L689-.L691)/2
 8132 0012 0C       		.byte	(.L689-.L691)/2
 8133 0013 0C       		.byte	(.L689-.L691)/2
 8134 0014 27       		.byte	(.L693-.L691)/2
ARM GAS  /tmp/ccVHe0ZY.s 			page 277


 8135 0015 0C       		.byte	(.L689-.L691)/2
 8136 0016 0C       		.byte	(.L689-.L691)/2
 8137 0017 0C       		.byte	(.L689-.L691)/2
 8138 0018 2D       		.byte	(.L694-.L691)/2
 8139 0019 00       		.p2align 1
 8140              	.L690:
2001:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8141              		.loc 1 2001 0
 8142 001a 0268     		ldr	r2, [r0]
 8143 001c D368     		ldr	r3, [r2, #12]
 8144 001e 23F00203 		bic	r3, r3, #2
 8145 0022 D360     		str	r3, [r2, #12]
 8146              	.L689:
2031:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8147              		.loc 1 2031 0
 8148 0024 0022     		movs	r2, #0
 8149 0026 2068     		ldr	r0, [r4]
 8150              	.LVL830:
 8151 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8152              	.LVL831:
2034:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8153              		.loc 1 2034 0
 8154 002c 2368     		ldr	r3, [r4]
 8155 002e 196A     		ldr	r1, [r3, #32]
 8156 0030 41F21112 		movw	r2, #4369
 8157 0034 1142     		tst	r1, r2
 8158 0036 08D1     		bne	.L695
2034:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8159              		.loc 1 2034 0 is_stmt 0 discriminator 1
 8160 0038 196A     		ldr	r1, [r3, #32]
 8161 003a 40F24442 		movw	r2, #1092
 8162 003e 1142     		tst	r1, r2
 8163 0040 03D1     		bne	.L695
2034:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8164              		.loc 1 2034 0 discriminator 2
 8165 0042 1A68     		ldr	r2, [r3]
 8166 0044 22F00102 		bic	r2, r2, #1
 8167 0048 1A60     		str	r2, [r3]
 8168              	.L695:
2038:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8169              		.loc 1 2038 0 is_stmt 1
 8170 004a 0020     		movs	r0, #0
 8171 004c 10BD     		pop	{r4, pc}
 8172              	.LVL832:
 8173              	.L692:
2008:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8174              		.loc 1 2008 0
 8175 004e 0268     		ldr	r2, [r0]
 8176 0050 D368     		ldr	r3, [r2, #12]
 8177 0052 23F00403 		bic	r3, r3, #4
 8178 0056 D360     		str	r3, [r2, #12]
2009:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8179              		.loc 1 2009 0
 8180 0058 E4E7     		b	.L689
 8181              	.L693:
2015:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8182              		.loc 1 2015 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 278


 8183 005a 0268     		ldr	r2, [r0]
 8184 005c D368     		ldr	r3, [r2, #12]
 8185 005e 23F00803 		bic	r3, r3, #8
 8186 0062 D360     		str	r3, [r2, #12]
2016:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8187              		.loc 1 2016 0
 8188 0064 DEE7     		b	.L689
 8189              	.L694:
2022:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8190              		.loc 1 2022 0
 8191 0066 0268     		ldr	r2, [r0]
 8192 0068 D368     		ldr	r3, [r2, #12]
 8193 006a 23F01003 		bic	r3, r3, #16
 8194 006e D360     		str	r3, [r2, #12]
2023:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8195              		.loc 1 2023 0
 8196 0070 D8E7     		b	.L689
 8197              		.cfi_endproc
 8198              	.LFE156:
 8200              		.section	.text.HAL_TIM_IC_Start_DMA,"ax",%progbits
 8201              		.align	1
 8202              		.global	HAL_TIM_IC_Start_DMA
 8203              		.syntax unified
 8204              		.thumb
 8205              		.thumb_func
 8206              		.fpu fpv4-sp-d16
 8208              	HAL_TIM_IC_Start_DMA:
 8209              	.LFB157:
2054:HALLIB/Src/stm32f4xx_hal_tim.c ****   uint32_t tmpsmcr;
 8210              		.loc 1 2054 0
 8211              		.cfi_startproc
 8212              		@ args = 0, pretend = 0, frame = 0
 8213              		@ frame_needed = 0, uses_anonymous_args = 0
 8214              	.LVL833:
 8215 0000 38B5     		push	{r3, r4, r5, lr}
 8216              	.LCFI96:
 8217              		.cfi_def_cfa_offset 16
 8218              		.cfi_offset 3, -16
 8219              		.cfi_offset 4, -12
 8220              		.cfi_offset 5, -8
 8221              		.cfi_offset 14, -4
2061:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8222              		.loc 1 2061 0
 8223 0002 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 8224 0006 E4B2     		uxtb	r4, r4
 8225 0008 022C     		cmp	r4, #2
 8226 000a 00F08180 		beq	.L707
2065:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8227              		.loc 1 2065 0
 8228 000e 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 8229 0012 E4B2     		uxtb	r4, r4
 8230 0014 012C     		cmp	r4, #1
 8231 0016 0CD0     		beq	.L715
 8232              	.L699:
 8233 0018 0D46     		mov	r5, r1
 8234 001a 0446     		mov	r4, r0
2081:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
ARM GAS  /tmp/ccVHe0ZY.s 			page 279


 8235              		.loc 1 2081 0
 8236 001c 0C2D     		cmp	r5, #12
 8237 001e 26D8     		bhi	.L701
 8238 0020 DFE805F0 		tbb	[pc, r5]
 8239              	.LVL834:
 8240              	.L703:
 8241 0024 10       		.byte	(.L702-.L703)/2
 8242 0025 25       		.byte	(.L701-.L703)/2
 8243 0026 25       		.byte	(.L701-.L703)/2
 8244 0027 25       		.byte	(.L701-.L703)/2
 8245 0028 36       		.byte	(.L704-.L703)/2
 8246 0029 25       		.byte	(.L701-.L703)/2
 8247 002a 25       		.byte	(.L701-.L703)/2
 8248 002b 25       		.byte	(.L701-.L703)/2
 8249 002c 4C       		.byte	(.L705-.L703)/2
 8250 002d 25       		.byte	(.L701-.L703)/2
 8251 002e 25       		.byte	(.L701-.L703)/2
 8252 002f 25       		.byte	(.L701-.L703)/2
 8253 0030 61       		.byte	(.L706-.L703)/2
 8254 0031 00       		.p2align 1
 8255              	.L715:
2067:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 8256              		.loc 1 2067 0
 8257 0032 1AB1     		cbz	r2, .L716
 8258              	.L700:
2073:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8259              		.loc 1 2073 0
 8260 0034 0224     		movs	r4, #2
 8261 0036 80F83D40 		strb	r4, [r0, #61]
 8262 003a EDE7     		b	.L699
 8263              	.L716:
2067:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 8264              		.loc 1 2067 0 discriminator 1
 8265 003c 002B     		cmp	r3, #0
 8266 003e F9D0     		beq	.L700
2069:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8267              		.loc 1 2069 0
 8268 0040 0120     		movs	r0, #1
 8269              	.LVL835:
 8270 0042 38BD     		pop	{r3, r4, r5, pc}
 8271              	.LVL836:
 8272              	.L702:
2086:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8273              		.loc 1 2086 0
 8274 0044 416A     		ldr	r1, [r0, #36]
 8275 0046 3848     		ldr	r0, .L717
 8276              	.LVL837:
 8277 0048 C863     		str	r0, [r1, #60]
2087:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8278              		.loc 1 2087 0
 8279 004a 616A     		ldr	r1, [r4, #36]
 8280 004c 3748     		ldr	r0, .L717+4
 8281 004e 0864     		str	r0, [r1, #64]
2090:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8282              		.loc 1 2090 0
 8283 0050 616A     		ldr	r1, [r4, #36]
 8284 0052 3748     		ldr	r0, .L717+8
ARM GAS  /tmp/ccVHe0ZY.s 			page 280


 8285 0054 C864     		str	r0, [r1, #76]
2093:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 8286              		.loc 1 2093 0
 8287 0056 2168     		ldr	r1, [r4]
 8288 0058 3431     		adds	r1, r1, #52
 8289 005a 606A     		ldr	r0, [r4, #36]
 8290 005c FFF7FEFF 		bl	HAL_DMA_Start_IT
 8291              	.LVL838:
 8292 0060 0028     		cmp	r0, #0
 8293 0062 57D1     		bne	.L709
2098:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8294              		.loc 1 2098 0
 8295 0064 2268     		ldr	r2, [r4]
 8296 0066 D368     		ldr	r3, [r2, #12]
 8297 0068 43F40073 		orr	r3, r3, #512
 8298 006c D360     		str	r3, [r2, #12]
 8299              	.L701:
2164:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8300              		.loc 1 2164 0
 8301 006e 0122     		movs	r2, #1
 8302 0070 2946     		mov	r1, r5
 8303 0072 2068     		ldr	r0, [r4]
 8304 0074 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8305              	.LVL839:
2167:HALLIB/Src/stm32f4xx_hal_tim.c ****   if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8306              		.loc 1 2167 0
 8307 0078 2268     		ldr	r2, [r4]
 8308 007a 9368     		ldr	r3, [r2, #8]
 8309 007c 03F00703 		and	r3, r3, #7
 8310              	.LVL840:
2168:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8311              		.loc 1 2168 0
 8312 0080 062B     		cmp	r3, #6
 8313 0082 4FD0     		beq	.L713
2170:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8314              		.loc 1 2170 0
 8315 0084 1368     		ldr	r3, [r2]
 8316              	.LVL841:
 8317 0086 43F00103 		orr	r3, r3, #1
 8318 008a 1360     		str	r3, [r2]
2174:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 8319              		.loc 1 2174 0
 8320 008c 0020     		movs	r0, #0
 8321 008e 38BD     		pop	{r3, r4, r5, pc}
 8322              	.LVL842:
 8323              	.L704:
2105:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8324              		.loc 1 2105 0
 8325 0090 816A     		ldr	r1, [r0, #40]
 8326 0092 2548     		ldr	r0, .L717
 8327              	.LVL843:
 8328 0094 C863     		str	r0, [r1, #60]
2106:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8329              		.loc 1 2106 0
 8330 0096 A16A     		ldr	r1, [r4, #40]
 8331 0098 2448     		ldr	r0, .L717+4
 8332 009a 0864     		str	r0, [r1, #64]
ARM GAS  /tmp/ccVHe0ZY.s 			page 281


2109:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8333              		.loc 1 2109 0
 8334 009c A16A     		ldr	r1, [r4, #40]
 8335 009e 2448     		ldr	r0, .L717+8
 8336 00a0 C864     		str	r0, [r1, #76]
2112:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 8337              		.loc 1 2112 0
 8338 00a2 2168     		ldr	r1, [r4]
 8339 00a4 3831     		adds	r1, r1, #56
 8340 00a6 A06A     		ldr	r0, [r4, #40]
 8341 00a8 FFF7FEFF 		bl	HAL_DMA_Start_IT
 8342              	.LVL844:
 8343 00ac 0028     		cmp	r0, #0
 8344 00ae 33D1     		bne	.L710
2117:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8345              		.loc 1 2117 0
 8346 00b0 2268     		ldr	r2, [r4]
 8347 00b2 D368     		ldr	r3, [r2, #12]
 8348 00b4 43F48063 		orr	r3, r3, #1024
 8349 00b8 D360     		str	r3, [r2, #12]
2118:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8350              		.loc 1 2118 0
 8351 00ba D8E7     		b	.L701
 8352              	.LVL845:
 8353              	.L705:
2124:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8354              		.loc 1 2124 0
 8355 00bc C16A     		ldr	r1, [r0, #44]
 8356 00be 1A48     		ldr	r0, .L717
 8357              	.LVL846:
 8358 00c0 C863     		str	r0, [r1, #60]
2125:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8359              		.loc 1 2125 0
 8360 00c2 E16A     		ldr	r1, [r4, #44]
 8361 00c4 1948     		ldr	r0, .L717+4
 8362 00c6 0864     		str	r0, [r1, #64]
2128:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8363              		.loc 1 2128 0
 8364 00c8 E16A     		ldr	r1, [r4, #44]
 8365 00ca 1948     		ldr	r0, .L717+8
 8366 00cc C864     		str	r0, [r1, #76]
2131:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 8367              		.loc 1 2131 0
 8368 00ce 2168     		ldr	r1, [r4]
 8369 00d0 3C31     		adds	r1, r1, #60
 8370 00d2 E06A     		ldr	r0, [r4, #44]
 8371 00d4 FFF7FEFF 		bl	HAL_DMA_Start_IT
 8372              	.LVL847:
 8373 00d8 00BB     		cbnz	r0, .L711
2136:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8374              		.loc 1 2136 0
 8375 00da 2268     		ldr	r2, [r4]
 8376 00dc D368     		ldr	r3, [r2, #12]
 8377 00de 43F40063 		orr	r3, r3, #2048
 8378 00e2 D360     		str	r3, [r2, #12]
2137:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8379              		.loc 1 2137 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 282


 8380 00e4 C3E7     		b	.L701
 8381              	.LVL848:
 8382              	.L706:
2143:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8383              		.loc 1 2143 0
 8384 00e6 016B     		ldr	r1, [r0, #48]
 8385 00e8 0F48     		ldr	r0, .L717
 8386              	.LVL849:
 8387 00ea C863     		str	r0, [r1, #60]
2144:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8388              		.loc 1 2144 0
 8389 00ec 216B     		ldr	r1, [r4, #48]
 8390 00ee 0F48     		ldr	r0, .L717+4
 8391 00f0 0864     		str	r0, [r1, #64]
2147:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8392              		.loc 1 2147 0
 8393 00f2 216B     		ldr	r1, [r4, #48]
 8394 00f4 0E48     		ldr	r0, .L717+8
 8395 00f6 C864     		str	r0, [r1, #76]
2150:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 8396              		.loc 1 2150 0
 8397 00f8 2168     		ldr	r1, [r4]
 8398 00fa 4031     		adds	r1, r1, #64
 8399 00fc 206B     		ldr	r0, [r4, #48]
 8400 00fe FFF7FEFF 		bl	HAL_DMA_Start_IT
 8401              	.LVL850:
 8402 0102 68B9     		cbnz	r0, .L712
2155:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8403              		.loc 1 2155 0
 8404 0104 2268     		ldr	r2, [r4]
 8405 0106 D368     		ldr	r3, [r2, #12]
 8406 0108 43F48053 		orr	r3, r3, #4096
 8407 010c D360     		str	r3, [r2, #12]
2156:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8408              		.loc 1 2156 0
 8409 010e AEE7     		b	.L701
 8410              	.LVL851:
 8411              	.L707:
2063:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8412              		.loc 1 2063 0
 8413 0110 0220     		movs	r0, #2
 8414              	.LVL852:
 8415 0112 38BD     		pop	{r3, r4, r5, pc}
 8416              	.LVL853:
 8417              	.L709:
2095:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 8418              		.loc 1 2095 0
 8419 0114 0120     		movs	r0, #1
 8420 0116 38BD     		pop	{r3, r4, r5, pc}
 8421              	.LVL854:
 8422              	.L710:
2114:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 8423              		.loc 1 2114 0
 8424 0118 0120     		movs	r0, #1
 8425 011a 38BD     		pop	{r3, r4, r5, pc}
 8426              	.LVL855:
 8427              	.L711:
ARM GAS  /tmp/ccVHe0ZY.s 			page 283


2133:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 8428              		.loc 1 2133 0
 8429 011c 0120     		movs	r0, #1
 8430 011e 38BD     		pop	{r3, r4, r5, pc}
 8431              	.LVL856:
 8432              	.L712:
2152:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 8433              		.loc 1 2152 0
 8434 0120 0120     		movs	r0, #1
 8435 0122 38BD     		pop	{r3, r4, r5, pc}
 8436              	.LVL857:
 8437              	.L713:
2174:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 8438              		.loc 1 2174 0
 8439 0124 0020     		movs	r0, #0
2175:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8440              		.loc 1 2175 0
 8441 0126 38BD     		pop	{r3, r4, r5, pc}
 8442              	.LVL858:
 8443              	.L718:
 8444              		.align	2
 8445              	.L717:
 8446 0128 00000000 		.word	TIM_DMACaptureCplt
 8447 012c 00000000 		.word	TIM_DMACaptureHalfCplt
 8448 0130 00000000 		.word	TIM_DMAError
 8449              		.cfi_endproc
 8450              	.LFE157:
 8452              		.section	.text.HAL_TIM_IC_Stop_DMA,"ax",%progbits
 8453              		.align	1
 8454              		.global	HAL_TIM_IC_Stop_DMA
 8455              		.syntax unified
 8456              		.thumb
 8457              		.thumb_func
 8458              		.fpu fpv4-sp-d16
 8460              	HAL_TIM_IC_Stop_DMA:
 8461              	.LFB158:
2189:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 8462              		.loc 1 2189 0
 8463              		.cfi_startproc
 8464              		@ args = 0, pretend = 0, frame = 0
 8465              		@ frame_needed = 0, uses_anonymous_args = 0
 8466              	.LVL859:
 8467 0000 38B5     		push	{r3, r4, r5, lr}
 8468              	.LCFI97:
 8469              		.cfi_def_cfa_offset 16
 8470              		.cfi_offset 3, -16
 8471              		.cfi_offset 4, -12
 8472              		.cfi_offset 5, -8
 8473              		.cfi_offset 14, -4
 8474 0002 0446     		mov	r4, r0
 8475 0004 0D46     		mov	r5, r1
2194:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8476              		.loc 1 2194 0
 8477 0006 0C29     		cmp	r1, #12
 8478 0008 10D8     		bhi	.L720
 8479 000a DFE801F0 		tbb	[pc, r1]
 8480              	.L722:
ARM GAS  /tmp/ccVHe0ZY.s 			page 284


 8481 000e 07       		.byte	(.L721-.L722)/2
 8482 000f 0F       		.byte	(.L720-.L722)/2
 8483 0010 0F       		.byte	(.L720-.L722)/2
 8484 0011 0F       		.byte	(.L720-.L722)/2
 8485 0012 28       		.byte	(.L723-.L722)/2
 8486 0013 0F       		.byte	(.L720-.L722)/2
 8487 0014 0F       		.byte	(.L720-.L722)/2
 8488 0015 0F       		.byte	(.L720-.L722)/2
 8489 0016 31       		.byte	(.L724-.L722)/2
 8490 0017 0F       		.byte	(.L720-.L722)/2
 8491 0018 0F       		.byte	(.L720-.L722)/2
 8492 0019 0F       		.byte	(.L720-.L722)/2
 8493 001a 3A       		.byte	(.L725-.L722)/2
 8494 001b 00       		.p2align 1
 8495              	.L721:
2199:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8496              		.loc 1 2199 0
 8497 001c 0268     		ldr	r2, [r0]
 8498 001e D368     		ldr	r3, [r2, #12]
 8499 0020 23F40073 		bic	r3, r3, #512
 8500 0024 D360     		str	r3, [r2, #12]
2200:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8501              		.loc 1 2200 0
 8502 0026 406A     		ldr	r0, [r0, #36]
 8503              	.LVL860:
 8504 0028 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 8505              	.LVL861:
 8506              	.L720:
2233:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8507              		.loc 1 2233 0
 8508 002c 0022     		movs	r2, #0
 8509 002e 2946     		mov	r1, r5
 8510 0030 2068     		ldr	r0, [r4]
 8511 0032 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8512              	.LVL862:
2236:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8513              		.loc 1 2236 0
 8514 0036 2368     		ldr	r3, [r4]
 8515 0038 196A     		ldr	r1, [r3, #32]
 8516 003a 41F21112 		movw	r2, #4369
 8517 003e 1142     		tst	r1, r2
 8518 0040 08D1     		bne	.L726
2236:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8519              		.loc 1 2236 0 is_stmt 0 discriminator 1
 8520 0042 196A     		ldr	r1, [r3, #32]
 8521 0044 40F24442 		movw	r2, #1092
 8522 0048 1142     		tst	r1, r2
 8523 004a 03D1     		bne	.L726
2236:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8524              		.loc 1 2236 0 discriminator 2
 8525 004c 1A68     		ldr	r2, [r3]
 8526 004e 22F00102 		bic	r2, r2, #1
 8527 0052 1A60     		str	r2, [r3]
 8528              	.L726:
2239:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8529              		.loc 1 2239 0 is_stmt 1
 8530 0054 0123     		movs	r3, #1
ARM GAS  /tmp/ccVHe0ZY.s 			page 285


 8531 0056 84F83D30 		strb	r3, [r4, #61]
2243:HALLIB/Src/stm32f4xx_hal_tim.c **** /**
 8532              		.loc 1 2243 0
 8533 005a 0020     		movs	r0, #0
 8534 005c 38BD     		pop	{r3, r4, r5, pc}
 8535              	.LVL863:
 8536              	.L723:
2207:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8537              		.loc 1 2207 0
 8538 005e 0268     		ldr	r2, [r0]
 8539 0060 D368     		ldr	r3, [r2, #12]
 8540 0062 23F48063 		bic	r3, r3, #1024
 8541 0066 D360     		str	r3, [r2, #12]
2208:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8542              		.loc 1 2208 0
 8543 0068 806A     		ldr	r0, [r0, #40]
 8544              	.LVL864:
 8545 006a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 8546              	.LVL865:
2209:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8547              		.loc 1 2209 0
 8548 006e DDE7     		b	.L720
 8549              	.LVL866:
 8550              	.L724:
2215:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8551              		.loc 1 2215 0
 8552 0070 0268     		ldr	r2, [r0]
 8553 0072 D368     		ldr	r3, [r2, #12]
 8554 0074 23F40063 		bic	r3, r3, #2048
 8555 0078 D360     		str	r3, [r2, #12]
2216:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8556              		.loc 1 2216 0
 8557 007a C06A     		ldr	r0, [r0, #44]
 8558              	.LVL867:
 8559 007c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 8560              	.LVL868:
2217:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8561              		.loc 1 2217 0
 8562 0080 D4E7     		b	.L720
 8563              	.LVL869:
 8564              	.L725:
2223:HALLIB/Src/stm32f4xx_hal_tim.c ****       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8565              		.loc 1 2223 0
 8566 0082 0268     		ldr	r2, [r0]
 8567 0084 D368     		ldr	r3, [r2, #12]
 8568 0086 23F48053 		bic	r3, r3, #4096
 8569 008a D360     		str	r3, [r2, #12]
2224:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8570              		.loc 1 2224 0
 8571 008c 006B     		ldr	r0, [r0, #48]
 8572              	.LVL870:
 8573 008e FFF7FEFF 		bl	HAL_DMA_Abort_IT
 8574              	.LVL871:
2225:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8575              		.loc 1 2225 0
 8576 0092 CBE7     		b	.L720
 8577              		.cfi_endproc
ARM GAS  /tmp/ccVHe0ZY.s 			page 286


 8578              	.LFE158:
 8580              		.section	.text.HAL_TIM_OnePulse_Start,"ax",%progbits
 8581              		.align	1
 8582              		.global	HAL_TIM_OnePulse_Start
 8583              		.syntax unified
 8584              		.thumb
 8585              		.thumb_func
 8586              		.fpu fpv4-sp-d16
 8588              	HAL_TIM_OnePulse_Start:
 8589              	.LFB163:
2413:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 8590              		.loc 1 2413 0
 8591              		.cfi_startproc
 8592              		@ args = 0, pretend = 0, frame = 0
 8593              		@ frame_needed = 0, uses_anonymous_args = 0
 8594              	.LVL872:
 8595 0000 10B5     		push	{r4, lr}
 8596              	.LCFI98:
 8597              		.cfi_def_cfa_offset 8
 8598              		.cfi_offset 4, -8
 8599              		.cfi_offset 14, -4
 8600 0002 0446     		mov	r4, r0
2426:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8601              		.loc 1 2426 0
 8602 0004 0122     		movs	r2, #1
 8603 0006 0021     		movs	r1, #0
 8604              	.LVL873:
 8605 0008 0068     		ldr	r0, [r0]
 8606              	.LVL874:
 8607 000a FFF7FEFF 		bl	TIM_CCxChannelCmd
 8608              	.LVL875:
2427:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8609              		.loc 1 2427 0
 8610 000e 0122     		movs	r2, #1
 8611 0010 0421     		movs	r1, #4
 8612 0012 2068     		ldr	r0, [r4]
 8613 0014 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8614              	.LVL876:
2429:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8615              		.loc 1 2429 0
 8616 0018 2368     		ldr	r3, [r4]
 8617 001a 094A     		ldr	r2, .L735
 8618 001c 9342     		cmp	r3, r2
 8619 001e 0DD0     		beq	.L731
2429:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8620              		.loc 1 2429 0 is_stmt 0 discriminator 2
 8621 0020 02F58062 		add	r2, r2, #1024
 8622 0024 9342     		cmp	r3, r2
 8623 0026 07D0     		beq	.L734
2429:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8624              		.loc 1 2429 0
 8625 0028 0022     		movs	r2, #0
 8626              	.L729:
2429:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8627              		.loc 1 2429 0 discriminator 6
 8628 002a 1AB1     		cbz	r2, .L730
2432:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
ARM GAS  /tmp/ccVHe0ZY.s 			page 287


 8629              		.loc 1 2432 0 is_stmt 1
 8630 002c 5A6C     		ldr	r2, [r3, #68]
 8631 002e 42F40042 		orr	r2, r2, #32768
 8632 0032 5A64     		str	r2, [r3, #68]
 8633              	.L730:
2437:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8634              		.loc 1 2437 0
 8635 0034 0020     		movs	r0, #0
 8636 0036 10BD     		pop	{r4, pc}
 8637              	.LVL877:
 8638              	.L734:
2429:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8639              		.loc 1 2429 0
 8640 0038 0122     		movs	r2, #1
 8641 003a F6E7     		b	.L729
 8642              	.L731:
 8643 003c 0122     		movs	r2, #1
 8644 003e F4E7     		b	.L729
 8645              	.L736:
 8646              		.align	2
 8647              	.L735:
 8648 0040 00000140 		.word	1073807360
 8649              		.cfi_endproc
 8650              	.LFE163:
 8652              		.section	.text.HAL_TIM_OnePulse_Stop,"ax",%progbits
 8653              		.align	1
 8654              		.global	HAL_TIM_OnePulse_Stop
 8655              		.syntax unified
 8656              		.thumb
 8657              		.thumb_func
 8658              		.fpu fpv4-sp-d16
 8660              	HAL_TIM_OnePulse_Stop:
 8661              	.LFB164:
2449:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 8662              		.loc 1 2449 0
 8663              		.cfi_startproc
 8664              		@ args = 0, pretend = 0, frame = 0
 8665              		@ frame_needed = 0, uses_anonymous_args = 0
 8666              	.LVL878:
 8667 0000 10B5     		push	{r4, lr}
 8668              	.LCFI99:
 8669              		.cfi_def_cfa_offset 8
 8670              		.cfi_offset 4, -8
 8671              		.cfi_offset 14, -4
 8672 0002 0446     		mov	r4, r0
2459:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8673              		.loc 1 2459 0
 8674 0004 0022     		movs	r2, #0
 8675 0006 1146     		mov	r1, r2
 8676              	.LVL879:
 8677 0008 0068     		ldr	r0, [r0]
 8678              	.LVL880:
 8679 000a FFF7FEFF 		bl	TIM_CCxChannelCmd
 8680              	.LVL881:
2460:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8681              		.loc 1 2460 0
 8682 000e 0022     		movs	r2, #0
ARM GAS  /tmp/ccVHe0ZY.s 			page 288


 8683 0010 0421     		movs	r1, #4
 8684 0012 2068     		ldr	r0, [r4]
 8685 0014 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8686              	.LVL882:
2462:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8687              		.loc 1 2462 0
 8688 0018 2368     		ldr	r3, [r4]
 8689 001a 164A     		ldr	r2, .L745
 8690 001c 9342     		cmp	r3, r2
 8691 001e 26D0     		beq	.L741
2462:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8692              		.loc 1 2462 0 is_stmt 0 discriminator 2
 8693 0020 02F58062 		add	r2, r2, #1024
 8694 0024 9342     		cmp	r3, r2
 8695 0026 20D0     		beq	.L744
2462:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8696              		.loc 1 2462 0
 8697 0028 0022     		movs	r2, #0
 8698              	.L738:
2462:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8699              		.loc 1 2462 0 discriminator 6
 8700 002a 6AB1     		cbz	r2, .L739
2465:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8701              		.loc 1 2465 0 is_stmt 1
 8702 002c 196A     		ldr	r1, [r3, #32]
 8703 002e 41F21112 		movw	r2, #4369
 8704 0032 1142     		tst	r1, r2
 8705 0034 08D1     		bne	.L739
2465:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8706              		.loc 1 2465 0 is_stmt 0 discriminator 1
 8707 0036 196A     		ldr	r1, [r3, #32]
 8708 0038 40F24442 		movw	r2, #1092
 8709 003c 1142     		tst	r1, r2
 8710 003e 03D1     		bne	.L739
2465:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8711              		.loc 1 2465 0 discriminator 2
 8712 0040 5A6C     		ldr	r2, [r3, #68]
 8713 0042 22F40042 		bic	r2, r2, #32768
 8714 0046 5A64     		str	r2, [r3, #68]
 8715              	.L739:
2469:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8716              		.loc 1 2469 0 is_stmt 1
 8717 0048 2368     		ldr	r3, [r4]
 8718 004a 196A     		ldr	r1, [r3, #32]
 8719 004c 41F21112 		movw	r2, #4369
 8720 0050 1142     		tst	r1, r2
 8721 0052 08D1     		bne	.L740
2469:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8722              		.loc 1 2469 0 is_stmt 0 discriminator 1
 8723 0054 196A     		ldr	r1, [r3, #32]
 8724 0056 40F24442 		movw	r2, #1092
 8725 005a 1142     		tst	r1, r2
 8726 005c 03D1     		bne	.L740
2469:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8727              		.loc 1 2469 0 discriminator 2
 8728 005e 1A68     		ldr	r2, [r3]
 8729 0060 22F00102 		bic	r2, r2, #1
ARM GAS  /tmp/ccVHe0ZY.s 			page 289


 8730 0064 1A60     		str	r2, [r3]
 8731              	.L740:
2473:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8732              		.loc 1 2473 0 is_stmt 1
 8733 0066 0020     		movs	r0, #0
 8734 0068 10BD     		pop	{r4, pc}
 8735              	.LVL883:
 8736              	.L744:
2462:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8737              		.loc 1 2462 0
 8738 006a 0122     		movs	r2, #1
 8739 006c DDE7     		b	.L738
 8740              	.L741:
 8741 006e 0122     		movs	r2, #1
 8742 0070 DBE7     		b	.L738
 8743              	.L746:
 8744 0072 00BF     		.align	2
 8745              	.L745:
 8746 0074 00000140 		.word	1073807360
 8747              		.cfi_endproc
 8748              	.LFE164:
 8750              		.section	.text.HAL_TIM_OnePulse_Start_IT,"ax",%progbits
 8751              		.align	1
 8752              		.global	HAL_TIM_OnePulse_Start_IT
 8753              		.syntax unified
 8754              		.thumb
 8755              		.thumb_func
 8756              		.fpu fpv4-sp-d16
 8758              	HAL_TIM_OnePulse_Start_IT:
 8759              	.LFB165:
2485:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 8760              		.loc 1 2485 0
 8761              		.cfi_startproc
 8762              		@ args = 0, pretend = 0, frame = 0
 8763              		@ frame_needed = 0, uses_anonymous_args = 0
 8764              	.LVL884:
 8765 0000 10B5     		push	{r4, lr}
 8766              	.LCFI100:
 8767              		.cfi_def_cfa_offset 8
 8768              		.cfi_offset 4, -8
 8769              		.cfi_offset 14, -4
 8770 0002 0446     		mov	r4, r0
2499:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8771              		.loc 1 2499 0
 8772 0004 0268     		ldr	r2, [r0]
 8773 0006 D368     		ldr	r3, [r2, #12]
 8774 0008 43F00203 		orr	r3, r3, #2
 8775 000c D360     		str	r3, [r2, #12]
2502:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8776              		.loc 1 2502 0
 8777 000e 0268     		ldr	r2, [r0]
 8778 0010 D368     		ldr	r3, [r2, #12]
 8779 0012 43F00403 		orr	r3, r3, #4
 8780 0016 D360     		str	r3, [r2, #12]
2504:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8781              		.loc 1 2504 0
 8782 0018 0122     		movs	r2, #1
ARM GAS  /tmp/ccVHe0ZY.s 			page 290


 8783 001a 0021     		movs	r1, #0
 8784              	.LVL885:
 8785 001c 0068     		ldr	r0, [r0]
 8786              	.LVL886:
 8787 001e FFF7FEFF 		bl	TIM_CCxChannelCmd
 8788              	.LVL887:
2505:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8789              		.loc 1 2505 0
 8790 0022 0122     		movs	r2, #1
 8791 0024 0421     		movs	r1, #4
 8792 0026 2068     		ldr	r0, [r4]
 8793 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8794              	.LVL888:
2507:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8795              		.loc 1 2507 0
 8796 002c 2368     		ldr	r3, [r4]
 8797 002e 094A     		ldr	r2, .L754
 8798 0030 9342     		cmp	r3, r2
 8799 0032 0DD0     		beq	.L750
2507:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8800              		.loc 1 2507 0 is_stmt 0 discriminator 2
 8801 0034 02F58062 		add	r2, r2, #1024
 8802 0038 9342     		cmp	r3, r2
 8803 003a 07D0     		beq	.L753
2507:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8804              		.loc 1 2507 0
 8805 003c 0022     		movs	r2, #0
 8806              	.L748:
2507:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8807              		.loc 1 2507 0 discriminator 6
 8808 003e 1AB1     		cbz	r2, .L749
2510:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8809              		.loc 1 2510 0 is_stmt 1
 8810 0040 5A6C     		ldr	r2, [r3, #68]
 8811 0042 42F40042 		orr	r2, r2, #32768
 8812 0046 5A64     		str	r2, [r3, #68]
 8813              	.L749:
2515:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8814              		.loc 1 2515 0
 8815 0048 0020     		movs	r0, #0
 8816 004a 10BD     		pop	{r4, pc}
 8817              	.LVL889:
 8818              	.L753:
2507:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8819              		.loc 1 2507 0
 8820 004c 0122     		movs	r2, #1
 8821 004e F6E7     		b	.L748
 8822              	.L750:
 8823 0050 0122     		movs	r2, #1
 8824 0052 F4E7     		b	.L748
 8825              	.L755:
 8826              		.align	2
 8827              	.L754:
 8828 0054 00000140 		.word	1073807360
 8829              		.cfi_endproc
 8830              	.LFE165:
 8832              		.section	.text.HAL_TIM_OnePulse_Stop_IT,"ax",%progbits
ARM GAS  /tmp/ccVHe0ZY.s 			page 291


 8833              		.align	1
 8834              		.global	HAL_TIM_OnePulse_Stop_IT
 8835              		.syntax unified
 8836              		.thumb
 8837              		.thumb_func
 8838              		.fpu fpv4-sp-d16
 8840              	HAL_TIM_OnePulse_Stop_IT:
 8841              	.LFB166:
2527:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Prevent unused argument(s) compilation warning */
 8842              		.loc 1 2527 0
 8843              		.cfi_startproc
 8844              		@ args = 0, pretend = 0, frame = 0
 8845              		@ frame_needed = 0, uses_anonymous_args = 0
 8846              	.LVL890:
 8847 0000 10B5     		push	{r4, lr}
 8848              	.LCFI101:
 8849              		.cfi_def_cfa_offset 8
 8850              		.cfi_offset 4, -8
 8851              		.cfi_offset 14, -4
 8852 0002 0446     		mov	r4, r0
2532:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8853              		.loc 1 2532 0
 8854 0004 0268     		ldr	r2, [r0]
 8855 0006 D368     		ldr	r3, [r2, #12]
 8856 0008 23F00203 		bic	r3, r3, #2
 8857 000c D360     		str	r3, [r2, #12]
2535:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8858              		.loc 1 2535 0
 8859 000e 0268     		ldr	r2, [r0]
 8860 0010 D368     		ldr	r3, [r2, #12]
 8861 0012 23F00403 		bic	r3, r3, #4
 8862 0016 D360     		str	r3, [r2, #12]
2542:HALLIB/Src/stm32f4xx_hal_tim.c ****   TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8863              		.loc 1 2542 0
 8864 0018 0022     		movs	r2, #0
 8865 001a 1146     		mov	r1, r2
 8866              	.LVL891:
 8867 001c 0068     		ldr	r0, [r0]
 8868              	.LVL892:
 8869 001e FFF7FEFF 		bl	TIM_CCxChannelCmd
 8870              	.LVL893:
2543:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8871              		.loc 1 2543 0
 8872 0022 0022     		movs	r2, #0
 8873 0024 0421     		movs	r1, #4
 8874 0026 2068     		ldr	r0, [r4]
 8875 0028 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8876              	.LVL894:
2545:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8877              		.loc 1 2545 0
 8878 002c 2368     		ldr	r3, [r4]
 8879 002e 164A     		ldr	r2, .L764
 8880 0030 9342     		cmp	r3, r2
 8881 0032 26D0     		beq	.L760
2545:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8882              		.loc 1 2545 0 is_stmt 0 discriminator 2
 8883 0034 02F58062 		add	r2, r2, #1024
ARM GAS  /tmp/ccVHe0ZY.s 			page 292


 8884 0038 9342     		cmp	r3, r2
 8885 003a 20D0     		beq	.L763
2545:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8886              		.loc 1 2545 0
 8887 003c 0022     		movs	r2, #0
 8888              	.L757:
2545:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8889              		.loc 1 2545 0 discriminator 6
 8890 003e 6AB1     		cbz	r2, .L758
2548:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8891              		.loc 1 2548 0 is_stmt 1
 8892 0040 196A     		ldr	r1, [r3, #32]
 8893 0042 41F21112 		movw	r2, #4369
 8894 0046 1142     		tst	r1, r2
 8895 0048 08D1     		bne	.L758
2548:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8896              		.loc 1 2548 0 is_stmt 0 discriminator 1
 8897 004a 196A     		ldr	r1, [r3, #32]
 8898 004c 40F24442 		movw	r2, #1092
 8899 0050 1142     		tst	r1, r2
 8900 0052 03D1     		bne	.L758
2548:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 8901              		.loc 1 2548 0 discriminator 2
 8902 0054 5A6C     		ldr	r2, [r3, #68]
 8903 0056 22F40042 		bic	r2, r2, #32768
 8904 005a 5A64     		str	r2, [r3, #68]
 8905              	.L758:
2552:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8906              		.loc 1 2552 0 is_stmt 1
 8907 005c 2368     		ldr	r3, [r4]
 8908 005e 196A     		ldr	r1, [r3, #32]
 8909 0060 41F21112 		movw	r2, #4369
 8910 0064 1142     		tst	r1, r2
 8911 0066 08D1     		bne	.L759
2552:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8912              		.loc 1 2552 0 is_stmt 0 discriminator 1
 8913 0068 196A     		ldr	r1, [r3, #32]
 8914 006a 40F24442 		movw	r2, #1092
 8915 006e 1142     		tst	r1, r2
 8916 0070 03D1     		bne	.L759
2552:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8917              		.loc 1 2552 0 discriminator 2
 8918 0072 1A68     		ldr	r2, [r3]
 8919 0074 22F00102 		bic	r2, r2, #1
 8920 0078 1A60     		str	r2, [r3]
 8921              	.L759:
2556:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8922              		.loc 1 2556 0 is_stmt 1
 8923 007a 0020     		movs	r0, #0
 8924 007c 10BD     		pop	{r4, pc}
 8925              	.LVL895:
 8926              	.L763:
2545:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8927              		.loc 1 2545 0
 8928 007e 0122     		movs	r2, #1
 8929 0080 DDE7     		b	.L757
 8930              	.L760:
ARM GAS  /tmp/ccVHe0ZY.s 			page 293


 8931 0082 0122     		movs	r2, #1
 8932 0084 DBE7     		b	.L757
 8933              	.L765:
 8934 0086 00BF     		.align	2
 8935              	.L764:
 8936 0088 00000140 		.word	1073807360
 8937              		.cfi_endproc
 8938              	.LFE166:
 8940              		.section	.text.HAL_TIM_Encoder_Start,"ax",%progbits
 8941              		.align	1
 8942              		.global	HAL_TIM_Encoder_Start
 8943              		.syntax unified
 8944              		.thumb
 8945              		.thumb_func
 8946              		.fpu fpv4-sp-d16
 8948              	HAL_TIM_Encoder_Start:
 8949              	.LFB171:
2773:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 8950              		.loc 1 2773 0
 8951              		.cfi_startproc
 8952              		@ args = 0, pretend = 0, frame = 0
 8953              		@ frame_needed = 0, uses_anonymous_args = 0
 8954              	.LVL896:
 8955 0000 10B5     		push	{r4, lr}
 8956              	.LCFI102:
 8957              		.cfi_def_cfa_offset 8
 8958              		.cfi_offset 4, -8
 8959              		.cfi_offset 14, -4
 8960 0002 0446     		mov	r4, r0
2778:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 8961              		.loc 1 2778 0
 8962 0004 61B1     		cbz	r1, .L768
 8963 0006 0429     		cmp	r1, #4
 8964 0008 16D0     		beq	.L769
2794:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8965              		.loc 1 2794 0
 8966 000a 0122     		movs	r2, #1
 8967 000c 0021     		movs	r1, #0
 8968              	.LVL897:
 8969 000e 0068     		ldr	r0, [r0]
 8970              	.LVL898:
 8971 0010 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8972              	.LVL899:
2795:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8973              		.loc 1 2795 0
 8974 0014 0122     		movs	r2, #1
 8975 0016 0421     		movs	r1, #4
 8976 0018 2068     		ldr	r0, [r4]
 8977 001a FFF7FEFF 		bl	TIM_CCxChannelCmd
 8978              	.LVL900:
2796:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 8979              		.loc 1 2796 0
 8980 001e 04E0     		b	.L770
 8981              	.LVL901:
 8982              	.L768:
2782:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 8983              		.loc 1 2782 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 294


 8984 0020 0122     		movs	r2, #1
 8985 0022 0021     		movs	r1, #0
 8986              	.LVL902:
 8987 0024 0068     		ldr	r0, [r0]
 8988              	.LVL903:
 8989 0026 FFF7FEFF 		bl	TIM_CCxChannelCmd
 8990              	.LVL904:
 8991              	.L770:
2800:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8992              		.loc 1 2800 0
 8993 002a 2268     		ldr	r2, [r4]
 8994 002c 1368     		ldr	r3, [r2]
 8995 002e 43F00103 		orr	r3, r3, #1
 8996 0032 1360     		str	r3, [r2]
2804:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 8997              		.loc 1 2804 0
 8998 0034 0020     		movs	r0, #0
 8999 0036 10BD     		pop	{r4, pc}
 9000              	.LVL905:
 9001              	.L769:
2788:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9002              		.loc 1 2788 0
 9003 0038 0122     		movs	r2, #1
 9004 003a 0421     		movs	r1, #4
 9005              	.LVL906:
 9006 003c 0068     		ldr	r0, [r0]
 9007              	.LVL907:
 9008 003e FFF7FEFF 		bl	TIM_CCxChannelCmd
 9009              	.LVL908:
2789:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9010              		.loc 1 2789 0
 9011 0042 F2E7     		b	.L770
 9012              		.cfi_endproc
 9013              	.LFE171:
 9015              		.section	.text.HAL_TIM_Encoder_Stop,"ax",%progbits
 9016              		.align	1
 9017              		.global	HAL_TIM_Encoder_Stop
 9018              		.syntax unified
 9019              		.thumb
 9020              		.thumb_func
 9021              		.fpu fpv4-sp-d16
 9023              	HAL_TIM_Encoder_Stop:
 9024              	.LFB172:
2817:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 9025              		.loc 1 2817 0
 9026              		.cfi_startproc
 9027              		@ args = 0, pretend = 0, frame = 0
 9028              		@ frame_needed = 0, uses_anonymous_args = 0
 9029              	.LVL909:
 9030 0000 10B5     		push	{r4, lr}
 9031              	.LCFI103:
 9032              		.cfi_def_cfa_offset 8
 9033              		.cfi_offset 4, -8
 9034              		.cfi_offset 14, -4
 9035 0002 0446     		mov	r4, r0
2823:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9036              		.loc 1 2823 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 295


 9037 0004 61B1     		cbz	r1, .L775
 9038 0006 0429     		cmp	r1, #4
 9039 0008 20D0     		beq	.L776
2839:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 9040              		.loc 1 2839 0
 9041 000a 0022     		movs	r2, #0
 9042 000c 1146     		mov	r1, r2
 9043              	.LVL910:
 9044 000e 0068     		ldr	r0, [r0]
 9045              	.LVL911:
 9046 0010 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9047              	.LVL912:
2840:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9048              		.loc 1 2840 0
 9049 0014 0022     		movs	r2, #0
 9050 0016 0421     		movs	r1, #4
 9051 0018 2068     		ldr	r0, [r4]
 9052 001a FFF7FEFF 		bl	TIM_CCxChannelCmd
 9053              	.LVL913:
2841:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9054              		.loc 1 2841 0
 9055 001e 04E0     		b	.L777
 9056              	.LVL914:
 9057              	.L775:
2827:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9058              		.loc 1 2827 0
 9059 0020 0022     		movs	r2, #0
 9060 0022 1146     		mov	r1, r2
 9061              	.LVL915:
 9062 0024 0068     		ldr	r0, [r0]
 9063              	.LVL916:
 9064 0026 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9065              	.LVL917:
 9066              	.L777:
2846:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9067              		.loc 1 2846 0
 9068 002a 2368     		ldr	r3, [r4]
 9069 002c 196A     		ldr	r1, [r3, #32]
 9070 002e 41F21112 		movw	r2, #4369
 9071 0032 1142     		tst	r1, r2
 9072 0034 08D1     		bne	.L778
2846:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9073              		.loc 1 2846 0 is_stmt 0 discriminator 1
 9074 0036 196A     		ldr	r1, [r3, #32]
 9075 0038 40F24442 		movw	r2, #1092
 9076 003c 1142     		tst	r1, r2
 9077 003e 03D1     		bne	.L778
2846:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9078              		.loc 1 2846 0 discriminator 2
 9079 0040 1A68     		ldr	r2, [r3]
 9080 0042 22F00102 		bic	r2, r2, #1
 9081 0046 1A60     		str	r2, [r3]
 9082              	.L778:
2850:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9083              		.loc 1 2850 0 is_stmt 1
 9084 0048 0020     		movs	r0, #0
 9085 004a 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccVHe0ZY.s 			page 296


 9086              	.LVL918:
 9087              	.L776:
2833:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9088              		.loc 1 2833 0
 9089 004c 0022     		movs	r2, #0
 9090 004e 0421     		movs	r1, #4
 9091              	.LVL919:
 9092 0050 0068     		ldr	r0, [r0]
 9093              	.LVL920:
 9094 0052 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9095              	.LVL921:
2834:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9096              		.loc 1 2834 0
 9097 0056 E8E7     		b	.L777
 9098              		.cfi_endproc
 9099              	.LFE172:
 9101              		.section	.text.HAL_TIM_Encoder_Start_IT,"ax",%progbits
 9102              		.align	1
 9103              		.global	HAL_TIM_Encoder_Start_IT
 9104              		.syntax unified
 9105              		.thumb
 9106              		.thumb_func
 9107              		.fpu fpv4-sp-d16
 9109              	HAL_TIM_Encoder_Start_IT:
 9110              	.LFB173:
2863:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 9111              		.loc 1 2863 0
 9112              		.cfi_startproc
 9113              		@ args = 0, pretend = 0, frame = 0
 9114              		@ frame_needed = 0, uses_anonymous_args = 0
 9115              	.LVL922:
 9116 0000 10B5     		push	{r4, lr}
 9117              	.LCFI104:
 9118              		.cfi_def_cfa_offset 8
 9119              		.cfi_offset 4, -8
 9120              		.cfi_offset 14, -4
 9121 0002 0446     		mov	r4, r0
2869:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9122              		.loc 1 2869 0
 9123 0004 B1B1     		cbz	r1, .L783
 9124 0006 0429     		cmp	r1, #4
 9125 0008 25D0     		beq	.L784
2887:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 9126              		.loc 1 2887 0
 9127 000a 0122     		movs	r2, #1
 9128 000c 0021     		movs	r1, #0
 9129              	.LVL923:
 9130 000e 0068     		ldr	r0, [r0]
 9131              	.LVL924:
 9132 0010 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9133              	.LVL925:
2888:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 9134              		.loc 1 2888 0
 9135 0014 0122     		movs	r2, #1
 9136 0016 0421     		movs	r1, #4
 9137 0018 2068     		ldr	r0, [r4]
 9138 001a FFF7FEFF 		bl	TIM_CCxChannelCmd
ARM GAS  /tmp/ccVHe0ZY.s 			page 297


 9139              	.LVL926:
2889:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 9140              		.loc 1 2889 0
 9141 001e 2268     		ldr	r2, [r4]
 9142 0020 D368     		ldr	r3, [r2, #12]
 9143 0022 43F00203 		orr	r3, r3, #2
 9144 0026 D360     		str	r3, [r2, #12]
2890:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9145              		.loc 1 2890 0
 9146 0028 2268     		ldr	r2, [r4]
 9147 002a D368     		ldr	r3, [r2, #12]
 9148 002c 43F00403 		orr	r3, r3, #4
 9149 0030 D360     		str	r3, [r2, #12]
2891:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9150              		.loc 1 2891 0
 9151 0032 09E0     		b	.L785
 9152              	.LVL927:
 9153              	.L783:
2873:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 9154              		.loc 1 2873 0
 9155 0034 0122     		movs	r2, #1
 9156 0036 0021     		movs	r1, #0
 9157              	.LVL928:
 9158 0038 0068     		ldr	r0, [r0]
 9159              	.LVL929:
 9160 003a FFF7FEFF 		bl	TIM_CCxChannelCmd
 9161              	.LVL930:
2874:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9162              		.loc 1 2874 0
 9163 003e 2268     		ldr	r2, [r4]
 9164 0040 D368     		ldr	r3, [r2, #12]
 9165 0042 43F00203 		orr	r3, r3, #2
 9166 0046 D360     		str	r3, [r2, #12]
 9167              	.L785:
2896:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9168              		.loc 1 2896 0
 9169 0048 2268     		ldr	r2, [r4]
 9170 004a 1368     		ldr	r3, [r2]
 9171 004c 43F00103 		orr	r3, r3, #1
 9172 0050 1360     		str	r3, [r2]
2900:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9173              		.loc 1 2900 0
 9174 0052 0020     		movs	r0, #0
 9175 0054 10BD     		pop	{r4, pc}
 9176              	.LVL931:
 9177              	.L784:
2880:HALLIB/Src/stm32f4xx_hal_tim.c ****       __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 9178              		.loc 1 2880 0
 9179 0056 0122     		movs	r2, #1
 9180 0058 0421     		movs	r1, #4
 9181              	.LVL932:
 9182 005a 0068     		ldr	r0, [r0]
 9183              	.LVL933:
 9184 005c FFF7FEFF 		bl	TIM_CCxChannelCmd
 9185              	.LVL934:
2881:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9186              		.loc 1 2881 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 298


 9187 0060 2268     		ldr	r2, [r4]
 9188 0062 D368     		ldr	r3, [r2, #12]
 9189 0064 43F00403 		orr	r3, r3, #4
 9190 0068 D360     		str	r3, [r2, #12]
2882:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9191              		.loc 1 2882 0
 9192 006a EDE7     		b	.L785
 9193              		.cfi_endproc
 9194              	.LFE173:
 9196              		.section	.text.HAL_TIM_Encoder_Stop_IT,"ax",%progbits
 9197              		.align	1
 9198              		.global	HAL_TIM_Encoder_Stop_IT
 9199              		.syntax unified
 9200              		.thumb
 9201              		.thumb_func
 9202              		.fpu fpv4-sp-d16
 9204              	HAL_TIM_Encoder_Stop_IT:
 9205              	.LFB174:
2913:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 9206              		.loc 1 2913 0
 9207              		.cfi_startproc
 9208              		@ args = 0, pretend = 0, frame = 0
 9209              		@ frame_needed = 0, uses_anonymous_args = 0
 9210              	.LVL935:
 9211 0000 10B5     		push	{r4, lr}
 9212              	.LCFI105:
 9213              		.cfi_def_cfa_offset 8
 9214              		.cfi_offset 4, -8
 9215              		.cfi_offset 14, -4
 9216 0002 0446     		mov	r4, r0
2919:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9217              		.loc 1 2919 0
 9218 0004 49B3     		cbz	r1, .L794
2926:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9219              		.loc 1 2926 0
 9220 0006 0429     		cmp	r1, #4
 9221 0008 32D0     		beq	.L795
2935:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 9222              		.loc 1 2935 0
 9223 000a 0022     		movs	r2, #0
 9224 000c 1146     		mov	r1, r2
 9225              	.LVL936:
 9226 000e 0068     		ldr	r0, [r0]
 9227              	.LVL937:
 9228 0010 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9229              	.LVL938:
2936:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9230              		.loc 1 2936 0
 9231 0014 0022     		movs	r2, #0
 9232 0016 0421     		movs	r1, #4
 9233 0018 2068     		ldr	r0, [r4]
 9234 001a FFF7FEFF 		bl	TIM_CCxChannelCmd
 9235              	.LVL939:
2939:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 9236              		.loc 1 2939 0
 9237 001e 2268     		ldr	r2, [r4]
 9238 0020 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccVHe0ZY.s 			page 299


 9239 0022 23F00203 		bic	r3, r3, #2
 9240 0026 D360     		str	r3, [r2, #12]
2940:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 9241              		.loc 1 2940 0
 9242 0028 2268     		ldr	r2, [r4]
 9243 002a D368     		ldr	r3, [r2, #12]
 9244 002c 23F00403 		bic	r3, r3, #4
 9245 0030 D360     		str	r3, [r2, #12]
 9246              	.L790:
2944:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9247              		.loc 1 2944 0
 9248 0032 2368     		ldr	r3, [r4]
 9249 0034 196A     		ldr	r1, [r3, #32]
 9250 0036 41F21112 		movw	r2, #4369
 9251 003a 1142     		tst	r1, r2
 9252 003c 08D1     		bne	.L792
2944:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9253              		.loc 1 2944 0 is_stmt 0 discriminator 1
 9254 003e 196A     		ldr	r1, [r3, #32]
 9255 0040 40F24442 		movw	r2, #1092
 9256 0044 1142     		tst	r1, r2
 9257 0046 03D1     		bne	.L792
2944:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9258              		.loc 1 2944 0 discriminator 2
 9259 0048 1A68     		ldr	r2, [r3]
 9260 004a 22F00102 		bic	r2, r2, #1
 9261 004e 1A60     		str	r2, [r3]
 9262              	.L792:
2947:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9263              		.loc 1 2947 0 is_stmt 1
 9264 0050 0123     		movs	r3, #1
 9265 0052 84F83D30 		strb	r3, [r4, #61]
2951:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9266              		.loc 1 2951 0
 9267 0056 0020     		movs	r0, #0
 9268 0058 10BD     		pop	{r4, pc}
 9269              	.LVL940:
 9270              	.L794:
2921:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9271              		.loc 1 2921 0
 9272 005a 0022     		movs	r2, #0
 9273 005c 1146     		mov	r1, r2
 9274              	.LVL941:
 9275 005e 0068     		ldr	r0, [r0]
 9276              	.LVL942:
 9277 0060 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9278              	.LVL943:
2924:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 9279              		.loc 1 2924 0
 9280 0064 2268     		ldr	r2, [r4]
 9281 0066 D368     		ldr	r3, [r2, #12]
 9282 0068 23F00203 		bic	r3, r3, #2
 9283 006c D360     		str	r3, [r2, #12]
 9284 006e E0E7     		b	.L790
 9285              	.LVL944:
 9286              	.L795:
2928:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 300


 9287              		.loc 1 2928 0
 9288 0070 0022     		movs	r2, #0
 9289 0072 0421     		movs	r1, #4
 9290              	.LVL945:
 9291 0074 0068     		ldr	r0, [r0]
 9292              	.LVL946:
 9293 0076 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9294              	.LVL947:
2931:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 9295              		.loc 1 2931 0
 9296 007a 2268     		ldr	r2, [r4]
 9297 007c D368     		ldr	r3, [r2, #12]
 9298 007e 23F00403 		bic	r3, r3, #4
 9299 0082 D360     		str	r3, [r2, #12]
 9300 0084 D5E7     		b	.L790
 9301              		.cfi_endproc
 9302              	.LFE174:
 9304              		.section	.text.HAL_TIM_Encoder_Start_DMA,"ax",%progbits
 9305              		.align	1
 9306              		.global	HAL_TIM_Encoder_Start_DMA
 9307              		.syntax unified
 9308              		.thumb
 9309              		.thumb_func
 9310              		.fpu fpv4-sp-d16
 9312              	HAL_TIM_Encoder_Start_DMA:
 9313              	.LFB175:
2968:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 9314              		.loc 1 2968 0
 9315              		.cfi_startproc
 9316              		@ args = 4, pretend = 0, frame = 0
 9317              		@ frame_needed = 0, uses_anonymous_args = 0
 9318              	.LVL948:
 9319 0000 70B5     		push	{r4, r5, r6, lr}
 9320              	.LCFI106:
 9321              		.cfi_def_cfa_offset 16
 9322              		.cfi_offset 4, -16
 9323              		.cfi_offset 5, -12
 9324              		.cfi_offset 6, -8
 9325              		.cfi_offset 14, -4
 9326 0002 BDF81050 		ldrh	r5, [sp, #16]
2972:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9327              		.loc 1 2972 0
 9328 0006 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 9329 000a E4B2     		uxtb	r4, r4
 9330 000c 022C     		cmp	r4, #2
 9331 000e 00F09F80 		beq	.L804
2976:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9332              		.loc 1 2976 0
 9333 0012 90F83D40 		ldrb	r4, [r0, #61]	@ zero_extendqisi2
 9334 0016 E4B2     		uxtb	r4, r4
 9335 0018 012C     		cmp	r4, #1
 9336 001a 08D0     		beq	.L813
 9337              	.L798:
 9338 001c 1E46     		mov	r6, r3
 9339 001e 0446     		mov	r4, r0
2992:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9340              		.loc 1 2992 0
ARM GAS  /tmp/ccVHe0ZY.s 			page 301


 9341 0020 0429     		cmp	r1, #4
 9342 0022 31D0     		beq	.L801
 9343 0024 3C29     		cmp	r1, #60
 9344 0026 53D0     		beq	.L802
 9345 0028 59B1     		cbz	r1, .L814
3088:HALLIB/Src/stm32f4xx_hal_tim.c **** }
 9346              		.loc 1 3088 0
 9347 002a 0025     		movs	r5, #0
 9348 002c 91E0     		b	.L797
 9349              	.L813:
2978:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 9350              		.loc 1 2978 0
 9351 002e 22B1     		cbz	r2, .L799
2978:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 9352              		.loc 1 2978 0 is_stmt 0 discriminator 2
 9353 0030 1BB1     		cbz	r3, .L799
 9354              	.L800:
2984:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9355              		.loc 1 2984 0 is_stmt 1
 9356 0032 0224     		movs	r4, #2
 9357 0034 80F83D40 		strb	r4, [r0, #61]
 9358 0038 F0E7     		b	.L798
 9359              	.L799:
2978:HALLIB/Src/stm32f4xx_hal_tim.c ****     {
 9360              		.loc 1 2978 0 discriminator 3
 9361 003a 002D     		cmp	r5, #0
 9362 003c F9D0     		beq	.L800
2980:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9363              		.loc 1 2980 0
 9364 003e 0125     		movs	r5, #1
 9365 0040 87E0     		b	.L797
 9366              	.L814:
2997:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 9367              		.loc 1 2997 0
 9368 0042 436A     		ldr	r3, [r0, #36]
 9369              	.LVL949:
 9370 0044 4449     		ldr	r1, .L819
 9371              	.LVL950:
 9372 0046 D963     		str	r1, [r3, #60]
2998:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9373              		.loc 1 2998 0
 9374 0048 436A     		ldr	r3, [r0, #36]
 9375 004a 4449     		ldr	r1, .L819+4
 9376 004c 1964     		str	r1, [r3, #64]
3001:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9377              		.loc 1 3001 0
 9378 004e 436A     		ldr	r3, [r0, #36]
 9379 0050 4349     		ldr	r1, .L819+8
 9380 0052 D964     		str	r1, [r3, #76]
3004:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 9381              		.loc 1 3004 0
 9382 0054 0168     		ldr	r1, [r0]
 9383 0056 2B46     		mov	r3, r5
 9384 0058 3431     		adds	r1, r1, #52
 9385 005a 406A     		ldr	r0, [r0, #36]
 9386              	.LVL951:
 9387 005c FFF7FEFF 		bl	HAL_DMA_Start_IT
ARM GAS  /tmp/ccVHe0ZY.s 			page 302


 9388              	.LVL952:
 9389 0060 0546     		mov	r5, r0
 9390 0062 08B1     		cbz	r0, .L815
3006:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 9391              		.loc 1 3006 0
 9392 0064 0125     		movs	r5, #1
 9393 0066 74E0     		b	.L797
 9394              	.L815:
3009:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9395              		.loc 1 3009 0
 9396 0068 2268     		ldr	r2, [r4]
 9397 006a D368     		ldr	r3, [r2, #12]
 9398 006c 43F40073 		orr	r3, r3, #512
 9399 0070 D360     		str	r3, [r2, #12]
3012:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9400              		.loc 1 3012 0
 9401 0072 2268     		ldr	r2, [r4]
 9402 0074 1368     		ldr	r3, [r2]
 9403 0076 43F00103 		orr	r3, r3, #1
 9404 007a 1360     		str	r3, [r2]
3015:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9405              		.loc 1 3015 0
 9406 007c 0122     		movs	r2, #1
 9407 007e 0021     		movs	r1, #0
 9408 0080 2068     		ldr	r0, [r4]
 9409 0082 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9410              	.LVL953:
3016:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9411              		.loc 1 3016 0
 9412 0086 64E0     		b	.L797
 9413              	.LVL954:
 9414              	.L801:
3022:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 9415              		.loc 1 3022 0
 9416 0088 836A     		ldr	r3, [r0, #40]
 9417              	.LVL955:
 9418 008a 334A     		ldr	r2, .L819
 9419              	.LVL956:
 9420 008c DA63     		str	r2, [r3, #60]
3023:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9421              		.loc 1 3023 0
 9422 008e 836A     		ldr	r3, [r0, #40]
 9423 0090 324A     		ldr	r2, .L819+4
 9424 0092 1A64     		str	r2, [r3, #64]
3026:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the DMA stream */
 9425              		.loc 1 3026 0
 9426 0094 836A     		ldr	r3, [r0, #40]
 9427 0096 324A     		ldr	r2, .L819+8
 9428 0098 DA64     		str	r2, [r3, #76]
3028:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 9429              		.loc 1 3028 0
 9430 009a 0168     		ldr	r1, [r0]
 9431              	.LVL957:
 9432 009c 2B46     		mov	r3, r5
 9433 009e 3246     		mov	r2, r6
 9434 00a0 3831     		adds	r1, r1, #56
 9435 00a2 806A     		ldr	r0, [r0, #40]
ARM GAS  /tmp/ccVHe0ZY.s 			page 303


 9436              	.LVL958:
 9437 00a4 FFF7FEFF 		bl	HAL_DMA_Start_IT
 9438              	.LVL959:
 9439 00a8 0546     		mov	r5, r0
 9440 00aa 08B1     		cbz	r0, .L816
3030:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 9441              		.loc 1 3030 0
 9442 00ac 0125     		movs	r5, #1
 9443 00ae 50E0     		b	.L797
 9444              	.L816:
3033:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9445              		.loc 1 3033 0
 9446 00b0 2268     		ldr	r2, [r4]
 9447 00b2 D368     		ldr	r3, [r2, #12]
 9448 00b4 43F48063 		orr	r3, r3, #1024
 9449 00b8 D360     		str	r3, [r2, #12]
3036:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9450              		.loc 1 3036 0
 9451 00ba 2268     		ldr	r2, [r4]
 9452 00bc 1368     		ldr	r3, [r2]
 9453 00be 43F00103 		orr	r3, r3, #1
 9454 00c2 1360     		str	r3, [r2]
3039:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9455              		.loc 1 3039 0
 9456 00c4 0122     		movs	r2, #1
 9457 00c6 0421     		movs	r1, #4
 9458 00c8 2068     		ldr	r0, [r4]
 9459 00ca FFF7FEFF 		bl	TIM_CCxChannelCmd
 9460              	.LVL960:
3040:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9461              		.loc 1 3040 0
 9462 00ce 40E0     		b	.L797
 9463              	.LVL961:
 9464              	.L802:
3046:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 9465              		.loc 1 3046 0
 9466 00d0 436A     		ldr	r3, [r0, #36]
 9467              	.LVL962:
 9468 00d2 2149     		ldr	r1, .L819
 9469              	.LVL963:
 9470 00d4 D963     		str	r1, [r3, #60]
3047:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9471              		.loc 1 3047 0
 9472 00d6 436A     		ldr	r3, [r0, #36]
 9473 00d8 2049     		ldr	r1, .L819+4
 9474 00da 1964     		str	r1, [r3, #64]
3050:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9475              		.loc 1 3050 0
 9476 00dc 436A     		ldr	r3, [r0, #36]
 9477 00de 2049     		ldr	r1, .L819+8
 9478 00e0 D964     		str	r1, [r3, #76]
3053:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 9479              		.loc 1 3053 0
 9480 00e2 0168     		ldr	r1, [r0]
 9481 00e4 2B46     		mov	r3, r5
 9482 00e6 3431     		adds	r1, r1, #52
 9483 00e8 406A     		ldr	r0, [r0, #36]
ARM GAS  /tmp/ccVHe0ZY.s 			page 304


 9484              	.LVL964:
 9485 00ea FFF7FEFF 		bl	HAL_DMA_Start_IT
 9486              	.LVL965:
 9487 00ee 08B1     		cbz	r0, .L817
3055:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 9488              		.loc 1 3055 0
 9489 00f0 0125     		movs	r5, #1
 9490 00f2 2EE0     		b	.L797
 9491              	.L817:
3059:HALLIB/Src/stm32f4xx_hal_tim.c ****       htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 9492              		.loc 1 3059 0
 9493 00f4 A36A     		ldr	r3, [r4, #40]
 9494 00f6 184A     		ldr	r2, .L819
 9495 00f8 DA63     		str	r2, [r3, #60]
3060:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9496              		.loc 1 3060 0
 9497 00fa A36A     		ldr	r3, [r4, #40]
 9498 00fc 174A     		ldr	r2, .L819+4
 9499 00fe 1A64     		str	r2, [r3, #64]
3063:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9500              		.loc 1 3063 0
 9501 0100 A36A     		ldr	r3, [r4, #40]
 9502 0102 174A     		ldr	r2, .L819+8
 9503 0104 DA64     		str	r2, [r3, #76]
3066:HALLIB/Src/stm32f4xx_hal_tim.c ****       {
 9504              		.loc 1 3066 0
 9505 0106 2168     		ldr	r1, [r4]
 9506 0108 2B46     		mov	r3, r5
 9507 010a 3246     		mov	r2, r6
 9508 010c 3831     		adds	r1, r1, #56
 9509 010e A06A     		ldr	r0, [r4, #40]
 9510 0110 FFF7FEFF 		bl	HAL_DMA_Start_IT
 9511              	.LVL966:
 9512 0114 0546     		mov	r5, r0
 9513 0116 08B1     		cbz	r0, .L818
3068:HALLIB/Src/stm32f4xx_hal_tim.c ****       }
 9514              		.loc 1 3068 0
 9515 0118 0125     		movs	r5, #1
 9516 011a 1AE0     		b	.L797
 9517              	.L818:
3071:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9518              		.loc 1 3071 0
 9519 011c 2268     		ldr	r2, [r4]
 9520 011e 1368     		ldr	r3, [r2]
 9521 0120 43F00103 		orr	r3, r3, #1
 9522 0124 1360     		str	r3, [r2]
3074:HALLIB/Src/stm32f4xx_hal_tim.c ****       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 9523              		.loc 1 3074 0
 9524 0126 0122     		movs	r2, #1
 9525 0128 0021     		movs	r1, #0
 9526 012a 2068     		ldr	r0, [r4]
 9527 012c FFF7FEFF 		bl	TIM_CCxChannelCmd
 9528              	.LVL967:
3075:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9529              		.loc 1 3075 0
 9530 0130 0122     		movs	r2, #1
 9531 0132 0421     		movs	r1, #4
ARM GAS  /tmp/ccVHe0ZY.s 			page 305


 9532 0134 2068     		ldr	r0, [r4]
 9533 0136 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9534              	.LVL968:
3078:HALLIB/Src/stm32f4xx_hal_tim.c ****       /* Enable the TIM Input Capture  DMA request */
 9535              		.loc 1 3078 0
 9536 013a 2268     		ldr	r2, [r4]
 9537 013c D368     		ldr	r3, [r2, #12]
 9538 013e 43F40073 		orr	r3, r3, #512
 9539 0142 D360     		str	r3, [r2, #12]
3080:HALLIB/Src/stm32f4xx_hal_tim.c ****       break;
 9540              		.loc 1 3080 0
 9541 0144 2268     		ldr	r2, [r4]
 9542 0146 D368     		ldr	r3, [r2, #12]
 9543 0148 43F48063 		orr	r3, r3, #1024
 9544 014c D360     		str	r3, [r2, #12]
3081:HALLIB/Src/stm32f4xx_hal_tim.c ****     }
 9545              		.loc 1 3081 0
 9546 014e 00E0     		b	.L797
 9547              	.LVL969:
 9548              	.L804:
2974:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 9549              		.loc 1 2974 0
 9550 0150 0225     		movs	r5, #2
 9551              	.LVL970:
 9552              	.L797:
3089:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9553              		.loc 1 3089 0
 9554 0152 2846     		mov	r0, r5
 9555 0154 70BD     		pop	{r4, r5, r6, pc}
 9556              	.LVL971:
 9557              	.L820:
 9558 0156 00BF     		.align	2
 9559              	.L819:
 9560 0158 00000000 		.word	TIM_DMACaptureCplt
 9561 015c 00000000 		.word	TIM_DMACaptureHalfCplt
 9562 0160 00000000 		.word	TIM_DMAError
 9563              		.cfi_endproc
 9564              	.LFE175:
 9566              		.section	.text.HAL_TIM_Encoder_Stop_DMA,"ax",%progbits
 9567              		.align	1
 9568              		.global	HAL_TIM_Encoder_Stop_DMA
 9569              		.syntax unified
 9570              		.thumb
 9571              		.thumb_func
 9572              		.fpu fpv4-sp-d16
 9574              	HAL_TIM_Encoder_Stop_DMA:
 9575              	.LFB176:
3102:HALLIB/Src/stm32f4xx_hal_tim.c ****   /* Check the parameters */
 9576              		.loc 1 3102 0
 9577              		.cfi_startproc
 9578              		@ args = 0, pretend = 0, frame = 0
 9579              		@ frame_needed = 0, uses_anonymous_args = 0
 9580              	.LVL972:
 9581 0000 10B5     		push	{r4, lr}
 9582              	.LCFI107:
 9583              		.cfi_def_cfa_offset 8
 9584              		.cfi_offset 4, -8
ARM GAS  /tmp/ccVHe0ZY.s 			page 306


 9585              		.cfi_offset 14, -4
 9586 0002 0446     		mov	r4, r0
3108:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9587              		.loc 1 3108 0
 9588 0004 0029     		cmp	r1, #0
 9589 0006 2FD0     		beq	.L827
3116:HALLIB/Src/stm32f4xx_hal_tim.c ****   {
 9590              		.loc 1 3116 0
 9591 0008 0429     		cmp	r1, #4
 9592 000a 3BD0     		beq	.L828
3126:HALLIB/Src/stm32f4xx_hal_tim.c ****     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 9593              		.loc 1 3126 0
 9594 000c 0022     		movs	r2, #0
 9595 000e 1146     		mov	r1, r2
 9596              	.LVL973:
 9597 0010 0068     		ldr	r0, [r0]
 9598              	.LVL974:
 9599 0012 FFF7FEFF 		bl	TIM_CCxChannelCmd
 9600              	.LVL975:
3127:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9601              		.loc 1 3127 0
 9602 0016 0022     		movs	r2, #0
 9603 0018 0421     		movs	r1, #4
 9604 001a 2068     		ldr	r0, [r4]
 9605 001c FFF7FEFF 		bl	TIM_CCxChannelCmd
 9606              	.LVL976:
3130:HALLIB/Src/stm32f4xx_hal_tim.c ****     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 9607              		.loc 1 3130 0
 9608 0020 2268     		ldr	r2, [r4]
 9609 0022 D368     		ldr	r3, [r2, #12]
 9610 0024 23F40073 		bic	r3, r3, #512
 9611 0028 D360     		str	r3, [r2, #12]
3131:HALLIB/Src/stm32f4xx_hal_tim.c ****     (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 9612              		.loc 1 3131 0
 9613 002a 2268     		ldr	r2, [r4]
 9614 002c D368     		ldr	r3, [r2, #12]
 9615 002e 23F48063 		bic	r3, r3, #1024
 9616 0032 D360     		str	r3, [r2, #12]
3132:HALLIB/Src/stm32f4xx_hal_tim.c ****     (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 9617              		.loc 1 3132 0
 9618 0034 606A     		ldr	r0, [r4, #36]
 9619 0036 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 9620              	.LVL977:
3133:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 9621              		.loc 1 3133 0
 9622 003a A06A     		ldr	r0, [r4, #40]
 9623 003c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 9624              	.LVL978:
 9625              	.L823:
3137:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9626              		.loc 1 3137 0
 9627 0040 2368     		ldr	r3, [r4]
 9628 0042 196A     		ldr	r1, [r3, #32]
 9629 0044 41F21112 		movw	r2, #4369
 9630 0048 1142     		tst	r1, r2
 9631 004a 08D1     		bne	.L825
3137:HALLIB/Src/stm32f4xx_hal_tim.c **** 
ARM GAS  /tmp/ccVHe0ZY.s 			page 307


 9632              		.loc 1 3137 0 is_stmt 0 discriminator 1
 9633 004c 196A     		ldr	r1, [r3, #32]
 9634 004e 40F24442 		movw	r2, #1092
 9635 0052 1142     		tst	r1, r2
 9636 0054 03D1     		bne	.L825
3137:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9637              		.loc 1 3137 0 discriminator 2
 9638 0056 1A68     		ldr	r2, [r3]
 9639 0058 22F00102 		bic	r2, r2, #1
 9640 005c 1A60     		str	r2, [r3]
 9641              	.L825:
3140:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9642              		.loc 1 3140 0 is_stmt 1
 9643 005e 0123     		movs	r3, #1
 9644 0060 84F83D30 		strb	r3, [r4, #61]
3144:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9645              		.loc 1 3144 0
 9646 0064 0020     		movs	r0, #0
 9647 0066 10BD     		pop	{r4, pc}
 9648              	.LVL979:
 9649              	.L827:
3110:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9650              		.loc 1 3110 0
 9651 0068 0022     		movs	r2, #0
 9652 006a 1146     		mov	r1, r2
 9653              	.LVL980:
 9654 006c 0068     		ldr	r0, [r0]
 9655              	.LVL981:
 9656 006e FFF7FEFF 		bl	TIM_CCxChannelCmd
 9657              	.LVL982:
3113:HALLIB/Src/stm32f4xx_hal_tim.c ****     (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 9658              		.loc 1 3113 0
 9659 0072 2268     		ldr	r2, [r4]
 9660 0074 D368     		ldr	r3, [r2, #12]
 9661 0076 23F40073 		bic	r3, r3, #512
 9662 007a D360     		str	r3, [r2, #12]
3114:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 9663              		.loc 1 3114 0
 9664 007c 606A     		ldr	r0, [r4, #36]
 9665 007e FFF7FEFF 		bl	HAL_DMA_Abort_IT
 9666              	.LVL983:
 9667 0082 DDE7     		b	.L823
 9668              	.LVL984:
 9669              	.L828:
3118:HALLIB/Src/stm32f4xx_hal_tim.c **** 
 9670              		.loc 1 3118 0
 9671 0084 0022     		movs	r2, #0
 9672 0086 0421     		movs	r1, #4
 9673              	.LVL985:
 9674 0088 0068     		ldr	r0, [r0]
 9675              	.LVL986:
 9676 008a FFF7FEFF 		bl	TIM_CCxChannelCmd
 9677              	.LVL987:
3121:HALLIB/Src/stm32f4xx_hal_tim.c ****     (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 9678              		.loc 1 3121 0
 9679 008e 2268     		ldr	r2, [r4]
 9680 0090 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccVHe0ZY.s 			page 308


 9681 0092 23F48063 		bic	r3, r3, #1024
 9682 0096 D360     		str	r3, [r2, #12]
3122:HALLIB/Src/stm32f4xx_hal_tim.c ****   }
 9683              		.loc 1 3122 0
 9684 0098 A06A     		ldr	r0, [r4, #40]
 9685 009a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 9686              	.LVL988:
 9687 009e CFE7     		b	.L823
 9688              		.cfi_endproc
 9689              	.LFE176:
 9691              		.text
 9692              	.Letext0:
 9693              		.file 2 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 9694              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 9695              		.file 4 "CORE/core_cm4.h"
 9696              		.file 5 "USER/system_stm32f4xx.h"
 9697              		.file 6 "USER/stm32f429xx.h"
 9698              		.file 7 "USER/stm32f4xx.h"
 9699              		.file 8 "HALLIB/Inc/stm32f4xx_hal_def.h"
 9700              		.file 9 "HALLIB/Inc/stm32f4xx_hal_dma.h"
 9701              		.file 10 "HALLIB/Inc/stm32f4xx_hal_tim.h"
 9702              		.file 11 "HALLIB/Inc/stm32f4xx_hal.h"
 9703              		.file 12 "HALLIB/Inc/stm32f4xx_hal_tim_ex.h"
ARM GAS  /tmp/ccVHe0ZY.s 			page 309


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_tim.c
     /tmp/ccVHe0ZY.s:18     .text.TIM_OC1_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:24     .text.TIM_OC1_SetConfig:0000000000000000 TIM_OC1_SetConfig
     /tmp/ccVHe0ZY.s:135    .text.TIM_OC1_SetConfig:0000000000000068 $d
     /tmp/ccVHe0ZY.s:140    .text.TIM_OC3_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:146    .text.TIM_OC3_SetConfig:0000000000000000 TIM_OC3_SetConfig
     /tmp/ccVHe0ZY.s:256    .text.TIM_OC3_SetConfig:0000000000000070 $d
     /tmp/ccVHe0ZY.s:261    .text.TIM_OC4_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:267    .text.TIM_OC4_SetConfig:0000000000000000 TIM_OC4_SetConfig
     /tmp/ccVHe0ZY.s:351    .text.TIM_OC4_SetConfig:000000000000004c $d
     /tmp/ccVHe0ZY.s:356    .text.TIM_TI1_ConfigInputStage:0000000000000000 $t
     /tmp/ccVHe0ZY.s:362    .text.TIM_TI1_ConfigInputStage:0000000000000000 TIM_TI1_ConfigInputStage
     /tmp/ccVHe0ZY.s:410    .text.TIM_TI2_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:416    .text.TIM_TI2_SetConfig:0000000000000000 TIM_TI2_SetConfig
     /tmp/ccVHe0ZY.s:479    .text.TIM_TI2_ConfigInputStage:0000000000000000 $t
     /tmp/ccVHe0ZY.s:485    .text.TIM_TI2_ConfigInputStage:0000000000000000 TIM_TI2_ConfigInputStage
     /tmp/ccVHe0ZY.s:533    .text.TIM_TI3_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:539    .text.TIM_TI3_SetConfig:0000000000000000 TIM_TI3_SetConfig
     /tmp/ccVHe0ZY.s:602    .text.TIM_TI4_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:608    .text.TIM_TI4_SetConfig:0000000000000000 TIM_TI4_SetConfig
     /tmp/ccVHe0ZY.s:671    .text.TIM_ITRx_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:677    .text.TIM_ITRx_SetConfig:0000000000000000 TIM_ITRx_SetConfig
     /tmp/ccVHe0ZY.s:703    .text.HAL_TIM_Base_MspInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:710    .text.HAL_TIM_Base_MspInit:0000000000000000 HAL_TIM_Base_MspInit
     /tmp/ccVHe0ZY.s:723    .text.HAL_TIM_Base_MspDeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:730    .text.HAL_TIM_Base_MspDeInit:0000000000000000 HAL_TIM_Base_MspDeInit
     /tmp/ccVHe0ZY.s:743    .text.HAL_TIM_Base_DeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:750    .text.HAL_TIM_Base_DeInit:0000000000000000 HAL_TIM_Base_DeInit
     /tmp/ccVHe0ZY.s:799    .text.HAL_TIM_Base_Start:0000000000000000 $t
     /tmp/ccVHe0ZY.s:806    .text.HAL_TIM_Base_Start:0000000000000000 HAL_TIM_Base_Start
     /tmp/ccVHe0ZY.s:842    .text.HAL_TIM_Base_Stop:0000000000000000 $t
     /tmp/ccVHe0ZY.s:849    .text.HAL_TIM_Base_Stop:0000000000000000 HAL_TIM_Base_Stop
     /tmp/ccVHe0ZY.s:887    .text.HAL_TIM_Base_Start_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:894    .text.HAL_TIM_Base_Start_IT:0000000000000000 HAL_TIM_Base_Start_IT
     /tmp/ccVHe0ZY.s:929    .text.HAL_TIM_Base_Stop_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:936    .text.HAL_TIM_Base_Stop_IT:0000000000000000 HAL_TIM_Base_Stop_IT
     /tmp/ccVHe0ZY.s:973    .text.HAL_TIM_Base_Start_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:980    .text.HAL_TIM_Base_Start_DMA:0000000000000000 HAL_TIM_Base_Start_DMA
     /tmp/ccVHe0ZY.s:1080   .text.HAL_TIM_Base_Start_DMA:0000000000000078 $d
     /tmp/ccVHe0ZY.s:2752   .text.TIM_DMAPeriodElapsedCplt:0000000000000000 TIM_DMAPeriodElapsedCplt
     /tmp/ccVHe0ZY.s:2805   .text.TIM_DMAPeriodElapsedHalfCplt:0000000000000000 TIM_DMAPeriodElapsedHalfCplt
     /tmp/ccVHe0ZY.s:3630   .text.TIM_DMAError:0000000000000000 TIM_DMAError
     /tmp/ccVHe0ZY.s:1087   .text.HAL_TIM_Base_Stop_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1094   .text.HAL_TIM_Base_Stop_DMA:0000000000000000 HAL_TIM_Base_Stop_DMA
     /tmp/ccVHe0ZY.s:1143   .text.HAL_TIM_OC_MspInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1150   .text.HAL_TIM_OC_MspInit:0000000000000000 HAL_TIM_OC_MspInit
     /tmp/ccVHe0ZY.s:1163   .text.HAL_TIM_OC_MspDeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1170   .text.HAL_TIM_OC_MspDeInit:0000000000000000 HAL_TIM_OC_MspDeInit
     /tmp/ccVHe0ZY.s:1183   .text.HAL_TIM_OC_DeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1190   .text.HAL_TIM_OC_DeInit:0000000000000000 HAL_TIM_OC_DeInit
     /tmp/ccVHe0ZY.s:1239   .text.HAL_TIM_PWM_MspInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1246   .text.HAL_TIM_PWM_MspInit:0000000000000000 HAL_TIM_PWM_MspInit
     /tmp/ccVHe0ZY.s:1259   .text.HAL_TIM_PWM_MspDeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1266   .text.HAL_TIM_PWM_MspDeInit:0000000000000000 HAL_TIM_PWM_MspDeInit
     /tmp/ccVHe0ZY.s:1279   .text.HAL_TIM_PWM_DeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1286   .text.HAL_TIM_PWM_DeInit:0000000000000000 HAL_TIM_PWM_DeInit
ARM GAS  /tmp/ccVHe0ZY.s 			page 310


     /tmp/ccVHe0ZY.s:1335   .text.HAL_TIM_IC_MspInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1342   .text.HAL_TIM_IC_MspInit:0000000000000000 HAL_TIM_IC_MspInit
     /tmp/ccVHe0ZY.s:1355   .text.HAL_TIM_IC_MspDeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1362   .text.HAL_TIM_IC_MspDeInit:0000000000000000 HAL_TIM_IC_MspDeInit
     /tmp/ccVHe0ZY.s:1375   .text.HAL_TIM_IC_DeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1382   .text.HAL_TIM_IC_DeInit:0000000000000000 HAL_TIM_IC_DeInit
     /tmp/ccVHe0ZY.s:1431   .text.HAL_TIM_OnePulse_MspInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1438   .text.HAL_TIM_OnePulse_MspInit:0000000000000000 HAL_TIM_OnePulse_MspInit
     /tmp/ccVHe0ZY.s:1451   .text.HAL_TIM_OnePulse_MspDeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1458   .text.HAL_TIM_OnePulse_MspDeInit:0000000000000000 HAL_TIM_OnePulse_MspDeInit
     /tmp/ccVHe0ZY.s:1471   .text.HAL_TIM_OnePulse_DeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1478   .text.HAL_TIM_OnePulse_DeInit:0000000000000000 HAL_TIM_OnePulse_DeInit
     /tmp/ccVHe0ZY.s:1527   .text.HAL_TIM_Encoder_MspInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1534   .text.HAL_TIM_Encoder_MspInit:0000000000000000 HAL_TIM_Encoder_MspInit
     /tmp/ccVHe0ZY.s:1547   .text.HAL_TIM_Encoder_MspDeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1554   .text.HAL_TIM_Encoder_MspDeInit:0000000000000000 HAL_TIM_Encoder_MspDeInit
     /tmp/ccVHe0ZY.s:1567   .text.HAL_TIM_Encoder_DeInit:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1574   .text.HAL_TIM_Encoder_DeInit:0000000000000000 HAL_TIM_Encoder_DeInit
     /tmp/ccVHe0ZY.s:1623   .text.HAL_TIM_DMABurst_WriteStart:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1630   .text.HAL_TIM_DMABurst_WriteStart:0000000000000000 HAL_TIM_DMABurst_WriteStart
     /tmp/ccVHe0ZY.s:1963   .text.HAL_TIM_DMABurst_WriteStart:00000000000001bc $d
     /tmp/ccVHe0ZY.s:3073   .text.TIM_DMADelayPulseCplt:0000000000000000 TIM_DMADelayPulseCplt
     /tmp/ccVHe0ZY.s:3170   .text.TIM_DMADelayPulseHalfCplt:0000000000000000 TIM_DMADelayPulseHalfCplt
     /tmp/ccVHe0ZY.s:3524   .text.TIM_DMATriggerCplt:0000000000000000 TIM_DMATriggerCplt
     /tmp/ccVHe0ZY.s:3576   .text.TIM_DMATriggerHalfCplt:0000000000000000 TIM_DMATriggerHalfCplt
     /tmp/ccVHe0ZY.s:1976   .text.HAL_TIM_DMABurst_WriteStop:0000000000000000 $t
     /tmp/ccVHe0ZY.s:1983   .text.HAL_TIM_DMABurst_WriteStop:0000000000000000 HAL_TIM_DMABurst_WriteStop
     /tmp/ccVHe0ZY.s:2099   .text.HAL_TIM_DMABurst_ReadStart:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2106   .text.HAL_TIM_DMABurst_ReadStart:0000000000000000 HAL_TIM_DMABurst_ReadStart
     /tmp/ccVHe0ZY.s:2433   .text.HAL_TIM_DMABurst_ReadStart:00000000000001bc $d
     /tmp/ccVHe0ZY.s:2879   .text.TIM_DMACaptureCplt:0000000000000000 TIM_DMACaptureCplt
     /tmp/ccVHe0ZY.s:2976   .text.TIM_DMACaptureHalfCplt:0000000000000000 TIM_DMACaptureHalfCplt
     /tmp/ccVHe0ZY.s:2446   .text.HAL_TIM_DMABurst_ReadStop:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2453   .text.HAL_TIM_DMABurst_ReadStop:0000000000000000 HAL_TIM_DMABurst_ReadStop
     /tmp/ccVHe0ZY.s:2569   .text.HAL_TIM_GenerateEvent:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2576   .text.HAL_TIM_GenerateEvent:0000000000000000 HAL_TIM_GenerateEvent
     /tmp/ccVHe0ZY.s:2615   .text.HAL_TIM_ConfigTI1Input:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2622   .text.HAL_TIM_ConfigTI1Input:0000000000000000 HAL_TIM_ConfigTI1Input
     /tmp/ccVHe0ZY.s:2650   .text.HAL_TIM_ReadCapturedValue:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2657   .text.HAL_TIM_ReadCapturedValue:0000000000000000 HAL_TIM_ReadCapturedValue
     /tmp/ccVHe0ZY.s:2670   .text.HAL_TIM_ReadCapturedValue:0000000000000008 $d
     /tmp/ccVHe0ZY.s:2726   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2733   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccVHe0ZY.s:2746   .text.TIM_DMAPeriodElapsedCplt:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2779   .text.HAL_TIM_PeriodElapsedHalfCpltCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2786   .text.HAL_TIM_PeriodElapsedHalfCpltCallback:0000000000000000 HAL_TIM_PeriodElapsedHalfCpltCallback
     /tmp/ccVHe0ZY.s:2799   .text.TIM_DMAPeriodElapsedHalfCplt:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2832   .text.HAL_TIM_OC_DelayElapsedCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2839   .text.HAL_TIM_OC_DelayElapsedCallback:0000000000000000 HAL_TIM_OC_DelayElapsedCallback
     /tmp/ccVHe0ZY.s:2852   .text.HAL_TIM_IC_CaptureCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2859   .text.HAL_TIM_IC_CaptureCallback:0000000000000000 HAL_TIM_IC_CaptureCallback
     /tmp/ccVHe0ZY.s:2872   .text.TIM_DMACaptureCplt:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2949   .text.HAL_TIM_IC_CaptureHalfCpltCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:2956   .text.HAL_TIM_IC_CaptureHalfCpltCallback:0000000000000000 HAL_TIM_IC_CaptureHalfCpltCallback
     /tmp/ccVHe0ZY.s:2969   .text.TIM_DMACaptureHalfCplt:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3046   .text.HAL_TIM_PWM_PulseFinishedCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3053   .text.HAL_TIM_PWM_PulseFinishedCallback:0000000000000000 HAL_TIM_PWM_PulseFinishedCallback
ARM GAS  /tmp/ccVHe0ZY.s 			page 311


     /tmp/ccVHe0ZY.s:3066   .text.TIM_DMADelayPulseCplt:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3143   .text.HAL_TIM_PWM_PulseFinishedHalfCpltCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3150   .text.HAL_TIM_PWM_PulseFinishedHalfCpltCallback:0000000000000000 HAL_TIM_PWM_PulseFinishedHalfCpltCallback
     /tmp/ccVHe0ZY.s:3163   .text.TIM_DMADelayPulseHalfCplt:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3240   .text.HAL_TIM_TriggerCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3247   .text.HAL_TIM_TriggerCallback:0000000000000000 HAL_TIM_TriggerCallback
     /tmp/ccVHe0ZY.s:3260   .text.HAL_TIM_IRQHandler:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3267   .text.HAL_TIM_IRQHandler:0000000000000000 HAL_TIM_IRQHandler
     /tmp/ccVHe0ZY.s:3518   .text.TIM_DMATriggerCplt:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3550   .text.HAL_TIM_TriggerHalfCpltCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3557   .text.HAL_TIM_TriggerHalfCpltCallback:0000000000000000 HAL_TIM_TriggerHalfCpltCallback
     /tmp/ccVHe0ZY.s:3570   .text.TIM_DMATriggerHalfCplt:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3603   .text.HAL_TIM_ErrorCallback:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3610   .text.HAL_TIM_ErrorCallback:0000000000000000 HAL_TIM_ErrorCallback
     /tmp/ccVHe0ZY.s:3623   .text.TIM_DMAError:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3657   .text.HAL_TIM_Base_GetState:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3664   .text.HAL_TIM_Base_GetState:0000000000000000 HAL_TIM_Base_GetState
     /tmp/ccVHe0ZY.s:3681   .text.HAL_TIM_OC_GetState:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3688   .text.HAL_TIM_OC_GetState:0000000000000000 HAL_TIM_OC_GetState
     /tmp/ccVHe0ZY.s:3705   .text.HAL_TIM_PWM_GetState:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3712   .text.HAL_TIM_PWM_GetState:0000000000000000 HAL_TIM_PWM_GetState
     /tmp/ccVHe0ZY.s:3729   .text.HAL_TIM_IC_GetState:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3736   .text.HAL_TIM_IC_GetState:0000000000000000 HAL_TIM_IC_GetState
     /tmp/ccVHe0ZY.s:3753   .text.HAL_TIM_OnePulse_GetState:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3760   .text.HAL_TIM_OnePulse_GetState:0000000000000000 HAL_TIM_OnePulse_GetState
     /tmp/ccVHe0ZY.s:3777   .text.HAL_TIM_Encoder_GetState:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3784   .text.HAL_TIM_Encoder_GetState:0000000000000000 HAL_TIM_Encoder_GetState
     /tmp/ccVHe0ZY.s:3801   .text.TIM_Base_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3808   .text.TIM_Base_SetConfig:0000000000000000 TIM_Base_SetConfig
     /tmp/ccVHe0ZY.s:3944   .text.TIM_Base_SetConfig:00000000000000c8 $d
     /tmp/ccVHe0ZY.s:3949   .text.HAL_TIM_Base_Init:0000000000000000 $t
     /tmp/ccVHe0ZY.s:3956   .text.HAL_TIM_Base_Init:0000000000000000 HAL_TIM_Base_Init
     /tmp/ccVHe0ZY.s:4013   .text.HAL_TIM_OC_Init:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4020   .text.HAL_TIM_OC_Init:0000000000000000 HAL_TIM_OC_Init
     /tmp/ccVHe0ZY.s:4077   .text.HAL_TIM_PWM_Init:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4084   .text.HAL_TIM_PWM_Init:0000000000000000 HAL_TIM_PWM_Init
     /tmp/ccVHe0ZY.s:4141   .text.HAL_TIM_IC_Init:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4148   .text.HAL_TIM_IC_Init:0000000000000000 HAL_TIM_IC_Init
     /tmp/ccVHe0ZY.s:4205   .text.HAL_TIM_OnePulse_Init:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4212   .text.HAL_TIM_OnePulse_Init:0000000000000000 HAL_TIM_OnePulse_Init
     /tmp/ccVHe0ZY.s:4284   .text.HAL_TIM_Encoder_Init:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4291   .text.HAL_TIM_Encoder_Init:0000000000000000 HAL_TIM_Encoder_Init
     /tmp/ccVHe0ZY.s:4428   .text.TIM_OC2_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4435   .text.TIM_OC2_SetConfig:0000000000000000 TIM_OC2_SetConfig
     /tmp/ccVHe0ZY.s:4545   .text.TIM_OC2_SetConfig:0000000000000070 $d
     /tmp/ccVHe0ZY.s:4550   .text.HAL_TIM_OC_ConfigChannel:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4557   .text.HAL_TIM_OC_ConfigChannel:0000000000000000 HAL_TIM_OC_ConfigChannel
     /tmp/ccVHe0ZY.s:4586   .text.HAL_TIM_OC_ConfigChannel:0000000000000020 $d
     /tmp/ccVHe0ZY.s:4656   .text.HAL_TIM_PWM_ConfigChannel:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4663   .text.HAL_TIM_PWM_ConfigChannel:0000000000000000 HAL_TIM_PWM_ConfigChannel
     /tmp/ccVHe0ZY.s:4694   .text.HAL_TIM_PWM_ConfigChannel:0000000000000022 $d
     /tmp/ccVHe0ZY.s:4825   .text.TIM_TI1_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4832   .text.TIM_TI1_SetConfig:0000000000000000 TIM_TI1_SetConfig
     /tmp/ccVHe0ZY.s:4965   .text.TIM_TI1_SetConfig:0000000000000098 $d
     /tmp/ccVHe0ZY.s:4970   .text.HAL_TIM_IC_ConfigChannel:0000000000000000 $t
     /tmp/ccVHe0ZY.s:4977   .text.HAL_TIM_IC_ConfigChannel:0000000000000000 HAL_TIM_IC_ConfigChannel
     /tmp/ccVHe0ZY.s:5124   .text.HAL_TIM_OnePulse_ConfigChannel:0000000000000000 $t
ARM GAS  /tmp/ccVHe0ZY.s 			page 312


     /tmp/ccVHe0ZY.s:5131   .text.HAL_TIM_OnePulse_ConfigChannel:0000000000000000 HAL_TIM_OnePulse_ConfigChannel
     /tmp/ccVHe0ZY.s:5332   .text.TIM_ETR_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:5339   .text.TIM_ETR_SetConfig:0000000000000000 TIM_ETR_SetConfig
     /tmp/ccVHe0ZY.s:5377   .text.HAL_TIM_ConfigOCrefClear:0000000000000000 $t
     /tmp/ccVHe0ZY.s:5384   .text.HAL_TIM_ConfigOCrefClear:0000000000000000 HAL_TIM_ConfigOCrefClear
     /tmp/ccVHe0ZY.s:5424   .text.HAL_TIM_ConfigOCrefClear:000000000000002c $d
     /tmp/ccVHe0ZY.s:5568   .text.HAL_TIM_ConfigClockSource:0000000000000000 $t
     /tmp/ccVHe0ZY.s:5575   .text.HAL_TIM_ConfigClockSource:0000000000000000 HAL_TIM_ConfigClockSource
     /tmp/ccVHe0ZY.s:5765   .text.TIM_SlaveTimer_SetConfig:0000000000000000 $t
     /tmp/ccVHe0ZY.s:5771   .text.TIM_SlaveTimer_SetConfig:0000000000000000 TIM_SlaveTimer_SetConfig
     /tmp/ccVHe0ZY.s:5916   .text.HAL_TIM_SlaveConfigSynchro:0000000000000000 $t
     /tmp/ccVHe0ZY.s:5923   .text.HAL_TIM_SlaveConfigSynchro:0000000000000000 HAL_TIM_SlaveConfigSynchro
     /tmp/ccVHe0ZY.s:5993   .text.HAL_TIM_SlaveConfigSynchro_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:6000   .text.HAL_TIM_SlaveConfigSynchro_IT:0000000000000000 HAL_TIM_SlaveConfigSynchro_IT
     /tmp/ccVHe0ZY.s:6070   .text.TIM_CCxChannelCmd:0000000000000000 $t
     /tmp/ccVHe0ZY.s:6077   .text.TIM_CCxChannelCmd:0000000000000000 TIM_CCxChannelCmd
     /tmp/ccVHe0ZY.s:6116   .text.HAL_TIM_OC_Start:0000000000000000 $t
     /tmp/ccVHe0ZY.s:6123   .text.HAL_TIM_OC_Start:0000000000000000 HAL_TIM_OC_Start
     /tmp/ccVHe0ZY.s:6189   .text.HAL_TIM_OC_Start:0000000000000048 $d
     /tmp/ccVHe0ZY.s:6194   .text.HAL_TIM_OC_Stop:0000000000000000 $t
     /tmp/ccVHe0ZY.s:6201   .text.HAL_TIM_OC_Stop:0000000000000000 HAL_TIM_OC_Stop
     /tmp/ccVHe0ZY.s:6279   .text.HAL_TIM_OC_Stop:0000000000000068 $d
     /tmp/ccVHe0ZY.s:6284   .text.HAL_TIM_OC_Start_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:6291   .text.HAL_TIM_OC_Start_IT:0000000000000000 HAL_TIM_OC_Start_IT
     /tmp/ccVHe0ZY.s:6309   .text.HAL_TIM_OC_Start_IT:000000000000000c $d
     /tmp/ccVHe0ZY.s:6408   .text.HAL_TIM_OC_Start_IT:000000000000008c $d
     /tmp/ccVHe0ZY.s:6413   .text.HAL_TIM_OC_Stop_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:6420   .text.HAL_TIM_OC_Stop_IT:0000000000000000 HAL_TIM_OC_Stop_IT
     /tmp/ccVHe0ZY.s:6438   .text.HAL_TIM_OC_Stop_IT:000000000000000c $d
     /tmp/ccVHe0ZY.s:6549   .text.HAL_TIM_OC_Stop_IT:00000000000000ac $d
     /tmp/ccVHe0ZY.s:6554   .text.HAL_TIM_OC_Start_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:6561   .text.HAL_TIM_OC_Start_DMA:0000000000000000 HAL_TIM_OC_Start_DMA
     /tmp/ccVHe0ZY.s:6595   .text.HAL_TIM_OC_Start_DMA:0000000000000026 $d
     /tmp/ccVHe0ZY.s:6834   .text.HAL_TIM_OC_Start_DMA:0000000000000158 $d
     /tmp/ccVHe0ZY.s:6842   .text.HAL_TIM_OC_Stop_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:6849   .text.HAL_TIM_OC_Stop_DMA:0000000000000000 HAL_TIM_OC_Stop_DMA
     /tmp/ccVHe0ZY.s:6870   .text.HAL_TIM_OC_Stop_DMA:000000000000000e $d
     /tmp/ccVHe0ZY.s:7005   .text.HAL_TIM_OC_Stop_DMA:00000000000000cc $d
     /tmp/ccVHe0ZY.s:7010   .text.HAL_TIM_PWM_Start:0000000000000000 $t
     /tmp/ccVHe0ZY.s:7017   .text.HAL_TIM_PWM_Start:0000000000000000 HAL_TIM_PWM_Start
     /tmp/ccVHe0ZY.s:7083   .text.HAL_TIM_PWM_Start:0000000000000048 $d
     /tmp/ccVHe0ZY.s:7088   .text.HAL_TIM_PWM_Stop:0000000000000000 $t
     /tmp/ccVHe0ZY.s:7095   .text.HAL_TIM_PWM_Stop:0000000000000000 HAL_TIM_PWM_Stop
     /tmp/ccVHe0ZY.s:7176   .text.HAL_TIM_PWM_Stop:000000000000006c $d
     /tmp/ccVHe0ZY.s:7181   .text.HAL_TIM_PWM_Start_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:7188   .text.HAL_TIM_PWM_Start_IT:0000000000000000 HAL_TIM_PWM_Start_IT
     /tmp/ccVHe0ZY.s:7206   .text.HAL_TIM_PWM_Start_IT:000000000000000c $d
     /tmp/ccVHe0ZY.s:7305   .text.HAL_TIM_PWM_Start_IT:000000000000008c $d
     /tmp/ccVHe0ZY.s:7310   .text.HAL_TIM_PWM_Stop_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:7317   .text.HAL_TIM_PWM_Stop_IT:0000000000000000 HAL_TIM_PWM_Stop_IT
     /tmp/ccVHe0ZY.s:7335   .text.HAL_TIM_PWM_Stop_IT:000000000000000c $d
     /tmp/ccVHe0ZY.s:7446   .text.HAL_TIM_PWM_Stop_IT:00000000000000ac $d
     /tmp/ccVHe0ZY.s:7451   .text.HAL_TIM_PWM_Start_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:7458   .text.HAL_TIM_PWM_Start_DMA:0000000000000000 HAL_TIM_PWM_Start_DMA
     /tmp/ccVHe0ZY.s:7492   .text.HAL_TIM_PWM_Start_DMA:0000000000000026 $d
     /tmp/ccVHe0ZY.s:7731   .text.HAL_TIM_PWM_Start_DMA:0000000000000158 $d
     /tmp/ccVHe0ZY.s:7739   .text.HAL_TIM_PWM_Stop_DMA:0000000000000000 $t
ARM GAS  /tmp/ccVHe0ZY.s 			page 313


     /tmp/ccVHe0ZY.s:7746   .text.HAL_TIM_PWM_Stop_DMA:0000000000000000 HAL_TIM_PWM_Stop_DMA
     /tmp/ccVHe0ZY.s:7767   .text.HAL_TIM_PWM_Stop_DMA:000000000000000e $d
     /tmp/ccVHe0ZY.s:7902   .text.HAL_TIM_PWM_Stop_DMA:00000000000000cc $d
     /tmp/ccVHe0ZY.s:7907   .text.HAL_TIM_IC_Start:0000000000000000 $t
     /tmp/ccVHe0ZY.s:7914   .text.HAL_TIM_IC_Start:0000000000000000 HAL_TIM_IC_Start
     /tmp/ccVHe0ZY.s:7954   .text.HAL_TIM_IC_Stop:0000000000000000 $t
     /tmp/ccVHe0ZY.s:7961   .text.HAL_TIM_IC_Stop:0000000000000000 HAL_TIM_IC_Stop
     /tmp/ccVHe0ZY.s:8003   .text.HAL_TIM_IC_Start_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8010   .text.HAL_TIM_IC_Start_IT:0000000000000000 HAL_TIM_IC_Start_IT
     /tmp/ccVHe0ZY.s:8028   .text.HAL_TIM_IC_Start_IT:000000000000000c $d
     /tmp/ccVHe0ZY.s:8101   .text.HAL_TIM_IC_Stop_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8108   .text.HAL_TIM_IC_Stop_IT:0000000000000000 HAL_TIM_IC_Stop_IT
     /tmp/ccVHe0ZY.s:8126   .text.HAL_TIM_IC_Stop_IT:000000000000000c $d
     /tmp/ccVHe0ZY.s:8201   .text.HAL_TIM_IC_Start_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8208   .text.HAL_TIM_IC_Start_DMA:0000000000000000 HAL_TIM_IC_Start_DMA
     /tmp/ccVHe0ZY.s:8241   .text.HAL_TIM_IC_Start_DMA:0000000000000024 $d
     /tmp/ccVHe0ZY.s:8446   .text.HAL_TIM_IC_Start_DMA:0000000000000128 $d
     /tmp/ccVHe0ZY.s:8453   .text.HAL_TIM_IC_Stop_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8460   .text.HAL_TIM_IC_Stop_DMA:0000000000000000 HAL_TIM_IC_Stop_DMA
     /tmp/ccVHe0ZY.s:8481   .text.HAL_TIM_IC_Stop_DMA:000000000000000e $d
     /tmp/ccVHe0ZY.s:8581   .text.HAL_TIM_OnePulse_Start:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8588   .text.HAL_TIM_OnePulse_Start:0000000000000000 HAL_TIM_OnePulse_Start
     /tmp/ccVHe0ZY.s:8648   .text.HAL_TIM_OnePulse_Start:0000000000000040 $d
     /tmp/ccVHe0ZY.s:8653   .text.HAL_TIM_OnePulse_Stop:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8660   .text.HAL_TIM_OnePulse_Stop:0000000000000000 HAL_TIM_OnePulse_Stop
     /tmp/ccVHe0ZY.s:8746   .text.HAL_TIM_OnePulse_Stop:0000000000000074 $d
     /tmp/ccVHe0ZY.s:8751   .text.HAL_TIM_OnePulse_Start_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8758   .text.HAL_TIM_OnePulse_Start_IT:0000000000000000 HAL_TIM_OnePulse_Start_IT
     /tmp/ccVHe0ZY.s:8828   .text.HAL_TIM_OnePulse_Start_IT:0000000000000054 $d
     /tmp/ccVHe0ZY.s:8833   .text.HAL_TIM_OnePulse_Stop_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8840   .text.HAL_TIM_OnePulse_Stop_IT:0000000000000000 HAL_TIM_OnePulse_Stop_IT
     /tmp/ccVHe0ZY.s:8936   .text.HAL_TIM_OnePulse_Stop_IT:0000000000000088 $d
     /tmp/ccVHe0ZY.s:8941   .text.HAL_TIM_Encoder_Start:0000000000000000 $t
     /tmp/ccVHe0ZY.s:8948   .text.HAL_TIM_Encoder_Start:0000000000000000 HAL_TIM_Encoder_Start
     /tmp/ccVHe0ZY.s:9016   .text.HAL_TIM_Encoder_Stop:0000000000000000 $t
     /tmp/ccVHe0ZY.s:9023   .text.HAL_TIM_Encoder_Stop:0000000000000000 HAL_TIM_Encoder_Stop
     /tmp/ccVHe0ZY.s:9102   .text.HAL_TIM_Encoder_Start_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:9109   .text.HAL_TIM_Encoder_Start_IT:0000000000000000 HAL_TIM_Encoder_Start_IT
     /tmp/ccVHe0ZY.s:9197   .text.HAL_TIM_Encoder_Stop_IT:0000000000000000 $t
     /tmp/ccVHe0ZY.s:9204   .text.HAL_TIM_Encoder_Stop_IT:0000000000000000 HAL_TIM_Encoder_Stop_IT
     /tmp/ccVHe0ZY.s:9305   .text.HAL_TIM_Encoder_Start_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:9312   .text.HAL_TIM_Encoder_Start_DMA:0000000000000000 HAL_TIM_Encoder_Start_DMA
     /tmp/ccVHe0ZY.s:9560   .text.HAL_TIM_Encoder_Start_DMA:0000000000000158 $d
     /tmp/ccVHe0ZY.s:9567   .text.HAL_TIM_Encoder_Stop_DMA:0000000000000000 $t
     /tmp/ccVHe0ZY.s:9574   .text.HAL_TIM_Encoder_Stop_DMA:0000000000000000 HAL_TIM_Encoder_Stop_DMA
                     .debug_frame:0000000000000010 $d
     /tmp/ccVHe0ZY.s:2683   .text.HAL_TIM_ReadCapturedValue:0000000000000015 $d
     /tmp/ccVHe0ZY.s:2683   .text.HAL_TIM_ReadCapturedValue:0000000000000016 $t
     /tmp/ccVHe0ZY.s:4599   .text.HAL_TIM_OC_ConfigChannel:000000000000002d $d
     /tmp/ccVHe0ZY.s:4599   .text.HAL_TIM_OC_ConfigChannel:000000000000002e $t
     /tmp/ccVHe0ZY.s:4707   .text.HAL_TIM_PWM_ConfigChannel:000000000000002f $d
     /tmp/ccVHe0ZY.s:4707   .text.HAL_TIM_PWM_ConfigChannel:0000000000000030 $t
     /tmp/ccVHe0ZY.s:5438   .text.HAL_TIM_ConfigOCrefClear:0000000000000039 $d
     /tmp/ccVHe0ZY.s:5438   .text.HAL_TIM_ConfigOCrefClear:000000000000003a $t
     /tmp/ccVHe0ZY.s:6322   .text.HAL_TIM_OC_Start_IT:0000000000000019 $d
     /tmp/ccVHe0ZY.s:6322   .text.HAL_TIM_OC_Start_IT:000000000000001a $t
     /tmp/ccVHe0ZY.s:6451   .text.HAL_TIM_OC_Stop_IT:0000000000000019 $d
ARM GAS  /tmp/ccVHe0ZY.s 			page 314


     /tmp/ccVHe0ZY.s:6451   .text.HAL_TIM_OC_Stop_IT:000000000000001a $t
     /tmp/ccVHe0ZY.s:6608   .text.HAL_TIM_OC_Start_DMA:0000000000000033 $d
     /tmp/ccVHe0ZY.s:6608   .text.HAL_TIM_OC_Start_DMA:0000000000000034 $t
     /tmp/ccVHe0ZY.s:6883   .text.HAL_TIM_OC_Stop_DMA:000000000000001b $d
     /tmp/ccVHe0ZY.s:6883   .text.HAL_TIM_OC_Stop_DMA:000000000000001c $t
     /tmp/ccVHe0ZY.s:7219   .text.HAL_TIM_PWM_Start_IT:0000000000000019 $d
     /tmp/ccVHe0ZY.s:7219   .text.HAL_TIM_PWM_Start_IT:000000000000001a $t
     /tmp/ccVHe0ZY.s:7348   .text.HAL_TIM_PWM_Stop_IT:0000000000000019 $d
     /tmp/ccVHe0ZY.s:7348   .text.HAL_TIM_PWM_Stop_IT:000000000000001a $t
     /tmp/ccVHe0ZY.s:7505   .text.HAL_TIM_PWM_Start_DMA:0000000000000033 $d
     /tmp/ccVHe0ZY.s:7505   .text.HAL_TIM_PWM_Start_DMA:0000000000000034 $t
     /tmp/ccVHe0ZY.s:7780   .text.HAL_TIM_PWM_Stop_DMA:000000000000001b $d
     /tmp/ccVHe0ZY.s:7780   .text.HAL_TIM_PWM_Stop_DMA:000000000000001c $t
     /tmp/ccVHe0ZY.s:8041   .text.HAL_TIM_IC_Start_IT:0000000000000019 $d
     /tmp/ccVHe0ZY.s:8041   .text.HAL_TIM_IC_Start_IT:000000000000001a $t
     /tmp/ccVHe0ZY.s:8139   .text.HAL_TIM_IC_Stop_IT:0000000000000019 $d
     /tmp/ccVHe0ZY.s:8139   .text.HAL_TIM_IC_Stop_IT:000000000000001a $t
     /tmp/ccVHe0ZY.s:8254   .text.HAL_TIM_IC_Start_DMA:0000000000000031 $d
     /tmp/ccVHe0ZY.s:8254   .text.HAL_TIM_IC_Start_DMA:0000000000000032 $t
     /tmp/ccVHe0ZY.s:8494   .text.HAL_TIM_IC_Stop_DMA:000000000000001b $d
     /tmp/ccVHe0ZY.s:8494   .text.HAL_TIM_IC_Stop_DMA:000000000000001c $t

UNDEFINED SYMBOLS
HAL_DMA_Start_IT
HAL_DMA_Abort_IT
TIMEx_DMACommutationCplt
TIMEx_DMACommutationHalfCplt
HAL_TIMEx_BreakCallback
HAL_TIMEx_CommutCallback
